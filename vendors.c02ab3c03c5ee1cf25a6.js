/*! For license information please see vendors.c02ab3c03c5ee1cf25a6.js.LICENSE.txt */
(self.webpackChunkpessimistic_it_com=self.webpackChunkpessimistic_it_com||[]).push([[96],{255:(e,n,t)=>{"use strict";e.exports=t.p+"3a3a54b62ca9291563a7.woff2"},540:e=>{"use strict";e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},653:(e,n,t)=>{"use strict";e.exports=t.p+"c9f3696e45388e46f544.woff2"},748:(e,n,t)=>{"use strict";var r=t(5072),o=t.n(r),l=t(7825),a=t.n(l),i=t(7659),s=t.n(i),u=t(5056),c=t.n(u),f=t(540),d=t.n(f),p=t(1113),h=t.n(p),m=t(7491),g={};g.styleTagTransform=h(),g.setAttributes=c(),g.insert=s().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d(),o()(m.A,g),m.A&&m.A.locals&&m.A.locals},961:(e,n,t)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=t(6221)},1012:(e,n,t)=>{"use strict";e.exports=t.p+"4db1bf0c1f6d5f32f320.woff2"},1113:e=>{"use strict";e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},1133:function(e,n,t){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n){var t=null;if(!e||"string"!=typeof e)return t;var r=(0,o.default)(e),l="function"==typeof n;return r.forEach((function(e){if("declaration"===e.type){var r=e.property,o=e.value;l?n(r,o,e):o&&((t=t||{})[r]=o)}})),t};var o=r(t(9788))},1247:(e,n,t)=>{"use strict";var r=t(5606),o=t(9982),l=t(6540),a=t(961);function i(e){var n="https://react.dev/errors/"+e;if(1<arguments.length){n+="?args[]="+encodeURIComponent(arguments[1]);for(var t=2;t<arguments.length;t++)n+="&args[]="+encodeURIComponent(arguments[t])}return"Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function s(e){var n=e,t=e;if(e.alternate)for(;n.return;)n=n.return;else{e=n;do{!!(4098&(n=e).flags)&&(t=n.return),e=n.return}while(e)}return 3===n.tag?t:null}function u(e){if(13===e.tag){var n=e.memoizedState;if(null===n&&null!==(e=e.alternate)&&(n=e.memoizedState),null!==n)return n.dehydrated}return null}function c(e){if(s(e)!==e)throw Error(i(188))}function f(e){var n=e.tag;if(5===n||26===n||27===n||6===n)return e;for(e=e.child;null!==e;){if(null!==(n=f(e)))return n;e=e.sibling}return null}var d=Object.assign,p=Symbol.for("react.element"),h=Symbol.for("react.transitional.element"),m=Symbol.for("react.portal"),g=Symbol.for("react.fragment"),y=Symbol.for("react.strict_mode"),v=Symbol.for("react.profiler"),b=Symbol.for("react.provider"),w=Symbol.for("react.consumer"),k=Symbol.for("react.context"),A=Symbol.for("react.forward_ref"),S=Symbol.for("react.suspense"),x=Symbol.for("react.suspense_list"),C=Symbol.for("react.memo"),E=Symbol.for("react.lazy");Symbol.for("react.scope");var B=Symbol.for("react.activity");Symbol.for("react.legacy_hidden"),Symbol.for("react.tracing_marker");var F=Symbol.for("react.memo_cache_sentinel");Symbol.for("react.view_transition");var P=Symbol.iterator;function U(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=P&&e[P]||e["@@iterator"])?e:null}var T=Symbol.for("react.client.reference");function _(e){if(null==e)return null;if("function"==typeof e)return e.$$typeof===T?null:e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case g:return"Fragment";case v:return"Profiler";case y:return"StrictMode";case S:return"Suspense";case x:return"SuspenseList";case B:return"Activity"}if("object"==typeof e)switch(e.$$typeof){case m:return"Portal";case k:return(e.displayName||"Context")+".Provider";case w:return(e._context.displayName||"Context")+".Consumer";case A:var n=e.render;return(e=e.displayName)||(e=""!==(e=n.displayName||n.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case C:return null!==(n=e.displayName||null)?n:_(e.type)||"Memo";case E:n=e._payload,e=e._init;try{return _(e(n))}catch(e){}}return null}var I=Array.isArray,z=l.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,O=a.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,L={pending:!1,data:null,method:null,action:null},N=[],D=-1;function R(e){return{current:e}}function M(e){0>D||(e.current=N[D],N[D]=null,D--)}function j(e,n){D++,N[D]=e.current,e.current=n}var H=R(null),$=R(null),V=R(null),q=R(null);function W(e,n){switch(j(V,n),j($,e),j(H,null),n.nodeType){case 9:case 11:e=(e=n.documentElement)&&(e=e.namespaceURI)?of(e):0;break;default:if(e=n.tagName,n=n.namespaceURI)e=lf(n=of(n),e);else switch(e){case"svg":e=1;break;case"math":e=2;break;default:e=0}}M(H),j(H,e)}function Q(){M(H),M($),M(V)}function K(e){null!==e.memoizedState&&j(q,e);var n=H.current,t=lf(n,e.type);n!==t&&(j($,e),j(H,t))}function Y(e){$.current===e&&(M(H),M($)),q.current===e&&(M(q),Yf._currentValue=L)}var G=Object.prototype.hasOwnProperty,X=o.unstable_scheduleCallback,Z=o.unstable_cancelCallback,J=o.unstable_shouldYield,ee=o.unstable_requestPaint,ne=o.unstable_now,te=o.unstable_getCurrentPriorityLevel,re=o.unstable_ImmediatePriority,oe=o.unstable_UserBlockingPriority,le=o.unstable_NormalPriority,ae=o.unstable_LowPriority,ie=o.unstable_IdlePriority,se=o.log,ue=o.unstable_setDisableYieldValue,ce=null,fe=null;function de(e){if("function"==typeof se&&ue(e),fe&&"function"==typeof fe.setStrictMode)try{fe.setStrictMode(ce,e)}catch(e){}}var pe=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(he(e)/me|0)|0},he=Math.log,me=Math.LN2,ge=256,ye=4194304;function ve(e){var n=42&e;if(0!==n)return n;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:return 128;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194048&e;case 4194304:case 8388608:case 16777216:case 33554432:return 62914560&e;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return e}}function be(e,n,t){var r=e.pendingLanes;if(0===r)return 0;var o=0,l=e.suspendedLanes,a=e.pingedLanes;e=e.warmLanes;var i=134217727&r;return 0!==i?0!=(r=i&~l)?o=ve(r):0!=(a&=i)?o=ve(a):t||0!=(t=i&~e)&&(o=ve(t)):0!=(i=r&~l)?o=ve(i):0!==a?o=ve(a):t||0!=(t=r&~e)&&(o=ve(t)),0===o?0:0===n||n===o||n&l||!((l=o&-o)>=(t=n&-n)||32===l&&4194048&t)?o:n}function we(e,n){return!(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&n)}function ke(e,n){switch(e){case 1:case 2:case 4:case 8:case 64:return n+250;case 16:case 32:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return n+5e3;default:return-1}}function Ae(){var e=ge;return!(4194048&(ge<<=1))&&(ge=256),e}function Se(){var e=ye;return!(62914560&(ye<<=1))&&(ye=4194304),e}function xe(e){for(var n=[],t=0;31>t;t++)n.push(e);return n}function Ce(e,n){e.pendingLanes|=n,268435456!==n&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function Ee(e,n,t){e.pendingLanes|=n,e.suspendedLanes&=~n;var r=31-pe(n);e.entangledLanes|=n,e.entanglements[r]=1073741824|e.entanglements[r]|4194090&t}function Be(e,n){var t=e.entangledLanes|=n;for(e=e.entanglements;t;){var r=31-pe(t),o=1<<r;o&n|e[r]&n&&(e[r]|=n),t&=~o}}function Fe(e){switch(e){case 2:e=1;break;case 8:e=4;break;case 32:e=16;break;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:e=128;break;case 268435456:e=134217728;break;default:e=0}return e}function Pe(e){return 2<(e&=-e)?8<e?134217727&e?32:268435456:8:2}function Ue(){var e=O.p;return 0!==e?e:void 0===(e=window.event)?32:sd(e.type)}var Te=Math.random().toString(36).slice(2),_e="__reactFiber$"+Te,Ie="__reactProps$"+Te,ze="__reactContainer$"+Te,Oe="__reactEvents$"+Te,Le="__reactListeners$"+Te,Ne="__reactHandles$"+Te,De="__reactResources$"+Te,Re="__reactMarker$"+Te;function Me(e){delete e[_e],delete e[Ie],delete e[Oe],delete e[Le],delete e[Ne]}function je(e){var n=e[_e];if(n)return n;for(var t=e.parentNode;t;){if(n=t[ze]||t[_e]){if(t=n.alternate,null!==n.child||null!==t&&null!==t.child)for(e=wf(e);null!==e;){if(t=e[_e])return t;e=wf(e)}return n}t=(e=t).parentNode}return null}function He(e){if(e=e[_e]||e[ze]){var n=e.tag;if(5===n||6===n||13===n||26===n||27===n||3===n)return e}return null}function $e(e){var n=e.tag;if(5===n||26===n||27===n||6===n)return e.stateNode;throw Error(i(33))}function Ve(e){var n=e[De];return n||(n=e[De]={hoistableStyles:new Map,hoistableScripts:new Map}),n}function qe(e){e[Re]=!0}var We=new Set,Qe={};function Ke(e,n){Ye(e,n),Ye(e+"Capture",n)}function Ye(e,n){for(Qe[e]=n,e=0;e<n.length;e++)We.add(n[e])}var Ge,Xe,Ze=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),Je={},en={};function nn(e,n,t){if(o=n,G.call(en,o)||!G.call(Je,o)&&(Ze.test(o)?en[o]=!0:(Je[o]=!0,0)))if(null===t)e.removeAttribute(n);else{switch(typeof t){case"undefined":case"function":case"symbol":return void e.removeAttribute(n);case"boolean":var r=n.toLowerCase().slice(0,5);if("data-"!==r&&"aria-"!==r)return void e.removeAttribute(n)}e.setAttribute(n,""+t)}var o}function tn(e,n,t){if(null===t)e.removeAttribute(n);else{switch(typeof t){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(n)}e.setAttribute(n,""+t)}}function rn(e,n,t,r){if(null===r)e.removeAttribute(t);else{switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(t)}e.setAttributeNS(n,t,""+r)}}function on(e){if(void 0===Ge)try{throw Error()}catch(e){var n=e.stack.trim().match(/\n( *(at )?)/);Ge=n&&n[1]||"",Xe=-1<e.stack.indexOf("\n    at")?" (<anonymous>)":-1<e.stack.indexOf("@")?"@unknown:0:0":""}return"\n"+Ge+e+Xe}var ln=!1;function an(e,n){if(!e||ln)return"";ln=!0;var t=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var r={DetermineComponentFrameRoot:function(){try{if(n){var t=function(){throw Error()};if(Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}}else{try{throw Error()}catch(e){r=e}(t=e())&&"function"==typeof t.catch&&t.catch((function(){}))}}catch(e){if(e&&r&&"string"==typeof e.stack)return[e.stack,r.stack]}return[null,null]}};r.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var o=Object.getOwnPropertyDescriptor(r.DetermineComponentFrameRoot,"name");o&&o.configurable&&Object.defineProperty(r.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var l=r.DetermineComponentFrameRoot(),a=l[0],i=l[1];if(a&&i){var s=a.split("\n"),u=i.split("\n");for(o=r=0;r<s.length&&!s[r].includes("DetermineComponentFrameRoot");)r++;for(;o<u.length&&!u[o].includes("DetermineComponentFrameRoot");)o++;if(r===s.length||o===u.length)for(r=s.length-1,o=u.length-1;1<=r&&0<=o&&s[r]!==u[o];)o--;for(;1<=r&&0<=o;r--,o--)if(s[r]!==u[o]){if(1!==r||1!==o)do{if(r--,0>--o||s[r]!==u[o]){var c="\n"+s[r].replace(" at new "," at ");return e.displayName&&c.includes("<anonymous>")&&(c=c.replace("<anonymous>",e.displayName)),c}}while(1<=r&&0<=o);break}}}finally{ln=!1,Error.prepareStackTrace=t}return(t=e?e.displayName||e.name:"")?on(t):""}function sn(e){switch(e.tag){case 26:case 27:case 5:return on(e.type);case 16:return on("Lazy");case 13:return on("Suspense");case 19:return on("SuspenseList");case 0:case 15:return an(e.type,!1);case 11:return an(e.type.render,!1);case 1:return an(e.type,!0);case 31:return on("Activity");default:return""}}function un(e){try{var n="";do{n+=sn(e),e=e.return}while(e);return n}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}function cn(e){switch(typeof e){case"bigint":case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function fn(e){var n=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===n||"radio"===n)}function dn(e){e._valueTracker||(e._valueTracker=function(e){var n=fn(e)?"checked":"value",t=Object.getOwnPropertyDescriptor(e.constructor.prototype,n),r=""+e[n];if(!e.hasOwnProperty(n)&&void 0!==t&&"function"==typeof t.get&&"function"==typeof t.set){var o=t.get,l=t.set;return Object.defineProperty(e,n,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,l.call(this,e)}}),Object.defineProperty(e,n,{enumerable:t.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[n]}}}}(e))}function pn(e){if(!e)return!1;var n=e._valueTracker;if(!n)return!0;var t=n.getValue(),r="";return e&&(r=fn(e)?e.checked?"true":"false":e.value),(e=r)!==t&&(n.setValue(e),!0)}function hn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(n){return e.body}}var mn=/[\n"\\]/g;function gn(e){return e.replace(mn,(function(e){return"\\"+e.charCodeAt(0).toString(16)+" "}))}function yn(e,n,t,r,o,l,a,i){e.name="",null!=a&&"function"!=typeof a&&"symbol"!=typeof a&&"boolean"!=typeof a?e.type=a:e.removeAttribute("type"),null!=n?"number"===a?(0===n&&""===e.value||e.value!=n)&&(e.value=""+cn(n)):e.value!==""+cn(n)&&(e.value=""+cn(n)):"submit"!==a&&"reset"!==a||e.removeAttribute("value"),null!=n?bn(e,a,cn(n)):null!=t?bn(e,a,cn(t)):null!=r&&e.removeAttribute("value"),null==o&&null!=l&&(e.defaultChecked=!!l),null!=o&&(e.checked=o&&"function"!=typeof o&&"symbol"!=typeof o),null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i?e.name=""+cn(i):e.removeAttribute("name")}function vn(e,n,t,r,o,l,a,i){if(null!=l&&"function"!=typeof l&&"symbol"!=typeof l&&"boolean"!=typeof l&&(e.type=l),null!=n||null!=t){if(("submit"===l||"reset"===l)&&null==n)return;t=null!=t?""+cn(t):"",n=null!=n?""+cn(n):t,i||n===e.value||(e.value=n),e.defaultValue=n}r="function"!=typeof(r=null!=r?r:o)&&"symbol"!=typeof r&&!!r,e.checked=i?e.checked:!!r,e.defaultChecked=!!r,null!=a&&"function"!=typeof a&&"symbol"!=typeof a&&"boolean"!=typeof a&&(e.name=a)}function bn(e,n,t){"number"===n&&hn(e.ownerDocument)===e||e.defaultValue===""+t||(e.defaultValue=""+t)}function wn(e,n,t,r){if(e=e.options,n){n={};for(var o=0;o<t.length;o++)n["$"+t[o]]=!0;for(t=0;t<e.length;t++)o=n.hasOwnProperty("$"+e[t].value),e[t].selected!==o&&(e[t].selected=o),o&&r&&(e[t].defaultSelected=!0)}else{for(t=""+cn(t),n=null,o=0;o<e.length;o++){if(e[o].value===t)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==n||e[o].disabled||(n=e[o])}null!==n&&(n.selected=!0)}}function kn(e,n,t){null==n||((n=""+cn(n))!==e.value&&(e.value=n),null!=t)?e.defaultValue=null!=t?""+cn(t):"":e.defaultValue!==n&&(e.defaultValue=n)}function An(e,n,t,r){if(null==n){if(null!=r){if(null!=t)throw Error(i(92));if(I(r)){if(1<r.length)throw Error(i(93));r=r[0]}t=r}null==t&&(t=""),n=t}t=cn(n),e.defaultValue=t,(r=e.textContent)===t&&""!==r&&null!==r&&(e.value=r)}function Sn(e,n){if(n){var t=e.firstChild;if(t&&t===e.lastChild&&3===t.nodeType)return void(t.nodeValue=n)}e.textContent=n}var xn=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function Cn(e,n,t){var r=0===n.indexOf("--");null==t||"boolean"==typeof t||""===t?r?e.setProperty(n,""):"float"===n?e.cssFloat="":e[n]="":r?e.setProperty(n,t):"number"!=typeof t||0===t||xn.has(n)?"float"===n?e.cssFloat=t:e[n]=(""+t).trim():e[n]=t+"px"}function En(e,n,t){if(null!=n&&"object"!=typeof n)throw Error(i(62));if(e=e.style,null!=t){for(var r in t)!t.hasOwnProperty(r)||null!=n&&n.hasOwnProperty(r)||(0===r.indexOf("--")?e.setProperty(r,""):"float"===r?e.cssFloat="":e[r]="");for(var o in n)r=n[o],n.hasOwnProperty(o)&&t[o]!==r&&Cn(e,o,r)}else for(var l in n)n.hasOwnProperty(l)&&Cn(e,l,n[l])}function Bn(e){if(-1===e.indexOf("-"))return!1;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Fn=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),Pn=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function Un(e){return Pn.test(""+e)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":e}var Tn=null;function _n(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var In=null,zn=null;function On(e){var n=He(e);if(n&&(e=n.stateNode)){var t=e[Ie]||null;e:switch(e=n.stateNode,n.type){case"input":if(yn(e,t.value,t.defaultValue,t.defaultValue,t.checked,t.defaultChecked,t.type,t.name),n=t.name,"radio"===t.type&&null!=n){for(t=e;t.parentNode;)t=t.parentNode;for(t=t.querySelectorAll('input[name="'+gn(""+n)+'"][type="radio"]'),n=0;n<t.length;n++){var r=t[n];if(r!==e&&r.form===e.form){var o=r[Ie]||null;if(!o)throw Error(i(90));yn(r,o.value,o.defaultValue,o.defaultValue,o.checked,o.defaultChecked,o.type,o.name)}}for(n=0;n<t.length;n++)(r=t[n]).form===e.form&&pn(r)}break e;case"textarea":kn(e,t.value,t.defaultValue);break e;case"select":null!=(n=t.value)&&wn(e,!!t.multiple,n,!1)}}}var Ln=!1;function Nn(e,n,t){if(Ln)return e(n,t);Ln=!0;try{return e(n)}finally{if(Ln=!1,(null!==In||null!==zn)&&(ju(),In&&(n=In,e=zn,zn=In=null,On(n),e)))for(n=0;n<e.length;n++)On(e[n])}}function Dn(e,n){var t=e.stateNode;if(null===t)return null;var r=t[Ie]||null;if(null===r)return null;t=r[n];e:switch(n){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(t&&"function"!=typeof t)throw Error(i(231,n,typeof t));return t}var Rn=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),Mn=!1;if(Rn)try{var jn={};Object.defineProperty(jn,"passive",{get:function(){Mn=!0}}),window.addEventListener("test",jn,jn),window.removeEventListener("test",jn,jn)}catch(e){Mn=!1}var Hn=null,$n=null,Vn=null;function qn(){if(Vn)return Vn;var e,n,t=$n,r=t.length,o="value"in Hn?Hn.value:Hn.textContent,l=o.length;for(e=0;e<r&&t[e]===o[e];e++);var a=r-e;for(n=1;n<=a&&t[r-n]===o[l-n];n++);return Vn=o.slice(e,1<n?1-n:void 0)}function Wn(e){var n=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===n&&(e=13):e=n,10===e&&(e=13),32<=e||13===e?e:0}function Qn(){return!0}function Kn(){return!1}function Yn(e){function n(n,t,r,o,l){for(var a in this._reactName=n,this._targetInst=r,this.type=t,this.nativeEvent=o,this.target=l,this.currentTarget=null,e)e.hasOwnProperty(a)&&(n=e[a],this[a]=n?n(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?Qn:Kn,this.isPropagationStopped=Kn,this}return d(n.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Qn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Qn)},persist:function(){},isPersistent:Qn}),n}var Gn,Xn,Zn,Jn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},et=Yn(Jn),nt=d({},Jn,{view:0,detail:0}),tt=Yn(nt),rt=d({},nt,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:ht,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Zn&&(Zn&&"mousemove"===e.type?(Gn=e.screenX-Zn.screenX,Xn=e.screenY-Zn.screenY):Xn=Gn=0,Zn=e),Gn)},movementY:function(e){return"movementY"in e?e.movementY:Xn}}),ot=Yn(rt),lt=Yn(d({},rt,{dataTransfer:0})),at=Yn(d({},nt,{relatedTarget:0})),it=Yn(d({},Jn,{animationName:0,elapsedTime:0,pseudoElement:0})),st=Yn(d({},Jn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),ut=Yn(d({},Jn,{data:0})),ct={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},ft={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},dt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function pt(e){var n=this.nativeEvent;return n.getModifierState?n.getModifierState(e):!!(e=dt[e])&&!!n[e]}function ht(){return pt}var mt=Yn(d({},nt,{key:function(e){if(e.key){var n=ct[e.key]||e.key;if("Unidentified"!==n)return n}return"keypress"===e.type?13===(e=Wn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?ft[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:ht,charCode:function(e){return"keypress"===e.type?Wn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Wn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),gt=Yn(d({},rt,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),yt=Yn(d({},nt,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:ht})),vt=Yn(d({},Jn,{propertyName:0,elapsedTime:0,pseudoElement:0})),bt=Yn(d({},rt,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),wt=Yn(d({},Jn,{newState:0,oldState:0})),kt=[9,13,27,32],At=Rn&&"CompositionEvent"in window,St=null;Rn&&"documentMode"in document&&(St=document.documentMode);var xt=Rn&&"TextEvent"in window&&!St,Ct=Rn&&(!At||St&&8<St&&11>=St),Et=String.fromCharCode(32),Bt=!1;function Ft(e,n){switch(e){case"keyup":return-1!==kt.indexOf(n.keyCode);case"keydown":return 229!==n.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Pt(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Ut=!1,Tt={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function _t(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===n?!!Tt[e.type]:"textarea"===n}function It(e,n,t,r){In?zn?zn.push(r):zn=[r]:In=r,0<(n=Vc(n,"onChange")).length&&(t=new et("onChange","change",null,t,r),e.push({event:t,listeners:n}))}var zt=null,Ot=null;function Lt(e){Lc(e,0)}function Nt(e){if(pn($e(e)))return e}function Dt(e,n){if("change"===e)return n}var Rt=!1;if(Rn){var Mt;if(Rn){var jt="oninput"in document;if(!jt){var Ht=document.createElement("div");Ht.setAttribute("oninput","return;"),jt="function"==typeof Ht.oninput}Mt=jt}else Mt=!1;Rt=Mt&&(!document.documentMode||9<document.documentMode)}function $t(){zt&&(zt.detachEvent("onpropertychange",Vt),Ot=zt=null)}function Vt(e){if("value"===e.propertyName&&Nt(Ot)){var n=[];It(n,Ot,e,_n(e)),Nn(Lt,n)}}function qt(e,n,t){"focusin"===e?($t(),Ot=t,(zt=n).attachEvent("onpropertychange",Vt)):"focusout"===e&&$t()}function Wt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Nt(Ot)}function Qt(e,n){if("click"===e)return Nt(n)}function Kt(e,n){if("input"===e||"change"===e)return Nt(n)}var Yt="function"==typeof Object.is?Object.is:function(e,n){return e===n&&(0!==e||1/e==1/n)||e!=e&&n!=n};function Gt(e,n){if(Yt(e,n))return!0;if("object"!=typeof e||null===e||"object"!=typeof n||null===n)return!1;var t=Object.keys(e),r=Object.keys(n);if(t.length!==r.length)return!1;for(r=0;r<t.length;r++){var o=t[r];if(!G.call(n,o)||!Yt(e[o],n[o]))return!1}return!0}function Xt(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Zt(e,n){var t,r=Xt(e);for(e=0;r;){if(3===r.nodeType){if(t=e+r.textContent.length,e<=n&&t>=n)return{node:r,offset:n-e};e=t}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Xt(r)}}function Jt(e,n){return!(!e||!n)&&(e===n||(!e||3!==e.nodeType)&&(n&&3===n.nodeType?Jt(e,n.parentNode):"contains"in e?e.contains(n):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(n))))}function er(e){for(var n=hn((e=null!=e&&null!=e.ownerDocument&&null!=e.ownerDocument.defaultView?e.ownerDocument.defaultView:window).document);n instanceof e.HTMLIFrameElement;){try{var t="string"==typeof n.contentWindow.location.href}catch(e){t=!1}if(!t)break;n=hn((e=n.contentWindow).document)}return n}function nr(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return n&&("input"===n&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===n||"true"===e.contentEditable)}var tr=Rn&&"documentMode"in document&&11>=document.documentMode,rr=null,or=null,lr=null,ar=!1;function ir(e,n,t){var r=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;ar||null==rr||rr!==hn(r)||(r="selectionStart"in(r=rr)&&nr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},lr&&Gt(lr,r)||(lr=r,0<(r=Vc(or,"onSelect")).length&&(n=new et("onSelect","select",null,n,t),e.push({event:n,listeners:r}),n.target=rr)))}function sr(e,n){var t={};return t[e.toLowerCase()]=n.toLowerCase(),t["Webkit"+e]="webkit"+n,t["Moz"+e]="moz"+n,t}var ur={animationend:sr("Animation","AnimationEnd"),animationiteration:sr("Animation","AnimationIteration"),animationstart:sr("Animation","AnimationStart"),transitionrun:sr("Transition","TransitionRun"),transitionstart:sr("Transition","TransitionStart"),transitioncancel:sr("Transition","TransitionCancel"),transitionend:sr("Transition","TransitionEnd")},cr={},fr={};function dr(e){if(cr[e])return cr[e];if(!ur[e])return e;var n,t=ur[e];for(n in t)if(t.hasOwnProperty(n)&&n in fr)return cr[e]=t[n];return e}Rn&&(fr=document.createElement("div").style,"AnimationEvent"in window||(delete ur.animationend.animation,delete ur.animationiteration.animation,delete ur.animationstart.animation),"TransitionEvent"in window||delete ur.transitionend.transition);var pr=dr("animationend"),hr=dr("animationiteration"),mr=dr("animationstart"),gr=dr("transitionrun"),yr=dr("transitionstart"),vr=dr("transitioncancel"),br=dr("transitionend"),wr=new Map,kr="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Ar(e,n){wr.set(e,n),Ke(n,[e])}kr.push("scrollEnd");var Sr=new WeakMap;function xr(e,n){if("object"==typeof e&&null!==e){var t=Sr.get(e);return void 0!==t?t:(n={value:e,source:n,stack:un(n)},Sr.set(e,n),n)}return{value:e,source:n,stack:un(n)}}var Cr=[],Er=0,Br=0;function Fr(){for(var e=Er,n=Br=Er=0;n<e;){var t=Cr[n];Cr[n++]=null;var r=Cr[n];Cr[n++]=null;var o=Cr[n];Cr[n++]=null;var l=Cr[n];if(Cr[n++]=null,null!==r&&null!==o){var a=r.pending;null===a?o.next=o:(o.next=a.next,a.next=o),r.pending=o}0!==l&&_r(t,o,l)}}function Pr(e,n,t,r){Cr[Er++]=e,Cr[Er++]=n,Cr[Er++]=t,Cr[Er++]=r,Br|=r,e.lanes|=r,null!==(e=e.alternate)&&(e.lanes|=r)}function Ur(e,n,t,r){return Pr(e,n,t,r),Ir(e)}function Tr(e,n){return Pr(e,null,null,n),Ir(e)}function _r(e,n,t){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t);for(var o=!1,l=e.return;null!==l;)l.childLanes|=t,null!==(r=l.alternate)&&(r.childLanes|=t),22===l.tag&&(null===(e=l.stateNode)||1&e._visibility||(o=!0)),e=l,l=l.return;return 3===e.tag?(l=e.stateNode,o&&null!==n&&(o=31-pe(t),null===(r=(e=l.hiddenUpdates)[o])?e[o]=[n]:r.push(n),n.lane=536870912|t),l):null}function Ir(e){if(50<_u)throw _u=0,Iu=null,Error(i(185));for(var n=e.return;null!==n;)n=(e=n).return;return 3===e.tag?e.stateNode:null}var zr={};function Or(e,n,t,r){this.tag=e,this.key=t,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=n,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Lr(e,n,t,r){return new Or(e,n,t,r)}function Nr(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Dr(e,n){var t=e.alternate;return null===t?((t=Lr(e.tag,n,e.key,e.mode)).elementType=e.elementType,t.type=e.type,t.stateNode=e.stateNode,t.alternate=e,e.alternate=t):(t.pendingProps=n,t.type=e.type,t.flags=0,t.subtreeFlags=0,t.deletions=null),t.flags=65011712&e.flags,t.childLanes=e.childLanes,t.lanes=e.lanes,t.child=e.child,t.memoizedProps=e.memoizedProps,t.memoizedState=e.memoizedState,t.updateQueue=e.updateQueue,n=e.dependencies,t.dependencies=null===n?null:{lanes:n.lanes,firstContext:n.firstContext},t.sibling=e.sibling,t.index=e.index,t.ref=e.ref,t.refCleanup=e.refCleanup,t}function Rr(e,n){e.flags&=65011714;var t=e.alternate;return null===t?(e.childLanes=0,e.lanes=n,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null):(e.childLanes=t.childLanes,e.lanes=t.lanes,e.child=t.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=t.memoizedProps,e.memoizedState=t.memoizedState,e.updateQueue=t.updateQueue,e.type=t.type,n=t.dependencies,e.dependencies=null===n?null:{lanes:n.lanes,firstContext:n.firstContext}),e}function Mr(e,n,t,r,o,l){var a=0;if(r=e,"function"==typeof e)Nr(e)&&(a=1);else if("string"==typeof e)a=function(e,n,t){if(1===t||null!=n.itemProp)return!1;switch(e){case"meta":case"title":return!0;case"style":if("string"!=typeof n.precedence||"string"!=typeof n.href||""===n.href)break;return!0;case"link":if("string"!=typeof n.rel||"string"!=typeof n.href||""===n.href||n.onLoad||n.onError)break;return"stylesheet"!==n.rel||(e=n.disabled,"string"==typeof n.precedence&&null==e);case"script":if(n.async&&"function"!=typeof n.async&&"symbol"!=typeof n.async&&!n.onLoad&&!n.onError&&n.src&&"string"==typeof n.src)return!0}return!1}(e,t,H.current)?26:"html"===e||"head"===e||"body"===e?27:5;else e:switch(e){case B:return(e=Lr(31,t,n,o)).elementType=B,e.lanes=l,e;case g:return jr(t.children,o,l,n);case y:a=8,o|=24;break;case v:return(e=Lr(12,t,n,2|o)).elementType=v,e.lanes=l,e;case S:return(e=Lr(13,t,n,o)).elementType=S,e.lanes=l,e;case x:return(e=Lr(19,t,n,o)).elementType=x,e.lanes=l,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case b:case k:a=10;break e;case w:a=9;break e;case A:a=11;break e;case C:a=14;break e;case E:a=16,r=null;break e}a=29,t=Error(i(130,null===e?"null":typeof e,"")),r=null}return(n=Lr(a,t,n,o)).elementType=e,n.type=r,n.lanes=l,n}function jr(e,n,t,r){return(e=Lr(7,e,r,n)).lanes=t,e}function Hr(e,n,t){return(e=Lr(6,e,null,n)).lanes=t,e}function $r(e,n,t){return(n=Lr(4,null!==e.children?e.children:[],e.key,n)).lanes=t,n.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},n}var Vr=[],qr=0,Wr=null,Qr=0,Kr=[],Yr=0,Gr=null,Xr=1,Zr="";function Jr(e,n){Vr[qr++]=Qr,Vr[qr++]=Wr,Wr=e,Qr=n}function eo(e,n,t){Kr[Yr++]=Xr,Kr[Yr++]=Zr,Kr[Yr++]=Gr,Gr=e;var r=Xr;e=Zr;var o=32-pe(r)-1;r&=~(1<<o),t+=1;var l=32-pe(n)+o;if(30<l){var a=o-o%5;l=(r&(1<<a)-1).toString(32),r>>=a,o-=a,Xr=1<<32-pe(n)+o|t<<o|r,Zr=l+e}else Xr=1<<l|t<<o|r,Zr=e}function no(e){null!==e.return&&(Jr(e,1),eo(e,1,0))}function to(e){for(;e===Wr;)Wr=Vr[--qr],Vr[qr]=null,Qr=Vr[--qr],Vr[qr]=null;for(;e===Gr;)Gr=Kr[--Yr],Kr[Yr]=null,Zr=Kr[--Yr],Kr[Yr]=null,Xr=Kr[--Yr],Kr[Yr]=null}var ro=null,oo=null,lo=!1,ao=null,io=!1,so=Error(i(519));function uo(e){throw go(xr(Error(i(418,"")),e)),so}function co(e){var n=e.stateNode,t=e.type,r=e.memoizedProps;switch(n[_e]=e,n[Ie]=r,t){case"dialog":Nc("cancel",n),Nc("close",n);break;case"iframe":case"object":case"embed":Nc("load",n);break;case"video":case"audio":for(t=0;t<zc.length;t++)Nc(zc[t],n);break;case"source":Nc("error",n);break;case"img":case"image":case"link":Nc("error",n),Nc("load",n);break;case"details":Nc("toggle",n);break;case"input":Nc("invalid",n),vn(n,r.value,r.defaultValue,r.checked,r.defaultChecked,r.type,r.name,!0),dn(n);break;case"select":Nc("invalid",n);break;case"textarea":Nc("invalid",n),An(n,r.value,r.defaultValue,r.children),dn(n)}"string"!=typeof(t=r.children)&&"number"!=typeof t&&"bigint"!=typeof t||n.textContent===""+t||!0===r.suppressHydrationWarning||Gc(n.textContent,t)?(null!=r.popover&&(Nc("beforetoggle",n),Nc("toggle",n)),null!=r.onScroll&&Nc("scroll",n),null!=r.onScrollEnd&&Nc("scrollend",n),null!=r.onClick&&(n.onclick=Xc),n=!0):n=!1,n||uo(e)}function fo(e){for(ro=e.return;ro;)switch(ro.tag){case 5:case 13:return void(io=!1);case 27:case 3:return void(io=!0);default:ro=ro.return}}function po(e){if(e!==ro)return!1;if(!lo)return fo(e),lo=!0,!1;var n,t=e.tag;if((n=3!==t&&27!==t)&&((n=5===t)&&(n=!("form"!==(n=e.type)&&"button"!==n)||af(e.type,e.memoizedProps)),n=!n),n&&oo&&uo(e),fo(e),13===t){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType)if("/$"===(n=e.data)){if(0===t){oo=vf(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++;e=e.nextSibling}oo=null}}else 27===t?(t=oo,hf(e.type)?(e=bf,bf=null,oo=e):oo=t):oo=ro?vf(e.stateNode.nextSibling):null;return!0}function ho(){oo=ro=null,lo=!1}function mo(){var e=ao;return null!==e&&(null===bu?bu=e:bu.push.apply(bu,e),ao=null),e}function go(e){null===ao?ao=[e]:ao.push(e)}var yo=R(null),vo=null,bo=null;function wo(e,n,t){j(yo,n._currentValue),n._currentValue=t}function ko(e){e._currentValue=yo.current,M(yo)}function Ao(e,n,t){for(;null!==e;){var r=e.alternate;if((e.childLanes&n)!==n?(e.childLanes|=n,null!==r&&(r.childLanes|=n)):null!==r&&(r.childLanes&n)!==n&&(r.childLanes|=n),e===t)break;e=e.return}}function So(e,n,t,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){var l=o.dependencies;if(null!==l){var a=o.child;l=l.firstContext;e:for(;null!==l;){var s=l;l=o;for(var u=0;u<n.length;u++)if(s.context===n[u]){l.lanes|=t,null!==(s=l.alternate)&&(s.lanes|=t),Ao(l.return,t,e),r||(a=null);break e}l=s.next}}else if(18===o.tag){if(null===(a=o.return))throw Error(i(341));a.lanes|=t,null!==(l=a.alternate)&&(l.lanes|=t),Ao(a,t,e),a=null}else a=o.child;if(null!==a)a.return=o;else for(a=o;null!==a;){if(a===e){a=null;break}if(null!==(o=a.sibling)){o.return=a.return,a=o;break}a=a.return}o=a}}function xo(e,n,t,r){e=null;for(var o=n,l=!1;null!==o;){if(!l)if(524288&o.flags)l=!0;else if(262144&o.flags)break;if(10===o.tag){var a=o.alternate;if(null===a)throw Error(i(387));if(null!==(a=a.memoizedProps)){var s=o.type;Yt(o.pendingProps.value,a.value)||(null!==e?e.push(s):e=[s])}}else if(o===q.current){if(null===(a=o.alternate))throw Error(i(387));a.memoizedState.memoizedState!==o.memoizedState.memoizedState&&(null!==e?e.push(Yf):e=[Yf])}o=o.return}null!==e&&So(n,e,t,r),n.flags|=262144}function Co(e){for(e=e.firstContext;null!==e;){if(!Yt(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function Eo(e){vo=e,bo=null,null!==(e=e.dependencies)&&(e.firstContext=null)}function Bo(e){return Po(vo,e)}function Fo(e,n){return null===vo&&Eo(e),Po(e,n)}function Po(e,n){var t=n._currentValue;if(n={context:n,memoizedValue:t,next:null},null===bo){if(null===e)throw Error(i(308));bo=n,e.dependencies={lanes:0,firstContext:n},e.flags|=524288}else bo=bo.next=n;return t}var Uo="undefined"!=typeof AbortController?AbortController:function(){var e=[],n=this.signal={aborted:!1,addEventListener:function(n,t){e.push(t)}};this.abort=function(){n.aborted=!0,e.forEach((function(e){return e()}))}},To=o.unstable_scheduleCallback,_o=o.unstable_NormalPriority,Io={$$typeof:k,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function zo(){return{controller:new Uo,data:new Map,refCount:0}}function Oo(e){e.refCount--,0===e.refCount&&To(_o,(function(){e.controller.abort()}))}var Lo=null,No=0,Do=0,Ro=null;function Mo(){if(0==--No&&null!==Lo){null!==Ro&&(Ro.status="fulfilled");var e=Lo;Lo=null,Do=0,Ro=null;for(var n=0;n<e.length;n++)(0,e[n])()}}var jo=z.S;z.S=function(e,n){"object"==typeof n&&null!==n&&"function"==typeof n.then&&function(e,n){if(null===Lo){var t=Lo=[];No=0,Do=Pc(),Ro={status:"pending",value:void 0,then:function(e){t.push(e)}}}No++,n.then(Mo,Mo)}(0,n),null!==jo&&jo(e,n)};var Ho=R(null);function $o(){var e=Ho.current;return null!==e?e:ru.pooledCache}function Vo(e,n){j(Ho,null===n?Ho.current:n.pool)}function qo(){var e=$o();return null===e?null:{parent:Io._currentValue,pool:e}}var Wo=Error(i(460)),Qo=Error(i(474)),Ko=Error(i(542)),Yo={then:function(){}};function Go(e){return"fulfilled"===(e=e.status)||"rejected"===e}function Xo(){}function Zo(e,n,t){switch(void 0===(t=e[t])?e.push(n):t!==n&&(n.then(Xo,Xo),n=t),n.status){case"fulfilled":return n.value;case"rejected":throw nl(e=n.reason),e;default:if("string"==typeof n.status)n.then(Xo,Xo);else{if(null!==(e=ru)&&100<e.shellSuspendCounter)throw Error(i(482));(e=n).status="pending",e.then((function(e){if("pending"===n.status){var t=n;t.status="fulfilled",t.value=e}}),(function(e){if("pending"===n.status){var t=n;t.status="rejected",t.reason=e}}))}switch(n.status){case"fulfilled":return n.value;case"rejected":throw nl(e=n.reason),e}throw Jo=n,Wo}}var Jo=null;function el(){if(null===Jo)throw Error(i(459));var e=Jo;return Jo=null,e}function nl(e){if(e===Wo||e===Ko)throw Error(i(483))}var tl=!1;function rl(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function ol(e,n){e=e.updateQueue,n.updateQueue===e&&(n.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function ll(e){return{lane:e,tag:0,payload:null,callback:null,next:null}}function al(e,n,t){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&tu){var o=r.pending;return null===o?n.next=n:(n.next=o.next,o.next=n),r.pending=n,n=Ir(e),_r(e,null,t),n}return Pr(e,r,n,t),Ir(e)}function il(e,n,t){if(null!==(n=n.updateQueue)&&(n=n.shared,4194048&t)){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,Be(e,t)}}function sl(e,n){var t=e.updateQueue,r=e.alternate;if(null!==r&&t===(r=r.updateQueue)){var o=null,l=null;if(null!==(t=t.firstBaseUpdate)){do{var a={lane:t.lane,tag:t.tag,payload:t.payload,callback:null,next:null};null===l?o=l=a:l=l.next=a,t=t.next}while(null!==t);null===l?o=l=n:l=l.next=n}else o=l=n;return t={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:l,shared:r.shared,callbacks:r.callbacks},void(e.updateQueue=t)}null===(e=t.lastBaseUpdate)?t.firstBaseUpdate=n:e.next=n,t.lastBaseUpdate=n}var ul=!1;function cl(){if(ul&&null!==Ro)throw Ro}function fl(e,n,t,r){ul=!1;var o=e.updateQueue;tl=!1;var l=o.firstBaseUpdate,a=o.lastBaseUpdate,i=o.shared.pending;if(null!==i){o.shared.pending=null;var s=i,u=s.next;s.next=null,null===a?l=u:a.next=u,a=s;var c=e.alternate;null!==c&&(i=(c=c.updateQueue).lastBaseUpdate)!==a&&(null===i?c.firstBaseUpdate=u:i.next=u,c.lastBaseUpdate=s)}if(null!==l){var f=o.baseState;for(a=0,c=u=s=null,i=l;;){var p=-536870913&i.lane,h=p!==i.lane;if(h?(lu&p)===p:(r&p)===p){0!==p&&p===Do&&(ul=!0),null!==c&&(c=c.next={lane:0,tag:i.tag,payload:i.payload,callback:null,next:null});e:{var m=e,g=i;p=n;var y=t;switch(g.tag){case 1:if("function"==typeof(m=g.payload)){f=m.call(y,f,p);break e}f=m;break e;case 3:m.flags=-65537&m.flags|128;case 0:if(null==(p="function"==typeof(m=g.payload)?m.call(y,f,p):m))break e;f=d({},f,p);break e;case 2:tl=!0}}null!==(p=i.callback)&&(e.flags|=64,h&&(e.flags|=8192),null===(h=o.callbacks)?o.callbacks=[p]:h.push(p))}else h={lane:p,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===c?(u=c=h,s=f):c=c.next=h,a|=p;if(null===(i=i.next)){if(null===(i=o.shared.pending))break;i=(h=i).next,h.next=null,o.lastBaseUpdate=h,o.shared.pending=null}}null===c&&(s=f),o.baseState=s,o.firstBaseUpdate=u,o.lastBaseUpdate=c,null===l&&(o.shared.lanes=0),pu|=a,e.lanes=a,e.memoizedState=f}}function dl(e,n){if("function"!=typeof e)throw Error(i(191,e));e.call(n)}function pl(e,n){var t=e.callbacks;if(null!==t)for(e.callbacks=null,e=0;e<t.length;e++)dl(t[e],n)}var hl=R(null),ml=R(0);function gl(e,n){j(ml,e=fu),j(hl,n),fu=e|n.baseLanes}function yl(){j(ml,fu),j(hl,hl.current)}function vl(){fu=ml.current,M(hl),M(ml)}var bl=0,wl=null,kl=null,Al=null,Sl=!1,xl=!1,Cl=!1,El=0,Bl=0,Fl=null,Pl=0;function Ul(){throw Error(i(321))}function Tl(e,n){if(null===n)return!1;for(var t=0;t<n.length&&t<e.length;t++)if(!Yt(e[t],n[t]))return!1;return!0}function _l(e,n,t,r,o,l){return bl=l,wl=n,n.memoizedState=null,n.updateQueue=null,n.lanes=0,z.H=null===e||null===e.memoizedState?Wa:Qa,Cl=!1,l=t(r,o),Cl=!1,xl&&(l=zl(n,t,r,o)),Il(e),l}function Il(e){z.H=qa;var n=null!==kl&&null!==kl.next;if(bl=0,Al=kl=wl=null,Sl=!1,Bl=0,Fl=null,n)throw Error(i(300));null===e||Bi||null!==(e=e.dependencies)&&Co(e)&&(Bi=!0)}function zl(e,n,t,r){wl=e;var o=0;do{if(xl&&(Fl=null),Bl=0,xl=!1,25<=o)throw Error(i(301));if(o+=1,Al=kl=null,null!=e.updateQueue){var l=e.updateQueue;l.lastEffect=null,l.events=null,l.stores=null,null!=l.memoCache&&(l.memoCache.index=0)}z.H=Ka,l=n(t,r)}while(xl);return l}function Ol(){var e=z.H,n=e.useState()[0];return n="function"==typeof n.then?jl(n):n,e=e.useState()[0],(null!==kl?kl.memoizedState:null)!==e&&(wl.flags|=1024),n}function Ll(){var e=0!==El;return El=0,e}function Nl(e,n,t){n.updateQueue=e.updateQueue,n.flags&=-2053,e.lanes&=~t}function Dl(e){if(Sl){for(e=e.memoizedState;null!==e;){var n=e.queue;null!==n&&(n.pending=null),e=e.next}Sl=!1}bl=0,Al=kl=wl=null,xl=!1,Bl=El=0,Fl=null}function Rl(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Al?wl.memoizedState=Al=e:Al=Al.next=e,Al}function Ml(){if(null===kl){var e=wl.alternate;e=null!==e?e.memoizedState:null}else e=kl.next;var n=null===Al?wl.memoizedState:Al.next;if(null!==n)Al=n,kl=e;else{if(null===e){if(null===wl.alternate)throw Error(i(467));throw Error(i(310))}e={memoizedState:(kl=e).memoizedState,baseState:kl.baseState,baseQueue:kl.baseQueue,queue:kl.queue,next:null},null===Al?wl.memoizedState=Al=e:Al=Al.next=e}return Al}function jl(e){var n=Bl;return Bl+=1,null===Fl&&(Fl=[]),e=Zo(Fl,e,n),n=wl,null===(null===Al?n.memoizedState:Al.next)&&(n=n.alternate,z.H=null===n||null===n.memoizedState?Wa:Qa),e}function Hl(e){if(null!==e&&"object"==typeof e){if("function"==typeof e.then)return jl(e);if(e.$$typeof===k)return Bo(e)}throw Error(i(438,String(e)))}function $l(e){var n=null,t=wl.updateQueue;if(null!==t&&(n=t.memoCache),null==n){var r=wl.alternate;null!==r&&null!==(r=r.updateQueue)&&null!=(r=r.memoCache)&&(n={data:r.data.map((function(e){return e.slice()})),index:0})}if(null==n&&(n={data:[],index:0}),null===t&&(t={lastEffect:null,events:null,stores:null,memoCache:null},wl.updateQueue=t),t.memoCache=n,void 0===(t=n.data[n.index]))for(t=n.data[n.index]=Array(e),r=0;r<e;r++)t[r]=F;return n.index++,t}function Vl(e,n){return"function"==typeof n?n(e):n}function ql(e){return Wl(Ml(),kl,e)}function Wl(e,n,t){var r=e.queue;if(null===r)throw Error(i(311));r.lastRenderedReducer=t;var o=e.baseQueue,l=r.pending;if(null!==l){if(null!==o){var a=o.next;o.next=l.next,l.next=a}n.baseQueue=o=l,r.pending=null}if(l=e.baseState,null===o)e.memoizedState=l;else{var s=a=null,u=null,c=n=o.next,f=!1;do{var d=-536870913&c.lane;if(d!==c.lane?(lu&d)===d:(bl&d)===d){var p=c.revertLane;if(0===p)null!==u&&(u=u.next={lane:0,revertLane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),d===Do&&(f=!0);else{if((bl&p)===p){c=c.next,p===Do&&(f=!0);continue}d={lane:0,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===u?(s=u=d,a=l):u=u.next=d,wl.lanes|=p,pu|=p}d=c.action,Cl&&t(l,d),l=c.hasEagerState?c.eagerState:t(l,d)}else p={lane:d,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===u?(s=u=p,a=l):u=u.next=p,wl.lanes|=d,pu|=d;c=c.next}while(null!==c&&c!==n);if(null===u?a=l:u.next=s,!Yt(l,e.memoizedState)&&(Bi=!0,f&&null!==(t=Ro)))throw t;e.memoizedState=l,e.baseState=a,e.baseQueue=u,r.lastRenderedState=l}return null===o&&(r.lanes=0),[e.memoizedState,r.dispatch]}function Ql(e){var n=Ml(),t=n.queue;if(null===t)throw Error(i(311));t.lastRenderedReducer=e;var r=t.dispatch,o=t.pending,l=n.memoizedState;if(null!==o){t.pending=null;var a=o=o.next;do{l=e(l,a.action),a=a.next}while(a!==o);Yt(l,n.memoizedState)||(Bi=!0),n.memoizedState=l,null===n.baseQueue&&(n.baseState=l),t.lastRenderedState=l}return[l,r]}function Kl(e,n,t){var r=wl,o=Ml(),l=lo;if(l){if(void 0===t)throw Error(i(407));t=t()}else t=n();var a=!Yt((kl||o).memoizedState,t);if(a&&(o.memoizedState=t,Bi=!0),o=o.queue,ya(2048,8,Xl.bind(null,r,o,e),[e]),o.getSnapshot!==n||a||null!==Al&&1&Al.memoizedState.tag){if(r.flags|=2048,ha(9,{destroy:void 0,resource:void 0},Gl.bind(null,r,o,t,n),null),null===ru)throw Error(i(349));l||124&bl||Yl(r,n,t)}return t}function Yl(e,n,t){e.flags|=16384,e={getSnapshot:n,value:t},null===(n=wl.updateQueue)?(n={lastEffect:null,events:null,stores:null,memoCache:null},wl.updateQueue=n,n.stores=[e]):null===(t=n.stores)?n.stores=[e]:t.push(e)}function Gl(e,n,t,r){n.value=t,n.getSnapshot=r,Zl(n)&&Jl(e)}function Xl(e,n,t){return t((function(){Zl(n)&&Jl(e)}))}function Zl(e){var n=e.getSnapshot;e=e.value;try{var t=n();return!Yt(e,t)}catch(e){return!0}}function Jl(e){var n=Tr(e,2);null!==n&&Lu(n,0,2)}function ea(e){var n=Rl();if("function"==typeof e){var t=e;if(e=t(),Cl){de(!0);try{t()}finally{de(!1)}}}return n.memoizedState=n.baseState=e,n.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Vl,lastRenderedState:e},n}function na(e,n,t,r){return e.baseState=t,Wl(e,kl,"function"==typeof r?r:Vl)}function ta(e,n,t,r,o){if(Ha(e))throw Error(i(485));if(null!==(e=n.action)){var l={payload:o,action:e,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(e){l.listeners.push(e)}};null!==z.T?t(!0):l.isTransition=!1,r(l),null===(t=n.pending)?(l.next=n.pending=l,ra(n,l)):(l.next=t.next,n.pending=t.next=l)}}function ra(e,n){var t=n.action,r=n.payload,o=e.state;if(n.isTransition){var l=z.T,a={};z.T=a;try{var i=t(o,r),s=z.S;null!==s&&s(a,i),oa(e,n,i)}catch(t){aa(e,n,t)}finally{z.T=l}}else try{oa(e,n,l=t(o,r))}catch(t){aa(e,n,t)}}function oa(e,n,t){null!==t&&"object"==typeof t&&"function"==typeof t.then?t.then((function(t){la(e,n,t)}),(function(t){return aa(e,n,t)})):la(e,n,t)}function la(e,n,t){n.status="fulfilled",n.value=t,ia(n),e.state=t,null!==(n=e.pending)&&((t=n.next)===n?e.pending=null:(t=t.next,n.next=t,ra(e,t)))}function aa(e,n,t){var r=e.pending;if(e.pending=null,null!==r){r=r.next;do{n.status="rejected",n.reason=t,ia(n),n=n.next}while(n!==r)}e.action=null}function ia(e){e=e.listeners;for(var n=0;n<e.length;n++)(0,e[n])()}function sa(e,n){return n}function ua(e,n){if(lo){var t=ru.formState;if(null!==t){e:{var r=wl;if(lo){if(oo){n:{for(var o=oo,l=io;8!==o.nodeType;){if(!l){o=null;break n}if(null===(o=vf(o.nextSibling))){o=null;break n}}o="F!"===(l=o.data)||"F"===l?o:null}if(o){oo=vf(o.nextSibling),r="F!"===o.data;break e}}uo(r)}r=!1}r&&(n=t[0])}}return(t=Rl()).memoizedState=t.baseState=n,r={pending:null,lanes:0,dispatch:null,lastRenderedReducer:sa,lastRenderedState:n},t.queue=r,t=Ra.bind(null,wl,r),r.dispatch=t,r=ea(!1),l=ja.bind(null,wl,!1,r.queue),o={state:n,dispatch:null,action:e,pending:null},(r=Rl()).queue=o,t=ta.bind(null,wl,o,l,t),o.dispatch=t,r.memoizedState=e,[n,t,!1]}function ca(e){return fa(Ml(),kl,e)}function fa(e,n,t){if(n=Wl(e,n,sa)[0],e=ql(Vl)[0],"object"==typeof n&&null!==n&&"function"==typeof n.then)try{var r=jl(n)}catch(e){if(e===Wo)throw Ko;throw e}else r=n;var o=(n=Ml()).queue,l=o.dispatch;return t!==n.memoizedState&&(wl.flags|=2048,ha(9,{destroy:void 0,resource:void 0},da.bind(null,o,t),null)),[r,l,e]}function da(e,n){e.action=n}function pa(e){var n=Ml(),t=kl;if(null!==t)return fa(n,t,e);Ml(),n=n.memoizedState;var r=(t=Ml()).queue.dispatch;return t.memoizedState=e,[n,r,!1]}function ha(e,n,t,r){return e={tag:e,create:t,deps:r,inst:n,next:null},null===(n=wl.updateQueue)&&(n={lastEffect:null,events:null,stores:null,memoCache:null},wl.updateQueue=n),null===(t=n.lastEffect)?n.lastEffect=e.next=e:(r=t.next,t.next=e,e.next=r,n.lastEffect=e),e}function ma(){return Ml().memoizedState}function ga(e,n,t,r){var o=Rl();r=void 0===r?null:r,wl.flags|=e,o.memoizedState=ha(1|n,{destroy:void 0,resource:void 0},t,r)}function ya(e,n,t,r){var o=Ml();r=void 0===r?null:r;var l=o.memoizedState.inst;null!==kl&&null!==r&&Tl(r,kl.memoizedState.deps)?o.memoizedState=ha(n,l,t,r):(wl.flags|=e,o.memoizedState=ha(1|n,l,t,r))}function va(e,n){ga(8390656,8,e,n)}function ba(e,n){ya(2048,8,e,n)}function wa(e,n){return ya(4,2,e,n)}function ka(e,n){return ya(4,4,e,n)}function Aa(e,n){if("function"==typeof n){e=e();var t=n(e);return function(){"function"==typeof t?t():n(null)}}if(null!=n)return e=e(),n.current=e,function(){n.current=null}}function Sa(e,n,t){t=null!=t?t.concat([e]):null,ya(4,4,Aa.bind(null,n,e),t)}function xa(){}function Ca(e,n){var t=Ml();n=void 0===n?null:n;var r=t.memoizedState;return null!==n&&Tl(n,r[1])?r[0]:(t.memoizedState=[e,n],e)}function Ea(e,n){var t=Ml();n=void 0===n?null:n;var r=t.memoizedState;if(null!==n&&Tl(n,r[1]))return r[0];if(r=e(),Cl){de(!0);try{e()}finally{de(!1)}}return t.memoizedState=[r,n],r}function Ba(e,n,t){return void 0===t||1073741824&bl?e.memoizedState=n:(e.memoizedState=t,e=Ou(),wl.lanes|=e,pu|=e,t)}function Fa(e,n,t,r){return Yt(t,n)?t:null!==hl.current?(e=Ba(e,t,r),Yt(e,n)||(Bi=!0),e):42&bl?(e=Ou(),wl.lanes|=e,pu|=e,n):(Bi=!0,e.memoizedState=t)}function Pa(e,n,t,r,o){var l=O.p;O.p=0!==l&&8>l?l:8;var a,i,s,u=z.T,c={};z.T=c,ja(e,!1,n,t);try{var f=o(),d=z.S;null!==d&&d(c,f),null!==f&&"object"==typeof f&&"function"==typeof f.then?Ma(e,n,(a=r,i=[],s={status:"pending",value:null,reason:null,then:function(e){i.push(e)}},f.then((function(){s.status="fulfilled",s.value=a;for(var e=0;e<i.length;e++)(0,i[e])(a)}),(function(e){for(s.status="rejected",s.reason=e,e=0;e<i.length;e++)(0,i[e])(void 0)})),s),zu()):Ma(e,n,r,zu())}catch(t){Ma(e,n,{then:function(){},status:"rejected",reason:t},zu())}finally{O.p=l,z.T=u}}function Ua(){}function Ta(e,n,t,r){if(5!==e.tag)throw Error(i(476));var o=_a(e).queue;Pa(e,o,n,L,null===t?Ua:function(){return Ia(e),t(r)})}function _a(e){var n=e.memoizedState;if(null!==n)return n;var t={};return(n={memoizedState:L,baseState:L,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Vl,lastRenderedState:L},next:null}).next={memoizedState:t,baseState:t,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Vl,lastRenderedState:t},next:null},e.memoizedState=n,null!==(e=e.alternate)&&(e.memoizedState=n),n}function Ia(e){Ma(e,_a(e).next.queue,{},zu())}function za(){return Bo(Yf)}function Oa(){return Ml().memoizedState}function La(){return Ml().memoizedState}function Na(e){for(var n=e.return;null!==n;){switch(n.tag){case 24:case 3:var t=zu(),r=al(n,e=ll(t),t);return null!==r&&(Lu(r,0,t),il(r,n,t)),n={cache:zo()},void(e.payload=n)}n=n.return}}function Da(e,n,t){var r=zu();t={lane:r,revertLane:0,action:t,hasEagerState:!1,eagerState:null,next:null},Ha(e)?$a(n,t):null!==(t=Ur(e,n,t,r))&&(Lu(t,0,r),Va(t,n,r))}function Ra(e,n,t){Ma(e,n,t,zu())}function Ma(e,n,t,r){var o={lane:r,revertLane:0,action:t,hasEagerState:!1,eagerState:null,next:null};if(Ha(e))$a(n,o);else{var l=e.alternate;if(0===e.lanes&&(null===l||0===l.lanes)&&null!==(l=n.lastRenderedReducer))try{var a=n.lastRenderedState,i=l(a,t);if(o.hasEagerState=!0,o.eagerState=i,Yt(i,a))return Pr(e,n,o,0),null===ru&&Fr(),!1}catch(e){}if(null!==(t=Ur(e,n,o,r)))return Lu(t,0,r),Va(t,n,r),!0}return!1}function ja(e,n,t,r){if(r={lane:2,revertLane:Pc(),action:r,hasEagerState:!1,eagerState:null,next:null},Ha(e)){if(n)throw Error(i(479))}else null!==(n=Ur(e,t,r,2))&&Lu(n,0,2)}function Ha(e){var n=e.alternate;return e===wl||null!==n&&n===wl}function $a(e,n){xl=Sl=!0;var t=e.pending;null===t?n.next=n:(n.next=t.next,t.next=n),e.pending=n}function Va(e,n,t){if(4194048&t){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,Be(e,t)}}var qa={readContext:Bo,use:Hl,useCallback:Ul,useContext:Ul,useEffect:Ul,useImperativeHandle:Ul,useLayoutEffect:Ul,useInsertionEffect:Ul,useMemo:Ul,useReducer:Ul,useRef:Ul,useState:Ul,useDebugValue:Ul,useDeferredValue:Ul,useTransition:Ul,useSyncExternalStore:Ul,useId:Ul,useHostTransitionStatus:Ul,useFormState:Ul,useActionState:Ul,useOptimistic:Ul,useMemoCache:Ul,useCacheRefresh:Ul},Wa={readContext:Bo,use:Hl,useCallback:function(e,n){return Rl().memoizedState=[e,void 0===n?null:n],e},useContext:Bo,useEffect:va,useImperativeHandle:function(e,n,t){t=null!=t?t.concat([e]):null,ga(4194308,4,Aa.bind(null,n,e),t)},useLayoutEffect:function(e,n){return ga(4194308,4,e,n)},useInsertionEffect:function(e,n){ga(4,2,e,n)},useMemo:function(e,n){var t=Rl();n=void 0===n?null:n;var r=e();if(Cl){de(!0);try{e()}finally{de(!1)}}return t.memoizedState=[r,n],r},useReducer:function(e,n,t){var r=Rl();if(void 0!==t){var o=t(n);if(Cl){de(!0);try{t(n)}finally{de(!1)}}}else o=n;return r.memoizedState=r.baseState=o,e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:o},r.queue=e,e=e.dispatch=Da.bind(null,wl,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Rl().memoizedState=e},useState:function(e){var n=(e=ea(e)).queue,t=Ra.bind(null,wl,n);return n.dispatch=t,[e.memoizedState,t]},useDebugValue:xa,useDeferredValue:function(e,n){return Ba(Rl(),e,n)},useTransition:function(){var e=ea(!1);return e=Pa.bind(null,wl,e.queue,!0,!1),Rl().memoizedState=e,[!1,e]},useSyncExternalStore:function(e,n,t){var r=wl,o=Rl();if(lo){if(void 0===t)throw Error(i(407));t=t()}else{if(t=n(),null===ru)throw Error(i(349));124&lu||Yl(r,n,t)}o.memoizedState=t;var l={value:t,getSnapshot:n};return o.queue=l,va(Xl.bind(null,r,l,e),[e]),r.flags|=2048,ha(9,{destroy:void 0,resource:void 0},Gl.bind(null,r,l,t,n),null),t},useId:function(){var e=Rl(),n=ru.identifierPrefix;if(lo){var t=Zr;n="«"+n+"R"+(t=(Xr&~(1<<32-pe(Xr)-1)).toString(32)+t),0<(t=El++)&&(n+="H"+t.toString(32)),n+="»"}else n="«"+n+"r"+(t=Pl++).toString(32)+"»";return e.memoizedState=n},useHostTransitionStatus:za,useFormState:ua,useActionState:ua,useOptimistic:function(e){var n=Rl();n.memoizedState=n.baseState=e;var t={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return n.queue=t,n=ja.bind(null,wl,!0,t),t.dispatch=n,[e,n]},useMemoCache:$l,useCacheRefresh:function(){return Rl().memoizedState=Na.bind(null,wl)}},Qa={readContext:Bo,use:Hl,useCallback:Ca,useContext:Bo,useEffect:ba,useImperativeHandle:Sa,useInsertionEffect:wa,useLayoutEffect:ka,useMemo:Ea,useReducer:ql,useRef:ma,useState:function(){return ql(Vl)},useDebugValue:xa,useDeferredValue:function(e,n){return Fa(Ml(),kl.memoizedState,e,n)},useTransition:function(){var e=ql(Vl)[0],n=Ml().memoizedState;return["boolean"==typeof e?e:jl(e),n]},useSyncExternalStore:Kl,useId:Oa,useHostTransitionStatus:za,useFormState:ca,useActionState:ca,useOptimistic:function(e,n){return na(Ml(),0,e,n)},useMemoCache:$l,useCacheRefresh:La},Ka={readContext:Bo,use:Hl,useCallback:Ca,useContext:Bo,useEffect:ba,useImperativeHandle:Sa,useInsertionEffect:wa,useLayoutEffect:ka,useMemo:Ea,useReducer:Ql,useRef:ma,useState:function(){return Ql(Vl)},useDebugValue:xa,useDeferredValue:function(e,n){var t=Ml();return null===kl?Ba(t,e,n):Fa(t,kl.memoizedState,e,n)},useTransition:function(){var e=Ql(Vl)[0],n=Ml().memoizedState;return["boolean"==typeof e?e:jl(e),n]},useSyncExternalStore:Kl,useId:Oa,useHostTransitionStatus:za,useFormState:pa,useActionState:pa,useOptimistic:function(e,n){var t=Ml();return null!==kl?na(t,0,e,n):(t.baseState=e,[e,t.queue.dispatch])},useMemoCache:$l,useCacheRefresh:La},Ya=null,Ga=0;function Xa(e){var n=Ga;return Ga+=1,null===Ya&&(Ya=[]),Zo(Ya,e,n)}function Za(e,n){n=n.props.ref,e.ref=void 0!==n?n:null}function Ja(e,n){if(n.$$typeof===p)throw Error(i(525));throw e=Object.prototype.toString.call(n),Error(i(31,"[object Object]"===e?"object with keys {"+Object.keys(n).join(", ")+"}":e))}function ei(e){return(0,e._init)(e._payload)}function ni(e){function n(n,t){if(e){var r=n.deletions;null===r?(n.deletions=[t],n.flags|=16):r.push(t)}}function t(t,r){if(!e)return null;for(;null!==r;)n(t,r),r=r.sibling;return null}function r(e){for(var n=new Map;null!==e;)null!==e.key?n.set(e.key,e):n.set(e.index,e),e=e.sibling;return n}function o(e,n){return(e=Dr(e,n)).index=0,e.sibling=null,e}function l(n,t,r){return n.index=r,e?null!==(r=n.alternate)?(r=r.index)<t?(n.flags|=67108866,t):r:(n.flags|=67108866,t):(n.flags|=1048576,t)}function a(n){return e&&null===n.alternate&&(n.flags|=67108866),n}function s(e,n,t,r){return null===n||6!==n.tag?((n=Hr(t,e.mode,r)).return=e,n):((n=o(n,t)).return=e,n)}function u(e,n,t,r){var l=t.type;return l===g?f(e,n,t.props.children,r,t.key):null!==n&&(n.elementType===l||"object"==typeof l&&null!==l&&l.$$typeof===E&&ei(l)===n.type)?(Za(n=o(n,t.props),t),n.return=e,n):(Za(n=Mr(t.type,t.key,t.props,null,e.mode,r),t),n.return=e,n)}function c(e,n,t,r){return null===n||4!==n.tag||n.stateNode.containerInfo!==t.containerInfo||n.stateNode.implementation!==t.implementation?((n=$r(t,e.mode,r)).return=e,n):((n=o(n,t.children||[])).return=e,n)}function f(e,n,t,r,l){return null===n||7!==n.tag?((n=jr(t,e.mode,r,l)).return=e,n):((n=o(n,t)).return=e,n)}function d(e,n,t){if("string"==typeof n&&""!==n||"number"==typeof n||"bigint"==typeof n)return(n=Hr(""+n,e.mode,t)).return=e,n;if("object"==typeof n&&null!==n){switch(n.$$typeof){case h:return Za(t=Mr(n.type,n.key,n.props,null,e.mode,t),n),t.return=e,t;case m:return(n=$r(n,e.mode,t)).return=e,n;case E:return d(e,n=(0,n._init)(n._payload),t)}if(I(n)||U(n))return(n=jr(n,e.mode,t,null)).return=e,n;if("function"==typeof n.then)return d(e,Xa(n),t);if(n.$$typeof===k)return d(e,Fo(e,n),t);Ja(e,n)}return null}function p(e,n,t,r){var o=null!==n?n.key:null;if("string"==typeof t&&""!==t||"number"==typeof t||"bigint"==typeof t)return null!==o?null:s(e,n,""+t,r);if("object"==typeof t&&null!==t){switch(t.$$typeof){case h:return t.key===o?u(e,n,t,r):null;case m:return t.key===o?c(e,n,t,r):null;case E:return p(e,n,t=(o=t._init)(t._payload),r)}if(I(t)||U(t))return null!==o?null:f(e,n,t,r,null);if("function"==typeof t.then)return p(e,n,Xa(t),r);if(t.$$typeof===k)return p(e,n,Fo(e,t),r);Ja(e,t)}return null}function y(e,n,t,r,o){if("string"==typeof r&&""!==r||"number"==typeof r||"bigint"==typeof r)return s(n,e=e.get(t)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case h:return u(n,e=e.get(null===r.key?t:r.key)||null,r,o);case m:return c(n,e=e.get(null===r.key?t:r.key)||null,r,o);case E:return y(e,n,t,r=(0,r._init)(r._payload),o)}if(I(r)||U(r))return f(n,e=e.get(t)||null,r,o,null);if("function"==typeof r.then)return y(e,n,t,Xa(r),o);if(r.$$typeof===k)return y(e,n,t,Fo(n,r),o);Ja(n,r)}return null}function v(s,u,c,f){if("object"==typeof c&&null!==c&&c.type===g&&null===c.key&&(c=c.props.children),"object"==typeof c&&null!==c){switch(c.$$typeof){case h:e:{for(var b=c.key;null!==u;){if(u.key===b){if((b=c.type)===g){if(7===u.tag){t(s,u.sibling),(f=o(u,c.props.children)).return=s,s=f;break e}}else if(u.elementType===b||"object"==typeof b&&null!==b&&b.$$typeof===E&&ei(b)===u.type){t(s,u.sibling),Za(f=o(u,c.props),c),f.return=s,s=f;break e}t(s,u);break}n(s,u),u=u.sibling}c.type===g?((f=jr(c.props.children,s.mode,f,c.key)).return=s,s=f):(Za(f=Mr(c.type,c.key,c.props,null,s.mode,f),c),f.return=s,s=f)}return a(s);case m:e:{for(b=c.key;null!==u;){if(u.key===b){if(4===u.tag&&u.stateNode.containerInfo===c.containerInfo&&u.stateNode.implementation===c.implementation){t(s,u.sibling),(f=o(u,c.children||[])).return=s,s=f;break e}t(s,u);break}n(s,u),u=u.sibling}(f=$r(c,s.mode,f)).return=s,s=f}return a(s);case E:return v(s,u,c=(b=c._init)(c._payload),f)}if(I(c))return function(o,a,i,s){for(var u=null,c=null,f=a,h=a=0,m=null;null!==f&&h<i.length;h++){f.index>h?(m=f,f=null):m=f.sibling;var g=p(o,f,i[h],s);if(null===g){null===f&&(f=m);break}e&&f&&null===g.alternate&&n(o,f),a=l(g,a,h),null===c?u=g:c.sibling=g,c=g,f=m}if(h===i.length)return t(o,f),lo&&Jr(o,h),u;if(null===f){for(;h<i.length;h++)null!==(f=d(o,i[h],s))&&(a=l(f,a,h),null===c?u=f:c.sibling=f,c=f);return lo&&Jr(o,h),u}for(f=r(f);h<i.length;h++)null!==(m=y(f,o,h,i[h],s))&&(e&&null!==m.alternate&&f.delete(null===m.key?h:m.key),a=l(m,a,h),null===c?u=m:c.sibling=m,c=m);return e&&f.forEach((function(e){return n(o,e)})),lo&&Jr(o,h),u}(s,u,c,f);if(U(c)){if("function"!=typeof(b=U(c)))throw Error(i(150));return function(o,a,s,u){if(null==s)throw Error(i(151));for(var c=null,f=null,h=a,m=a=0,g=null,v=s.next();null!==h&&!v.done;m++,v=s.next()){h.index>m?(g=h,h=null):g=h.sibling;var b=p(o,h,v.value,u);if(null===b){null===h&&(h=g);break}e&&h&&null===b.alternate&&n(o,h),a=l(b,a,m),null===f?c=b:f.sibling=b,f=b,h=g}if(v.done)return t(o,h),lo&&Jr(o,m),c;if(null===h){for(;!v.done;m++,v=s.next())null!==(v=d(o,v.value,u))&&(a=l(v,a,m),null===f?c=v:f.sibling=v,f=v);return lo&&Jr(o,m),c}for(h=r(h);!v.done;m++,v=s.next())null!==(v=y(h,o,m,v.value,u))&&(e&&null!==v.alternate&&h.delete(null===v.key?m:v.key),a=l(v,a,m),null===f?c=v:f.sibling=v,f=v);return e&&h.forEach((function(e){return n(o,e)})),lo&&Jr(o,m),c}(s,u,c=b.call(c),f)}if("function"==typeof c.then)return v(s,u,Xa(c),f);if(c.$$typeof===k)return v(s,u,Fo(s,c),f);Ja(s,c)}return"string"==typeof c&&""!==c||"number"==typeof c||"bigint"==typeof c?(c=""+c,null!==u&&6===u.tag?(t(s,u.sibling),(f=o(u,c)).return=s,s=f):(t(s,u),(f=Hr(c,s.mode,f)).return=s,s=f),a(s)):t(s,u)}return function(e,n,t,r){try{Ga=0;var o=v(e,n,t,r);return Ya=null,o}catch(n){if(n===Wo||n===Ko)throw n;var l=Lr(29,n,null,e.mode);return l.lanes=r,l.return=e,l}}}var ti=ni(!0),ri=ni(!1),oi=R(null),li=null;function ai(e){var n=e.alternate;j(ci,1&ci.current),j(oi,e),null===li&&(null===n||null!==hl.current||null!==n.memoizedState)&&(li=e)}function ii(e){if(22===e.tag){if(j(ci,ci.current),j(oi,e),null===li){var n=e.alternate;null!==n&&null!==n.memoizedState&&(li=e)}}else si()}function si(){j(ci,ci.current),j(oi,oi.current)}function ui(e){M(oi),li===e&&(li=null),M(ci)}var ci=R(0);function fi(e){for(var n=e;null!==n;){if(13===n.tag){var t=n.memoizedState;if(null!==t&&(null===(t=t.dehydrated)||"$?"===t.data||yf(t)))return n}else if(19===n.tag&&void 0!==n.memoizedProps.revealOrder){if(128&n.flags)return n}else if(null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}return null}function di(e,n,t,r){t=null==(t=t(r,n=e.memoizedState))?n:d({},n,t),e.memoizedState=t,0===e.lanes&&(e.updateQueue.baseState=t)}var pi={enqueueSetState:function(e,n,t){e=e._reactInternals;var r=zu(),o=ll(r);o.payload=n,null!=t&&(o.callback=t),null!==(n=al(e,o,r))&&(Lu(n,0,r),il(n,e,r))},enqueueReplaceState:function(e,n,t){e=e._reactInternals;var r=zu(),o=ll(r);o.tag=1,o.payload=n,null!=t&&(o.callback=t),null!==(n=al(e,o,r))&&(Lu(n,0,r),il(n,e,r))},enqueueForceUpdate:function(e,n){e=e._reactInternals;var t=zu(),r=ll(t);r.tag=2,null!=n&&(r.callback=n),null!==(n=al(e,r,t))&&(Lu(n,0,t),il(n,e,t))}};function hi(e,n,t,r,o,l,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,l,a):!(n.prototype&&n.prototype.isPureReactComponent&&Gt(t,r)&&Gt(o,l))}function mi(e,n,t,r){e=n.state,"function"==typeof n.componentWillReceiveProps&&n.componentWillReceiveProps(t,r),"function"==typeof n.UNSAFE_componentWillReceiveProps&&n.UNSAFE_componentWillReceiveProps(t,r),n.state!==e&&pi.enqueueReplaceState(n,n.state,null)}function gi(e,n){var t=n;if("ref"in n)for(var r in t={},n)"ref"!==r&&(t[r]=n[r]);if(e=e.defaultProps)for(var o in t===n&&(t=d({},t)),e)void 0===t[o]&&(t[o]=e[o]);return t}var yi="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var n=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(n))return}else if("object"==typeof r&&"function"==typeof r.emit)return void r.emit("uncaughtException",e);console.error(e)};function vi(e){yi(e)}function bi(e){console.error(e)}function wi(e){yi(e)}function ki(e,n){try{(0,e.onUncaughtError)(n.value,{componentStack:n.stack})}catch(e){setTimeout((function(){throw e}))}}function Ai(e,n,t){try{(0,e.onCaughtError)(t.value,{componentStack:t.stack,errorBoundary:1===n.tag?n.stateNode:null})}catch(e){setTimeout((function(){throw e}))}}function Si(e,n,t){return(t=ll(t)).tag=3,t.payload={element:null},t.callback=function(){ki(e,n)},t}function xi(e){return(e=ll(e)).tag=3,e}function Ci(e,n,t,r){var o=t.type.getDerivedStateFromError;if("function"==typeof o){var l=r.value;e.payload=function(){return o(l)},e.callback=function(){Ai(n,t,r)}}var a=t.stateNode;null!==a&&"function"==typeof a.componentDidCatch&&(e.callback=function(){Ai(n,t,r),"function"!=typeof o&&(null===xu?xu=new Set([this]):xu.add(this));var e=r.stack;this.componentDidCatch(r.value,{componentStack:null!==e?e:""})})}var Ei=Error(i(461)),Bi=!1;function Fi(e,n,t,r){n.child=null===e?ri(n,null,t,r):ti(n,e.child,t,r)}function Pi(e,n,t,r,o){t=t.render;var l=n.ref;if("ref"in r){var a={};for(var i in r)"ref"!==i&&(a[i]=r[i])}else a=r;return Eo(n),r=_l(e,n,t,a,l,o),i=Ll(),null===e||Bi?(lo&&i&&no(n),n.flags|=1,Fi(e,n,r,o),n.child):(Nl(e,n,o),Yi(e,n,o))}function Ui(e,n,t,r,o){if(null===e){var l=t.type;return"function"!=typeof l||Nr(l)||void 0!==l.defaultProps||null!==t.compare?((e=Mr(t.type,null,r,n,n.mode,o)).ref=n.ref,e.return=n,n.child=e):(n.tag=15,n.type=l,Ti(e,n,l,r,o))}if(l=e.child,!Gi(e,o)){var a=l.memoizedProps;if((t=null!==(t=t.compare)?t:Gt)(a,r)&&e.ref===n.ref)return Yi(e,n,o)}return n.flags|=1,(e=Dr(l,r)).ref=n.ref,e.return=n,n.child=e}function Ti(e,n,t,r,o){if(null!==e){var l=e.memoizedProps;if(Gt(l,r)&&e.ref===n.ref){if(Bi=!1,n.pendingProps=r=l,!Gi(e,o))return n.lanes=e.lanes,Yi(e,n,o);131072&e.flags&&(Bi=!0)}}return Oi(e,n,t,r,o)}function _i(e,n,t){var r=n.pendingProps,o=r.children,l=null!==e?e.memoizedState:null;if("hidden"===r.mode){if(128&n.flags){if(r=null!==l?l.baseLanes|t:t,null!==e){for(o=n.child=e.child,l=0;null!==o;)l=l|o.lanes|o.childLanes,o=o.sibling;n.childLanes=l&~r}else n.childLanes=0,n.child=null;return Ii(e,n,r,t)}if(!(536870912&t))return n.lanes=n.childLanes=536870912,Ii(e,n,null!==l?l.baseLanes|t:t,t);n.memoizedState={baseLanes:0,cachePool:null},null!==e&&Vo(0,null!==l?l.cachePool:null),null!==l?gl(n,l):yl(),ii(n)}else null!==l?(Vo(0,l.cachePool),gl(n,l),si(),n.memoizedState=null):(null!==e&&Vo(0,null),yl(),si());return Fi(e,n,o,t),n.child}function Ii(e,n,t,r){var o=$o();return o=null===o?null:{parent:Io._currentValue,pool:o},n.memoizedState={baseLanes:t,cachePool:o},null!==e&&Vo(0,null),yl(),ii(n),null!==e&&xo(e,n,r,!0),null}function zi(e,n){var t=n.ref;if(null===t)null!==e&&null!==e.ref&&(n.flags|=4194816);else{if("function"!=typeof t&&"object"!=typeof t)throw Error(i(284));null!==e&&e.ref===t||(n.flags|=4194816)}}function Oi(e,n,t,r,o){return Eo(n),t=_l(e,n,t,r,void 0,o),r=Ll(),null===e||Bi?(lo&&r&&no(n),n.flags|=1,Fi(e,n,t,o),n.child):(Nl(e,n,o),Yi(e,n,o))}function Li(e,n,t,r,o,l){return Eo(n),n.updateQueue=null,t=zl(n,r,t,o),Il(e),r=Ll(),null===e||Bi?(lo&&r&&no(n),n.flags|=1,Fi(e,n,t,l),n.child):(Nl(e,n,l),Yi(e,n,l))}function Ni(e,n,t,r,o){if(Eo(n),null===n.stateNode){var l=zr,a=t.contextType;"object"==typeof a&&null!==a&&(l=Bo(a)),l=new t(r,l),n.memoizedState=null!==l.state&&void 0!==l.state?l.state:null,l.updater=pi,n.stateNode=l,l._reactInternals=n,(l=n.stateNode).props=r,l.state=n.memoizedState,l.refs={},rl(n),a=t.contextType,l.context="object"==typeof a&&null!==a?Bo(a):zr,l.state=n.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(di(n,t,a,r),l.state=n.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof l.getSnapshotBeforeUpdate||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||(a=l.state,"function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount(),a!==l.state&&pi.enqueueReplaceState(l,l.state,null),fl(n,r,l,o),cl(),l.state=n.memoizedState),"function"==typeof l.componentDidMount&&(n.flags|=4194308),r=!0}else if(null===e){l=n.stateNode;var i=n.memoizedProps,s=gi(t,i);l.props=s;var u=l.context,c=t.contextType;a=zr,"object"==typeof c&&null!==c&&(a=Bo(c));var f=t.getDerivedStateFromProps;c="function"==typeof f||"function"==typeof l.getSnapshotBeforeUpdate,i=n.pendingProps!==i,c||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(i||u!==a)&&mi(n,l,r,a),tl=!1;var d=n.memoizedState;l.state=d,fl(n,r,l,o),cl(),u=n.memoizedState,i||d!==u||tl?("function"==typeof f&&(di(n,t,f,r),u=n.memoizedState),(s=tl||hi(n,t,s,r,d,u,a))?(c||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||("function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount()),"function"==typeof l.componentDidMount&&(n.flags|=4194308)):("function"==typeof l.componentDidMount&&(n.flags|=4194308),n.memoizedProps=r,n.memoizedState=u),l.props=r,l.state=u,l.context=a,r=s):("function"==typeof l.componentDidMount&&(n.flags|=4194308),r=!1)}else{l=n.stateNode,ol(e,n),c=gi(t,a=n.memoizedProps),l.props=c,f=n.pendingProps,d=l.context,u=t.contextType,s=zr,"object"==typeof u&&null!==u&&(s=Bo(u)),(u="function"==typeof(i=t.getDerivedStateFromProps)||"function"==typeof l.getSnapshotBeforeUpdate)||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(a!==f||d!==s)&&mi(n,l,r,s),tl=!1,d=n.memoizedState,l.state=d,fl(n,r,l,o),cl();var p=n.memoizedState;a!==f||d!==p||tl||null!==e&&null!==e.dependencies&&Co(e.dependencies)?("function"==typeof i&&(di(n,t,i,r),p=n.memoizedState),(c=tl||hi(n,t,c,r,d,p,s)||null!==e&&null!==e.dependencies&&Co(e.dependencies))?(u||"function"!=typeof l.UNSAFE_componentWillUpdate&&"function"!=typeof l.componentWillUpdate||("function"==typeof l.componentWillUpdate&&l.componentWillUpdate(r,p,s),"function"==typeof l.UNSAFE_componentWillUpdate&&l.UNSAFE_componentWillUpdate(r,p,s)),"function"==typeof l.componentDidUpdate&&(n.flags|=4),"function"==typeof l.getSnapshotBeforeUpdate&&(n.flags|=1024)):("function"!=typeof l.componentDidUpdate||a===e.memoizedProps&&d===e.memoizedState||(n.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||a===e.memoizedProps&&d===e.memoizedState||(n.flags|=1024),n.memoizedProps=r,n.memoizedState=p),l.props=r,l.state=p,l.context=s,r=c):("function"!=typeof l.componentDidUpdate||a===e.memoizedProps&&d===e.memoizedState||(n.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||a===e.memoizedProps&&d===e.memoizedState||(n.flags|=1024),r=!1)}return l=r,zi(e,n),r=!!(128&n.flags),l||r?(l=n.stateNode,t=r&&"function"!=typeof t.getDerivedStateFromError?null:l.render(),n.flags|=1,null!==e&&r?(n.child=ti(n,e.child,null,o),n.child=ti(n,null,t,o)):Fi(e,n,t,o),n.memoizedState=l.state,e=n.child):e=Yi(e,n,o),e}function Di(e,n,t,r){return ho(),n.flags|=256,Fi(e,n,t,r),n.child}var Ri={dehydrated:null,treeContext:null,retryLane:0,hydrationErrors:null};function Mi(e){return{baseLanes:e,cachePool:qo()}}function ji(e,n,t){return e=null!==e?e.childLanes&~t:0,n&&(e|=gu),e}function Hi(e,n,t){var r,o=n.pendingProps,l=!1,a=!!(128&n.flags);if((r=a)||(r=(null===e||null!==e.memoizedState)&&!!(2&ci.current)),r&&(l=!0,n.flags&=-129),r=!!(32&n.flags),n.flags&=-33,null===e){if(lo){if(l?ai(n):si(),lo){var s,u=oo;if(s=u){e:{for(s=u,u=io;8!==s.nodeType;){if(!u){u=null;break e}if(null===(s=vf(s.nextSibling))){u=null;break e}}u=s}null!==u?(n.memoizedState={dehydrated:u,treeContext:null!==Gr?{id:Xr,overflow:Zr}:null,retryLane:536870912,hydrationErrors:null},(s=Lr(18,null,null,0)).stateNode=u,s.return=n,n.child=s,ro=n,oo=null,s=!0):s=!1}s||uo(n)}if(null!==(u=n.memoizedState)&&null!==(u=u.dehydrated))return yf(u)?n.lanes=32:n.lanes=536870912,null;ui(n)}return u=o.children,o=o.fallback,l?(si(),u=Vi({mode:"hidden",children:u},l=n.mode),o=jr(o,l,t,null),u.return=n,o.return=n,u.sibling=o,n.child=u,(l=n.child).memoizedState=Mi(t),l.childLanes=ji(e,r,t),n.memoizedState=Ri,o):(ai(n),$i(n,u))}if(null!==(s=e.memoizedState)&&null!==(u=s.dehydrated)){if(a)256&n.flags?(ai(n),n.flags&=-257,n=qi(e,n,t)):null!==n.memoizedState?(si(),n.child=e.child,n.flags|=128,n=null):(si(),l=o.fallback,u=n.mode,o=Vi({mode:"visible",children:o.children},u),(l=jr(l,u,t,null)).flags|=2,o.return=n,l.return=n,o.sibling=l,n.child=o,ti(n,e.child,null,t),(o=n.child).memoizedState=Mi(t),o.childLanes=ji(e,r,t),n.memoizedState=Ri,n=l);else if(ai(n),yf(u)){if(r=u.nextSibling&&u.nextSibling.dataset)var c=r.dgst;r=c,(o=Error(i(419))).stack="",o.digest=r,go({value:o,source:null,stack:null}),n=qi(e,n,t)}else if(Bi||xo(e,n,t,!1),r=!!(t&e.childLanes),Bi||r){if(null!==(r=ru)&&0!==(o=(o=42&(o=t&-t)?1:Fe(o))&(r.suspendedLanes|t)?0:o)&&o!==s.retryLane)throw s.retryLane=o,Tr(e,o),Lu(r,0,o),Ei;"$?"===u.data||Qu(),n=qi(e,n,t)}else"$?"===u.data?(n.flags|=192,n.child=e.child,n=null):(e=s.treeContext,oo=vf(u.nextSibling),ro=n,lo=!0,ao=null,io=!1,null!==e&&(Kr[Yr++]=Xr,Kr[Yr++]=Zr,Kr[Yr++]=Gr,Xr=e.id,Zr=e.overflow,Gr=n),(n=$i(n,o.children)).flags|=4096);return n}return l?(si(),l=o.fallback,u=n.mode,c=(s=e.child).sibling,(o=Dr(s,{mode:"hidden",children:o.children})).subtreeFlags=65011712&s.subtreeFlags,null!==c?l=Dr(c,l):(l=jr(l,u,t,null)).flags|=2,l.return=n,o.return=n,o.sibling=l,n.child=o,o=l,l=n.child,null===(u=e.child.memoizedState)?u=Mi(t):(null!==(s=u.cachePool)?(c=Io._currentValue,s=s.parent!==c?{parent:c,pool:c}:s):s=qo(),u={baseLanes:u.baseLanes|t,cachePool:s}),l.memoizedState=u,l.childLanes=ji(e,r,t),n.memoizedState=Ri,o):(ai(n),e=(t=e.child).sibling,(t=Dr(t,{mode:"visible",children:o.children})).return=n,t.sibling=null,null!==e&&(null===(r=n.deletions)?(n.deletions=[e],n.flags|=16):r.push(e)),n.child=t,n.memoizedState=null,t)}function $i(e,n){return(n=Vi({mode:"visible",children:n},e.mode)).return=e,e.child=n}function Vi(e,n){return(e=Lr(22,e,null,n)).lanes=0,e.stateNode={_visibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null},e}function qi(e,n,t){return ti(n,e.child,null,t),(e=$i(n,n.pendingProps.children)).flags|=2,n.memoizedState=null,e}function Wi(e,n,t){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n),Ao(e.return,n,t)}function Qi(e,n,t,r,o){var l=e.memoizedState;null===l?e.memoizedState={isBackwards:n,rendering:null,renderingStartTime:0,last:r,tail:t,tailMode:o}:(l.isBackwards=n,l.rendering=null,l.renderingStartTime=0,l.last=r,l.tail=t,l.tailMode=o)}function Ki(e,n,t){var r=n.pendingProps,o=r.revealOrder,l=r.tail;if(Fi(e,n,r.children,t),2&(r=ci.current))r=1&r|2,n.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=n.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Wi(e,t,n);else if(19===e.tag)Wi(e,t,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}switch(j(ci,r),o){case"forwards":for(t=n.child,o=null;null!==t;)null!==(e=t.alternate)&&null===fi(e)&&(o=t),t=t.sibling;null===(t=o)?(o=n.child,n.child=null):(o=t.sibling,t.sibling=null),Qi(n,!1,o,t,l);break;case"backwards":for(t=null,o=n.child,n.child=null;null!==o;){if(null!==(e=o.alternate)&&null===fi(e)){n.child=o;break}e=o.sibling,o.sibling=t,t=o,o=e}Qi(n,!0,t,null,l);break;case"together":Qi(n,!1,null,null,void 0);break;default:n.memoizedState=null}return n.child}function Yi(e,n,t){if(null!==e&&(n.dependencies=e.dependencies),pu|=n.lanes,!(t&n.childLanes)){if(null===e)return null;if(xo(e,n,t,!1),!(t&n.childLanes))return null}if(null!==e&&n.child!==e.child)throw Error(i(153));if(null!==n.child){for(t=Dr(e=n.child,e.pendingProps),n.child=t,t.return=n;null!==e.sibling;)e=e.sibling,(t=t.sibling=Dr(e,e.pendingProps)).return=n;t.sibling=null}return n.child}function Gi(e,n){return!!(e.lanes&n)||!(null===(e=e.dependencies)||!Co(e))}function Xi(e,n,t){if(null!==e)if(e.memoizedProps!==n.pendingProps)Bi=!0;else{if(!(Gi(e,t)||128&n.flags))return Bi=!1,function(e,n,t){switch(n.tag){case 3:W(n,n.stateNode.containerInfo),wo(0,Io,e.memoizedState.cache),ho();break;case 27:case 5:K(n);break;case 4:W(n,n.stateNode.containerInfo);break;case 10:wo(0,n.type,n.memoizedProps.value);break;case 13:var r=n.memoizedState;if(null!==r)return null!==r.dehydrated?(ai(n),n.flags|=128,null):t&n.child.childLanes?Hi(e,n,t):(ai(n),null!==(e=Yi(e,n,t))?e.sibling:null);ai(n);break;case 19:var o=!!(128&e.flags);if((r=!!(t&n.childLanes))||(xo(e,n,t,!1),r=!!(t&n.childLanes)),o){if(r)return Ki(e,n,t);n.flags|=128}if(null!==(o=n.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),j(ci,ci.current),r)break;return null;case 22:case 23:return n.lanes=0,_i(e,n,t);case 24:wo(0,Io,e.memoizedState.cache)}return Yi(e,n,t)}(e,n,t);Bi=!!(131072&e.flags)}else Bi=!1,lo&&1048576&n.flags&&eo(n,Qr,n.index);switch(n.lanes=0,n.tag){case 16:e:{e=n.pendingProps;var r=n.elementType,o=r._init;if(r=o(r._payload),n.type=r,"function"!=typeof r){if(null!=r){if((o=r.$$typeof)===A){n.tag=11,n=Pi(null,n,r,e,t);break e}if(o===C){n.tag=14,n=Ui(null,n,r,e,t);break e}}throw n=_(r)||r,Error(i(306,n,""))}Nr(r)?(e=gi(r,e),n.tag=1,n=Ni(null,n,r,e,t)):(n.tag=0,n=Oi(null,n,r,e,t))}return n;case 0:return Oi(e,n,n.type,n.pendingProps,t);case 1:return Ni(e,n,r=n.type,o=gi(r,n.pendingProps),t);case 3:e:{if(W(n,n.stateNode.containerInfo),null===e)throw Error(i(387));r=n.pendingProps;var l=n.memoizedState;o=l.element,ol(e,n),fl(n,r,null,t);var a=n.memoizedState;if(r=a.cache,wo(0,Io,r),r!==l.cache&&So(n,[Io],t,!0),cl(),r=a.element,l.isDehydrated){if(l={element:r,isDehydrated:!1,cache:a.cache},n.updateQueue.baseState=l,n.memoizedState=l,256&n.flags){n=Di(e,n,r,t);break e}if(r!==o){go(o=xr(Error(i(424)),n)),n=Di(e,n,r,t);break e}for(e=9===(e=n.stateNode.containerInfo).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e,oo=vf(e.firstChild),ro=n,lo=!0,ao=null,io=!0,t=ri(n,null,r,t),n.child=t;t;)t.flags=-3&t.flags|4096,t=t.sibling}else{if(ho(),r===o){n=Yi(e,n,t);break e}Fi(e,n,r,t)}n=n.child}return n;case 26:return zi(e,n),null===e?(t=Pf(n.type,null,n.pendingProps,null))?n.memoizedState=t:lo||(t=n.type,e=n.pendingProps,(r=rf(V.current).createElement(t))[_e]=n,r[Ie]=e,ef(r,t,e),qe(r),n.stateNode=r):n.memoizedState=Pf(n.type,e.memoizedProps,n.pendingProps,e.memoizedState),null;case 27:return K(n),null===e&&lo&&(r=n.stateNode=kf(n.type,n.pendingProps,V.current),ro=n,io=!0,o=oo,hf(n.type)?(bf=o,oo=vf(r.firstChild)):oo=o),Fi(e,n,n.pendingProps.children,t),zi(e,n),null===e&&(n.flags|=4194304),n.child;case 5:return null===e&&lo&&((o=r=oo)&&(null!==(r=function(e,n,t,r){for(;1===e.nodeType;){var o=t;if(e.nodeName.toLowerCase()!==n.toLowerCase()){if(!r&&("INPUT"!==e.nodeName||"hidden"!==e.type))break}else if(r){if(!e[Re])switch(n){case"meta":if(!e.hasAttribute("itemprop"))break;return e;case"link":if("stylesheet"===(l=e.getAttribute("rel"))&&e.hasAttribute("data-precedence"))break;if(l!==o.rel||e.getAttribute("href")!==(null==o.href||""===o.href?null:o.href)||e.getAttribute("crossorigin")!==(null==o.crossOrigin?null:o.crossOrigin)||e.getAttribute("title")!==(null==o.title?null:o.title))break;return e;case"style":if(e.hasAttribute("data-precedence"))break;return e;case"script":if(((l=e.getAttribute("src"))!==(null==o.src?null:o.src)||e.getAttribute("type")!==(null==o.type?null:o.type)||e.getAttribute("crossorigin")!==(null==o.crossOrigin?null:o.crossOrigin))&&l&&e.hasAttribute("async")&&!e.hasAttribute("itemprop"))break;return e;default:return e}}else{if("input"!==n||"hidden"!==e.type)return e;var l=null==o.name?null:""+o.name;if("hidden"===o.type&&e.getAttribute("name")===l)return e}if(null===(e=vf(e.nextSibling)))break}return null}(r,n.type,n.pendingProps,io))?(n.stateNode=r,ro=n,oo=vf(r.firstChild),io=!1,o=!0):o=!1),o||uo(n)),K(n),o=n.type,l=n.pendingProps,a=null!==e?e.memoizedProps:null,r=l.children,af(o,l)?r=null:null!==a&&af(o,a)&&(n.flags|=32),null!==n.memoizedState&&(o=_l(e,n,Ol,null,null,t),Yf._currentValue=o),zi(e,n),Fi(e,n,r,t),n.child;case 6:return null===e&&lo&&((e=t=oo)&&(null!==(t=function(e,n,t){if(""===n)return null;for(;3!==e.nodeType;){if((1!==e.nodeType||"INPUT"!==e.nodeName||"hidden"!==e.type)&&!t)return null;if(null===(e=vf(e.nextSibling)))return null}return e}(t,n.pendingProps,io))?(n.stateNode=t,ro=n,oo=null,e=!0):e=!1),e||uo(n)),null;case 13:return Hi(e,n,t);case 4:return W(n,n.stateNode.containerInfo),r=n.pendingProps,null===e?n.child=ti(n,null,r,t):Fi(e,n,r,t),n.child;case 11:return Pi(e,n,n.type,n.pendingProps,t);case 7:return Fi(e,n,n.pendingProps,t),n.child;case 8:case 12:return Fi(e,n,n.pendingProps.children,t),n.child;case 10:return r=n.pendingProps,wo(0,n.type,r.value),Fi(e,n,r.children,t),n.child;case 9:return o=n.type._context,r=n.pendingProps.children,Eo(n),r=r(o=Bo(o)),n.flags|=1,Fi(e,n,r,t),n.child;case 14:return Ui(e,n,n.type,n.pendingProps,t);case 15:return Ti(e,n,n.type,n.pendingProps,t);case 19:return Ki(e,n,t);case 31:return r=n.pendingProps,t=n.mode,r={mode:r.mode,children:r.children},null===e?((t=Vi(r,t)).ref=n.ref,n.child=t,t.return=n,n=t):((t=Dr(e.child,r)).ref=n.ref,n.child=t,t.return=n,n=t),n;case 22:return _i(e,n,t);case 24:return Eo(n),r=Bo(Io),null===e?(null===(o=$o())&&(o=ru,l=zo(),o.pooledCache=l,l.refCount++,null!==l&&(o.pooledCacheLanes|=t),o=l),n.memoizedState={parent:r,cache:o},rl(n),wo(0,Io,o)):(!!(e.lanes&t)&&(ol(e,n),fl(n,null,null,t),cl()),o=e.memoizedState,l=n.memoizedState,o.parent!==r?(o={parent:r,cache:r},n.memoizedState=o,0===n.lanes&&(n.memoizedState=n.updateQueue.baseState=o),wo(0,Io,r)):(r=l.cache,wo(0,Io,r),r!==o.cache&&So(n,[Io],t,!0))),Fi(e,n,n.pendingProps.children,t),n.child;case 29:throw n.pendingProps}throw Error(i(156,n.tag))}function Zi(e){e.flags|=4}function Ji(e,n){if("stylesheet"!==n.type||4&n.state.loading)e.flags&=-16777217;else if(e.flags|=16777216,!Hf(n)){if(null!==(n=oi.current)&&((4194048&lu)===lu?null!==li:(62914560&lu)!==lu&&!(536870912&lu)||n!==li))throw Jo=Yo,Qo;e.flags|=8192}}function es(e,n){null!==n&&(e.flags|=4),16384&e.flags&&(n=22!==e.tag?Se():536870912,e.lanes|=n,yu|=n)}function ns(e,n){if(!lo)switch(e.tailMode){case"hidden":n=e.tail;for(var t=null;null!==n;)null!==n.alternate&&(t=n),n=n.sibling;null===t?e.tail=null:t.sibling=null;break;case"collapsed":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?n||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ts(e){var n=null!==e.alternate&&e.alternate.child===e.child,t=0,r=0;if(n)for(var o=e.child;null!==o;)t|=o.lanes|o.childLanes,r|=65011712&o.subtreeFlags,r|=65011712&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)t|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=t,n}function rs(e,n,t){var r=n.pendingProps;switch(to(n),n.tag){case 31:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:case 1:return ts(n),null;case 3:return t=n.stateNode,r=null,null!==e&&(r=e.memoizedState.cache),n.memoizedState.cache!==r&&(n.flags|=2048),ko(Io),Q(),t.pendingContext&&(t.context=t.pendingContext,t.pendingContext=null),null!==e&&null!==e.child||(po(n)?Zi(n):null===e||e.memoizedState.isDehydrated&&!(256&n.flags)||(n.flags|=1024,mo())),ts(n),null;case 26:return t=n.memoizedState,null===e?(Zi(n),null!==t?(ts(n),Ji(n,t)):(ts(n),n.flags&=-16777217)):t?t!==e.memoizedState?(Zi(n),ts(n),Ji(n,t)):(ts(n),n.flags&=-16777217):(e.memoizedProps!==r&&Zi(n),ts(n),n.flags&=-16777217),null;case 27:Y(n),t=V.current;var o=n.type;if(null!==e&&null!=n.stateNode)e.memoizedProps!==r&&Zi(n);else{if(!r){if(null===n.stateNode)throw Error(i(166));return ts(n),null}e=H.current,po(n)?co(n):(e=kf(o,r,t),n.stateNode=e,Zi(n))}return ts(n),null;case 5:if(Y(n),t=n.type,null!==e&&null!=n.stateNode)e.memoizedProps!==r&&Zi(n);else{if(!r){if(null===n.stateNode)throw Error(i(166));return ts(n),null}if(e=H.current,po(n))co(n);else{switch(o=rf(V.current),e){case 1:e=o.createElementNS("http://www.w3.org/2000/svg",t);break;case 2:e=o.createElementNS("http://www.w3.org/1998/Math/MathML",t);break;default:switch(t){case"svg":e=o.createElementNS("http://www.w3.org/2000/svg",t);break;case"math":e=o.createElementNS("http://www.w3.org/1998/Math/MathML",t);break;case"script":(e=o.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild);break;case"select":e="string"==typeof r.is?o.createElement("select",{is:r.is}):o.createElement("select"),r.multiple?e.multiple=!0:r.size&&(e.size=r.size);break;default:e="string"==typeof r.is?o.createElement(t,{is:r.is}):o.createElement(t)}}e[_e]=n,e[Ie]=r;e:for(o=n.child;null!==o;){if(5===o.tag||6===o.tag)e.appendChild(o.stateNode);else if(4!==o.tag&&27!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===n)break e;for(;null===o.sibling;){if(null===o.return||o.return===n)break e;o=o.return}o.sibling.return=o.return,o=o.sibling}n.stateNode=e;e:switch(ef(e,t,r),t){case"button":case"input":case"select":case"textarea":e=!!r.autoFocus;break e;case"img":e=!0;break e;default:e=!1}e&&Zi(n)}}return ts(n),n.flags&=-16777217,null;case 6:if(e&&null!=n.stateNode)e.memoizedProps!==r&&Zi(n);else{if("string"!=typeof r&&null===n.stateNode)throw Error(i(166));if(e=V.current,po(n)){if(e=n.stateNode,t=n.memoizedProps,r=null,null!==(o=ro))switch(o.tag){case 27:case 5:r=o.memoizedProps}e[_e]=n,(e=!!(e.nodeValue===t||null!==r&&!0===r.suppressHydrationWarning||Gc(e.nodeValue,t)))||uo(n)}else(e=rf(e).createTextNode(r))[_e]=n,n.stateNode=e}return ts(n),null;case 13:if(r=n.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(o=po(n),null!==r&&null!==r.dehydrated){if(null===e){if(!o)throw Error(i(318));if(!(o=null!==(o=n.memoizedState)?o.dehydrated:null))throw Error(i(317));o[_e]=n}else ho(),!(128&n.flags)&&(n.memoizedState=null),n.flags|=4;ts(n),o=!1}else o=mo(),null!==e&&null!==e.memoizedState&&(e.memoizedState.hydrationErrors=o),o=!0;if(!o)return 256&n.flags?(ui(n),n):(ui(n),null)}if(ui(n),128&n.flags)return n.lanes=t,n;if(t=null!==r,e=null!==e&&null!==e.memoizedState,t){o=null,null!==(r=n.child).alternate&&null!==r.alternate.memoizedState&&null!==r.alternate.memoizedState.cachePool&&(o=r.alternate.memoizedState.cachePool.pool);var l=null;null!==r.memoizedState&&null!==r.memoizedState.cachePool&&(l=r.memoizedState.cachePool.pool),l!==o&&(r.flags|=2048)}return t!==e&&t&&(n.child.flags|=8192),es(n,n.updateQueue),ts(n),null;case 4:return Q(),null===e&&Mc(n.stateNode.containerInfo),ts(n),null;case 10:return ko(n.type),ts(n),null;case 19:if(M(ci),null===(o=n.memoizedState))return ts(n),null;if(r=!!(128&n.flags),null===(l=o.rendering))if(r)ns(o,!1);else{if(0!==du||null!==e&&128&e.flags)for(e=n.child;null!==e;){if(null!==(l=fi(e))){for(n.flags|=128,ns(o,!1),e=l.updateQueue,n.updateQueue=e,es(n,e),n.subtreeFlags=0,e=t,t=n.child;null!==t;)Rr(t,e),t=t.sibling;return j(ci,1&ci.current|2),n.child}e=e.sibling}null!==o.tail&&ne()>Au&&(n.flags|=128,r=!0,ns(o,!1),n.lanes=4194304)}else{if(!r)if(null!==(e=fi(l))){if(n.flags|=128,r=!0,e=e.updateQueue,n.updateQueue=e,es(n,e),ns(o,!0),null===o.tail&&"hidden"===o.tailMode&&!l.alternate&&!lo)return ts(n),null}else 2*ne()-o.renderingStartTime>Au&&536870912!==t&&(n.flags|=128,r=!0,ns(o,!1),n.lanes=4194304);o.isBackwards?(l.sibling=n.child,n.child=l):(null!==(e=o.last)?e.sibling=l:n.child=l,o.last=l)}return null!==o.tail?(n=o.tail,o.rendering=n,o.tail=n.sibling,o.renderingStartTime=ne(),n.sibling=null,e=ci.current,j(ci,r?1&e|2:1&e),n):(ts(n),null);case 22:case 23:return ui(n),vl(),r=null!==n.memoizedState,null!==e?null!==e.memoizedState!==r&&(n.flags|=8192):r&&(n.flags|=8192),r?!!(536870912&t)&&!(128&n.flags)&&(ts(n),6&n.subtreeFlags&&(n.flags|=8192)):ts(n),null!==(t=n.updateQueue)&&es(n,t.retryQueue),t=null,null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(t=e.memoizedState.cachePool.pool),r=null,null!==n.memoizedState&&null!==n.memoizedState.cachePool&&(r=n.memoizedState.cachePool.pool),r!==t&&(n.flags|=2048),null!==e&&M(Ho),null;case 24:return t=null,null!==e&&(t=e.memoizedState.cache),n.memoizedState.cache!==t&&(n.flags|=2048),ko(Io),ts(n),null;case 25:case 30:return null}throw Error(i(156,n.tag))}function os(e,n){switch(to(n),n.tag){case 1:return 65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 3:return ko(Io),Q(),65536&(e=n.flags)&&!(128&e)?(n.flags=-65537&e|128,n):null;case 26:case 27:case 5:return Y(n),null;case 13:if(ui(n),null!==(e=n.memoizedState)&&null!==e.dehydrated){if(null===n.alternate)throw Error(i(340));ho()}return 65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 19:return M(ci),null;case 4:return Q(),null;case 10:return ko(n.type),null;case 22:case 23:return ui(n),vl(),null!==e&&M(Ho),65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 24:return ko(Io),null;default:return null}}function ls(e,n){switch(to(n),n.tag){case 3:ko(Io),Q();break;case 26:case 27:case 5:Y(n);break;case 4:Q();break;case 13:ui(n);break;case 19:M(ci);break;case 10:ko(n.type);break;case 22:case 23:ui(n),vl(),null!==e&&M(Ho);break;case 24:ko(Io)}}function as(e,n){try{var t=n.updateQueue,r=null!==t?t.lastEffect:null;if(null!==r){var o=r.next;t=o;do{if((t.tag&e)===e){r=void 0;var l=t.create,a=t.inst;r=l(),a.destroy=r}t=t.next}while(t!==o)}}catch(e){cc(n,n.return,e)}}function is(e,n,t){try{var r=n.updateQueue,o=null!==r?r.lastEffect:null;if(null!==o){var l=o.next;r=l;do{if((r.tag&e)===e){var a=r.inst,i=a.destroy;if(void 0!==i){a.destroy=void 0,o=n;var s=t,u=i;try{u()}catch(e){cc(o,s,e)}}}r=r.next}while(r!==l)}}catch(e){cc(n,n.return,e)}}function ss(e){var n=e.updateQueue;if(null!==n){var t=e.stateNode;try{pl(n,t)}catch(n){cc(e,e.return,n)}}}function us(e,n,t){t.props=gi(e.type,e.memoizedProps),t.state=e.memoizedState;try{t.componentWillUnmount()}catch(t){cc(e,n,t)}}function cs(e,n){try{var t=e.ref;if(null!==t){switch(e.tag){case 26:case 27:case 5:var r=e.stateNode;break;default:r=e.stateNode}"function"==typeof t?e.refCleanup=t(r):t.current=r}}catch(t){cc(e,n,t)}}function fs(e,n){var t=e.ref,r=e.refCleanup;if(null!==t)if("function"==typeof r)try{r()}catch(t){cc(e,n,t)}finally{e.refCleanup=null,null!=(e=e.alternate)&&(e.refCleanup=null)}else if("function"==typeof t)try{t(null)}catch(t){cc(e,n,t)}else t.current=null}function ds(e){var n=e.type,t=e.memoizedProps,r=e.stateNode;try{e:switch(n){case"button":case"input":case"select":case"textarea":t.autoFocus&&r.focus();break e;case"img":t.src?r.src=t.src:t.srcSet&&(r.srcset=t.srcSet)}}catch(n){cc(e,e.return,n)}}function ps(e,n,t){try{var r=e.stateNode;!function(e,n,t,r){switch(n){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var o=null,l=null,a=null,s=null,u=null,c=null,f=null;for(h in t){var d=t[h];if(t.hasOwnProperty(h)&&null!=d)switch(h){case"checked":case"value":break;case"defaultValue":u=d;default:r.hasOwnProperty(h)||Zc(e,n,h,null,r,d)}}for(var p in r){var h=r[p];if(d=t[p],r.hasOwnProperty(p)&&(null!=h||null!=d))switch(p){case"type":l=h;break;case"name":o=h;break;case"checked":c=h;break;case"defaultChecked":f=h;break;case"value":a=h;break;case"defaultValue":s=h;break;case"children":case"dangerouslySetInnerHTML":if(null!=h)throw Error(i(137,n));break;default:h!==d&&Zc(e,n,p,h,r,d)}}return void yn(e,a,s,u,c,f,l,o);case"select":for(l in h=a=s=p=null,t)if(u=t[l],t.hasOwnProperty(l)&&null!=u)switch(l){case"value":break;case"multiple":h=u;default:r.hasOwnProperty(l)||Zc(e,n,l,null,r,u)}for(o in r)if(l=r[o],u=t[o],r.hasOwnProperty(o)&&(null!=l||null!=u))switch(o){case"value":p=l;break;case"defaultValue":s=l;break;case"multiple":a=l;default:l!==u&&Zc(e,n,o,l,r,u)}return n=s,t=a,r=h,void(null!=p?wn(e,!!t,p,!1):!!r!=!!t&&(null!=n?wn(e,!!t,n,!0):wn(e,!!t,t?[]:"",!1)));case"textarea":for(s in h=p=null,t)if(o=t[s],t.hasOwnProperty(s)&&null!=o&&!r.hasOwnProperty(s))switch(s){case"value":case"children":break;default:Zc(e,n,s,null,r,o)}for(a in r)if(o=r[a],l=t[a],r.hasOwnProperty(a)&&(null!=o||null!=l))switch(a){case"value":p=o;break;case"defaultValue":h=o;break;case"children":break;case"dangerouslySetInnerHTML":if(null!=o)throw Error(i(91));break;default:o!==l&&Zc(e,n,a,o,r,l)}return void kn(e,p,h);case"option":for(var m in t)p=t[m],t.hasOwnProperty(m)&&null!=p&&!r.hasOwnProperty(m)&&("selected"===m?e.selected=!1:Zc(e,n,m,null,r,p));for(u in r)p=r[u],h=t[u],!r.hasOwnProperty(u)||p===h||null==p&&null==h||("selected"===u?e.selected=p&&"function"!=typeof p&&"symbol"!=typeof p:Zc(e,n,u,p,r,h));return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var g in t)p=t[g],t.hasOwnProperty(g)&&null!=p&&!r.hasOwnProperty(g)&&Zc(e,n,g,null,r,p);for(c in r)if(p=r[c],h=t[c],r.hasOwnProperty(c)&&p!==h&&(null!=p||null!=h))switch(c){case"children":case"dangerouslySetInnerHTML":if(null!=p)throw Error(i(137,n));break;default:Zc(e,n,c,p,r,h)}return;default:if(Bn(n)){for(var y in t)p=t[y],t.hasOwnProperty(y)&&void 0!==p&&!r.hasOwnProperty(y)&&Jc(e,n,y,void 0,r,p);for(f in r)p=r[f],h=t[f],!r.hasOwnProperty(f)||p===h||void 0===p&&void 0===h||Jc(e,n,f,p,r,h);return}}for(var v in t)p=t[v],t.hasOwnProperty(v)&&null!=p&&!r.hasOwnProperty(v)&&Zc(e,n,v,null,r,p);for(d in r)p=r[d],h=t[d],!r.hasOwnProperty(d)||p===h||null==p&&null==h||Zc(e,n,d,p,r,h)}(r,e.type,t,n),r[Ie]=n}catch(n){cc(e,e.return,n)}}function hs(e){return 5===e.tag||3===e.tag||26===e.tag||27===e.tag&&hf(e.type)||4===e.tag}function ms(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||hs(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(27===e.tag&&hf(e.type))continue e;if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function gs(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?(9===t.nodeType?t.body:"HTML"===t.nodeName?t.ownerDocument.body:t).insertBefore(e,n):((n=9===t.nodeType?t.body:"HTML"===t.nodeName?t.ownerDocument.body:t).appendChild(e),null!=(t=t._reactRootContainer)||null!==n.onclick||(n.onclick=Xc));else if(4!==r&&(27===r&&hf(e.type)&&(t=e.stateNode,n=null),null!==(e=e.child)))for(gs(e,n,t),e=e.sibling;null!==e;)gs(e,n,t),e=e.sibling}function ys(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?t.insertBefore(e,n):t.appendChild(e);else if(4!==r&&(27===r&&hf(e.type)&&(t=e.stateNode),null!==(e=e.child)))for(ys(e,n,t),e=e.sibling;null!==e;)ys(e,n,t),e=e.sibling}function vs(e){var n=e.stateNode,t=e.memoizedProps;try{for(var r=e.type,o=n.attributes;o.length;)n.removeAttributeNode(o[0]);ef(n,r,t),n[_e]=e,n[Ie]=t}catch(n){cc(e,e.return,n)}}var bs=!1,ws=!1,ks=!1,As="function"==typeof WeakSet?WeakSet:Set,Ss=null;function xs(e,n,t){var r=t.flags;switch(t.tag){case 0:case 11:case 15:Ns(e,t),4&r&&as(5,t);break;case 1:if(Ns(e,t),4&r)if(e=t.stateNode,null===n)try{e.componentDidMount()}catch(e){cc(t,t.return,e)}else{var o=gi(t.type,n.memoizedProps);n=n.memoizedState;try{e.componentDidUpdate(o,n,e.__reactInternalSnapshotBeforeUpdate)}catch(e){cc(t,t.return,e)}}64&r&&ss(t),512&r&&cs(t,t.return);break;case 3:if(Ns(e,t),64&r&&null!==(e=t.updateQueue)){if(n=null,null!==t.child)switch(t.child.tag){case 27:case 5:case 1:n=t.child.stateNode}try{pl(e,n)}catch(e){cc(t,t.return,e)}}break;case 27:null===n&&4&r&&vs(t);case 26:case 5:Ns(e,t),null===n&&4&r&&ds(t),512&r&&cs(t,t.return);break;case 12:Ns(e,t);break;case 13:Ns(e,t),4&r&&Us(e,t),64&r&&null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)&&function(e,n){var t=e.ownerDocument;if("$?"!==e.data||"complete"===t.readyState)n();else{var r=function(){n(),t.removeEventListener("DOMContentLoaded",r)};t.addEventListener("DOMContentLoaded",r),e._reactRetry=r}}(e,t=hc.bind(null,t));break;case 22:if(!(r=null!==t.memoizedState||bs)){n=null!==n&&null!==n.memoizedState||ws,o=bs;var l=ws;bs=r,(ws=n)&&!l?Rs(e,t,!!(8772&t.subtreeFlags)):Ns(e,t),bs=o,ws=l}break;case 30:break;default:Ns(e,t)}}function Cs(e){var n=e.alternate;null!==n&&(e.alternate=null,Cs(n)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(n=e.stateNode)&&Me(n),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}var Es=null,Bs=!1;function Fs(e,n,t){for(t=t.child;null!==t;)Ps(e,n,t),t=t.sibling}function Ps(e,n,t){if(fe&&"function"==typeof fe.onCommitFiberUnmount)try{fe.onCommitFiberUnmount(ce,t)}catch(e){}switch(t.tag){case 26:ws||fs(t,n),Fs(e,n,t),t.memoizedState?t.memoizedState.count--:t.stateNode&&(t=t.stateNode).parentNode.removeChild(t);break;case 27:ws||fs(t,n);var r=Es,o=Bs;hf(t.type)&&(Es=t.stateNode,Bs=!1),Fs(e,n,t),Af(t.stateNode),Es=r,Bs=o;break;case 5:ws||fs(t,n);case 6:if(r=Es,o=Bs,Es=null,Fs(e,n,t),Bs=o,null!==(Es=r))if(Bs)try{(9===Es.nodeType?Es.body:"HTML"===Es.nodeName?Es.ownerDocument.body:Es).removeChild(t.stateNode)}catch(e){cc(t,n,e)}else try{Es.removeChild(t.stateNode)}catch(e){cc(t,n,e)}break;case 18:null!==Es&&(Bs?(mf(9===(e=Es).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e,t.stateNode),Ed(e)):mf(Es,t.stateNode));break;case 4:r=Es,o=Bs,Es=t.stateNode.containerInfo,Bs=!0,Fs(e,n,t),Es=r,Bs=o;break;case 0:case 11:case 14:case 15:ws||is(2,t,n),ws||is(4,t,n),Fs(e,n,t);break;case 1:ws||(fs(t,n),"function"==typeof(r=t.stateNode).componentWillUnmount&&us(t,n,r)),Fs(e,n,t);break;case 21:Fs(e,n,t);break;case 22:ws=(r=ws)||null!==t.memoizedState,Fs(e,n,t),ws=r;break;default:Fs(e,n,t)}}function Us(e,n){if(null===n.memoizedState&&null!==(e=n.alternate)&&null!==(e=e.memoizedState)&&null!==(e=e.dehydrated))try{Ed(e)}catch(e){cc(n,n.return,e)}}function Ts(e,n){var t=function(e){switch(e.tag){case 13:case 19:var n=e.stateNode;return null===n&&(n=e.stateNode=new As),n;case 22:return null===(n=(e=e.stateNode)._retryCache)&&(n=e._retryCache=new As),n;default:throw Error(i(435,e.tag))}}(e);n.forEach((function(n){var r=mc.bind(null,e,n);t.has(n)||(t.add(n),n.then(r,r))}))}function _s(e,n){var t=n.deletions;if(null!==t)for(var r=0;r<t.length;r++){var o=t[r],l=e,a=n,s=a;e:for(;null!==s;){switch(s.tag){case 27:if(hf(s.type)){Es=s.stateNode,Bs=!1;break e}break;case 5:Es=s.stateNode,Bs=!1;break e;case 3:case 4:Es=s.stateNode.containerInfo,Bs=!0;break e}s=s.return}if(null===Es)throw Error(i(160));Ps(l,a,o),Es=null,Bs=!1,null!==(l=o.alternate)&&(l.return=null),o.return=null}if(13878&n.subtreeFlags)for(n=n.child;null!==n;)zs(n,e),n=n.sibling}var Is=null;function zs(e,n){var t=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:_s(n,e),Os(e),4&r&&(is(3,e,e.return),as(3,e),is(5,e,e.return));break;case 1:_s(n,e),Os(e),512&r&&(ws||null===t||fs(t,t.return)),64&r&&bs&&null!==(e=e.updateQueue)&&null!==(r=e.callbacks)&&(t=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=null===t?r:t.concat(r));break;case 26:var o=Is;if(_s(n,e),Os(e),512&r&&(ws||null===t||fs(t,t.return)),4&r){var l=null!==t?t.memoizedState:null;if(r=e.memoizedState,null===t)if(null===r)if(null===e.stateNode){e:{r=e.type,t=e.memoizedProps,o=o.ownerDocument||o;n:switch(r){case"title":(!(l=o.getElementsByTagName("title")[0])||l[Re]||l[_e]||"http://www.w3.org/2000/svg"===l.namespaceURI||l.hasAttribute("itemprop"))&&(l=o.createElement(r),o.head.insertBefore(l,o.querySelector("head > title"))),ef(l,r,t),l[_e]=e,qe(l),r=l;break e;case"link":var a=Mf("link","href",o).get(r+(t.href||""));if(a)for(var s=0;s<a.length;s++)if((l=a[s]).getAttribute("href")===(null==t.href||""===t.href?null:t.href)&&l.getAttribute("rel")===(null==t.rel?null:t.rel)&&l.getAttribute("title")===(null==t.title?null:t.title)&&l.getAttribute("crossorigin")===(null==t.crossOrigin?null:t.crossOrigin)){a.splice(s,1);break n}ef(l=o.createElement(r),r,t),o.head.appendChild(l);break;case"meta":if(a=Mf("meta","content",o).get(r+(t.content||"")))for(s=0;s<a.length;s++)if((l=a[s]).getAttribute("content")===(null==t.content?null:""+t.content)&&l.getAttribute("name")===(null==t.name?null:t.name)&&l.getAttribute("property")===(null==t.property?null:t.property)&&l.getAttribute("http-equiv")===(null==t.httpEquiv?null:t.httpEquiv)&&l.getAttribute("charset")===(null==t.charSet?null:t.charSet)){a.splice(s,1);break n}ef(l=o.createElement(r),r,t),o.head.appendChild(l);break;default:throw Error(i(468,r))}l[_e]=e,qe(l),r=l}e.stateNode=r}else jf(o,e.type,e.stateNode);else e.stateNode=Of(o,r,e.memoizedProps);else l!==r?(null===l?null!==t.stateNode&&(t=t.stateNode).parentNode.removeChild(t):l.count--,null===r?jf(o,e.type,e.stateNode):Of(o,r,e.memoizedProps)):null===r&&null!==e.stateNode&&ps(e,e.memoizedProps,t.memoizedProps)}break;case 27:_s(n,e),Os(e),512&r&&(ws||null===t||fs(t,t.return)),null!==t&&4&r&&ps(e,e.memoizedProps,t.memoizedProps);break;case 5:if(_s(n,e),Os(e),512&r&&(ws||null===t||fs(t,t.return)),32&e.flags){o=e.stateNode;try{Sn(o,"")}catch(n){cc(e,e.return,n)}}4&r&&null!=e.stateNode&&ps(e,o=e.memoizedProps,null!==t?t.memoizedProps:o),1024&r&&(ks=!0);break;case 6:if(_s(n,e),Os(e),4&r){if(null===e.stateNode)throw Error(i(162));r=e.memoizedProps,t=e.stateNode;try{t.nodeValue=r}catch(n){cc(e,e.return,n)}}break;case 3:if(Rf=null,o=Is,Is=Cf(n.containerInfo),_s(n,e),Is=o,Os(e),4&r&&null!==t&&t.memoizedState.isDehydrated)try{Ed(n.containerInfo)}catch(n){cc(e,e.return,n)}ks&&(ks=!1,Ls(e));break;case 4:r=Is,Is=Cf(e.stateNode.containerInfo),_s(n,e),Os(e),Is=r;break;case 12:default:_s(n,e),Os(e);break;case 13:_s(n,e),Os(e),8192&e.child.flags&&null!==e.memoizedState!=(null!==t&&null!==t.memoizedState)&&(ku=ne()),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,Ts(e,r));break;case 22:o=null!==e.memoizedState;var u=null!==t&&null!==t.memoizedState,c=bs,f=ws;if(bs=c||o,ws=f||u,_s(n,e),ws=f,bs=c,Os(e),8192&r)e:for(n=e.stateNode,n._visibility=o?-2&n._visibility:1|n._visibility,o&&(null===t||u||bs||ws||Ds(e)),t=null,n=e;;){if(5===n.tag||26===n.tag){if(null===t){u=t=n;try{if(l=u.stateNode,o)"function"==typeof(a=l.style).setProperty?a.setProperty("display","none","important"):a.display="none";else{s=u.stateNode;var d=u.memoizedProps.style,p=null!=d&&d.hasOwnProperty("display")?d.display:null;s.style.display=null==p||"boolean"==typeof p?"":(""+p).trim()}}catch(e){cc(u,u.return,e)}}}else if(6===n.tag){if(null===t){u=n;try{u.stateNode.nodeValue=o?"":u.memoizedProps}catch(e){cc(u,u.return,e)}}}else if((22!==n.tag&&23!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break e;for(;null===n.sibling;){if(null===n.return||n.return===e)break e;t===n&&(t=null),n=n.return}t===n&&(t=null),n.sibling.return=n.return,n=n.sibling}4&r&&null!==(r=e.updateQueue)&&null!==(t=r.retryQueue)&&(r.retryQueue=null,Ts(e,t));break;case 19:_s(n,e),Os(e),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,Ts(e,r));case 30:case 21:}}function Os(e){var n=e.flags;if(2&n){try{for(var t,r=e.return;null!==r;){if(hs(r)){t=r;break}r=r.return}if(null==t)throw Error(i(160));switch(t.tag){case 27:var o=t.stateNode;ys(e,ms(e),o);break;case 5:var l=t.stateNode;32&t.flags&&(Sn(l,""),t.flags&=-33),ys(e,ms(e),l);break;case 3:case 4:var a=t.stateNode.containerInfo;gs(e,ms(e),a);break;default:throw Error(i(161))}}catch(n){cc(e,e.return,n)}e.flags&=-3}4096&n&&(e.flags&=-4097)}function Ls(e){if(1024&e.subtreeFlags)for(e=e.child;null!==e;){var n=e;Ls(n),5===n.tag&&1024&n.flags&&n.stateNode.reset(),e=e.sibling}}function Ns(e,n){if(8772&n.subtreeFlags)for(n=n.child;null!==n;)xs(e,n.alternate,n),n=n.sibling}function Ds(e){for(e=e.child;null!==e;){var n=e;switch(n.tag){case 0:case 11:case 14:case 15:is(4,n,n.return),Ds(n);break;case 1:fs(n,n.return);var t=n.stateNode;"function"==typeof t.componentWillUnmount&&us(n,n.return,t),Ds(n);break;case 27:Af(n.stateNode);case 26:case 5:fs(n,n.return),Ds(n);break;case 22:null===n.memoizedState&&Ds(n);break;default:Ds(n)}e=e.sibling}}function Rs(e,n,t){for(t=t&&!!(8772&n.subtreeFlags),n=n.child;null!==n;){var r=n.alternate,o=e,l=n,a=l.flags;switch(l.tag){case 0:case 11:case 15:Rs(o,l,t),as(4,l);break;case 1:if(Rs(o,l,t),"function"==typeof(o=(r=l).stateNode).componentDidMount)try{o.componentDidMount()}catch(e){cc(r,r.return,e)}if(null!==(o=(r=l).updateQueue)){var i=r.stateNode;try{var s=o.shared.hiddenCallbacks;if(null!==s)for(o.shared.hiddenCallbacks=null,o=0;o<s.length;o++)dl(s[o],i)}catch(e){cc(r,r.return,e)}}t&&64&a&&ss(l),cs(l,l.return);break;case 27:vs(l);case 26:case 5:Rs(o,l,t),t&&null===r&&4&a&&ds(l),cs(l,l.return);break;case 12:Rs(o,l,t);break;case 13:Rs(o,l,t),t&&4&a&&Us(o,l);break;case 22:null===l.memoizedState&&Rs(o,l,t),cs(l,l.return);break;case 30:break;default:Rs(o,l,t)}n=n.sibling}}function Ms(e,n){var t=null;null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(t=e.memoizedState.cachePool.pool),e=null,null!==n.memoizedState&&null!==n.memoizedState.cachePool&&(e=n.memoizedState.cachePool.pool),e!==t&&(null!=e&&e.refCount++,null!=t&&Oo(t))}function js(e,n){e=null,null!==n.alternate&&(e=n.alternate.memoizedState.cache),(n=n.memoizedState.cache)!==e&&(n.refCount++,null!=e&&Oo(e))}function Hs(e,n,t,r){if(10256&n.subtreeFlags)for(n=n.child;null!==n;)$s(e,n,t,r),n=n.sibling}function $s(e,n,t,r){var o=n.flags;switch(n.tag){case 0:case 11:case 15:Hs(e,n,t,r),2048&o&&as(9,n);break;case 1:case 13:default:Hs(e,n,t,r);break;case 3:Hs(e,n,t,r),2048&o&&(e=null,null!==n.alternate&&(e=n.alternate.memoizedState.cache),(n=n.memoizedState.cache)!==e&&(n.refCount++,null!=e&&Oo(e)));break;case 12:if(2048&o){Hs(e,n,t,r),e=n.stateNode;try{var l=n.memoizedProps,a=l.id,i=l.onPostCommit;"function"==typeof i&&i(a,null===n.alternate?"mount":"update",e.passiveEffectDuration,-0)}catch(e){cc(n,n.return,e)}}else Hs(e,n,t,r);break;case 23:break;case 22:l=n.stateNode,a=n.alternate,null!==n.memoizedState?2&l._visibility?Hs(e,n,t,r):qs(e,n):2&l._visibility?Hs(e,n,t,r):(l._visibility|=2,Vs(e,n,t,r,!!(10256&n.subtreeFlags))),2048&o&&Ms(a,n);break;case 24:Hs(e,n,t,r),2048&o&&js(n.alternate,n)}}function Vs(e,n,t,r,o){for(o=o&&!!(10256&n.subtreeFlags),n=n.child;null!==n;){var l=e,a=n,i=t,s=r,u=a.flags;switch(a.tag){case 0:case 11:case 15:Vs(l,a,i,s,o),as(8,a);break;case 23:break;case 22:var c=a.stateNode;null!==a.memoizedState?2&c._visibility?Vs(l,a,i,s,o):qs(l,a):(c._visibility|=2,Vs(l,a,i,s,o)),o&&2048&u&&Ms(a.alternate,a);break;case 24:Vs(l,a,i,s,o),o&&2048&u&&js(a.alternate,a);break;default:Vs(l,a,i,s,o)}n=n.sibling}}function qs(e,n){if(10256&n.subtreeFlags)for(n=n.child;null!==n;){var t=e,r=n,o=r.flags;switch(r.tag){case 22:qs(t,r),2048&o&&Ms(r.alternate,r);break;case 24:qs(t,r),2048&o&&js(r.alternate,r);break;default:qs(t,r)}n=n.sibling}}var Ws=8192;function Qs(e){if(e.subtreeFlags&Ws)for(e=e.child;null!==e;)Ks(e),e=e.sibling}function Ks(e){switch(e.tag){case 26:Qs(e),e.flags&Ws&&null!==e.memoizedState&&function(e,n,t){if(null===$f)throw Error(i(475));var r=$f;if(!("stylesheet"!==n.type||"string"==typeof t.media&&!1===matchMedia(t.media).matches||4&n.state.loading)){if(null===n.instance){var o=Uf(t.href),l=e.querySelector(Tf(o));if(l)return null!==(e=l._p)&&"object"==typeof e&&"function"==typeof e.then&&(r.count++,r=qf.bind(r),e.then(r,r)),n.state.loading|=4,n.instance=l,void qe(l);l=e.ownerDocument||e,t=_f(t),(o=Sf.get(o))&&Nf(t,o),qe(l=l.createElement("link"));var a=l;a._p=new Promise((function(e,n){a.onload=e,a.onerror=n})),ef(l,"link",t),n.instance=l}null===r.stylesheets&&(r.stylesheets=new Map),r.stylesheets.set(n,e),(e=n.state.preload)&&!(3&n.state.loading)&&(r.count++,n=qf.bind(r),e.addEventListener("load",n),e.addEventListener("error",n))}}(Is,e.memoizedState,e.memoizedProps);break;case 5:default:Qs(e);break;case 3:case 4:var n=Is;Is=Cf(e.stateNode.containerInfo),Qs(e),Is=n;break;case 22:null===e.memoizedState&&(null!==(n=e.alternate)&&null!==n.memoizedState?(n=Ws,Ws=16777216,Qs(e),Ws=n):Qs(e))}}function Ys(e){var n=e.alternate;if(null!==n&&null!==(e=n.child)){n.child=null;do{n=e.sibling,e.sibling=null,e=n}while(null!==e)}}function Gs(e){var n=e.deletions;if(16&e.flags){if(null!==n)for(var t=0;t<n.length;t++){var r=n[t];Ss=r,Js(r,e)}Ys(e)}if(10256&e.subtreeFlags)for(e=e.child;null!==e;)Xs(e),e=e.sibling}function Xs(e){switch(e.tag){case 0:case 11:case 15:Gs(e),2048&e.flags&&is(9,e,e.return);break;case 3:case 12:default:Gs(e);break;case 22:var n=e.stateNode;null!==e.memoizedState&&2&n._visibility&&(null===e.return||13!==e.return.tag)?(n._visibility&=-3,Zs(e)):Gs(e)}}function Zs(e){var n=e.deletions;if(16&e.flags){if(null!==n)for(var t=0;t<n.length;t++){var r=n[t];Ss=r,Js(r,e)}Ys(e)}for(e=e.child;null!==e;){switch((n=e).tag){case 0:case 11:case 15:is(8,n,n.return),Zs(n);break;case 22:2&(t=n.stateNode)._visibility&&(t._visibility&=-3,Zs(n));break;default:Zs(n)}e=e.sibling}}function Js(e,n){for(;null!==Ss;){var t=Ss;switch(t.tag){case 0:case 11:case 15:is(8,t,n);break;case 23:case 22:if(null!==t.memoizedState&&null!==t.memoizedState.cachePool){var r=t.memoizedState.cachePool.pool;null!=r&&r.refCount++}break;case 24:Oo(t.memoizedState.cache)}if(null!==(r=t.child))r.return=t,Ss=r;else e:for(t=e;null!==Ss;){var o=(r=Ss).sibling,l=r.return;if(Cs(r),r===t){Ss=null;break e}if(null!==o){o.return=l,Ss=o;break e}Ss=l}}}var eu={getCacheForType:function(e){var n=Bo(Io),t=n.data.get(e);return void 0===t&&(t=e(),n.data.set(e,t)),t}},nu="function"==typeof WeakMap?WeakMap:Map,tu=0,ru=null,ou=null,lu=0,au=0,iu=null,su=!1,uu=!1,cu=!1,fu=0,du=0,pu=0,hu=0,mu=0,gu=0,yu=0,vu=null,bu=null,wu=!1,ku=0,Au=1/0,Su=null,xu=null,Cu=0,Eu=null,Bu=null,Fu=0,Pu=0,Uu=null,Tu=null,_u=0,Iu=null;function zu(){return 2&tu&&0!==lu?lu&-lu:null!==z.T?0!==Do?Do:Pc():Ue()}function Ou(){0===gu&&(gu=536870912&lu&&!lo?536870912:Ae());var e=oi.current;return null!==e&&(e.flags|=32),gu}function Lu(e,n,t){(e!==ru||2!==au&&9!==au)&&null===e.cancelPendingCommit||($u(e,0),Mu(e,lu,gu,!1)),Ce(e,t),2&tu&&e===ru||(e===ru&&(!(2&tu)&&(hu|=t),4===du&&Mu(e,lu,gu,!1)),Ac(e))}function Nu(e,n,t){if(6&tu)throw Error(i(327));for(var r=!t&&!(124&n)&&!(n&e.expiredLanes)||we(e,n),o=r?function(e,n){var t=tu;tu|=2;var r=qu(),o=Wu();ru!==e||lu!==n?(Su=null,Au=ne()+500,$u(e,n)):uu=we(e,n);e:for(;;)try{if(0!==au&&null!==ou){n=ou;var l=iu;n:switch(au){case 1:au=0,iu=null,Ju(e,n,l,1);break;case 2:case 9:if(Go(l)){au=0,iu=null,Zu(n);break}n=function(){2!==au&&9!==au||ru!==e||(au=7),Ac(e)},l.then(n,n);break e;case 3:au=7;break e;case 4:au=5;break e;case 7:Go(l)?(au=0,iu=null,Zu(n)):(au=0,iu=null,Ju(e,n,l,7));break;case 5:var a=null;switch(ou.tag){case 26:a=ou.memoizedState;case 5:case 27:var s=ou;if(!a||Hf(a)){au=0,iu=null;var u=s.sibling;if(null!==u)ou=u;else{var c=s.return;null!==c?(ou=c,ec(c)):ou=null}break n}}au=0,iu=null,Ju(e,n,l,5);break;case 6:au=0,iu=null,Ju(e,n,l,6);break;case 8:Hu(),du=6;break e;default:throw Error(i(462))}}Gu();break}catch(n){Vu(e,n)}return bo=vo=null,z.H=r,z.A=o,tu=t,null!==ou?0:(ru=null,lu=0,Fr(),du)}(e,n):Ku(e,n,!0),l=r;;){if(0===o){uu&&!r&&Mu(e,n,0,!1);break}if(t=e.current.alternate,!l||Ru(t)){if(2===o){if(l=n,e.errorRecoveryDisabledLanes&l)var a=0;else a=0!=(a=-536870913&e.pendingLanes)?a:536870912&a?536870912:0;if(0!==a){n=a;e:{var s=e;o=vu;var u=s.current.memoizedState.isDehydrated;if(u&&($u(s,a).flags|=256),2!==(a=Ku(s,a,!1))){if(cu&&!u){s.errorRecoveryDisabledLanes|=l,hu|=l,o=4;break e}l=bu,bu=o,null!==l&&(null===bu?bu=l:bu.push.apply(bu,l))}o=a}if(l=!1,2!==o)continue}}if(1===o){$u(e,0),Mu(e,n,0,!0);break}e:{switch(r=e,l=o){case 0:case 1:throw Error(i(345));case 4:if((4194048&n)!==n)break;case 6:Mu(r,n,gu,!su);break e;case 2:bu=null;break;case 3:case 5:break;default:throw Error(i(329))}if((62914560&n)===n&&10<(o=ku+300-ne())){if(Mu(r,n,gu,!su),0!==be(r,0,!0))break e;r.timeoutHandle=uf(Du.bind(null,r,t,bu,Su,wu,n,gu,hu,yu,su,l,2,-0,0),o)}else Du(r,t,bu,Su,wu,n,gu,hu,yu,su,l,0,-0,0)}break}o=Ku(e,n,!1),l=!1}Ac(e)}function Du(e,n,t,r,o,l,a,s,u,c,f,d,p,h){if(e.timeoutHandle=-1,(8192&(d=n.subtreeFlags)||!(16785408&~d))&&($f={stylesheets:null,count:0,unsuspend:Vf},Ks(n),null!==(d=function(){if(null===$f)throw Error(i(475));var e=$f;return e.stylesheets&&0===e.count&&Qf(e,e.stylesheets),0<e.count?function(n){var t=setTimeout((function(){if(e.stylesheets&&Qf(e,e.stylesheets),e.unsuspend){var n=e.unsuspend;e.unsuspend=null,n()}}),6e4);return e.unsuspend=n,function(){e.unsuspend=null,clearTimeout(t)}}:null}())))return e.cancelPendingCommit=d(tc.bind(null,e,n,l,t,r,o,a,s,u,f,1,p,h)),void Mu(e,l,a,!c);tc(e,n,l,t,r,o,a,s,u)}function Ru(e){for(var n=e;;){var t=n.tag;if((0===t||11===t||15===t)&&16384&n.flags&&null!==(t=n.updateQueue)&&null!==(t=t.stores))for(var r=0;r<t.length;r++){var o=t[r],l=o.getSnapshot;o=o.value;try{if(!Yt(l(),o))return!1}catch(e){return!1}}if(t=n.child,16384&n.subtreeFlags&&null!==t)t.return=n,n=t;else{if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return!0;n=n.return}n.sibling.return=n.return,n=n.sibling}}return!0}function Mu(e,n,t,r){n&=~mu,n&=~hu,e.suspendedLanes|=n,e.pingedLanes&=~n,r&&(e.warmLanes|=n),r=e.expirationTimes;for(var o=n;0<o;){var l=31-pe(o),a=1<<l;r[l]=-1,o&=~a}0!==t&&Ee(e,t,n)}function ju(){return!!(6&tu)||(Sc(0,!1),!1)}function Hu(){if(null!==ou){if(0===au)var e=ou.return;else bo=vo=null,Dl(e=ou),Ya=null,Ga=0,e=ou;for(;null!==e;)ls(e.alternate,e),e=e.return;ou=null}}function $u(e,n){var t=e.timeoutHandle;-1!==t&&(e.timeoutHandle=-1,cf(t)),null!==(t=e.cancelPendingCommit)&&(e.cancelPendingCommit=null,t()),Hu(),ru=e,ou=t=Dr(e.current,null),lu=n,au=0,iu=null,su=!1,uu=we(e,n),cu=!1,yu=gu=mu=hu=pu=du=0,bu=vu=null,wu=!1,8&n&&(n|=32&n);var r=e.entangledLanes;if(0!==r)for(e=e.entanglements,r&=n;0<r;){var o=31-pe(r),l=1<<o;n|=e[o],r&=~l}return fu=n,Fr(),t}function Vu(e,n){wl=null,z.H=qa,n===Wo||n===Ko?(n=el(),au=3):n===Qo?(n=el(),au=4):au=n===Ei?8:null!==n&&"object"==typeof n&&"function"==typeof n.then?6:1,iu=n,null===ou&&(du=1,ki(e,xr(n,e.current)))}function qu(){var e=z.H;return z.H=qa,null===e?qa:e}function Wu(){var e=z.A;return z.A=eu,e}function Qu(){du=4,su||(4194048&lu)!==lu&&null!==oi.current||(uu=!0),!(134217727&pu)&&!(134217727&hu)||null===ru||Mu(ru,lu,gu,!1)}function Ku(e,n,t){var r=tu;tu|=2;var o=qu(),l=Wu();ru===e&&lu===n||(Su=null,$u(e,n)),n=!1;var a=du;e:for(;;)try{if(0!==au&&null!==ou){var i=ou,s=iu;switch(au){case 8:Hu(),a=6;break e;case 3:case 2:case 9:case 6:null===oi.current&&(n=!0);var u=au;if(au=0,iu=null,Ju(e,i,s,u),t&&uu){a=0;break e}break;default:u=au,au=0,iu=null,Ju(e,i,s,u)}}Yu(),a=du;break}catch(n){Vu(e,n)}return n&&e.shellSuspendCounter++,bo=vo=null,tu=r,z.H=o,z.A=l,null===ou&&(ru=null,lu=0,Fr()),a}function Yu(){for(;null!==ou;)Xu(ou)}function Gu(){for(;null!==ou&&!J();)Xu(ou)}function Xu(e){var n=Xi(e.alternate,e,fu);e.memoizedProps=e.pendingProps,null===n?ec(e):ou=n}function Zu(e){var n=e,t=n.alternate;switch(n.tag){case 15:case 0:n=Li(t,n,n.pendingProps,n.type,void 0,lu);break;case 11:n=Li(t,n,n.pendingProps,n.type.render,n.ref,lu);break;case 5:Dl(n);default:ls(t,n),n=Xi(t,n=ou=Rr(n,fu),fu)}e.memoizedProps=e.pendingProps,null===n?ec(e):ou=n}function Ju(e,n,t,r){bo=vo=null,Dl(n),Ya=null,Ga=0;var o=n.return;try{if(function(e,n,t,r,o){if(t.flags|=32768,null!==r&&"object"==typeof r&&"function"==typeof r.then){if(null!==(n=t.alternate)&&xo(n,t,o,!0),null!==(t=oi.current)){switch(t.tag){case 13:return null===li?Qu():null===t.alternate&&0===du&&(du=3),t.flags&=-257,t.flags|=65536,t.lanes=o,r===Yo?t.flags|=16384:(null===(n=t.updateQueue)?t.updateQueue=new Set([r]):n.add(r),fc(e,r,o)),!1;case 22:return t.flags|=65536,r===Yo?t.flags|=16384:(null===(n=t.updateQueue)?(n={transitions:null,markerInstances:null,retryQueue:new Set([r])},t.updateQueue=n):null===(t=n.retryQueue)?n.retryQueue=new Set([r]):t.add(r),fc(e,r,o)),!1}throw Error(i(435,t.tag))}return fc(e,r,o),Qu(),!1}if(lo)return null!==(n=oi.current)?(!(65536&n.flags)&&(n.flags|=256),n.flags|=65536,n.lanes=o,r!==so&&go(xr(e=Error(i(422),{cause:r}),t))):(r!==so&&go(xr(n=Error(i(423),{cause:r}),t)),(e=e.current.alternate).flags|=65536,o&=-o,e.lanes|=o,r=xr(r,t),sl(e,o=Si(e.stateNode,r,o)),4!==du&&(du=2)),!1;var l=Error(i(520),{cause:r});if(l=xr(l,t),null===vu?vu=[l]:vu.push(l),4!==du&&(du=2),null===n)return!0;r=xr(r,t),t=n;do{switch(t.tag){case 3:return t.flags|=65536,e=o&-o,t.lanes|=e,sl(t,e=Si(t.stateNode,r,e)),!1;case 1:if(n=t.type,l=t.stateNode,!(128&t.flags||"function"!=typeof n.getDerivedStateFromError&&(null===l||"function"!=typeof l.componentDidCatch||null!==xu&&xu.has(l))))return t.flags|=65536,o&=-o,t.lanes|=o,Ci(o=xi(o),e,t,r),sl(t,o),!1}t=t.return}while(null!==t);return!1}(e,o,n,t,lu))return du=1,ki(e,xr(t,e.current)),void(ou=null)}catch(n){if(null!==o)throw ou=o,n;return du=1,ki(e,xr(t,e.current)),void(ou=null)}32768&n.flags?(lo||1===r?e=!0:uu||536870912&lu?e=!1:(su=e=!0,(2===r||9===r||3===r||6===r)&&null!==(r=oi.current)&&13===r.tag&&(r.flags|=16384)),nc(n,e)):ec(n)}function ec(e){var n=e;do{if(32768&n.flags)return void nc(n,su);e=n.return;var t=rs(n.alternate,n,fu);if(null!==t)return void(ou=t);if(null!==(n=n.sibling))return void(ou=n);ou=n=e}while(null!==n);0===du&&(du=5)}function nc(e,n){do{var t=os(e.alternate,e);if(null!==t)return t.flags&=32767,void(ou=t);if(null!==(t=e.return)&&(t.flags|=32768,t.subtreeFlags=0,t.deletions=null),!n&&null!==(e=e.sibling))return void(ou=e);ou=e=t}while(null!==e);du=6,ou=null}function tc(e,n,t,r,o,l,a,s,u){e.cancelPendingCommit=null;do{ic()}while(0!==Cu);if(6&tu)throw Error(i(327));if(null!==n){if(n===e.current)throw Error(i(177));if(l=n.lanes|n.childLanes,function(e,n,t,r,o,l){var a=e.pendingLanes;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=t,e.entangledLanes&=t,e.errorRecoveryDisabledLanes&=t,e.shellSuspendCounter=0;var i=e.entanglements,s=e.expirationTimes,u=e.hiddenUpdates;for(t=a&~t;0<t;){var c=31-pe(t),f=1<<c;i[c]=0,s[c]=-1;var d=u[c];if(null!==d)for(u[c]=null,c=0;c<d.length;c++){var p=d[c];null!==p&&(p.lane&=-536870913)}t&=~f}0!==r&&Ee(e,r,0),0!==l&&0===o&&0!==e.tag&&(e.suspendedLanes|=l&~(a&~n))}(e,t,l|=Br,a,s,u),e===ru&&(ou=ru=null,lu=0),Bu=n,Eu=e,Fu=t,Pu=l,Uu=o,Tu=r,10256&n.subtreeFlags||10256&n.flags?(e.callbackNode=null,e.callbackPriority=0,X(le,(function(){return sc(),null}))):(e.callbackNode=null,e.callbackPriority=0),r=!!(13878&n.flags),13878&n.subtreeFlags||r){r=z.T,z.T=null,o=O.p,O.p=2,a=tu,tu|=4;try{!function(e,n){if(e=e.containerInfo,nf=nd,nr(e=er(e))){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(t=(t=e.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(r&&0!==r.rangeCount){t=r.anchorNode;var o=r.anchorOffset,l=r.focusNode;r=r.focusOffset;try{t.nodeType,l.nodeType}catch(e){t=null;break e}var a=0,s=-1,u=-1,c=0,f=0,d=e,p=null;n:for(;;){for(var h;d!==t||0!==o&&3!==d.nodeType||(s=a+o),d!==l||0!==r&&3!==d.nodeType||(u=a+r),3===d.nodeType&&(a+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break n;if(p===t&&++c===o&&(s=a),p===l&&++f===r&&(u=a),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}t=-1===s||-1===u?null:{start:s,end:u}}else t=null}t=t||{start:0,end:0}}else t=null;for(tf={focusedElem:e,selectionRange:t},nd=!1,Ss=n;null!==Ss;)if(e=(n=Ss).child,1024&n.subtreeFlags&&null!==e)e.return=n,Ss=e;else for(;null!==Ss;){switch(l=(n=Ss).alternate,e=n.flags,n.tag){case 0:case 11:case 15:case 5:case 26:case 27:case 6:case 4:case 17:break;case 1:if(1024&e&&null!==l){e=void 0,t=n,o=l.memoizedProps,l=l.memoizedState,r=t.stateNode;try{var m=gi(t.type,o,(t.elementType,t.type));e=r.getSnapshotBeforeUpdate(m,l),r.__reactInternalSnapshotBeforeUpdate=e}catch(e){cc(t,t.return,e)}}break;case 3:if(1024&e)if(9===(t=(e=n.stateNode.containerInfo).nodeType))gf(e);else if(1===t)switch(e.nodeName){case"HEAD":case"HTML":case"BODY":gf(e);break;default:e.textContent=""}break;default:if(1024&e)throw Error(i(163))}if(null!==(e=n.sibling)){e.return=n.return,Ss=e;break}Ss=n.return}}(e,n)}finally{tu=a,O.p=o,z.T=r}}Cu=1,rc(),oc(),lc()}}function rc(){if(1===Cu){Cu=0;var e=Eu,n=Bu,t=!!(13878&n.flags);if(13878&n.subtreeFlags||t){t=z.T,z.T=null;var r=O.p;O.p=2;var o=tu;tu|=4;try{zs(n,e);var l=tf,a=er(e.containerInfo),i=l.focusedElem,s=l.selectionRange;if(a!==i&&i&&i.ownerDocument&&Jt(i.ownerDocument.documentElement,i)){if(null!==s&&nr(i)){var u=s.start,c=s.end;if(void 0===c&&(c=u),"selectionStart"in i)i.selectionStart=u,i.selectionEnd=Math.min(c,i.value.length);else{var f=i.ownerDocument||document,d=f&&f.defaultView||window;if(d.getSelection){var p=d.getSelection(),h=i.textContent.length,m=Math.min(s.start,h),g=void 0===s.end?m:Math.min(s.end,h);!p.extend&&m>g&&(a=g,g=m,m=a);var y=Zt(i,m),v=Zt(i,g);if(y&&v&&(1!==p.rangeCount||p.anchorNode!==y.node||p.anchorOffset!==y.offset||p.focusNode!==v.node||p.focusOffset!==v.offset)){var b=f.createRange();b.setStart(y.node,y.offset),p.removeAllRanges(),m>g?(p.addRange(b),p.extend(v.node,v.offset)):(b.setEnd(v.node,v.offset),p.addRange(b))}}}}for(f=[],p=i;p=p.parentNode;)1===p.nodeType&&f.push({element:p,left:p.scrollLeft,top:p.scrollTop});for("function"==typeof i.focus&&i.focus(),i=0;i<f.length;i++){var w=f[i];w.element.scrollLeft=w.left,w.element.scrollTop=w.top}}nd=!!nf,tf=nf=null}finally{tu=o,O.p=r,z.T=t}}e.current=n,Cu=2}}function oc(){if(2===Cu){Cu=0;var e=Eu,n=Bu,t=!!(8772&n.flags);if(8772&n.subtreeFlags||t){t=z.T,z.T=null;var r=O.p;O.p=2;var o=tu;tu|=4;try{xs(e,n.alternate,n)}finally{tu=o,O.p=r,z.T=t}}Cu=3}}function lc(){if(4===Cu||3===Cu){Cu=0,ee();var e=Eu,n=Bu,t=Fu,r=Tu;10256&n.subtreeFlags||10256&n.flags?Cu=5:(Cu=0,Bu=Eu=null,ac(e,e.pendingLanes));var o=e.pendingLanes;if(0===o&&(xu=null),Pe(t),n=n.stateNode,fe&&"function"==typeof fe.onCommitFiberRoot)try{fe.onCommitFiberRoot(ce,n,void 0,!(128&~n.current.flags))}catch(e){}if(null!==r){n=z.T,o=O.p,O.p=2,z.T=null;try{for(var l=e.onRecoverableError,a=0;a<r.length;a++){var i=r[a];l(i.value,{componentStack:i.stack})}}finally{z.T=n,O.p=o}}3&Fu&&ic(),Ac(e),o=e.pendingLanes,4194090&t&&42&o?e===Iu?_u++:(_u=0,Iu=e):_u=0,Sc(0,!1)}}function ac(e,n){0==(e.pooledCacheLanes&=n)&&null!=(n=e.pooledCache)&&(e.pooledCache=null,Oo(n))}function ic(e){return rc(),oc(),lc(),sc()}function sc(){if(5!==Cu)return!1;var e=Eu,n=Pu;Pu=0;var t=Pe(Fu),r=z.T,o=O.p;try{O.p=32>t?32:t,z.T=null,t=Uu,Uu=null;var l=Eu,a=Fu;if(Cu=0,Bu=Eu=null,Fu=0,6&tu)throw Error(i(331));var s=tu;if(tu|=4,Xs(l.current),$s(l,l.current,a,t),tu=s,Sc(0,!1),fe&&"function"==typeof fe.onPostCommitFiberRoot)try{fe.onPostCommitFiberRoot(ce,l)}catch(e){}return!0}finally{O.p=o,z.T=r,ac(e,n)}}function uc(e,n,t){n=xr(t,n),null!==(e=al(e,n=Si(e.stateNode,n,2),2))&&(Ce(e,2),Ac(e))}function cc(e,n,t){if(3===e.tag)uc(e,e,t);else for(;null!==n;){if(3===n.tag){uc(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===xu||!xu.has(r))){e=xr(t,e),null!==(r=al(n,t=xi(2),2))&&(Ci(t,r,n,e),Ce(r,2),Ac(r));break}}n=n.return}}function fc(e,n,t){var r=e.pingCache;if(null===r){r=e.pingCache=new nu;var o=new Set;r.set(n,o)}else void 0===(o=r.get(n))&&(o=new Set,r.set(n,o));o.has(t)||(cu=!0,o.add(t),e=dc.bind(null,e,n,t),n.then(e,e))}function dc(e,n,t){var r=e.pingCache;null!==r&&r.delete(n),e.pingedLanes|=e.suspendedLanes&t,e.warmLanes&=~t,ru===e&&(lu&t)===t&&(4===du||3===du&&(62914560&lu)===lu&&300>ne()-ku?!(2&tu)&&$u(e,0):mu|=t,yu===lu&&(yu=0)),Ac(e)}function pc(e,n){0===n&&(n=Se()),null!==(e=Tr(e,n))&&(Ce(e,n),Ac(e))}function hc(e){var n=e.memoizedState,t=0;null!==n&&(t=n.retryLane),pc(e,t)}function mc(e,n){var t=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(t=o.retryLane);break;case 19:r=e.stateNode;break;case 22:r=e.stateNode._retryCache;break;default:throw Error(i(314))}null!==r&&r.delete(n),pc(e,t)}var gc=null,yc=null,vc=!1,bc=!1,wc=!1,kc=0;function Ac(e){e!==yc&&null===e.next&&(null===yc?gc=yc=e:yc=yc.next=e),bc=!0,vc||(vc=!0,df((function(){6&tu?X(re,xc):Cc()})))}function Sc(e,n){if(!wc&&bc){wc=!0;do{for(var t=!1,r=gc;null!==r;){if(!n)if(0!==e){var o=r.pendingLanes;if(0===o)var l=0;else{var a=r.suspendedLanes,i=r.pingedLanes;l=(1<<31-pe(42|e)+1)-1,l=201326741&(l&=o&~(a&~i))?201326741&l|1:l?2|l:0}0!==l&&(t=!0,Fc(r,l))}else l=lu,!(3&(l=be(r,r===ru?l:0,null!==r.cancelPendingCommit||-1!==r.timeoutHandle)))||we(r,l)||(t=!0,Fc(r,l));r=r.next}}while(t);wc=!1}}function xc(){Cc()}function Cc(){bc=vc=!1;var e,n=0;0!==kc&&(((e=window.event)&&"popstate"===e.type?e!==sf&&(sf=e,!0):(sf=null,!1))&&(n=kc),kc=0);for(var t=ne(),r=null,o=gc;null!==o;){var l=o.next,a=Ec(o,t);0===a?(o.next=null,null===r?gc=l:r.next=l,null===l&&(yc=r)):(r=o,(0!==n||3&a)&&(bc=!0)),o=l}Sc(n,!1)}function Ec(e,n){for(var t=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,l=-62914561&e.pendingLanes;0<l;){var a=31-pe(l),i=1<<a,s=o[a];-1===s?i&t&&!(i&r)||(o[a]=ke(i,n)):s<=n&&(e.expiredLanes|=i),l&=~i}if(t=lu,t=be(e,e===(n=ru)?t:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle),r=e.callbackNode,0===t||e===n&&(2===au||9===au)||null!==e.cancelPendingCommit)return null!==r&&null!==r&&Z(r),e.callbackNode=null,e.callbackPriority=0;if(!(3&t)||we(e,t)){if((n=t&-t)===e.callbackPriority)return n;switch(null!==r&&Z(r),Pe(t)){case 2:case 8:t=oe;break;case 32:default:t=le;break;case 268435456:t=ie}return r=Bc.bind(null,e),t=X(t,r),e.callbackPriority=n,e.callbackNode=t,n}return null!==r&&null!==r&&Z(r),e.callbackPriority=2,e.callbackNode=null,2}function Bc(e,n){if(0!==Cu&&5!==Cu)return e.callbackNode=null,e.callbackPriority=0,null;var t=e.callbackNode;if(ic()&&e.callbackNode!==t)return null;var r=lu;return 0===(r=be(e,e===ru?r:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle))?null:(Nu(e,r,n),Ec(e,ne()),null!=e.callbackNode&&e.callbackNode===t?Bc.bind(null,e):null)}function Fc(e,n){if(ic())return null;Nu(e,n,!0)}function Pc(){return 0===kc&&(kc=Ae()),kc}function Uc(e){return null==e||"symbol"==typeof e||"boolean"==typeof e?null:"function"==typeof e?e:Un(""+e)}function Tc(e,n){var t=n.ownerDocument.createElement("input");return t.name=n.name,t.value=n.value,e.id&&t.setAttribute("form",e.id),n.parentNode.insertBefore(t,n),e=new FormData(e),t.parentNode.removeChild(t),e}for(var _c=0;_c<kr.length;_c++){var Ic=kr[_c];Ar(Ic.toLowerCase(),"on"+(Ic[0].toUpperCase()+Ic.slice(1)))}Ar(pr,"onAnimationEnd"),Ar(hr,"onAnimationIteration"),Ar(mr,"onAnimationStart"),Ar("dblclick","onDoubleClick"),Ar("focusin","onFocus"),Ar("focusout","onBlur"),Ar(gr,"onTransitionRun"),Ar(yr,"onTransitionStart"),Ar(vr,"onTransitionCancel"),Ar(br,"onTransitionEnd"),Ye("onMouseEnter",["mouseout","mouseover"]),Ye("onMouseLeave",["mouseout","mouseover"]),Ye("onPointerEnter",["pointerout","pointerover"]),Ye("onPointerLeave",["pointerout","pointerover"]),Ke("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),Ke("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),Ke("onBeforeInput",["compositionend","keypress","textInput","paste"]),Ke("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),Ke("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),Ke("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var zc="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Oc=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(zc));function Lc(e,n){n=!!(4&n);for(var t=0;t<e.length;t++){var r=e[t],o=r.event;r=r.listeners;e:{var l=void 0;if(n)for(var a=r.length-1;0<=a;a--){var i=r[a],s=i.instance,u=i.currentTarget;if(i=i.listener,s!==l&&o.isPropagationStopped())break e;l=i,o.currentTarget=u;try{l(o)}catch(e){yi(e)}o.currentTarget=null,l=s}else for(a=0;a<r.length;a++){if(s=(i=r[a]).instance,u=i.currentTarget,i=i.listener,s!==l&&o.isPropagationStopped())break e;l=i,o.currentTarget=u;try{l(o)}catch(e){yi(e)}o.currentTarget=null,l=s}}}}function Nc(e,n){var t=n[Oe];void 0===t&&(t=n[Oe]=new Set);var r=e+"__bubble";t.has(r)||(jc(n,e,2,!1),t.add(r))}function Dc(e,n,t){var r=0;n&&(r|=4),jc(t,e,r,n)}var Rc="_reactListening"+Math.random().toString(36).slice(2);function Mc(e){if(!e[Rc]){e[Rc]=!0,We.forEach((function(n){"selectionchange"!==n&&(Oc.has(n)||Dc(n,!1,e),Dc(n,!0,e))}));var n=9===e.nodeType?e:e.ownerDocument;null===n||n[Rc]||(n[Rc]=!0,Dc("selectionchange",!1,n))}}function jc(e,n,t,r){switch(sd(n)){case 2:var o=td;break;case 8:o=rd;break;default:o=od}t=o.bind(null,n,t,e),o=void 0,!Mn||"touchstart"!==n&&"touchmove"!==n&&"wheel"!==n||(o=!0),r?void 0!==o?e.addEventListener(n,t,{capture:!0,passive:o}):e.addEventListener(n,t,!0):void 0!==o?e.addEventListener(n,t,{passive:o}):e.addEventListener(n,t,!1)}function Hc(e,n,t,r,o){var l=r;if(!(1&n||2&n||null===r))e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var i=r.stateNode.containerInfo;if(i===o)break;if(4===a)for(a=r.return;null!==a;){var u=a.tag;if((3===u||4===u)&&a.stateNode.containerInfo===o)return;a=a.return}for(;null!==i;){if(null===(a=je(i)))return;if(5===(u=a.tag)||6===u||26===u||27===u){r=l=a;continue e}i=i.parentNode}}r=r.return}Nn((function(){var r=l,o=_n(t),a=[];e:{var i=wr.get(e);if(void 0!==i){var u=et,c=e;switch(e){case"keypress":if(0===Wn(t))break e;case"keydown":case"keyup":u=mt;break;case"focusin":c="focus",u=at;break;case"focusout":c="blur",u=at;break;case"beforeblur":case"afterblur":u=at;break;case"click":if(2===t.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=ot;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=lt;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=yt;break;case pr:case hr:case mr:u=it;break;case br:u=vt;break;case"scroll":case"scrollend":u=tt;break;case"wheel":u=bt;break;case"copy":case"cut":case"paste":u=st;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=gt;break;case"toggle":case"beforetoggle":u=wt}var f=!!(4&n),d=!f&&("scroll"===e||"scrollend"===e),p=f?null!==i?i+"Capture":null:i;f=[];for(var h,m=r;null!==m;){var g=m;if(h=g.stateNode,5!==(g=g.tag)&&26!==g&&27!==g||null===h||null===p||null!=(g=Dn(m,p))&&f.push($c(m,g,h)),d)break;m=m.return}0<f.length&&(i=new u(i,c,null,t,o),a.push({event:i,listeners:f}))}}if(!(7&n)){if(u="mouseout"===e||"pointerout"===e,(!(i="mouseover"===e||"pointerover"===e)||t===Tn||!(c=t.relatedTarget||t.fromElement)||!je(c)&&!c[ze])&&(u||i)&&(i=o.window===o?o:(i=o.ownerDocument)?i.defaultView||i.parentWindow:window,u?(u=r,null!==(c=(c=t.relatedTarget||t.toElement)?je(c):null)&&(d=s(c),f=c.tag,c!==d||5!==f&&27!==f&&6!==f)&&(c=null)):(u=null,c=r),u!==c)){if(f=ot,g="onMouseLeave",p="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(f=gt,g="onPointerLeave",p="onPointerEnter",m="pointer"),d=null==u?i:$e(u),h=null==c?i:$e(c),(i=new f(g,m+"leave",u,t,o)).target=d,i.relatedTarget=h,g=null,je(o)===r&&((f=new f(p,m+"enter",c,t,o)).target=h,f.relatedTarget=d,g=f),d=g,u&&c)e:{for(p=c,m=0,h=f=u;h;h=qc(h))m++;for(h=0,g=p;g;g=qc(g))h++;for(;0<m-h;)f=qc(f),m--;for(;0<h-m;)p=qc(p),h--;for(;m--;){if(f===p||null!==p&&f===p.alternate)break e;f=qc(f),p=qc(p)}f=null}else f=null;null!==u&&Wc(a,i,u,f,!1),null!==c&&null!==d&&Wc(a,d,c,f,!0)}if("select"===(u=(i=r?$e(r):window).nodeName&&i.nodeName.toLowerCase())||"input"===u&&"file"===i.type)var y=Dt;else if(_t(i))if(Rt)y=Kt;else{y=Wt;var v=qt}else!(u=i.nodeName)||"input"!==u.toLowerCase()||"checkbox"!==i.type&&"radio"!==i.type?r&&Bn(r.elementType)&&(y=Dt):y=Qt;switch(y&&(y=y(e,r))?It(a,y,t,o):(v&&v(e,i,r),"focusout"===e&&r&&"number"===i.type&&null!=r.memoizedProps.value&&bn(i,"number",i.value)),v=r?$e(r):window,e){case"focusin":(_t(v)||"true"===v.contentEditable)&&(rr=v,or=r,lr=null);break;case"focusout":lr=or=rr=null;break;case"mousedown":ar=!0;break;case"contextmenu":case"mouseup":case"dragend":ar=!1,ir(a,t,o);break;case"selectionchange":if(tr)break;case"keydown":case"keyup":ir(a,t,o)}var b;if(At)e:{switch(e){case"compositionstart":var w="onCompositionStart";break e;case"compositionend":w="onCompositionEnd";break e;case"compositionupdate":w="onCompositionUpdate";break e}w=void 0}else Ut?Ft(e,t)&&(w="onCompositionEnd"):"keydown"===e&&229===t.keyCode&&(w="onCompositionStart");w&&(Ct&&"ko"!==t.locale&&(Ut||"onCompositionStart"!==w?"onCompositionEnd"===w&&Ut&&(b=qn()):($n="value"in(Hn=o)?Hn.value:Hn.textContent,Ut=!0)),0<(v=Vc(r,w)).length&&(w=new ut(w,e,null,t,o),a.push({event:w,listeners:v}),(b||null!==(b=Pt(t)))&&(w.data=b))),(b=xt?function(e,n){switch(e){case"compositionend":return Pt(n);case"keypress":return 32!==n.which?null:(Bt=!0,Et);case"textInput":return(e=n.data)===Et&&Bt?null:e;default:return null}}(e,t):function(e,n){if(Ut)return"compositionend"===e||!At&&Ft(e,n)?(e=qn(),Vn=$n=Hn=null,Ut=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(n.ctrlKey||n.altKey||n.metaKey)||n.ctrlKey&&n.altKey){if(n.char&&1<n.char.length)return n.char;if(n.which)return String.fromCharCode(n.which)}return null;case"compositionend":return Ct&&"ko"!==n.locale?null:n.data}}(e,t))&&0<(w=Vc(r,"onBeforeInput")).length&&(v=new ut("onBeforeInput","beforeinput",null,t,o),a.push({event:v,listeners:w}),v.data=b),function(e,n,t,r,o){if("submit"===n&&t&&t.stateNode===o){var l=Uc((o[Ie]||null).action),a=r.submitter;a&&null!==(n=(n=a[Ie]||null)?Uc(n.formAction):a.getAttribute("formAction"))&&(l=n,a=null);var i=new et("action","action",null,r,o);e.push({event:i,listeners:[{instance:null,listener:function(){if(r.defaultPrevented){if(0!==kc){var e=a?Tc(o,a):new FormData(o);Ta(t,{pending:!0,data:e,method:o.method,action:l},null,e)}}else"function"==typeof l&&(i.preventDefault(),e=a?Tc(o,a):new FormData(o),Ta(t,{pending:!0,data:e,method:o.method,action:l},l,e))},currentTarget:o}]})}}(a,e,r,t,o)}Lc(a,n)}))}function $c(e,n,t){return{instance:e,listener:n,currentTarget:t}}function Vc(e,n){for(var t=n+"Capture",r=[];null!==e;){var o=e,l=o.stateNode;if(5!==(o=o.tag)&&26!==o&&27!==o||null===l||(null!=(o=Dn(e,t))&&r.unshift($c(e,o,l)),null!=(o=Dn(e,n))&&r.push($c(e,o,l))),3===e.tag)return r;e=e.return}return[]}function qc(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag&&27!==e.tag);return e||null}function Wc(e,n,t,r,o){for(var l=n._reactName,a=[];null!==t&&t!==r;){var i=t,s=i.alternate,u=i.stateNode;if(i=i.tag,null!==s&&s===r)break;5!==i&&26!==i&&27!==i||null===u||(s=u,o?null!=(u=Dn(t,l))&&a.unshift($c(t,u,s)):o||null!=(u=Dn(t,l))&&a.push($c(t,u,s))),t=t.return}0!==a.length&&e.push({event:n,listeners:a})}var Qc=/\r\n?/g,Kc=/\u0000|\uFFFD/g;function Yc(e){return("string"==typeof e?e:""+e).replace(Qc,"\n").replace(Kc,"")}function Gc(e,n){return n=Yc(n),Yc(e)===n}function Xc(){}function Zc(e,n,t,r,o,l){switch(t){case"children":"string"==typeof r?"body"===n||"textarea"===n&&""===r||Sn(e,r):("number"==typeof r||"bigint"==typeof r)&&"body"!==n&&Sn(e,""+r);break;case"className":tn(e,"class",r);break;case"tabIndex":tn(e,"tabindex",r);break;case"dir":case"role":case"viewBox":case"width":case"height":tn(e,t,r);break;case"style":En(e,r,l);break;case"data":if("object"!==n){tn(e,"data",r);break}case"src":case"href":if(""===r&&("a"!==n||"href"!==t)){e.removeAttribute(t);break}if(null==r||"function"==typeof r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(t);break}r=Un(""+r),e.setAttribute(t,r);break;case"action":case"formAction":if("function"==typeof r){e.setAttribute(t,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}if("function"==typeof l&&("formAction"===t?("input"!==n&&Zc(e,n,"name",o.name,o,null),Zc(e,n,"formEncType",o.formEncType,o,null),Zc(e,n,"formMethod",o.formMethod,o,null),Zc(e,n,"formTarget",o.formTarget,o,null)):(Zc(e,n,"encType",o.encType,o,null),Zc(e,n,"method",o.method,o,null),Zc(e,n,"target",o.target,o,null))),null==r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(t);break}r=Un(""+r),e.setAttribute(t,r);break;case"onClick":null!=r&&(e.onclick=Xc);break;case"onScroll":null!=r&&Nc("scroll",e);break;case"onScrollEnd":null!=r&&Nc("scrollend",e);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(i(61));if(null!=(t=r.__html)){if(null!=o.children)throw Error(i(60));e.innerHTML=t}}break;case"multiple":e.multiple=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"muted":e.muted=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"autoFocus":break;case"xlinkHref":if(null==r||"function"==typeof r||"boolean"==typeof r||"symbol"==typeof r){e.removeAttribute("xlink:href");break}t=Un(""+r),e.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",t);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(t,""+r):e.removeAttribute(t);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(t,""):e.removeAttribute(t);break;case"capture":case"download":!0===r?e.setAttribute(t,""):!1!==r&&null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(t,r):e.removeAttribute(t);break;case"cols":case"rows":case"size":case"span":null!=r&&"function"!=typeof r&&"symbol"!=typeof r&&!isNaN(r)&&1<=r?e.setAttribute(t,r):e.removeAttribute(t);break;case"rowSpan":case"start":null==r||"function"==typeof r||"symbol"==typeof r||isNaN(r)?e.removeAttribute(t):e.setAttribute(t,r);break;case"popover":Nc("beforetoggle",e),Nc("toggle",e),nn(e,"popover",r);break;case"xlinkActuate":rn(e,"http://www.w3.org/1999/xlink","xlink:actuate",r);break;case"xlinkArcrole":rn(e,"http://www.w3.org/1999/xlink","xlink:arcrole",r);break;case"xlinkRole":rn(e,"http://www.w3.org/1999/xlink","xlink:role",r);break;case"xlinkShow":rn(e,"http://www.w3.org/1999/xlink","xlink:show",r);break;case"xlinkTitle":rn(e,"http://www.w3.org/1999/xlink","xlink:title",r);break;case"xlinkType":rn(e,"http://www.w3.org/1999/xlink","xlink:type",r);break;case"xmlBase":rn(e,"http://www.w3.org/XML/1998/namespace","xml:base",r);break;case"xmlLang":rn(e,"http://www.w3.org/XML/1998/namespace","xml:lang",r);break;case"xmlSpace":rn(e,"http://www.w3.org/XML/1998/namespace","xml:space",r);break;case"is":nn(e,"is",r);break;case"innerText":case"textContent":break;default:(!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&nn(e,t=Fn.get(t)||t,r)}}function Jc(e,n,t,r,o,l){switch(t){case"style":En(e,r,l);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(i(61));if(null!=(t=r.__html)){if(null!=o.children)throw Error(i(60));e.innerHTML=t}}break;case"children":"string"==typeof r?Sn(e,r):("number"==typeof r||"bigint"==typeof r)&&Sn(e,""+r);break;case"onScroll":null!=r&&Nc("scroll",e);break;case"onScrollEnd":null!=r&&Nc("scrollend",e);break;case"onClick":null!=r&&(e.onclick=Xc);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":case"innerText":case"textContent":break;default:Qe.hasOwnProperty(t)||("o"!==t[0]||"n"!==t[1]||(o=t.endsWith("Capture"),n=t.slice(2,o?t.length-7:void 0),"function"==typeof(l=null!=(l=e[Ie]||null)?l[t]:null)&&e.removeEventListener(n,l,o),"function"!=typeof r)?t in e?e[t]=r:!0===r?e.setAttribute(t,""):nn(e,t,r):("function"!=typeof l&&null!==l&&(t in e?e[t]=null:e.hasAttribute(t)&&e.removeAttribute(t)),e.addEventListener(n,r,o)))}}function ef(e,n,t){switch(n){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":Nc("error",e),Nc("load",e);var r,o=!1,l=!1;for(r in t)if(t.hasOwnProperty(r)){var a=t[r];if(null!=a)switch(r){case"src":o=!0;break;case"srcSet":l=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(i(137,n));default:Zc(e,n,r,a,t,null)}}return l&&Zc(e,n,"srcSet",t.srcSet,t,null),void(o&&Zc(e,n,"src",t.src,t,null));case"input":Nc("invalid",e);var s=r=a=l=null,u=null,c=null;for(o in t)if(t.hasOwnProperty(o)){var f=t[o];if(null!=f)switch(o){case"name":l=f;break;case"type":a=f;break;case"checked":u=f;break;case"defaultChecked":c=f;break;case"value":r=f;break;case"defaultValue":s=f;break;case"children":case"dangerouslySetInnerHTML":if(null!=f)throw Error(i(137,n));break;default:Zc(e,n,o,f,t,null)}}return vn(e,r,s,u,c,a,l,!1),void dn(e);case"select":for(l in Nc("invalid",e),o=a=r=null,t)if(t.hasOwnProperty(l)&&null!=(s=t[l]))switch(l){case"value":r=s;break;case"defaultValue":a=s;break;case"multiple":o=s;default:Zc(e,n,l,s,t,null)}return n=r,t=a,e.multiple=!!o,void(null!=n?wn(e,!!o,n,!1):null!=t&&wn(e,!!o,t,!0));case"textarea":for(a in Nc("invalid",e),r=l=o=null,t)if(t.hasOwnProperty(a)&&null!=(s=t[a]))switch(a){case"value":o=s;break;case"defaultValue":l=s;break;case"children":r=s;break;case"dangerouslySetInnerHTML":if(null!=s)throw Error(i(91));break;default:Zc(e,n,a,s,t,null)}return An(e,o,l,r),void dn(e);case"option":for(u in t)t.hasOwnProperty(u)&&null!=(o=t[u])&&("selected"===u?e.selected=o&&"function"!=typeof o&&"symbol"!=typeof o:Zc(e,n,u,o,t,null));return;case"dialog":Nc("beforetoggle",e),Nc("toggle",e),Nc("cancel",e),Nc("close",e);break;case"iframe":case"object":Nc("load",e);break;case"video":case"audio":for(o=0;o<zc.length;o++)Nc(zc[o],e);break;case"image":Nc("error",e),Nc("load",e);break;case"details":Nc("toggle",e);break;case"embed":case"source":case"link":Nc("error",e),Nc("load",e);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(c in t)if(t.hasOwnProperty(c)&&null!=(o=t[c]))switch(c){case"children":case"dangerouslySetInnerHTML":throw Error(i(137,n));default:Zc(e,n,c,o,t,null)}return;default:if(Bn(n)){for(f in t)t.hasOwnProperty(f)&&void 0!==(o=t[f])&&Jc(e,n,f,o,t,void 0);return}}for(s in t)t.hasOwnProperty(s)&&null!=(o=t[s])&&Zc(e,n,s,o,t,null)}var nf=null,tf=null;function rf(e){return 9===e.nodeType?e:e.ownerDocument}function of(e){switch(e){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function lf(e,n){if(0===e)switch(n){case"svg":return 1;case"math":return 2;default:return 0}return 1===e&&"foreignObject"===n?0:e}function af(e,n){return"textarea"===e||"noscript"===e||"string"==typeof n.children||"number"==typeof n.children||"bigint"==typeof n.children||"object"==typeof n.dangerouslySetInnerHTML&&null!==n.dangerouslySetInnerHTML&&null!=n.dangerouslySetInnerHTML.__html}var sf=null,uf="function"==typeof setTimeout?setTimeout:void 0,cf="function"==typeof clearTimeout?clearTimeout:void 0,ff="function"==typeof Promise?Promise:void 0,df="function"==typeof queueMicrotask?queueMicrotask:void 0!==ff?function(e){return ff.resolve(null).then(e).catch(pf)}:uf;function pf(e){setTimeout((function(){throw e}))}function hf(e){return"head"===e}function mf(e,n){var t=n,r=0,o=0;do{var l=t.nextSibling;if(e.removeChild(t),l&&8===l.nodeType)if("/$"===(t=l.data)){if(0<r&&8>r){t=r;var a=e.ownerDocument;if(1&t&&Af(a.documentElement),2&t&&Af(a.body),4&t)for(Af(t=a.head),a=t.firstChild;a;){var i=a.nextSibling,s=a.nodeName;a[Re]||"SCRIPT"===s||"STYLE"===s||"LINK"===s&&"stylesheet"===a.rel.toLowerCase()||t.removeChild(a),a=i}}if(0===o)return e.removeChild(l),void Ed(n);o--}else"$"===t||"$?"===t||"$!"===t?o++:r=t.charCodeAt(0)-48;else r=0;t=l}while(t);Ed(n)}function gf(e){var n=e.firstChild;for(n&&10===n.nodeType&&(n=n.nextSibling);n;){var t=n;switch(n=n.nextSibling,t.nodeName){case"HTML":case"HEAD":case"BODY":gf(t),Me(t);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if("stylesheet"===t.rel.toLowerCase())continue}e.removeChild(t)}}function yf(e){return"$!"===e.data||"$?"===e.data&&"complete"===e.ownerDocument.readyState}function vf(e){for(;null!=e;e=e.nextSibling){var n=e.nodeType;if(1===n||3===n)break;if(8===n){if("$"===(n=e.data)||"$!"===n||"$?"===n||"F!"===n||"F"===n)break;if("/$"===n)return null}}return e}var bf=null;function wf(e){e=e.previousSibling;for(var n=0;e;){if(8===e.nodeType){var t=e.data;if("$"===t||"$!"===t||"$?"===t){if(0===n)return e;n--}else"/$"===t&&n++}e=e.previousSibling}return null}function kf(e,n,t){switch(n=rf(t),e){case"html":if(!(e=n.documentElement))throw Error(i(452));return e;case"head":if(!(e=n.head))throw Error(i(453));return e;case"body":if(!(e=n.body))throw Error(i(454));return e;default:throw Error(i(451))}}function Af(e){for(var n=e.attributes;n.length;)e.removeAttributeNode(n[0]);Me(e)}var Sf=new Map,xf=new Set;function Cf(e){return"function"==typeof e.getRootNode?e.getRootNode():9===e.nodeType?e:e.ownerDocument}var Ef=O.d;O.d={f:function(){var e=Ef.f(),n=ju();return e||n},r:function(e){var n=He(e);null!==n&&5===n.tag&&"form"===n.type?Ia(n):Ef.r(e)},D:function(e){Ef.D(e),Ff("dns-prefetch",e,null)},C:function(e,n){Ef.C(e,n),Ff("preconnect",e,n)},L:function(e,n,t){Ef.L(e,n,t);var r=Bf;if(r&&e&&n){var o='link[rel="preload"][as="'+gn(n)+'"]';"image"===n&&t&&t.imageSrcSet?(o+='[imagesrcset="'+gn(t.imageSrcSet)+'"]',"string"==typeof t.imageSizes&&(o+='[imagesizes="'+gn(t.imageSizes)+'"]')):o+='[href="'+gn(e)+'"]';var l=o;switch(n){case"style":l=Uf(e);break;case"script":l=If(e)}Sf.has(l)||(e=d({rel:"preload",href:"image"===n&&t&&t.imageSrcSet?void 0:e,as:n},t),Sf.set(l,e),null!==r.querySelector(o)||"style"===n&&r.querySelector(Tf(l))||"script"===n&&r.querySelector(zf(l))||(ef(n=r.createElement("link"),"link",e),qe(n),r.head.appendChild(n)))}},m:function(e,n){Ef.m(e,n);var t=Bf;if(t&&e){var r=n&&"string"==typeof n.as?n.as:"script",o='link[rel="modulepreload"][as="'+gn(r)+'"][href="'+gn(e)+'"]',l=o;switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":l=If(e)}if(!Sf.has(l)&&(e=d({rel:"modulepreload",href:e},n),Sf.set(l,e),null===t.querySelector(o))){switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(t.querySelector(zf(l)))return}ef(r=t.createElement("link"),"link",e),qe(r),t.head.appendChild(r)}}},X:function(e,n){Ef.X(e,n);var t=Bf;if(t&&e){var r=Ve(t).hoistableScripts,o=If(e),l=r.get(o);l||((l=t.querySelector(zf(o)))||(e=d({src:e,async:!0},n),(n=Sf.get(o))&&Df(e,n),qe(l=t.createElement("script")),ef(l,"link",e),t.head.appendChild(l)),l={type:"script",instance:l,count:1,state:null},r.set(o,l))}},S:function(e,n,t){Ef.S(e,n,t);var r=Bf;if(r&&e){var o=Ve(r).hoistableStyles,l=Uf(e);n=n||"default";var a=o.get(l);if(!a){var i={loading:0,preload:null};if(a=r.querySelector(Tf(l)))i.loading=5;else{e=d({rel:"stylesheet",href:e,"data-precedence":n},t),(t=Sf.get(l))&&Nf(e,t);var s=a=r.createElement("link");qe(s),ef(s,"link",e),s._p=new Promise((function(e,n){s.onload=e,s.onerror=n})),s.addEventListener("load",(function(){i.loading|=1})),s.addEventListener("error",(function(){i.loading|=2})),i.loading|=4,Lf(a,n,r)}a={type:"stylesheet",instance:a,count:1,state:i},o.set(l,a)}}},M:function(e,n){Ef.M(e,n);var t=Bf;if(t&&e){var r=Ve(t).hoistableScripts,o=If(e),l=r.get(o);l||((l=t.querySelector(zf(o)))||(e=d({src:e,async:!0,type:"module"},n),(n=Sf.get(o))&&Df(e,n),qe(l=t.createElement("script")),ef(l,"link",e),t.head.appendChild(l)),l={type:"script",instance:l,count:1,state:null},r.set(o,l))}}};var Bf="undefined"==typeof document?null:document;function Ff(e,n,t){var r=Bf;if(r&&"string"==typeof n&&n){var o=gn(n);o='link[rel="'+e+'"][href="'+o+'"]',"string"==typeof t&&(o+='[crossorigin="'+t+'"]'),xf.has(o)||(xf.add(o),e={rel:e,crossOrigin:t,href:n},null===r.querySelector(o)&&(ef(n=r.createElement("link"),"link",e),qe(n),r.head.appendChild(n)))}}function Pf(e,n,t,r){var o,l,a,s,u=(u=V.current)?Cf(u):null;if(!u)throw Error(i(446));switch(e){case"meta":case"title":return null;case"style":return"string"==typeof t.precedence&&"string"==typeof t.href?(n=Uf(t.href),(r=(t=Ve(u).hoistableStyles).get(n))||(r={type:"style",instance:null,count:0,state:null},t.set(n,r)),r):{type:"void",instance:null,count:0,state:null};case"link":if("stylesheet"===t.rel&&"string"==typeof t.href&&"string"==typeof t.precedence){e=Uf(t.href);var c=Ve(u).hoistableStyles,f=c.get(e);if(f||(u=u.ownerDocument||u,f={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},c.set(e,f),(c=u.querySelector(Tf(e)))&&!c._p&&(f.instance=c,f.state.loading=5),Sf.has(e)||(t={rel:"preload",as:"style",href:t.href,crossOrigin:t.crossOrigin,integrity:t.integrity,media:t.media,hrefLang:t.hrefLang,referrerPolicy:t.referrerPolicy},Sf.set(e,t),c||(o=u,l=e,a=t,s=f.state,o.querySelector('link[rel="preload"][as="style"]['+l+"]")?s.loading=1:(l=o.createElement("link"),s.preload=l,l.addEventListener("load",(function(){return s.loading|=1})),l.addEventListener("error",(function(){return s.loading|=2})),ef(l,"link",a),qe(l),o.head.appendChild(l))))),n&&null===r)throw Error(i(528,""));return f}if(n&&null!==r)throw Error(i(529,""));return null;case"script":return n=t.async,"string"==typeof(t=t.src)&&n&&"function"!=typeof n&&"symbol"!=typeof n?(n=If(t),(r=(t=Ve(u).hoistableScripts).get(n))||(r={type:"script",instance:null,count:0,state:null},t.set(n,r)),r):{type:"void",instance:null,count:0,state:null};default:throw Error(i(444,e))}}function Uf(e){return'href="'+gn(e)+'"'}function Tf(e){return'link[rel="stylesheet"]['+e+"]"}function _f(e){return d({},e,{"data-precedence":e.precedence,precedence:null})}function If(e){return'[src="'+gn(e)+'"]'}function zf(e){return"script[async]"+e}function Of(e,n,t){if(n.count++,null===n.instance)switch(n.type){case"style":var r=e.querySelector('style[data-href~="'+gn(t.href)+'"]');if(r)return n.instance=r,qe(r),r;var o=d({},t,{"data-href":t.href,"data-precedence":t.precedence,href:null,precedence:null});return qe(r=(e.ownerDocument||e).createElement("style")),ef(r,"style",o),Lf(r,t.precedence,e),n.instance=r;case"stylesheet":o=Uf(t.href);var l=e.querySelector(Tf(o));if(l)return n.state.loading|=4,n.instance=l,qe(l),l;r=_f(t),(o=Sf.get(o))&&Nf(r,o),qe(l=(e.ownerDocument||e).createElement("link"));var a=l;return a._p=new Promise((function(e,n){a.onload=e,a.onerror=n})),ef(l,"link",r),n.state.loading|=4,Lf(l,t.precedence,e),n.instance=l;case"script":return l=If(t.src),(o=e.querySelector(zf(l)))?(n.instance=o,qe(o),o):(r=t,(o=Sf.get(l))&&Df(r=d({},t),o),qe(o=(e=e.ownerDocument||e).createElement("script")),ef(o,"link",r),e.head.appendChild(o),n.instance=o);case"void":return null;default:throw Error(i(443,n.type))}else"stylesheet"===n.type&&!(4&n.state.loading)&&(r=n.instance,n.state.loading|=4,Lf(r,t.precedence,e));return n.instance}function Lf(e,n,t){for(var r=t.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),o=r.length?r[r.length-1]:null,l=o,a=0;a<r.length;a++){var i=r[a];if(i.dataset.precedence===n)l=i;else if(l!==o)break}l?l.parentNode.insertBefore(e,l.nextSibling):(n=9===t.nodeType?t.head:t).insertBefore(e,n.firstChild)}function Nf(e,n){null==e.crossOrigin&&(e.crossOrigin=n.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=n.referrerPolicy),null==e.title&&(e.title=n.title)}function Df(e,n){null==e.crossOrigin&&(e.crossOrigin=n.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=n.referrerPolicy),null==e.integrity&&(e.integrity=n.integrity)}var Rf=null;function Mf(e,n,t){if(null===Rf){var r=new Map,o=Rf=new Map;o.set(t,r)}else(r=(o=Rf).get(t))||(r=new Map,o.set(t,r));if(r.has(e))return r;for(r.set(e,null),t=t.getElementsByTagName(e),o=0;o<t.length;o++){var l=t[o];if(!(l[Re]||l[_e]||"link"===e&&"stylesheet"===l.getAttribute("rel"))&&"http://www.w3.org/2000/svg"!==l.namespaceURI){var a=l.getAttribute(n)||"";a=e+a;var i=r.get(a);i?i.push(l):r.set(a,[l])}}return r}function jf(e,n,t){(e=e.ownerDocument||e).head.insertBefore(t,"title"===n?e.querySelector("head > title"):null)}function Hf(e){return!!("stylesheet"!==e.type||3&e.state.loading)}var $f=null;function Vf(){}function qf(){if(this.count--,0===this.count)if(this.stylesheets)Qf(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}var Wf=null;function Qf(e,n){e.stylesheets=null,null!==e.unsuspend&&(e.count++,Wf=new Map,n.forEach(Kf,e),Wf=null,qf.call(e))}function Kf(e,n){if(!(4&n.state.loading)){var t=Wf.get(e);if(t)var r=t.get(null);else{t=new Map,Wf.set(e,t);for(var o=e.querySelectorAll("link[data-precedence],style[data-precedence]"),l=0;l<o.length;l++){var a=o[l];"LINK"!==a.nodeName&&"not all"===a.getAttribute("media")||(t.set(a.dataset.precedence,a),r=a)}r&&t.set(null,r)}a=(o=n.instance).getAttribute("data-precedence"),(l=t.get(a)||r)===r&&t.set(null,o),t.set(a,o),this.count++,r=qf.bind(this),o.addEventListener("load",r),o.addEventListener("error",r),l?l.parentNode.insertBefore(o,l.nextSibling):(e=9===e.nodeType?e.head:e).insertBefore(o,e.firstChild),n.state.loading|=4}}var Yf={$$typeof:k,Provider:null,Consumer:null,_currentValue:L,_currentValue2:L,_threadCount:0};function Gf(e,n,t,r,o,l,a,i){this.tag=1,this.containerInfo=e,this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=xe(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=xe(0),this.hiddenUpdates=xe(null),this.identifierPrefix=r,this.onUncaughtError=o,this.onCaughtError=l,this.onRecoverableError=a,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=i,this.incompleteTransitions=new Map}function Xf(e,n,t,r,o,l){o=function(e){return e?e=zr:zr}(o),null===r.context?r.context=o:r.pendingContext=o,(r=ll(n)).payload={element:t},null!==(l=void 0===l?null:l)&&(r.callback=l),null!==(t=al(e,r,n))&&(Lu(t,0,n),il(t,e,n))}function Zf(e,n){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var t=e.retryLane;e.retryLane=0!==t&&t<n?t:n}}function Jf(e,n){Zf(e,n),(e=e.alternate)&&Zf(e,n)}function ed(e){if(13===e.tag){var n=Tr(e,67108864);null!==n&&Lu(n,0,67108864),Jf(e,67108864)}}var nd=!0;function td(e,n,t,r){var o=z.T;z.T=null;var l=O.p;try{O.p=2,od(e,n,t,r)}finally{O.p=l,z.T=o}}function rd(e,n,t,r){var o=z.T;z.T=null;var l=O.p;try{O.p=8,od(e,n,t,r)}finally{O.p=l,z.T=o}}function od(e,n,t,r){if(nd){var o=ld(r);if(null===o)Hc(e,n,r,ad,t),yd(e,r);else if(function(e,n,t,r,o){switch(n){case"focusin":return cd=vd(cd,e,n,t,r,o),!0;case"dragenter":return fd=vd(fd,e,n,t,r,o),!0;case"mouseover":return dd=vd(dd,e,n,t,r,o),!0;case"pointerover":var l=o.pointerId;return pd.set(l,vd(pd.get(l)||null,e,n,t,r,o)),!0;case"gotpointercapture":return l=o.pointerId,hd.set(l,vd(hd.get(l)||null,e,n,t,r,o)),!0}return!1}(o,e,n,t,r))r.stopPropagation();else if(yd(e,r),4&n&&-1<gd.indexOf(e)){for(;null!==o;){var l=He(o);if(null!==l)switch(l.tag){case 3:if((l=l.stateNode).current.memoizedState.isDehydrated){var a=ve(l.pendingLanes);if(0!==a){var i=l;for(i.pendingLanes|=2,i.entangledLanes|=2;a;){var s=1<<31-pe(a);i.entanglements[1]|=s,a&=~s}Ac(l),!(6&tu)&&(Au=ne()+500,Sc(0,!1))}}break;case 13:null!==(i=Tr(l,2))&&Lu(i,0,2),ju(),Jf(l,2)}if(null===(l=ld(r))&&Hc(e,n,r,ad,t),l===o)break;o=l}null!==o&&r.stopPropagation()}else Hc(e,n,r,null,t)}}function ld(e){return id(e=_n(e))}var ad=null;function id(e){if(ad=null,null!==(e=je(e))){var n=s(e);if(null===n)e=null;else{var t=n.tag;if(13===t){if(null!==(e=u(n)))return e;e=null}else if(3===t){if(n.stateNode.current.memoizedState.isDehydrated)return 3===n.tag?n.stateNode.containerInfo:null;e=null}else n!==e&&(e=null)}}return ad=e,null}function sd(e){switch(e){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(te()){case re:return 2;case oe:return 8;case le:case ae:return 32;case ie:return 268435456;default:return 32}default:return 32}}var ud=!1,cd=null,fd=null,dd=null,pd=new Map,hd=new Map,md=[],gd="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function yd(e,n){switch(e){case"focusin":case"focusout":cd=null;break;case"dragenter":case"dragleave":fd=null;break;case"mouseover":case"mouseout":dd=null;break;case"pointerover":case"pointerout":pd.delete(n.pointerId);break;case"gotpointercapture":case"lostpointercapture":hd.delete(n.pointerId)}}function vd(e,n,t,r,o,l){return null===e||e.nativeEvent!==l?(e={blockedOn:n,domEventName:t,eventSystemFlags:r,nativeEvent:l,targetContainers:[o]},null!==n&&null!==(n=He(n))&&ed(n),e):(e.eventSystemFlags|=r,n=e.targetContainers,null!==o&&-1===n.indexOf(o)&&n.push(o),e)}function bd(e){var n=je(e.target);if(null!==n){var t=s(n);if(null!==t)if(13===(n=t.tag)){if(null!==(n=u(t)))return e.blockedOn=n,void function(e){var n=O.p;try{return O.p=e,function(){if(13===t.tag){var e=zu();e=Fe(e);var n=Tr(t,e);null!==n&&Lu(n,0,e),Jf(t,e)}}()}finally{O.p=n}}(e.priority)}else if(3===n&&t.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===t.tag?t.stateNode.containerInfo:null)}e.blockedOn=null}function wd(e){if(null!==e.blockedOn)return!1;for(var n=e.targetContainers;0<n.length;){var t=ld(e.nativeEvent);if(null!==t)return null!==(n=He(t))&&ed(n),e.blockedOn=t,!1;var r=new(t=e.nativeEvent).constructor(t.type,t);Tn=r,t.target.dispatchEvent(r),Tn=null,n.shift()}return!0}function kd(e,n,t){wd(e)&&t.delete(n)}function Ad(){ud=!1,null!==cd&&wd(cd)&&(cd=null),null!==fd&&wd(fd)&&(fd=null),null!==dd&&wd(dd)&&(dd=null),pd.forEach(kd),hd.forEach(kd)}function Sd(e,n){e.blockedOn===n&&(e.blockedOn=null,ud||(ud=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Ad)))}var xd=null;function Cd(e){xd!==e&&(xd=e,o.unstable_scheduleCallback(o.unstable_NormalPriority,(function(){xd===e&&(xd=null);for(var n=0;n<e.length;n+=3){var t=e[n],r=e[n+1],o=e[n+2];if("function"!=typeof r){if(null===id(r||t))continue;break}var l=He(t);null!==l&&(e.splice(n,3),n-=3,Ta(l,{pending:!0,data:o,method:t.method,action:r},r,o))}})))}function Ed(e){function n(n){return Sd(n,e)}null!==cd&&Sd(cd,e),null!==fd&&Sd(fd,e),null!==dd&&Sd(dd,e),pd.forEach(n),hd.forEach(n);for(var t=0;t<md.length;t++){var r=md[t];r.blockedOn===e&&(r.blockedOn=null)}for(;0<md.length&&null===(t=md[0]).blockedOn;)bd(t),null===t.blockedOn&&md.shift();if(null!=(t=(e.ownerDocument||e).$$reactFormReplay))for(r=0;r<t.length;r+=3){var o=t[r],l=t[r+1],a=o[Ie]||null;if("function"==typeof l)a||Cd(t);else if(a){var i=null;if(l&&l.hasAttribute("formAction")){if(o=l,a=l[Ie]||null)i=a.formAction;else if(null!==id(o))continue}else i=a.action;"function"==typeof i?t[r+1]=i:(t.splice(r,3),r-=3),Cd(t)}}}function Bd(e){this._internalRoot=e}function Fd(e){this._internalRoot=e}Fd.prototype.render=Bd.prototype.render=function(e){var n=this._internalRoot;if(null===n)throw Error(i(409));Xf(n.current,zu(),e,n,null,null)},Fd.prototype.unmount=Bd.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var n=e.containerInfo;Xf(e.current,2,null,e,null,null),ju(),n[ze]=null}},Fd.prototype.unstable_scheduleHydration=function(e){if(e){var n=Ue();e={blockedOn:null,target:e,priority:n};for(var t=0;t<md.length&&0!==n&&n<md[t].priority;t++);md.splice(t,0,e),0===t&&bd(e)}};var Pd=l.version;if("19.1.0"!==Pd)throw Error(i(527,Pd,"19.1.0"));O.findDOMNode=function(e){var n=e._reactInternals;if(void 0===n){if("function"==typeof e.render)throw Error(i(188));throw e=Object.keys(e).join(","),Error(i(268,e))}return e=function(e){var n=e.alternate;if(!n){if(null===(n=s(e)))throw Error(i(188));return n!==e?null:e}for(var t=e,r=n;;){var o=t.return;if(null===o)break;var l=o.alternate;if(null===l){if(null!==(r=o.return)){t=r;continue}break}if(o.child===l.child){for(l=o.child;l;){if(l===t)return c(o),e;if(l===r)return c(o),n;l=l.sibling}throw Error(i(188))}if(t.return!==r.return)t=o,r=l;else{for(var a=!1,u=o.child;u;){if(u===t){a=!0,t=o,r=l;break}if(u===r){a=!0,r=o,t=l;break}u=u.sibling}if(!a){for(u=l.child;u;){if(u===t){a=!0,t=l,r=o;break}if(u===r){a=!0,r=l,t=o;break}u=u.sibling}if(!a)throw Error(i(189))}}if(t.alternate!==r)throw Error(i(190))}if(3!==t.tag)throw Error(i(188));return t.stateNode.current===t?e:n}(n),null===(e=null!==e?f(e):null)?null:e.stateNode};var Ud={bundleType:0,version:"19.1.0",rendererPackageName:"react-dom",currentDispatcherRef:z,reconcilerVersion:"19.1.0"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var Td=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Td.isDisabled&&Td.supportsFiber)try{ce=Td.inject(Ud),fe=Td}catch(e){}}n.createRoot=function(e,n){if(!(t=e)||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType)throw Error(i(299));var t,r=!1,o="",l=vi,a=bi,s=wi;return null!=n&&(!0===n.unstable_strictMode&&(r=!0),void 0!==n.identifierPrefix&&(o=n.identifierPrefix),void 0!==n.onUncaughtError&&(l=n.onUncaughtError),void 0!==n.onCaughtError&&(a=n.onCaughtError),void 0!==n.onRecoverableError&&(s=n.onRecoverableError),void 0!==n.unstable_transitionCallbacks&&n.unstable_transitionCallbacks),n=function(e,n,t,r,o,l,a,i,s,u,c,f){return e=new Gf(e,n,t,a,i,s,u,f),n=1,!0===l&&(n|=24),l=Lr(3,null,null,n),e.current=l,l.stateNode=e,(n=zo()).refCount++,e.pooledCache=n,n.refCount++,l.memoizedState={element:r,isDehydrated:t,cache:n},rl(l),e}(e,1,!1,null,0,r,o,l,a,s,0,null),e[ze]=n.current,Mc(e),new Bd(n)}},1354:e=>{"use strict";e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),l="/*# ".concat(o," */");return[n].concat([l]).join("\n")}return[n].join("\n")}},1494:(e,n,t)=>{"use strict";e.exports=t.p+"4d586f42acbc9e933a80.woff2"},1939:(e,n,t)=>{"use strict";e.exports=t.p+"ea48f4ff22a3d336ebb0.woff2"},2567:(e,n,t)=>{"use strict";e.exports=t.p+"9b5f4ef6bec817044bca.woff2"},2647:(e,n,t)=>{"use strict";var r=t(5072),o=t.n(r),l=t(7825),a=t.n(l),i=t(7659),s=t.n(i),u=t(5056),c=t.n(u),f=t(540),d=t.n(f),p=t(1113),h=t.n(p),m=t(9288),g={};g.styleTagTransform=h(),g.setAttributes=c(),g.insert=s().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d(),o()(m.A,g),m.A&&m.A.locals&&m.A.locals},2793:(e,n,t)=>{"use strict";e.exports=t.p+"4f2cda059485c5f324fa.woff"},2833:e=>{e.exports=function(e,n,t,r){var o=t?t.call(r,e,n):void 0;if(void 0!==o)return!!o;if(e===n)return!0;if("object"!=typeof e||!e||"object"!=typeof n||!n)return!1;var l=Object.keys(e),a=Object.keys(n);if(l.length!==a.length)return!1;for(var i=Object.prototype.hasOwnProperty.bind(n),s=0;s<l.length;s++){var u=l[s];if(!i(u))return!1;var c=e[u],f=n[u];if(!1===(o=t?t.call(r,c,f,u):void 0)||void 0===o&&c!==f)return!1}return!0}},2849:e=>{"use strict";var n=Object.prototype.hasOwnProperty,t=Object.prototype.toString,r=Object.defineProperty,o=Object.getOwnPropertyDescriptor,l=function(e){return"function"==typeof Array.isArray?Array.isArray(e):"[object Array]"===t.call(e)},a=function(e){if(!e||"[object Object]"!==t.call(e))return!1;var r,o=n.call(e,"constructor"),l=e.constructor&&e.constructor.prototype&&n.call(e.constructor.prototype,"isPrototypeOf");if(e.constructor&&!o&&!l)return!1;for(r in e);return void 0===r||n.call(e,r)},i=function(e,n){r&&"__proto__"===n.name?r(e,n.name,{enumerable:!0,configurable:!0,value:n.newValue,writable:!0}):e[n.name]=n.newValue},s=function(e,t){if("__proto__"===t){if(!n.call(e,t))return;if(o)return o(e,t).value}return e[t]};e.exports=function e(){var n,t,r,o,u,c,f=arguments[0],d=1,p=arguments.length,h=!1;for("boolean"==typeof f&&(h=f,f=arguments[1]||{},d=2),(null==f||"object"!=typeof f&&"function"!=typeof f)&&(f={});d<p;++d)if(null!=(n=arguments[d]))for(t in n)r=s(f,t),f!==(o=s(n,t))&&(h&&o&&(a(o)||(u=l(o)))?(u?(u=!1,c=r&&l(r)?r:[]):c=r&&a(r)?r:{},i(f,{name:t,newValue:e(h,c,o)})):void 0!==o&&i(f,{name:t,newValue:o}));return f}},3052:(e,n,t)=>{"use strict";e.exports=t.p+"d09ca2b77e933d5c6582.woff2"},3259:(e,n,t)=>{"use strict";e.exports=t.p+"5ec64a942bafa79974d2.woff2"},3262:(e,n,t)=>{"use strict";e.exports=t.p+"b2f7fa8bb26a2699b579.woff"},3340:(e,n,t)=>{"use strict";e.exports=t.p+"f57a62e9efddf6ace18b.woff2"},3412:(e,n,t)=>{"use strict";e.exports=t.p+"036a954126763c1dac55.woff2"},4365:(e,n,t)=>{"use strict";e.exports=t.p+"6ab1e89d0317d8c309cf.woff2"},4417:e=>{"use strict";e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},4477:(e,n)=>{"use strict";function t(e,n){var t=e.length;e.push(n);e:for(;0<t;){var r=t-1>>>1,o=e[r];if(!(0<l(o,n)))break e;e[r]=n,e[t]=o,t=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var n=e[0],t=e.pop();if(t!==n){e[0]=t;e:for(var r=0,o=e.length,a=o>>>1;r<a;){var i=2*(r+1)-1,s=e[i],u=i+1,c=e[u];if(0>l(s,t))u<o&&0>l(c,s)?(e[r]=c,e[u]=t,r=u):(e[r]=s,e[i]=t,r=i);else{if(!(u<o&&0>l(c,t)))break e;e[r]=c,e[u]=t,r=u}}}return n}function l(e,n){var t=e.sortIndex-n.sortIndex;return 0!==t?t:e.id-n.id}if(n.unstable_now=void 0,"object"==typeof performance&&"function"==typeof performance.now){var a=performance;n.unstable_now=function(){return a.now()}}else{var i=Date,s=i.now();n.unstable_now=function(){return i.now()-s}}var u=[],c=[],f=1,d=null,p=3,h=!1,m=!1,g=!1,y=!1,v="function"==typeof setTimeout?setTimeout:null,b="function"==typeof clearTimeout?clearTimeout:null,w="undefined"!=typeof setImmediate?setImmediate:null;function k(e){for(var n=r(c);null!==n;){if(null===n.callback)o(c);else{if(!(n.startTime<=e))break;o(c),n.sortIndex=n.expirationTime,t(u,n)}n=r(c)}}function A(e){if(g=!1,k(e),!m)if(null!==r(u))m=!0,x||(x=!0,S());else{var n=r(c);null!==n&&_(A,n.startTime-e)}}var S,x=!1,C=-1,E=5,B=-1;function F(){return!(!y&&n.unstable_now()-B<E)}function P(){if(y=!1,x){var e=n.unstable_now();B=e;var t=!0;try{e:{m=!1,g&&(g=!1,b(C),C=-1),h=!0;var l=p;try{n:{for(k(e),d=r(u);null!==d&&!(d.expirationTime>e&&F());){var a=d.callback;if("function"==typeof a){d.callback=null,p=d.priorityLevel;var i=a(d.expirationTime<=e);if(e=n.unstable_now(),"function"==typeof i){d.callback=i,k(e),t=!0;break n}d===r(u)&&o(u),k(e)}else o(u);d=r(u)}if(null!==d)t=!0;else{var s=r(c);null!==s&&_(A,s.startTime-e),t=!1}}break e}finally{d=null,p=l,h=!1}t=void 0}}finally{t?S():x=!1}}}if("function"==typeof w)S=function(){w(P)};else if("undefined"!=typeof MessageChannel){var U=new MessageChannel,T=U.port2;U.port1.onmessage=P,S=function(){T.postMessage(null)}}else S=function(){v(P,0)};function _(e,t){C=v((function(){e(n.unstable_now())}),t)}n.unstable_IdlePriority=5,n.unstable_ImmediatePriority=1,n.unstable_LowPriority=4,n.unstable_NormalPriority=3,n.unstable_Profiling=null,n.unstable_UserBlockingPriority=2,n.unstable_cancelCallback=function(e){e.callback=null},n.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):E=0<e?Math.floor(1e3/e):5},n.unstable_getCurrentPriorityLevel=function(){return p},n.unstable_next=function(e){switch(p){case 1:case 2:case 3:var n=3;break;default:n=p}var t=p;p=n;try{return e()}finally{p=t}},n.unstable_requestPaint=function(){y=!0},n.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var t=p;p=e;try{return n()}finally{p=t}},n.unstable_scheduleCallback=function(e,o,l){var a=n.unstable_now();switch(l="object"==typeof l&&null!==l&&"number"==typeof(l=l.delay)&&0<l?a+l:a,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return e={id:f++,callback:o,priorityLevel:e,startTime:l,expirationTime:i=l+i,sortIndex:-1},l>a?(e.sortIndex=l,t(c,e),null===r(u)&&e===r(c)&&(g?(b(C),C=-1):g=!0,_(A,l-a))):(e.sortIndex=i,t(u,e),m||h||(m=!0,x||(x=!0,S()))),e},n.unstable_shouldYield=F,n.unstable_wrapCallback=function(e){var n=p;return function(){var t=p;p=n;try{return e.apply(this,arguments)}finally{p=t}}}},4653:(e,n,t)=>{"use strict";e.exports=t.p+"bb915319f59c02c348a6.woff2"},4748:(e,n,t)=>{"use strict";e.exports=t.p+"18af2512ed41dc94e197.woff2"},4848:(e,n,t)=>{"use strict";e.exports=t(9698)},4863:(e,n,t)=>{"use strict";e.exports=t.p+"f8a27a6de63d2728adc4.woff2"},5056:(e,n,t)=>{"use strict";e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},5072:e=>{"use strict";var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var l={},a=[],i=0;i<e.length;i++){var s=e[i],u=r.base?s[0]+r.base:s[0],c=l[u]||0,f="".concat(u," ").concat(c);l[u]=c+1;var d=t(f),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==d)n[d].references++,n[d].updater(p);else{var h=o(p,r);r.byIndex=i,n.splice(i,0,{identifier:f,updater:h,references:1})}a.push(f)}return a}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var l=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<l.length;a++){var i=t(l[a]);n[i].references--}for(var s=r(e,o),u=0;u<l.length;u++){var c=t(l[u]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}l=s}}},5123:(e,n,t)=>{"use strict";e.exports=t.p+"df10eb39af19eaf363ee.woff2"},5218:(e,n,t)=>{"use strict";e.exports=t.p+"3efbf9f403ae2d6791f1.woff2"},5229:function(e,n,t){"use strict";var r=(this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}})(t(1133)),o=t(8917);function l(e,n){var t={};return e&&"string"==typeof e?((0,r.default)(e,(function(e,r){e&&r&&(t[(0,o.camelCase)(e,n)]=r)})),t):t}l.default=l,e.exports=l},5318:(e,n,t)=>{"use strict";e.exports=t.p+"e21fda72f7303338832c.woff2"},5338:(e,n,t)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=t(1247)},5573:(e,n,t)=>{"use strict";e.exports=t.p+"b3501f3f1fa72bcb728a.woff2"},5606:e=>{var n,t,r=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function l(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{t="function"==typeof clearTimeout?clearTimeout:l}catch(e){t=l}}();var i,s=[],u=!1,c=-1;function f(){u&&i&&(u=!1,i.length?s=i.concat(s):c=-1,s.length&&d())}function d(){if(!u){var e=a(f);u=!0;for(var n=s.length;n;){for(i=s,s=[];++c<n;)i&&i[c].run();c=-1,n=s.length}i=null,u=!1,function(e){if(t===clearTimeout)return clearTimeout(e);if((t===l||!t)&&clearTimeout)return t=clearTimeout,clearTimeout(e);try{return t(e)}catch(n){try{return t.call(null,e)}catch(n){return t.call(this,e)}}}(e)}}function p(e,n){this.fun=e,this.array=n}function h(){}r.nextTick=function(e){var n=new Array(arguments.length-1);if(arguments.length>1)for(var t=1;t<arguments.length;t++)n[t-1]=arguments[t];s.push(new p(e,n)),1!==s.length||u||a(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=h,r.addListener=h,r.once=h,r.off=h,r.removeListener=h,r.removeAllListeners=h,r.emit=h,r.prependListener=h,r.prependOnceListener=h,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},5861:(e,n,t)=>{"use strict";e.exports=t.p+"92425c623934facef057.woff2"},5879:(e,n,t)=>{"use strict";e.exports=t.p+"1f9b868798d3a62c002f.woff2"},5970:(e,n,t)=>{"use strict";e.exports=t.p+"deef4f2bcf876c281b29.woff2"},6099:(e,n,t)=>{"use strict";e.exports=t.p+"3e3826616c156f9d249f.woff2"},6138:(e,n,t)=>{"use strict";e.exports=t.p+"07b851eaa771083aa412.woff2"},6221:(e,n,t)=>{"use strict";var r=t(6540);function o(e){var n="https://react.dev/errors/"+e;if(1<arguments.length){n+="?args[]="+encodeURIComponent(arguments[1]);for(var t=2;t<arguments.length;t++)n+="&args[]="+encodeURIComponent(arguments[t])}return"Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function l(){}var a={d:{f:l,r:function(){throw Error(o(522))},D:l,C:l,L:l,m:l,X:l,S:l,M:l},p:0,findDOMNode:null},i=Symbol.for("react.portal"),s=r.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function u(e,n){return"font"===e?"":"string"==typeof n?"use-credentials"===n?n:"":void 0}n.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=a,n.createPortal=function(e,n){var t=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!n||1!==n.nodeType&&9!==n.nodeType&&11!==n.nodeType)throw Error(o(299));return function(e,n,t){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:i,key:null==r?null:""+r,children:e,containerInfo:n,implementation:t}}(e,n,null,t)},n.flushSync=function(e){var n=s.T,t=a.p;try{if(s.T=null,a.p=2,e)return e()}finally{s.T=n,a.p=t,a.d.f()}},n.preconnect=function(e,n){"string"==typeof e&&(n=n?"string"==typeof(n=n.crossOrigin)?"use-credentials"===n?n:"":void 0:null,a.d.C(e,n))},n.prefetchDNS=function(e){"string"==typeof e&&a.d.D(e)},n.preinit=function(e,n){if("string"==typeof e&&n&&"string"==typeof n.as){var t=n.as,r=u(t,n.crossOrigin),o="string"==typeof n.integrity?n.integrity:void 0,l="string"==typeof n.fetchPriority?n.fetchPriority:void 0;"style"===t?a.d.S(e,"string"==typeof n.precedence?n.precedence:void 0,{crossOrigin:r,integrity:o,fetchPriority:l}):"script"===t&&a.d.X(e,{crossOrigin:r,integrity:o,fetchPriority:l,nonce:"string"==typeof n.nonce?n.nonce:void 0})}},n.preinitModule=function(e,n){if("string"==typeof e)if("object"==typeof n&&null!==n){if(null==n.as||"script"===n.as){var t=u(n.as,n.crossOrigin);a.d.M(e,{crossOrigin:t,integrity:"string"==typeof n.integrity?n.integrity:void 0,nonce:"string"==typeof n.nonce?n.nonce:void 0})}}else null==n&&a.d.M(e)},n.preload=function(e,n){if("string"==typeof e&&"object"==typeof n&&null!==n&&"string"==typeof n.as){var t=n.as,r=u(t,n.crossOrigin);a.d.L(e,t,{crossOrigin:r,integrity:"string"==typeof n.integrity?n.integrity:void 0,nonce:"string"==typeof n.nonce?n.nonce:void 0,type:"string"==typeof n.type?n.type:void 0,fetchPriority:"string"==typeof n.fetchPriority?n.fetchPriority:void 0,referrerPolicy:"string"==typeof n.referrerPolicy?n.referrerPolicy:void 0,imageSrcSet:"string"==typeof n.imageSrcSet?n.imageSrcSet:void 0,imageSizes:"string"==typeof n.imageSizes?n.imageSizes:void 0,media:"string"==typeof n.media?n.media:void 0})}},n.preloadModule=function(e,n){if("string"==typeof e)if(n){var t=u(n.as,n.crossOrigin);a.d.m(e,{as:"string"==typeof n.as&&"script"!==n.as?n.as:void 0,crossOrigin:t,integrity:"string"==typeof n.integrity?n.integrity:void 0})}else a.d.m(e)},n.requestFormReset=function(e){a.d.r(e)},n.unstable_batchedUpdates=function(e,n){return e(n)},n.useFormState=function(e,n,t){return s.H.useFormState(e,n,t)},n.useFormStatus=function(){return s.H.useHostTransitionStatus()},n.version="19.1.0"},6314:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,l){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(a[s]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&a[c[0]]||(void 0!==l&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=l),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),n.push(c))}},n}},6437:(e,n,t)=>{"use strict";e.exports=t.p+"6644a09ac3084b55fcc2.woff2"},6540:(e,n,t)=>{"use strict";e.exports=t(9869)},7137:(e,n,t)=>{"use strict";e.exports=t.p+"d2f757dd50016882086f.woff"},7491:(e,n,t)=>{"use strict";t.d(n,{A:()=>H});var r=t(1354),o=t.n(r),l=t(6314),a=t.n(l),i=t(4417),s=t.n(i),u=new URL(t(6138),t.b),c=new URL(t(3262),t.b),f=new URL(t(1012),t.b),d=new URL(t(653),t.b),p=new URL(t(5123),t.b),h=new URL(t(5970),t.b),m=new URL(t(2567),t.b),g=new URL(t(4653),t.b),y=new URL(t(1939),t.b),v=new URL(t(2793),t.b),b=new URL(t(5573),t.b),w=new URL(t(4748),t.b),k=new URL(t(5218),t.b),A=new URL(t(3259),t.b),S=new URL(t(5318),t.b),x=new URL(t(3340),t.b),C=a()(o()),E=s()(u),B=s()(c),F=s()(f),P=s()(d),U=s()(p),T=s()(h),_=s()(m),I=s()(g),z=s()(y),O=s()(v),L=s()(b),N=s()(w),D=s()(k),R=s()(A),M=s()(S),j=s()(x);C.push([e.id,`/* open-sans-cyrillic-ext-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${E}) format('woff2'), url(${B}) format('woff');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* open-sans-cyrillic-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${F}) format('woff2'), url(${B}) format('woff');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* open-sans-greek-ext-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${P}) format('woff2'), url(${B}) format('woff');\n  unicode-range: U+1F00-1FFF;\n}\n/* open-sans-greek-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${U}) format('woff2'), url(${B}) format('woff');\n  unicode-range: U+0370-03FF;\n}\n/* open-sans-vietnamese-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${T}) format('woff2'), url(${B}) format('woff');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* open-sans-latin-ext-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${_}) format('woff2'), url(${B}) format('woff');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* open-sans-latin-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${I}) format('woff2'), url(${B}) format('woff');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n/* open-sans-cyrillic-ext-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${z}) format('woff2'), url(${O}) format('woff');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* open-sans-cyrillic-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${L}) format('woff2'), url(${O}) format('woff');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* open-sans-greek-ext-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${N}) format('woff2'), url(${O}) format('woff');\n  unicode-range: U+1F00-1FFF;\n}\n/* open-sans-greek-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${D}) format('woff2'), url(${O}) format('woff');\n  unicode-range: U+0370-03FF;\n}\n/* open-sans-vietnamese-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${R}) format('woff2'), url(${O}) format('woff');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* open-sans-latin-ext-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${M}) format('woff2'), url(${O}) format('woff');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* open-sans-latin-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${j}) format('woff2'), url(${O}) format('woff');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n`,"",{version:3,sources:["webpack://./node_modules/fontsource-open-sans/400.css"],names:[],mappings:"AAAA,qCAAqC;AACrC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAwI;EACxI,sFAAsF;AACxF;AACA,iCAAiC;AACjC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAoI;EACpI,4DAA4D;AAC9D;AACA,kCAAkC;AAClC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAqI;EACrI,0BAA0B;AAC5B;AACA,8BAA8B;AAC9B;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAiI;EACjI,0BAA0B;AAC5B;AACA,mCAAmC;AACnC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAsI;EACtI,gHAAgH;AAClH;AACA,kCAAkC;AAClC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAqI;EACrI,mHAAmH;AACrH;AACA,8BAA8B;AAC9B;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAiI;EACjI,yKAAyK;AAC3K;AACA,qCAAqC;AACrC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAwI;EACxI,sFAAsF;AACxF;AACA,iCAAiC;AACjC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAoI;EACpI,4DAA4D;AAC9D;AACA,kCAAkC;AAClC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAqI;EACrI,0BAA0B;AAC5B;AACA,8BAA8B;AAC9B;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAiI;EACjI,0BAA0B;AAC5B;AACA,mCAAmC;AACnC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAsI;EACtI,gHAAgH;AAClH;AACA,kCAAkC;AAClC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAqI;EACrI,mHAAmH;AACrH;AACA,8BAA8B;AAC9B;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAiI;EACjI,yKAAyK;AAC3K",sourcesContent:["/* open-sans-cyrillic-ext-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-cyrillic-ext-400-italic.woff2') format('woff2'), url('./files/open-sans-all-400-italic.woff') format('woff');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* open-sans-cyrillic-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-cyrillic-400-italic.woff2') format('woff2'), url('./files/open-sans-all-400-italic.woff') format('woff');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* open-sans-greek-ext-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-greek-ext-400-italic.woff2') format('woff2'), url('./files/open-sans-all-400-italic.woff') format('woff');\n  unicode-range: U+1F00-1FFF;\n}\n/* open-sans-greek-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-greek-400-italic.woff2') format('woff2'), url('./files/open-sans-all-400-italic.woff') format('woff');\n  unicode-range: U+0370-03FF;\n}\n/* open-sans-vietnamese-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-vietnamese-400-italic.woff2') format('woff2'), url('./files/open-sans-all-400-italic.woff') format('woff');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* open-sans-latin-ext-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-latin-ext-400-italic.woff2') format('woff2'), url('./files/open-sans-all-400-italic.woff') format('woff');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* open-sans-latin-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-latin-400-italic.woff2') format('woff2'), url('./files/open-sans-all-400-italic.woff') format('woff');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n/* open-sans-cyrillic-ext-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-cyrillic-ext-400-normal.woff2') format('woff2'), url('./files/open-sans-all-400-normal.woff') format('woff');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* open-sans-cyrillic-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-cyrillic-400-normal.woff2') format('woff2'), url('./files/open-sans-all-400-normal.woff') format('woff');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* open-sans-greek-ext-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-greek-ext-400-normal.woff2') format('woff2'), url('./files/open-sans-all-400-normal.woff') format('woff');\n  unicode-range: U+1F00-1FFF;\n}\n/* open-sans-greek-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-greek-400-normal.woff2') format('woff2'), url('./files/open-sans-all-400-normal.woff') format('woff');\n  unicode-range: U+0370-03FF;\n}\n/* open-sans-vietnamese-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-vietnamese-400-normal.woff2') format('woff2'), url('./files/open-sans-all-400-normal.woff') format('woff');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* open-sans-latin-ext-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-latin-ext-400-normal.woff2') format('woff2'), url('./files/open-sans-all-400-normal.woff') format('woff');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* open-sans-latin-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-latin-400-normal.woff2') format('woff2'), url('./files/open-sans-all-400-normal.woff') format('woff');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n"],sourceRoot:""}]);const H=C},7581:(e,n,t)=>{"use strict";t.d(n,{DU:()=>Xn,Ay:()=>Yn});var r=function(){return r=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var o in n=arguments[t])Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o]);return e},r.apply(this,arguments)};function o(e,n,t){if(t||2===arguments.length)for(var r,o=0,l=n.length;o<l;o++)!r&&o in n||(r||(r=Array.prototype.slice.call(n,0,o)),r[o]=n[o]);return e.concat(r||Array.prototype.slice.call(n))}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var l=t(6540),a=t(2833),i=t.n(a),s="-ms-",u="-moz-",c="-webkit-",f="comm",d="rule",p="decl",h="@import",m="@keyframes",g="@layer",y=Math.abs,v=String.fromCharCode,b=Object.assign;function w(e){return e.trim()}function k(e,n){return(e=n.exec(e))?e[0]:e}function A(e,n,t){return e.replace(n,t)}function S(e,n,t){return e.indexOf(n,t)}function x(e,n){return 0|e.charCodeAt(n)}function C(e,n,t){return e.slice(n,t)}function E(e){return e.length}function B(e){return e.length}function F(e,n){return n.push(e),e}function P(e,n){return e.filter((function(e){return!k(e,n)}))}var U=1,T=1,_=0,I=0,z=0,O="";function L(e,n,t,r,o,l,a,i){return{value:e,root:n,parent:t,type:r,props:o,children:l,line:U,column:T,length:a,return:"",siblings:i}}function N(e,n){return b(L("",null,null,"",null,null,0,e.siblings),e,{length:-e.length},n)}function D(e){for(;e.root;)e=N(e.root,{children:[e]});F(e,e.siblings)}function R(){return z=I>0?x(O,--I):0,T--,10===z&&(T=1,U--),z}function M(){return z=I<_?x(O,I++):0,T++,10===z&&(T=1,U++),z}function j(){return x(O,I)}function H(){return I}function $(e,n){return C(O,e,n)}function V(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function q(e){return w($(I-1,K(91===e?e+2:40===e?e+1:e)))}function W(e){for(;(z=j())&&z<33;)M();return V(e)>2||V(z)>3?"":" "}function Q(e,n){for(;--n&&M()&&!(z<48||z>102||z>57&&z<65||z>70&&z<97););return $(e,H()+(n<6&&32==j()&&32==M()))}function K(e){for(;M();)switch(z){case e:return I;case 34:case 39:34!==e&&39!==e&&K(z);break;case 40:41===e&&K(e);break;case 92:M()}return I}function Y(e,n){for(;M()&&e+z!==57&&(e+z!==84||47!==j()););return"/*"+$(n,I-1)+"*"+v(47===e?e:M())}function G(e){for(;!V(j());)M();return $(e,I)}function X(e,n){for(var t="",r=0;r<e.length;r++)t+=n(e[r],r,e,n)||"";return t}function Z(e,n,t,r){switch(e.type){case g:if(e.children.length)break;case h:case p:return e.return=e.return||e.value;case f:return"";case m:return e.return=e.value+"{"+X(e.children,r)+"}";case d:if(!E(e.value=e.props.join(",")))return""}return E(t=X(e.children,r))?e.return=e.value+"{"+t+"}":""}function J(e,n,t){switch(function(e,n){return 45^x(e,0)?(((n<<2^x(e,0))<<2^x(e,1))<<2^x(e,2))<<2^x(e,3):0}(e,n)){case 5103:return c+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return c+e+e;case 4789:return u+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return c+e+u+e+s+e+e;case 5936:switch(x(e,n+11)){case 114:return c+e+s+A(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return c+e+s+A(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return c+e+s+A(e,/[svh]\w+-[tblr]{2}/,"lr")+e}case 6828:case 4268:case 2903:return c+e+s+e+e;case 6165:return c+e+s+"flex-"+e+e;case 5187:return c+e+A(e,/(\w+).+(:[^]+)/,c+"box-$1$2"+s+"flex-$1$2")+e;case 5443:return c+e+s+"flex-item-"+A(e,/flex-|-self/g,"")+(k(e,/flex-|baseline/)?"":s+"grid-row-"+A(e,/flex-|-self/g,""))+e;case 4675:return c+e+s+"flex-line-pack"+A(e,/align-content|flex-|-self/g,"")+e;case 5548:return c+e+s+A(e,"shrink","negative")+e;case 5292:return c+e+s+A(e,"basis","preferred-size")+e;case 6060:return c+"box-"+A(e,"-grow","")+c+e+s+A(e,"grow","positive")+e;case 4554:return c+A(e,/([^-])(transform)/g,"$1"+c+"$2")+e;case 6187:return A(A(A(e,/(zoom-|grab)/,c+"$1"),/(image-set)/,c+"$1"),e,"")+e;case 5495:case 3959:return A(e,/(image-set\([^]*)/,c+"$1$`$1");case 4968:return A(A(e,/(.+:)(flex-)?(.*)/,c+"box-pack:$3"+s+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+c+e+e;case 4200:if(!k(e,/flex-|baseline/))return s+"grid-column-align"+C(e,n)+e;break;case 2592:case 3360:return s+A(e,"template-","")+e;case 4384:case 3616:return t&&t.some((function(e,t){return n=t,k(e.props,/grid-\w+-end/)}))?~S(e+(t=t[n].value),"span",0)?e:s+A(e,"-start","")+e+s+"grid-row-span:"+(~S(t,"span",0)?k(t,/\d+/):+k(t,/\d+/)-+k(e,/\d+/))+";":s+A(e,"-start","")+e;case 4896:case 4128:return t&&t.some((function(e){return k(e.props,/grid-\w+-start/)}))?e:s+A(A(e,"-end","-span"),"span ","")+e;case 4095:case 3583:case 4068:case 2532:return A(e,/(.+)-inline(.+)/,c+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(E(e)-1-n>6)switch(x(e,n+1)){case 109:if(45!==x(e,n+4))break;case 102:return A(e,/(.+:)(.+)-([^]+)/,"$1"+c+"$2-$3$1"+u+(108==x(e,n+3)?"$3":"$2-$3"))+e;case 115:return~S(e,"stretch",0)?J(A(e,"stretch","fill-available"),n,t)+e:e}break;case 5152:case 5920:return A(e,/(.+?):(\d+)(\s*\/\s*(span)?\s*(\d+))?(.*)/,(function(n,t,r,o,l,a,i){return s+t+":"+r+i+(o?s+t+"-span:"+(l?a:+a-+r)+i:"")+e}));case 4949:if(121===x(e,n+6))return A(e,":",":"+c)+e;break;case 6444:switch(x(e,45===x(e,14)?18:11)){case 120:return A(e,/(.+:)([^;\s!]+)(;|(\s+)?!.+)?/,"$1"+c+(45===x(e,14)?"inline-":"")+"box$3$1"+c+"$2$3$1"+s+"$2box$3")+e;case 100:return A(e,":",":"+s)+e}break;case 5719:case 2647:case 2135:case 3927:case 2391:return A(e,"scroll-","scroll-snap-")+e}return e}function ee(e,n,t,r){if(e.length>-1&&!e.return)switch(e.type){case p:return void(e.return=J(e.value,e.length,t));case m:return X([N(e,{value:A(e.value,"@","@"+c)})],r);case d:if(e.length)return function(e,n){return e.map(n).join("")}(t=e.props,(function(n){switch(k(n,r=/(::plac\w+|:read-\w+)/)){case":read-only":case":read-write":D(N(e,{props:[A(n,/:(read-\w+)/,":"+u+"$1")]})),D(N(e,{props:[n]})),b(e,{props:P(t,r)});break;case"::placeholder":D(N(e,{props:[A(n,/:(plac\w+)/,":"+c+"input-$1")]})),D(N(e,{props:[A(n,/:(plac\w+)/,":"+u+"$1")]})),D(N(e,{props:[A(n,/:(plac\w+)/,s+"input-$1")]})),D(N(e,{props:[n]})),b(e,{props:P(t,r)})}return""}))}}function ne(e){return function(e){return O="",e}(te("",null,null,null,[""],e=function(e){return U=T=1,_=E(O=e),I=0,[]}(e),0,[0],e))}function te(e,n,t,r,o,l,a,i,s){for(var u=0,c=0,f=a,d=0,p=0,h=0,m=1,g=1,b=1,w=0,k="",C=o,B=l,P=r,U=k;g;)switch(h=w,w=M()){case 40:if(108!=h&&58==x(U,f-1)){-1!=S(U+=A(q(w),"&","&\f"),"&\f",y(u?i[u-1]:0))&&(b=-1);break}case 34:case 39:case 91:U+=q(w);break;case 9:case 10:case 13:case 32:U+=W(h);break;case 92:U+=Q(H()-1,7);continue;case 47:switch(j()){case 42:case 47:F(oe(Y(M(),H()),n,t,s),s);break;default:U+="/"}break;case 123*m:i[u++]=E(U)*b;case 125*m:case 59:case 0:switch(w){case 0:case 125:g=0;case 59+c:-1==b&&(U=A(U,/\f/g,"")),p>0&&E(U)-f&&F(p>32?le(U+";",r,t,f-1,s):le(A(U," ","")+";",r,t,f-2,s),s);break;case 59:U+=";";default:if(F(P=re(U,n,t,u,c,o,i,k,C=[],B=[],f,l),l),123===w)if(0===c)te(U,n,P,P,C,l,f,i,B);else switch(99===d&&110===x(U,3)?100:d){case 100:case 108:case 109:case 115:te(e,P,P,r&&F(re(e,P,P,0,0,o,i,k,o,C=[],f,B),B),o,B,f,i,r?C:B);break;default:te(U,P,P,P,[""],B,0,i,B)}}u=c=p=0,m=b=1,k=U="",f=a;break;case 58:f=1+E(U),p=h;default:if(m<1)if(123==w)--m;else if(125==w&&0==m++&&125==R())continue;switch(U+=v(w),w*m){case 38:b=c>0?1:(U+="\f",-1);break;case 44:i[u++]=(E(U)-1)*b,b=1;break;case 64:45===j()&&(U+=q(M())),d=j(),c=f=E(k=U+=G(H())),w++;break;case 45:45===h&&2==E(U)&&(m=0)}}return l}function re(e,n,t,r,o,l,a,i,s,u,c,f){for(var p=o-1,h=0===o?l:[""],m=B(h),g=0,v=0,b=0;g<r;++g)for(var k=0,S=C(e,p+1,p=y(v=a[g])),x=e;k<m;++k)(x=w(v>0?h[k]+" "+S:A(S,/&\f/g,h[k])))&&(s[b++]=x);return L(e,n,t,0===o?d:i,s,u,c,f)}function oe(e,n,t,r){return L(e,n,t,f,v(z),C(e,2,-2),0,r)}function le(e,n,t,r,o){return L(e,n,t,p,C(e,0,r),C(e,r+1,-1),r,o)}var ae={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},ie=t(5606),se=void 0!==ie&&void 0!==ie.env&&(ie.env.REACT_APP_SC_ATTR||ie.env.SC_ATTR)||"data-styled",ue="active",ce="data-styled-version",fe="6.1.17",de="/*!sc*/\n",pe="undefined"!=typeof window&&"HTMLElement"in window,he=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:void 0!==ie&&void 0!==ie.env&&void 0!==ie.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==ie.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==ie.env.REACT_APP_SC_DISABLE_SPEEDY&&ie.env.REACT_APP_SC_DISABLE_SPEEDY:void 0!==ie&&void 0!==ie.env&&void 0!==ie.env.SC_DISABLE_SPEEDY&&""!==ie.env.SC_DISABLE_SPEEDY&&"false"!==ie.env.SC_DISABLE_SPEEDY&&ie.env.SC_DISABLE_SPEEDY),me={},ge=(new Set,Object.freeze([])),ye=Object.freeze({});function ve(e,n,t){return void 0===t&&(t=ye),e.theme!==t.theme&&e.theme||n||t.theme}var be=new Set(["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","tr","track","u","ul","use","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"]),we=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,ke=/(^-|-$)/g;function Ae(e){return e.replace(we,"-").replace(ke,"")}var Se=/(a)(d)/gi,xe=52,Ce=function(e){return String.fromCharCode(e+(e>25?39:97))};function Ee(e){var n,t="";for(n=Math.abs(e);n>xe;n=n/xe|0)t=Ce(n%xe)+t;return(Ce(n%xe)+t).replace(Se,"$1-$2")}var Be,Fe=5381,Pe=function(e,n){for(var t=n.length;t;)e=33*e^n.charCodeAt(--t);return e},Ue=function(e){return Pe(Fe,e)};function Te(e){return Ee(Ue(e)>>>0)}function _e(e){return"string"==typeof e&&!0}var Ie="function"==typeof Symbol&&Symbol.for,ze=Ie?Symbol.for("react.memo"):60115,Oe=Ie?Symbol.for("react.forward_ref"):60112,Le={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},Ne={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},De={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},Re=((Be={})[Oe]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},Be[ze]=De,Be);function Me(e){return("type"in(n=e)&&n.type.$$typeof)===ze?De:"$$typeof"in e?Re[e.$$typeof]:Le;var n}var je=Object.defineProperty,He=Object.getOwnPropertyNames,$e=Object.getOwnPropertySymbols,Ve=Object.getOwnPropertyDescriptor,qe=Object.getPrototypeOf,We=Object.prototype;function Qe(e,n,t){if("string"!=typeof n){if(We){var r=qe(n);r&&r!==We&&Qe(e,r,t)}var o=He(n);$e&&(o=o.concat($e(n)));for(var l=Me(e),a=Me(n),i=0;i<o.length;++i){var s=o[i];if(!(s in Ne||t&&t[s]||a&&s in a||l&&s in l)){var u=Ve(n,s);try{je(e,s,u)}catch(e){}}}}return e}function Ke(e){return"function"==typeof e}function Ye(e){return"object"==typeof e&&"styledComponentId"in e}function Ge(e,n){return e&&n?"".concat(e," ").concat(n):e||n||""}function Xe(e,n){if(0===e.length)return"";for(var t=e[0],r=1;r<e.length;r++)t+=n?n+e[r]:e[r];return t}function Ze(e){return null!==e&&"object"==typeof e&&e.constructor.name===Object.name&&!("props"in e&&e.$$typeof)}function Je(e,n,t){if(void 0===t&&(t=!1),!t&&!Ze(e)&&!Array.isArray(e))return n;if(Array.isArray(n))for(var r=0;r<n.length;r++)e[r]=Je(e[r],n[r]);else if(Ze(n))for(var r in n)e[r]=Je(e[r],n[r]);return e}function en(e,n){Object.defineProperty(e,"toString",{value:n})}function nn(e){for(var n=[],t=1;t<arguments.length;t++)n[t-1]=arguments[t];return new Error("An error occurred. See https://github.com/styled-components/styled-components/blob/main/packages/styled-components/src/utils/errors.md#".concat(e," for more information.").concat(n.length>0?" Args: ".concat(n.join(", ")):""))}var tn=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}return e.prototype.indexOfGroup=function(e){for(var n=0,t=0;t<e;t++)n+=this.groupSizes[t];return n},e.prototype.insertRules=function(e,n){if(e>=this.groupSizes.length){for(var t=this.groupSizes,r=t.length,o=r;e>=o;)if((o<<=1)<0)throw nn(16,"".concat(e));this.groupSizes=new Uint32Array(o),this.groupSizes.set(t),this.length=o;for(var l=r;l<o;l++)this.groupSizes[l]=0}for(var a=this.indexOfGroup(e+1),i=(l=0,n.length);l<i;l++)this.tag.insertRule(a,n[l])&&(this.groupSizes[e]++,a++)},e.prototype.clearGroup=function(e){if(e<this.length){var n=this.groupSizes[e],t=this.indexOfGroup(e),r=t+n;this.groupSizes[e]=0;for(var o=t;o<r;o++)this.tag.deleteRule(t)}},e.prototype.getGroup=function(e){var n="";if(e>=this.length||0===this.groupSizes[e])return n;for(var t=this.groupSizes[e],r=this.indexOfGroup(e),o=r+t,l=r;l<o;l++)n+="".concat(this.tag.getRule(l)).concat(de);return n},e}(),rn=new Map,on=new Map,ln=1,an=function(e){if(rn.has(e))return rn.get(e);for(;on.has(ln);)ln++;var n=ln++;return rn.set(e,n),on.set(n,e),n},sn=function(e,n){ln=n+1,rn.set(e,n),on.set(n,e)},un="style[".concat(se,"][").concat(ce,'="').concat(fe,'"]'),cn=new RegExp("^".concat(se,'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)')),fn=function(e,n,t){for(var r,o=t.split(","),l=0,a=o.length;l<a;l++)(r=o[l])&&e.registerName(n,r)},dn=function(e,n){for(var t,r=(null!==(t=n.textContent)&&void 0!==t?t:"").split(de),o=[],l=0,a=r.length;l<a;l++){var i=r[l].trim();if(i){var s=i.match(cn);if(s){var u=0|parseInt(s[1],10),c=s[2];0!==u&&(sn(c,u),fn(e,c,s[3]),e.getTag().insertRules(u,o)),o.length=0}else o.push(i)}}},pn=function(e){for(var n=document.querySelectorAll(un),t=0,r=n.length;t<r;t++){var o=n[t];o&&o.getAttribute(se)!==ue&&(dn(e,o),o.parentNode&&o.parentNode.removeChild(o))}};function hn(){return t.nc}var mn=function(e){var n=document.head,t=e||n,r=document.createElement("style"),o=function(e){var n=Array.from(e.querySelectorAll("style[".concat(se,"]")));return n[n.length-1]}(t),l=void 0!==o?o.nextSibling:null;r.setAttribute(se,ue),r.setAttribute(ce,fe);var a=hn();return a&&r.setAttribute("nonce",a),t.insertBefore(r,l),r},gn=function(){function e(e){this.element=mn(e),this.element.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var n=document.styleSheets,t=0,r=n.length;t<r;t++){var o=n[t];if(o.ownerNode===e)return o}throw nn(17)}(this.element),this.length=0}return e.prototype.insertRule=function(e,n){try{return this.sheet.insertRule(n,e),this.length++,!0}catch(e){return!1}},e.prototype.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},e.prototype.getRule=function(e){var n=this.sheet.cssRules[e];return n&&n.cssText?n.cssText:""},e}(),yn=function(){function e(e){this.element=mn(e),this.nodes=this.element.childNodes,this.length=0}return e.prototype.insertRule=function(e,n){if(e<=this.length&&e>=0){var t=document.createTextNode(n);return this.element.insertBefore(t,this.nodes[e]||null),this.length++,!0}return!1},e.prototype.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},e.prototype.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),vn=function(){function e(e){this.rules=[],this.length=0}return e.prototype.insertRule=function(e,n){return e<=this.length&&(this.rules.splice(e,0,n),this.length++,!0)},e.prototype.deleteRule=function(e){this.rules.splice(e,1),this.length--},e.prototype.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),bn=pe,wn={isServer:!pe,useCSSOMInjection:!he},kn=function(){function e(e,n,t){void 0===e&&(e=ye),void 0===n&&(n={});var o=this;this.options=r(r({},wn),e),this.gs=n,this.names=new Map(t),this.server=!!e.isServer,!this.server&&pe&&bn&&(bn=!1,pn(this)),en(this,(function(){return function(e){for(var n=e.getTag(),t=n.length,r="",o=function(t){var o=function(e){return on.get(e)}(t);if(void 0===o)return"continue";var l=e.names.get(o),a=n.getGroup(t);if(void 0===l||!l.size||0===a.length)return"continue";var i="".concat(se,".g").concat(t,'[id="').concat(o,'"]'),s="";void 0!==l&&l.forEach((function(e){e.length>0&&(s+="".concat(e,","))})),r+="".concat(a).concat(i,'{content:"').concat(s,'"}').concat(de)},l=0;l<t;l++)o(l);return r}(o)}))}return e.registerId=function(e){return an(e)},e.prototype.rehydrate=function(){!this.server&&pe&&pn(this)},e.prototype.reconstructWithOptions=function(n,t){return void 0===t&&(t=!0),new e(r(r({},this.options),n),this.gs,t&&this.names||void 0)},e.prototype.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},e.prototype.getTag=function(){return this.tag||(this.tag=(e=function(e){var n=e.useCSSOMInjection,t=e.target;return e.isServer?new vn(t):n?new gn(t):new yn(t)}(this.options),new tn(e)));var e},e.prototype.hasNameForId=function(e,n){return this.names.has(e)&&this.names.get(e).has(n)},e.prototype.registerName=function(e,n){if(an(e),this.names.has(e))this.names.get(e).add(n);else{var t=new Set;t.add(n),this.names.set(e,t)}},e.prototype.insertRules=function(e,n,t){this.registerName(e,n),this.getTag().insertRules(an(e),t)},e.prototype.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},e.prototype.clearRules=function(e){this.getTag().clearGroup(an(e)),this.clearNames(e)},e.prototype.clearTag=function(){this.tag=void 0},e}(),An=/&/g,Sn=/^\s*\/\/.*$/gm;function xn(e,n){return e.map((function(e){return"rule"===e.type&&(e.value="".concat(n," ").concat(e.value),e.value=e.value.replaceAll(",",",".concat(n," ")),e.props=e.props.map((function(e){return"".concat(n," ").concat(e)}))),Array.isArray(e.children)&&"@keyframes"!==e.type&&(e.children=xn(e.children,n)),e}))}function Cn(e){var n,t,r,o=void 0===e?ye:e,l=o.options,a=void 0===l?ye:l,i=o.plugins,s=void 0===i?ge:i,u=function(e,r,o){return o.startsWith(t)&&o.endsWith(t)&&o.replaceAll(t,"").length>0?".".concat(n):e},c=s.slice();c.push((function(e){e.type===d&&e.value.includes("&")&&(e.props[0]=e.props[0].replace(An,t).replace(r,u))})),a.prefix&&c.push(ee),c.push(Z);var f=function(e,o,l,i){void 0===o&&(o=""),void 0===l&&(l=""),void 0===i&&(i="&"),n=i,t=o,r=new RegExp("\\".concat(t,"\\b"),"g");var s=e.replace(Sn,""),u=ne(l||o?"".concat(l," ").concat(o," { ").concat(s," }"):s);a.namespace&&(u=xn(u,a.namespace));var f,d,p,h=[];return X(u,(f=c.concat((p=function(e){return h.push(e)},function(e){e.root||(e=e.return)&&p(e)})),d=B(f),function(e,n,t,r){for(var o="",l=0;l<d;l++)o+=f[l](e,n,t,r)||"";return o})),h};return f.hash=s.length?s.reduce((function(e,n){return n.name||nn(15),Pe(e,n.name)}),Fe).toString():"",f}var En=new kn,Bn=Cn(),Fn=l.createContext({shouldForwardProp:void 0,styleSheet:En,stylis:Bn}),Pn=(Fn.Consumer,l.createContext(void 0));function Un(){return(0,l.useContext)(Fn)}function Tn(e){var n=(0,l.useState)(e.stylisPlugins),t=n[0],r=n[1],o=Un().styleSheet,a=(0,l.useMemo)((function(){var n=o;return e.sheet?n=e.sheet:e.target&&(n=n.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(n=n.reconstructWithOptions({useCSSOMInjection:!1})),n}),[e.disableCSSOMInjection,e.sheet,e.target,o]),s=(0,l.useMemo)((function(){return Cn({options:{namespace:e.namespace,prefix:e.enableVendorPrefixes},plugins:t})}),[e.enableVendorPrefixes,e.namespace,t]);(0,l.useEffect)((function(){i()(t,e.stylisPlugins)||r(e.stylisPlugins)}),[e.stylisPlugins]);var u=(0,l.useMemo)((function(){return{shouldForwardProp:e.shouldForwardProp,styleSheet:a,stylis:s}}),[e.shouldForwardProp,a,s]);return l.createElement(Fn.Provider,{value:u},l.createElement(Pn.Provider,{value:s},e.children))}var _n=function(){function e(e,n){var t=this;this.inject=function(e,n){void 0===n&&(n=Bn);var r=t.name+n.hash;e.hasNameForId(t.id,r)||e.insertRules(t.id,r,n(t.rules,r,"@keyframes"))},this.name=e,this.id="sc-keyframes-".concat(e),this.rules=n,en(this,(function(){throw nn(12,String(t.name))}))}return e.prototype.getName=function(e){return void 0===e&&(e=Bn),this.name+e.hash},e}(),In=function(e){return e>="A"&&e<="Z"};function zn(e){for(var n="",t=0;t<e.length;t++){var r=e[t];if(1===t&&"-"===r&&"-"===e[0])return e;In(r)?n+="-"+r.toLowerCase():n+=r}return n.startsWith("ms-")?"-"+n:n}var On=function(e){return null==e||!1===e||""===e},Ln=function(e){var n,t,r=[];for(var l in e){var a=e[l];e.hasOwnProperty(l)&&!On(a)&&(Array.isArray(a)&&a.isCss||Ke(a)?r.push("".concat(zn(l),":"),a,";"):Ze(a)?r.push.apply(r,o(o(["".concat(l," {")],Ln(a),!1),["}"],!1)):r.push("".concat(zn(l),": ").concat((n=l,null==(t=a)||"boolean"==typeof t||""===t?"":"number"!=typeof t||0===t||n in ae||n.startsWith("--")?String(t).trim():"".concat(t,"px")),";")))}return r};function Nn(e,n,t,r){return On(e)?[]:Ye(e)?[".".concat(e.styledComponentId)]:Ke(e)?!Ke(o=e)||o.prototype&&o.prototype.isReactComponent||!n?[e]:Nn(e(n),n,t,r):e instanceof _n?t?(e.inject(t,r),[e.getName(r)]):[e]:Ze(e)?Ln(e):Array.isArray(e)?Array.prototype.concat.apply(ge,e.map((function(e){return Nn(e,n,t,r)}))):[e.toString()];var o}function Dn(e){for(var n=0;n<e.length;n+=1){var t=e[n];if(Ke(t)&&!Ye(t))return!1}return!0}var Rn=Ue(fe),Mn=function(){function e(e,n,t){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===t||t.isStatic)&&Dn(e),this.componentId=n,this.baseHash=Pe(Rn,n),this.baseStyle=t,kn.registerId(n)}return e.prototype.generateAndInjectStyles=function(e,n,t){var r=this.baseStyle?this.baseStyle.generateAndInjectStyles(e,n,t):"";if(this.isStatic&&!t.hash)if(this.staticRulesId&&n.hasNameForId(this.componentId,this.staticRulesId))r=Ge(r,this.staticRulesId);else{var o=Xe(Nn(this.rules,e,n,t)),l=Ee(Pe(this.baseHash,o)>>>0);if(!n.hasNameForId(this.componentId,l)){var a=t(o,".".concat(l),void 0,this.componentId);n.insertRules(this.componentId,l,a)}r=Ge(r,l),this.staticRulesId=l}else{for(var i=Pe(this.baseHash,t.hash),s="",u=0;u<this.rules.length;u++){var c=this.rules[u];if("string"==typeof c)s+=c;else if(c){var f=Xe(Nn(c,e,n,t));i=Pe(i,f+u),s+=f}}if(s){var d=Ee(i>>>0);n.hasNameForId(this.componentId,d)||n.insertRules(this.componentId,d,t(s,".".concat(d),void 0,this.componentId)),r=Ge(r,d)}}return r},e}(),jn=l.createContext(void 0);jn.Consumer;var Hn={};function $n(e,n,t){var o=Ye(e),a=e,i=!_e(e),s=n.attrs,u=void 0===s?ge:s,c=n.componentId,f=void 0===c?function(e,n){var t="string"!=typeof e?"sc":Ae(e);Hn[t]=(Hn[t]||0)+1;var r="".concat(t,"-").concat(Te(fe+t+Hn[t]));return n?"".concat(n,"-").concat(r):r}(n.displayName,n.parentComponentId):c,d=n.displayName,p=void 0===d?function(e){return _e(e)?"styled.".concat(e):"Styled(".concat(function(e){return e.displayName||e.name||"Component"}(e),")")}(e):d,h=n.displayName&&n.componentId?"".concat(Ae(n.displayName),"-").concat(n.componentId):n.componentId||f,m=o&&a.attrs?a.attrs.concat(u).filter(Boolean):u,g=n.shouldForwardProp;if(o&&a.shouldForwardProp){var y=a.shouldForwardProp;if(n.shouldForwardProp){var v=n.shouldForwardProp;g=function(e,n){return y(e,n)&&v(e,n)}}else g=y}var b=new Mn(t,h,o?a.componentStyle:void 0);function w(e,n){return function(e,n,t){var o=e.attrs,a=e.componentStyle,i=e.defaultProps,s=e.foldedComponentIds,u=e.styledComponentId,c=e.target,f=l.useContext(jn),d=Un(),p=e.shouldForwardProp||d.shouldForwardProp,h=ve(n,f,i)||ye,m=function(e,n,t){for(var o,l=r(r({},n),{className:void 0,theme:t}),a=0;a<e.length;a+=1){var i=Ke(o=e[a])?o(l):o;for(var s in i)l[s]="className"===s?Ge(l[s],i[s]):"style"===s?r(r({},l[s]),i[s]):i[s]}return n.className&&(l.className=Ge(l.className,n.className)),l}(o,n,h),g=m.as||c,y={};for(var v in m)void 0===m[v]||"$"===v[0]||"as"===v||"theme"===v&&m.theme===h||("forwardedAs"===v?y.as=m.forwardedAs:p&&!p(v,g)||(y[v]=m[v]));var b=function(e,n){var t=Un();return e.generateAndInjectStyles(n,t.styleSheet,t.stylis)}(a,m),w=Ge(s,u);return b&&(w+=" "+b),m.className&&(w+=" "+m.className),y[_e(g)&&!be.has(g)?"class":"className"]=w,t&&(y.ref=t),(0,l.createElement)(g,y)}(k,e,n)}w.displayName=p;var k=l.forwardRef(w);return k.attrs=m,k.componentStyle=b,k.displayName=p,k.shouldForwardProp=g,k.foldedComponentIds=o?Ge(a.foldedComponentIds,a.styledComponentId):"",k.styledComponentId=h,k.target=o?a.target:e,Object.defineProperty(k,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(e){this._foldedDefaultProps=o?function(e){for(var n=[],t=1;t<arguments.length;t++)n[t-1]=arguments[t];for(var r=0,o=n;r<o.length;r++)Je(e,o[r],!0);return e}({},a.defaultProps,e):e}}),en(k,(function(){return".".concat(k.styledComponentId)})),i&&Qe(k,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0}),k}function Vn(e,n){for(var t=[e[0]],r=0,o=n.length;r<o;r+=1)t.push(n[r],e[r+1]);return t}new Set;var qn=function(e){return Object.assign(e,{isCss:!0})};function Wn(e){for(var n=[],t=1;t<arguments.length;t++)n[t-1]=arguments[t];if(Ke(e)||Ze(e))return qn(Nn(Vn(ge,o([e],n,!0))));var r=e;return 0===n.length&&1===r.length&&"string"==typeof r[0]?Nn(r):qn(Nn(Vn(r,n)))}function Qn(e,n,t){if(void 0===t&&(t=ye),!n)throw nn(1,n);var l=function(r){for(var l=[],a=1;a<arguments.length;a++)l[a-1]=arguments[a];return e(n,t,Wn.apply(void 0,o([r],l,!1)))};return l.attrs=function(o){return Qn(e,n,r(r({},t),{attrs:Array.prototype.concat(t.attrs,o).filter(Boolean)}))},l.withConfig=function(o){return Qn(e,n,r(r({},t),o))},l}var Kn=function(e){return Qn($n,e)},Yn=Kn;be.forEach((function(e){Yn[e]=Kn(e)}));var Gn=function(){function e(e,n){this.rules=e,this.componentId=n,this.isStatic=Dn(e),kn.registerId(this.componentId+1)}return e.prototype.createStyles=function(e,n,t,r){var o=r(Xe(Nn(this.rules,n,t,r)),""),l=this.componentId+e;t.insertRules(l,l,o)},e.prototype.removeStyles=function(e,n){n.clearRules(this.componentId+e)},e.prototype.renderStyles=function(e,n,t,r){e>2&&kn.registerId(this.componentId+e),this.removeStyles(e,t),this.createStyles(e,n,t,r)},e}();function Xn(e){for(var n=[],t=1;t<arguments.length;t++)n[t-1]=arguments[t];var a=Wn.apply(void 0,o([e],n,!1)),i="sc-global-".concat(Te(JSON.stringify(a))),s=new Gn(a,i),u=function(e){var n=Un(),t=l.useContext(jn),r=l.useRef(n.styleSheet.allocateGSInstance(i)).current;return n.styleSheet.server&&c(r,e,n.styleSheet,t,n.stylis),l.useLayoutEffect((function(){if(!n.styleSheet.server)return c(r,e,n.styleSheet,t,n.stylis),function(){return s.removeStyles(r,n.styleSheet)}}),[r,e,n.styleSheet,t,n.stylis]),null};function c(e,n,t,o,l){if(s.isStatic)s.renderStyles(e,me,t,l);else{var a=r(r({},n),{theme:ve(n,o,u.defaultProps)});s.renderStyles(e,a,t,l)}}return l.memo(u)}(function(){function e(){var e=this;this._emitSheetCSS=function(){var n=e.instance.toString();if(!n)return"";var t=hn(),r=Xe([t&&'nonce="'.concat(t,'"'),"".concat(se,'="true"'),"".concat(ce,'="').concat(fe,'"')].filter(Boolean)," ");return"<style ".concat(r,">").concat(n,"</style>")},this.getStyleTags=function(){if(e.sealed)throw nn(2);return e._emitSheetCSS()},this.getStyleElement=function(){var n;if(e.sealed)throw nn(2);var t=e.instance.toString();if(!t)return[];var o=((n={})[se]="",n[ce]=fe,n.dangerouslySetInnerHTML={__html:t},n),a=hn();return a&&(o.nonce=a),[l.createElement("style",r({},o,{key:"sc-0-0"}))]},this.seal=function(){e.sealed=!0},this.instance=new kn({isServer:!0}),this.sealed=!1}e.prototype.collectStyles=function(e){if(this.sealed)throw nn(2);return l.createElement(Tn,{sheet:this.instance},e)},e.prototype.interleaveWithNodeStream=function(e){throw nn(3)}})(),"__sc-".concat(se,"__")},7652:(e,n,t)=>{"use strict";e.exports=t.p+"2a0783bd1c6c1469558b.woff2"},7659:e=>{"use strict";var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},7825:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var l=t.sourceMap;l&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(l))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},7830:(e,n,t)=>{"use strict";e.exports=t.p+"7ab4304a4f29ec9dc89c.woff2"},8222:(e,n,t)=>{"use strict";e.exports=t.p+"122371a2c0cfc6530047.woff2"},8334:(e,n,t)=>{"use strict";t.d(n,{oz:()=>xr});var r={};t.r(r),t.d(r,{boolean:()=>g,booleanish:()=>y,commaOrSpaceSeparated:()=>A,commaSeparated:()=>k,number:()=>b,overloadedBoolean:()=>v,spaceSeparated:()=>w});var o={};t.r(o),t.d(o,{attentionMarkers:()=>Xn,contentInitial:()=>qn,disable:()=>Zn,document:()=>Vn,flow:()=>Qn,flowInitial:()=>Wn,insideSpan:()=>Gn,string:()=>Kn,text:()=>Yn});const l=/^[$_\p{ID_Start}][$_\u{200C}\u{200D}\p{ID_Continue}]*$/u,a=/^[$_\p{ID_Start}][-$_\u{200C}\u{200D}\p{ID_Continue}]*$/u,i={};function s(e,n){return((n||i).jsx?a:l).test(e)}const u=/[ \t\n\f\r]/g;function c(e){return""===e.replace(u,"")}class f{constructor(e,n,t){this.normal=n,this.property=e,t&&(this.space=t)}}function d(e,n){const t={},r={};for(const n of e)Object.assign(t,n.property),Object.assign(r,n.normal);return new f(t,r,n)}function p(e){return e.toLowerCase()}f.prototype.normal={},f.prototype.property={},f.prototype.space=void 0;class h{constructor(e,n){this.attribute=n,this.property=e}}h.prototype.attribute="",h.prototype.booleanish=!1,h.prototype.boolean=!1,h.prototype.commaOrSpaceSeparated=!1,h.prototype.commaSeparated=!1,h.prototype.defined=!1,h.prototype.mustUseProperty=!1,h.prototype.number=!1,h.prototype.overloadedBoolean=!1,h.prototype.property="",h.prototype.spaceSeparated=!1,h.prototype.space=void 0;let m=0;const g=S(),y=S(),v=S(),b=S(),w=S(),k=S(),A=S();function S(){return 2**++m}const x=Object.keys(r);class C extends h{constructor(e,n,t,o){let l=-1;if(super(e,n),E(this,"space",o),"number"==typeof t)for(;++l<x.length;){const e=x[l];E(this,x[l],(t&r[e])===r[e])}}}function E(e,n,t){t&&(e[n]=t)}function B(e){const n={},t={};for(const[r,o]of Object.entries(e.properties)){const l=new C(r,e.transform(e.attributes||{},r),o,e.space);e.mustUseProperty&&e.mustUseProperty.includes(r)&&(l.mustUseProperty=!0),n[r]=l,t[p(r)]=r,t[p(l.attribute)]=r}return new f(n,t,e.space)}C.prototype.defined=!0;const F=B({properties:{ariaActiveDescendant:null,ariaAtomic:y,ariaAutoComplete:null,ariaBusy:y,ariaChecked:y,ariaColCount:b,ariaColIndex:b,ariaColSpan:b,ariaControls:w,ariaCurrent:null,ariaDescribedBy:w,ariaDetails:null,ariaDisabled:y,ariaDropEffect:w,ariaErrorMessage:null,ariaExpanded:y,ariaFlowTo:w,ariaGrabbed:y,ariaHasPopup:null,ariaHidden:y,ariaInvalid:null,ariaKeyShortcuts:null,ariaLabel:null,ariaLabelledBy:w,ariaLevel:b,ariaLive:null,ariaModal:y,ariaMultiLine:y,ariaMultiSelectable:y,ariaOrientation:null,ariaOwns:w,ariaPlaceholder:null,ariaPosInSet:b,ariaPressed:y,ariaReadOnly:y,ariaRelevant:null,ariaRequired:y,ariaRoleDescription:w,ariaRowCount:b,ariaRowIndex:b,ariaRowSpan:b,ariaSelected:y,ariaSetSize:b,ariaSort:null,ariaValueMax:b,ariaValueMin:b,ariaValueNow:b,ariaValueText:null,role:null},transform:(e,n)=>"role"===n?n:"aria-"+n.slice(4).toLowerCase()});function P(e,n){return n in e?e[n]:n}function U(e,n){return P(e,n.toLowerCase())}const T=B({attributes:{acceptcharset:"accept-charset",classname:"class",htmlfor:"for",httpequiv:"http-equiv"},mustUseProperty:["checked","multiple","muted","selected"],properties:{abbr:null,accept:k,acceptCharset:w,accessKey:w,action:null,allow:null,allowFullScreen:g,allowPaymentRequest:g,allowUserMedia:g,alt:null,as:null,async:g,autoCapitalize:null,autoComplete:w,autoFocus:g,autoPlay:g,blocking:w,capture:null,charSet:null,checked:g,cite:null,className:w,cols:b,colSpan:null,content:null,contentEditable:y,controls:g,controlsList:w,coords:b|k,crossOrigin:null,data:null,dateTime:null,decoding:null,default:g,defer:g,dir:null,dirName:null,disabled:g,download:v,draggable:y,encType:null,enterKeyHint:null,fetchPriority:null,form:null,formAction:null,formEncType:null,formMethod:null,formNoValidate:g,formTarget:null,headers:w,height:b,hidden:g,high:b,href:null,hrefLang:null,htmlFor:w,httpEquiv:w,id:null,imageSizes:null,imageSrcSet:null,inert:g,inputMode:null,integrity:null,is:null,isMap:g,itemId:null,itemProp:w,itemRef:w,itemScope:g,itemType:w,kind:null,label:null,lang:null,language:null,list:null,loading:null,loop:g,low:b,manifest:null,max:null,maxLength:b,media:null,method:null,min:null,minLength:b,multiple:g,muted:g,name:null,nonce:null,noModule:g,noValidate:g,onAbort:null,onAfterPrint:null,onAuxClick:null,onBeforeMatch:null,onBeforePrint:null,onBeforeToggle:null,onBeforeUnload:null,onBlur:null,onCancel:null,onCanPlay:null,onCanPlayThrough:null,onChange:null,onClick:null,onClose:null,onContextLost:null,onContextMenu:null,onContextRestored:null,onCopy:null,onCueChange:null,onCut:null,onDblClick:null,onDrag:null,onDragEnd:null,onDragEnter:null,onDragExit:null,onDragLeave:null,onDragOver:null,onDragStart:null,onDrop:null,onDurationChange:null,onEmptied:null,onEnded:null,onError:null,onFocus:null,onFormData:null,onHashChange:null,onInput:null,onInvalid:null,onKeyDown:null,onKeyPress:null,onKeyUp:null,onLanguageChange:null,onLoad:null,onLoadedData:null,onLoadedMetadata:null,onLoadEnd:null,onLoadStart:null,onMessage:null,onMessageError:null,onMouseDown:null,onMouseEnter:null,onMouseLeave:null,onMouseMove:null,onMouseOut:null,onMouseOver:null,onMouseUp:null,onOffline:null,onOnline:null,onPageHide:null,onPageShow:null,onPaste:null,onPause:null,onPlay:null,onPlaying:null,onPopState:null,onProgress:null,onRateChange:null,onRejectionHandled:null,onReset:null,onResize:null,onScroll:null,onScrollEnd:null,onSecurityPolicyViolation:null,onSeeked:null,onSeeking:null,onSelect:null,onSlotChange:null,onStalled:null,onStorage:null,onSubmit:null,onSuspend:null,onTimeUpdate:null,onToggle:null,onUnhandledRejection:null,onUnload:null,onVolumeChange:null,onWaiting:null,onWheel:null,open:g,optimum:b,pattern:null,ping:w,placeholder:null,playsInline:g,popover:null,popoverTarget:null,popoverTargetAction:null,poster:null,preload:null,readOnly:g,referrerPolicy:null,rel:w,required:g,reversed:g,rows:b,rowSpan:b,sandbox:w,scope:null,scoped:g,seamless:g,selected:g,shadowRootClonable:g,shadowRootDelegatesFocus:g,shadowRootMode:null,shape:null,size:b,sizes:null,slot:null,span:b,spellCheck:y,src:null,srcDoc:null,srcLang:null,srcSet:null,start:b,step:null,style:null,tabIndex:b,target:null,title:null,translate:null,type:null,typeMustMatch:g,useMap:null,value:y,width:b,wrap:null,writingSuggestions:null,align:null,aLink:null,archive:w,axis:null,background:null,bgColor:null,border:b,borderColor:null,bottomMargin:b,cellPadding:null,cellSpacing:null,char:null,charOff:null,classId:null,clear:null,code:null,codeBase:null,codeType:null,color:null,compact:g,declare:g,event:null,face:null,frame:null,frameBorder:null,hSpace:b,leftMargin:b,link:null,longDesc:null,lowSrc:null,marginHeight:b,marginWidth:b,noResize:g,noHref:g,noShade:g,noWrap:g,object:null,profile:null,prompt:null,rev:null,rightMargin:b,rules:null,scheme:null,scrolling:y,standby:null,summary:null,text:null,topMargin:b,valueType:null,version:null,vAlign:null,vLink:null,vSpace:b,allowTransparency:null,autoCorrect:null,autoSave:null,disablePictureInPicture:g,disableRemotePlayback:g,prefix:null,property:null,results:b,security:null,unselectable:null},space:"html",transform:U}),_=B({attributes:{accentHeight:"accent-height",alignmentBaseline:"alignment-baseline",arabicForm:"arabic-form",baselineShift:"baseline-shift",capHeight:"cap-height",className:"class",clipPath:"clip-path",clipRule:"clip-rule",colorInterpolation:"color-interpolation",colorInterpolationFilters:"color-interpolation-filters",colorProfile:"color-profile",colorRendering:"color-rendering",crossOrigin:"crossorigin",dataType:"datatype",dominantBaseline:"dominant-baseline",enableBackground:"enable-background",fillOpacity:"fill-opacity",fillRule:"fill-rule",floodColor:"flood-color",floodOpacity:"flood-opacity",fontFamily:"font-family",fontSize:"font-size",fontSizeAdjust:"font-size-adjust",fontStretch:"font-stretch",fontStyle:"font-style",fontVariant:"font-variant",fontWeight:"font-weight",glyphName:"glyph-name",glyphOrientationHorizontal:"glyph-orientation-horizontal",glyphOrientationVertical:"glyph-orientation-vertical",hrefLang:"hreflang",horizAdvX:"horiz-adv-x",horizOriginX:"horiz-origin-x",horizOriginY:"horiz-origin-y",imageRendering:"image-rendering",letterSpacing:"letter-spacing",lightingColor:"lighting-color",markerEnd:"marker-end",markerMid:"marker-mid",markerStart:"marker-start",navDown:"nav-down",navDownLeft:"nav-down-left",navDownRight:"nav-down-right",navLeft:"nav-left",navNext:"nav-next",navPrev:"nav-prev",navRight:"nav-right",navUp:"nav-up",navUpLeft:"nav-up-left",navUpRight:"nav-up-right",onAbort:"onabort",onActivate:"onactivate",onAfterPrint:"onafterprint",onBeforePrint:"onbeforeprint",onBegin:"onbegin",onCancel:"oncancel",onCanPlay:"oncanplay",onCanPlayThrough:"oncanplaythrough",onChange:"onchange",onClick:"onclick",onClose:"onclose",onCopy:"oncopy",onCueChange:"oncuechange",onCut:"oncut",onDblClick:"ondblclick",onDrag:"ondrag",onDragEnd:"ondragend",onDragEnter:"ondragenter",onDragExit:"ondragexit",onDragLeave:"ondragleave",onDragOver:"ondragover",onDragStart:"ondragstart",onDrop:"ondrop",onDurationChange:"ondurationchange",onEmptied:"onemptied",onEnd:"onend",onEnded:"onended",onError:"onerror",onFocus:"onfocus",onFocusIn:"onfocusin",onFocusOut:"onfocusout",onHashChange:"onhashchange",onInput:"oninput",onInvalid:"oninvalid",onKeyDown:"onkeydown",onKeyPress:"onkeypress",onKeyUp:"onkeyup",onLoad:"onload",onLoadedData:"onloadeddata",onLoadedMetadata:"onloadedmetadata",onLoadStart:"onloadstart",onMessage:"onmessage",onMouseDown:"onmousedown",onMouseEnter:"onmouseenter",onMouseLeave:"onmouseleave",onMouseMove:"onmousemove",onMouseOut:"onmouseout",onMouseOver:"onmouseover",onMouseUp:"onmouseup",onMouseWheel:"onmousewheel",onOffline:"onoffline",onOnline:"ononline",onPageHide:"onpagehide",onPageShow:"onpageshow",onPaste:"onpaste",onPause:"onpause",onPlay:"onplay",onPlaying:"onplaying",onPopState:"onpopstate",onProgress:"onprogress",onRateChange:"onratechange",onRepeat:"onrepeat",onReset:"onreset",onResize:"onresize",onScroll:"onscroll",onSeeked:"onseeked",onSeeking:"onseeking",onSelect:"onselect",onShow:"onshow",onStalled:"onstalled",onStorage:"onstorage",onSubmit:"onsubmit",onSuspend:"onsuspend",onTimeUpdate:"ontimeupdate",onToggle:"ontoggle",onUnload:"onunload",onVolumeChange:"onvolumechange",onWaiting:"onwaiting",onZoom:"onzoom",overlinePosition:"overline-position",overlineThickness:"overline-thickness",paintOrder:"paint-order",panose1:"panose-1",pointerEvents:"pointer-events",referrerPolicy:"referrerpolicy",renderingIntent:"rendering-intent",shapeRendering:"shape-rendering",stopColor:"stop-color",stopOpacity:"stop-opacity",strikethroughPosition:"strikethrough-position",strikethroughThickness:"strikethrough-thickness",strokeDashArray:"stroke-dasharray",strokeDashOffset:"stroke-dashoffset",strokeLineCap:"stroke-linecap",strokeLineJoin:"stroke-linejoin",strokeMiterLimit:"stroke-miterlimit",strokeOpacity:"stroke-opacity",strokeWidth:"stroke-width",tabIndex:"tabindex",textAnchor:"text-anchor",textDecoration:"text-decoration",textRendering:"text-rendering",transformOrigin:"transform-origin",typeOf:"typeof",underlinePosition:"underline-position",underlineThickness:"underline-thickness",unicodeBidi:"unicode-bidi",unicodeRange:"unicode-range",unitsPerEm:"units-per-em",vAlphabetic:"v-alphabetic",vHanging:"v-hanging",vIdeographic:"v-ideographic",vMathematical:"v-mathematical",vectorEffect:"vector-effect",vertAdvY:"vert-adv-y",vertOriginX:"vert-origin-x",vertOriginY:"vert-origin-y",wordSpacing:"word-spacing",writingMode:"writing-mode",xHeight:"x-height",playbackOrder:"playbackorder",timelineBegin:"timelinebegin"},properties:{about:A,accentHeight:b,accumulate:null,additive:null,alignmentBaseline:null,alphabetic:b,amplitude:b,arabicForm:null,ascent:b,attributeName:null,attributeType:null,azimuth:b,bandwidth:null,baselineShift:null,baseFrequency:null,baseProfile:null,bbox:null,begin:null,bias:b,by:null,calcMode:null,capHeight:b,className:w,clip:null,clipPath:null,clipPathUnits:null,clipRule:null,color:null,colorInterpolation:null,colorInterpolationFilters:null,colorProfile:null,colorRendering:null,content:null,contentScriptType:null,contentStyleType:null,crossOrigin:null,cursor:null,cx:null,cy:null,d:null,dataType:null,defaultAction:null,descent:b,diffuseConstant:b,direction:null,display:null,dur:null,divisor:b,dominantBaseline:null,download:g,dx:null,dy:null,edgeMode:null,editable:null,elevation:b,enableBackground:null,end:null,event:null,exponent:b,externalResourcesRequired:null,fill:null,fillOpacity:b,fillRule:null,filter:null,filterRes:null,filterUnits:null,floodColor:null,floodOpacity:null,focusable:null,focusHighlight:null,fontFamily:null,fontSize:null,fontSizeAdjust:null,fontStretch:null,fontStyle:null,fontVariant:null,fontWeight:null,format:null,fr:null,from:null,fx:null,fy:null,g1:k,g2:k,glyphName:k,glyphOrientationHorizontal:null,glyphOrientationVertical:null,glyphRef:null,gradientTransform:null,gradientUnits:null,handler:null,hanging:b,hatchContentUnits:null,hatchUnits:null,height:null,href:null,hrefLang:null,horizAdvX:b,horizOriginX:b,horizOriginY:b,id:null,ideographic:b,imageRendering:null,initialVisibility:null,in:null,in2:null,intercept:b,k:b,k1:b,k2:b,k3:b,k4:b,kernelMatrix:A,kernelUnitLength:null,keyPoints:null,keySplines:null,keyTimes:null,kerning:null,lang:null,lengthAdjust:null,letterSpacing:null,lightingColor:null,limitingConeAngle:b,local:null,markerEnd:null,markerMid:null,markerStart:null,markerHeight:null,markerUnits:null,markerWidth:null,mask:null,maskContentUnits:null,maskUnits:null,mathematical:null,max:null,media:null,mediaCharacterEncoding:null,mediaContentEncodings:null,mediaSize:b,mediaTime:null,method:null,min:null,mode:null,name:null,navDown:null,navDownLeft:null,navDownRight:null,navLeft:null,navNext:null,navPrev:null,navRight:null,navUp:null,navUpLeft:null,navUpRight:null,numOctaves:null,observer:null,offset:null,onAbort:null,onActivate:null,onAfterPrint:null,onBeforePrint:null,onBegin:null,onCancel:null,onCanPlay:null,onCanPlayThrough:null,onChange:null,onClick:null,onClose:null,onCopy:null,onCueChange:null,onCut:null,onDblClick:null,onDrag:null,onDragEnd:null,onDragEnter:null,onDragExit:null,onDragLeave:null,onDragOver:null,onDragStart:null,onDrop:null,onDurationChange:null,onEmptied:null,onEnd:null,onEnded:null,onError:null,onFocus:null,onFocusIn:null,onFocusOut:null,onHashChange:null,onInput:null,onInvalid:null,onKeyDown:null,onKeyPress:null,onKeyUp:null,onLoad:null,onLoadedData:null,onLoadedMetadata:null,onLoadStart:null,onMessage:null,onMouseDown:null,onMouseEnter:null,onMouseLeave:null,onMouseMove:null,onMouseOut:null,onMouseOver:null,onMouseUp:null,onMouseWheel:null,onOffline:null,onOnline:null,onPageHide:null,onPageShow:null,onPaste:null,onPause:null,onPlay:null,onPlaying:null,onPopState:null,onProgress:null,onRateChange:null,onRepeat:null,onReset:null,onResize:null,onScroll:null,onSeeked:null,onSeeking:null,onSelect:null,onShow:null,onStalled:null,onStorage:null,onSubmit:null,onSuspend:null,onTimeUpdate:null,onToggle:null,onUnload:null,onVolumeChange:null,onWaiting:null,onZoom:null,opacity:null,operator:null,order:null,orient:null,orientation:null,origin:null,overflow:null,overlay:null,overlinePosition:b,overlineThickness:b,paintOrder:null,panose1:null,path:null,pathLength:b,patternContentUnits:null,patternTransform:null,patternUnits:null,phase:null,ping:w,pitch:null,playbackOrder:null,pointerEvents:null,points:null,pointsAtX:b,pointsAtY:b,pointsAtZ:b,preserveAlpha:null,preserveAspectRatio:null,primitiveUnits:null,propagate:null,property:A,r:null,radius:null,referrerPolicy:null,refX:null,refY:null,rel:A,rev:A,renderingIntent:null,repeatCount:null,repeatDur:null,requiredExtensions:A,requiredFeatures:A,requiredFonts:A,requiredFormats:A,resource:null,restart:null,result:null,rotate:null,rx:null,ry:null,scale:null,seed:null,shapeRendering:null,side:null,slope:null,snapshotTime:null,specularConstant:b,specularExponent:b,spreadMethod:null,spacing:null,startOffset:null,stdDeviation:null,stemh:null,stemv:null,stitchTiles:null,stopColor:null,stopOpacity:null,strikethroughPosition:b,strikethroughThickness:b,string:null,stroke:null,strokeDashArray:A,strokeDashOffset:null,strokeLineCap:null,strokeLineJoin:null,strokeMiterLimit:b,strokeOpacity:b,strokeWidth:null,style:null,surfaceScale:b,syncBehavior:null,syncBehaviorDefault:null,syncMaster:null,syncTolerance:null,syncToleranceDefault:null,systemLanguage:A,tabIndex:b,tableValues:null,target:null,targetX:b,targetY:b,textAnchor:null,textDecoration:null,textRendering:null,textLength:null,timelineBegin:null,title:null,transformBehavior:null,type:null,typeOf:A,to:null,transform:null,transformOrigin:null,u1:null,u2:null,underlinePosition:b,underlineThickness:b,unicode:null,unicodeBidi:null,unicodeRange:null,unitsPerEm:b,values:null,vAlphabetic:b,vMathematical:b,vectorEffect:null,vHanging:b,vIdeographic:b,version:null,vertAdvY:b,vertOriginX:b,vertOriginY:b,viewBox:null,viewTarget:null,visibility:null,width:null,widths:null,wordSpacing:null,writingMode:null,x:null,x1:null,x2:null,xChannelSelector:null,xHeight:b,y:null,y1:null,y2:null,yChannelSelector:null,z:null,zoomAndPan:null},space:"svg",transform:P}),I=B({properties:{xLinkActuate:null,xLinkArcRole:null,xLinkHref:null,xLinkRole:null,xLinkShow:null,xLinkTitle:null,xLinkType:null},space:"xlink",transform:(e,n)=>"xlink:"+n.slice(5).toLowerCase()}),z=B({attributes:{xmlnsxlink:"xmlns:xlink"},properties:{xmlnsXLink:null,xmlns:null},space:"xmlns",transform:U}),O=B({properties:{xmlBase:null,xmlLang:null,xmlSpace:null},space:"xml",transform:(e,n)=>"xml:"+n.slice(3).toLowerCase()}),L=d([F,T,I,z,O],"html"),N=d([F,_,I,z,O],"svg"),D=/[A-Z]/g,R=/-[a-z]/g,M=/^data[-\w.:]+$/i;function j(e){return"-"+e.toLowerCase()}function H(e){return e.charAt(1).toUpperCase()}const $={classId:"classID",dataType:"datatype",itemId:"itemID",strokeDashArray:"strokeDasharray",strokeDashOffset:"strokeDashoffset",strokeLineCap:"strokeLinecap",strokeLineJoin:"strokeLinejoin",strokeMiterLimit:"strokeMiterlimit",typeOf:"typeof",xLinkActuate:"xlinkActuate",xLinkArcRole:"xlinkArcrole",xLinkHref:"xlinkHref",xLinkRole:"xlinkRole",xLinkShow:"xlinkShow",xLinkTitle:"xlinkTitle",xLinkType:"xlinkType",xmlnsXLink:"xmlnsXlink"};var V=t(5229);const q=Q("end"),W=Q("start");function Q(e){return function(n){const t=n&&n.position&&n.position[e]||{};if("number"==typeof t.line&&t.line>0&&"number"==typeof t.column&&t.column>0)return{line:t.line,column:t.column,offset:"number"==typeof t.offset&&t.offset>-1?t.offset:void 0}}}function K(e){return e&&"object"==typeof e?"position"in e||"type"in e?G(e.position):"start"in e||"end"in e?G(e):"line"in e||"column"in e?Y(e):"":""}function Y(e){return X(e&&e.line)+":"+X(e&&e.column)}function G(e){return Y(e&&e.start)+"-"+Y(e&&e.end)}function X(e){return e&&"number"==typeof e?e:1}class Z extends Error{constructor(e,n,t){super(),"string"==typeof n&&(t=n,n=void 0);let r="",o={},l=!1;if(n&&(o="line"in n&&"column"in n||"start"in n&&"end"in n?{place:n}:"type"in n?{ancestors:[n],place:n.position}:{...n}),"string"==typeof e?r=e:!o.cause&&e&&(l=!0,r=e.message,o.cause=e),!o.ruleId&&!o.source&&"string"==typeof t){const e=t.indexOf(":");-1===e?o.ruleId=t:(o.source=t.slice(0,e),o.ruleId=t.slice(e+1))}if(!o.place&&o.ancestors&&o.ancestors){const e=o.ancestors[o.ancestors.length-1];e&&(o.place=e.position)}const a=o.place&&"start"in o.place?o.place.start:o.place;this.ancestors=o.ancestors||void 0,this.cause=o.cause||void 0,this.column=a?a.column:void 0,this.fatal=void 0,this.file,this.message=r,this.line=a?a.line:void 0,this.name=K(o.place)||"1:1",this.place=o.place||void 0,this.reason=this.message,this.ruleId=o.ruleId||void 0,this.source=o.source||void 0,this.stack=l&&o.cause&&"string"==typeof o.cause.stack?o.cause.stack:"",this.actual,this.expected,this.note,this.url}}Z.prototype.file="",Z.prototype.name="",Z.prototype.reason="",Z.prototype.message="",Z.prototype.stack="",Z.prototype.column=void 0,Z.prototype.line=void 0,Z.prototype.ancestors=void 0,Z.prototype.cause=void 0,Z.prototype.fatal=void 0,Z.prototype.place=void 0,Z.prototype.ruleId=void 0,Z.prototype.source=void 0;const J={}.hasOwnProperty,ee=new Map,ne=/[A-Z]/g,te=new Set(["table","tbody","thead","tfoot","tr"]),re=new Set(["td","th"]),oe="https://github.com/syntax-tree/hast-util-to-jsx-runtime";function le(e,n,t){return"element"===n.type?function(e,n,t){const r=e.schema;let o=r;"svg"===n.tagName.toLowerCase()&&"html"===r.space&&(o=N,e.schema=o),e.ancestors.push(n);const l=ce(e,n.tagName,!1),a=function(e,n){const t={};let r,o;for(o in n.properties)if("children"!==o&&J.call(n.properties,o)){const l=ue(e,o,n.properties[o]);if(l){const[o,a]=l;e.tableCellAlignToStyle&&"align"===o&&"string"==typeof a&&re.has(n.tagName)?r=a:t[o]=a}}return r&&((t.style||(t.style={}))["css"===e.stylePropertyNameCase?"text-align":"textAlign"]=r),t}(e,n);let i=se(e,n);return te.has(n.tagName)&&(i=i.filter((function(e){return"string"!=typeof e||!("object"==typeof(n=e)?"text"===n.type&&c(n.value):c(n));var n}))),ae(e,a,l,n),ie(a,i),e.ancestors.pop(),e.schema=r,e.create(n,l,a,t)}(e,n,t):"mdxFlowExpression"===n.type||"mdxTextExpression"===n.type?function(e,n){if(n.data&&n.data.estree&&e.evaluater){const t=n.data.estree.body[0];return t.type,e.evaluater.evaluateExpression(t.expression)}fe(e,n.position)}(e,n):"mdxJsxFlowElement"===n.type||"mdxJsxTextElement"===n.type?function(e,n,t){const r=e.schema;let o=r;"svg"===n.name&&"html"===r.space&&(o=N,e.schema=o),e.ancestors.push(n);const l=null===n.name?e.Fragment:ce(e,n.name,!0),a=function(e,n){const t={};for(const r of n.attributes)if("mdxJsxExpressionAttribute"===r.type)if(r.data&&r.data.estree&&e.evaluater){const n=r.data.estree.body[0];n.type;const o=n.expression;o.type;const l=o.properties[0];l.type,Object.assign(t,e.evaluater.evaluateExpression(l.argument))}else fe(e,n.position);else{const o=r.name;let l;if(r.value&&"object"==typeof r.value)if(r.value.data&&r.value.data.estree&&e.evaluater){const n=r.value.data.estree.body[0];n.type,l=e.evaluater.evaluateExpression(n.expression)}else fe(e,n.position);else l=null===r.value||r.value;t[o]=l}return t}(e,n),i=se(e,n);return ae(e,a,l,n),ie(a,i),e.ancestors.pop(),e.schema=r,e.create(n,l,a,t)}(e,n,t):"mdxjsEsm"===n.type?function(e,n){if(n.data&&n.data.estree&&e.evaluater)return e.evaluater.evaluateProgram(n.data.estree);fe(e,n.position)}(e,n):"root"===n.type?function(e,n,t){const r={};return ie(r,se(e,n)),e.create(n,e.Fragment,r,t)}(e,n,t):"text"===n.type?function(e,n){return n.value}(0,n):void 0}function ae(e,n,t,r){"string"!=typeof t&&t!==e.Fragment&&e.passNode&&(n.node=r)}function ie(e,n){if(n.length>0){const t=n.length>1?n:n[0];t&&(e.children=t)}}function se(e,n){const t=[];let r=-1;const o=e.passKeys?new Map:ee;for(;++r<n.children.length;){const l=n.children[r];let a;if(e.passKeys){const e="element"===l.type?l.tagName:"mdxJsxFlowElement"===l.type||"mdxJsxTextElement"===l.type?l.name:void 0;if(e){const n=o.get(e)||0;a=e+"-"+n,o.set(e,n+1)}}const i=le(e,l,a);void 0!==i&&t.push(i)}return t}function ue(e,n,t){const r=function(e,n){const t=p(n);let r=n,o=h;if(t in e.normal)return e.property[e.normal[t]];if(t.length>4&&"data"===t.slice(0,4)&&M.test(n)){if("-"===n.charAt(4)){const e=n.slice(5).replace(R,H);r="data"+e.charAt(0).toUpperCase()+e.slice(1)}else{const e=n.slice(4);if(!R.test(e)){let t=e.replace(D,j);"-"!==t.charAt(0)&&(t="-"+t),n="data"+t}}o=C}return new o(r,n)}(e.schema,n);if(!(null==t||"number"==typeof t&&Number.isNaN(t))){if(Array.isArray(t)&&(t=r.commaSeparated?function(e){const n={};return(""===e[e.length-1]?[...e,""]:e).join((n.padRight?" ":"")+","+(!1===n.padLeft?"":" ")).trim()}(t):t.join(" ").trim()),"style"===r.property){let n="object"==typeof t?t:function(e,n){try{return V(n,{reactCompat:!0})}catch(n){if(e.ignoreInvalidStyle)return{};const t=n,r=new Z("Cannot parse `style` attribute",{ancestors:e.ancestors,cause:t,ruleId:"style",source:"hast-util-to-jsx-runtime"});throw r.file=e.filePath||void 0,r.url=oe+"#cannot-parse-style-attribute",r}}(e,String(t));return"css"===e.stylePropertyNameCase&&(n=function(e){const n={};let t;for(t in e)J.call(e,t)&&(n[de(t)]=e[t]);return n}(n)),["style",n]}return["react"===e.elementAttributeNameCase&&r.space?$[r.property]||r.property:r.attribute,t]}}function ce(e,n,t){let r;if(t)if(n.includes(".")){const e=n.split(".");let t,o=-1;for(;++o<e.length;){const n=s(e[o])?{type:"Identifier",name:e[o]}:{type:"Literal",value:e[o]};t=t?{type:"MemberExpression",object:t,property:n,computed:Boolean(o&&"Literal"===n.type),optional:!1}:n}r=t}else r=s(n)&&!/^[a-z]/.test(n)?{type:"Identifier",name:n}:{type:"Literal",value:n};else r={type:"Literal",value:n};if("Literal"===r.type){const n=r.value;return J.call(e.components,n)?e.components[n]:n}if(e.evaluater)return e.evaluater.evaluateExpression(r);fe(e)}function fe(e,n){const t=new Z("Cannot handle MDX estrees without `createEvaluater`",{ancestors:e.ancestors,place:n,ruleId:"mdx-estree",source:"hast-util-to-jsx-runtime"});throw t.file=e.filePath||void 0,t.url=oe+"#cannot-handle-mdx-estrees-without-createevaluater",t}function de(e){let n=e.replace(ne,pe);return"ms-"===n.slice(0,3)&&(n="-"+n),n}function pe(e){return"-"+e.toLowerCase()}const he={action:["form"],cite:["blockquote","del","ins","q"],data:["object"],formAction:["button","input"],href:["a","area","base","link"],icon:["menuitem"],itemId:null,manifest:["html"],ping:["a","area"],poster:["video"],src:["audio","embed","iframe","img","input","script","source","track","video"]};var me=t(4848);t(6540);const ge={};function ye(e,n,t){if(function(e){return Boolean(e&&"object"==typeof e)}(e)){if("value"in e)return"html"!==e.type||t?e.value:"";if(n&&"alt"in e&&e.alt)return e.alt;if("children"in e)return ve(e.children,n,t)}return Array.isArray(e)?ve(e,n,t):""}function ve(e,n,t){const r=[];let o=-1;for(;++o<e.length;)r[o]=ye(e[o],n,t);return r.join("")}function be(e,n,t,r){const o=e.length;let l,a=0;if(n=n<0?-n>o?0:o+n:n>o?o:n,t=t>0?t:0,r.length<1e4)l=Array.from(r),l.unshift(n,t),e.splice(...l);else for(t&&e.splice(n,t);a<r.length;)l=r.slice(a,a+1e4),l.unshift(n,0),e.splice(...l),a+=1e4,n+=1e4}function we(e,n){return e.length>0?(be(e,e.length,0,n),e):n}class ke{constructor(e){this.left=e?[...e]:[],this.right=[]}get(e){if(e<0||e>=this.left.length+this.right.length)throw new RangeError("Cannot access index `"+e+"` in a splice buffer of size `"+(this.left.length+this.right.length)+"`");return e<this.left.length?this.left[e]:this.right[this.right.length-e+this.left.length-1]}get length(){return this.left.length+this.right.length}shift(){return this.setCursor(0),this.right.pop()}slice(e,n){const t=null==n?Number.POSITIVE_INFINITY:n;return t<this.left.length?this.left.slice(e,t):e>this.left.length?this.right.slice(this.right.length-t+this.left.length,this.right.length-e+this.left.length).reverse():this.left.slice(e).concat(this.right.slice(this.right.length-t+this.left.length).reverse())}splice(e,n,t){const r=n||0;this.setCursor(Math.trunc(e));const o=this.right.splice(this.right.length-r,Number.POSITIVE_INFINITY);return t&&Ae(this.left,t),o.reverse()}pop(){return this.setCursor(Number.POSITIVE_INFINITY),this.left.pop()}push(e){this.setCursor(Number.POSITIVE_INFINITY),this.left.push(e)}pushMany(e){this.setCursor(Number.POSITIVE_INFINITY),Ae(this.left,e)}unshift(e){this.setCursor(0),this.right.push(e)}unshiftMany(e){this.setCursor(0),Ae(this.right,e.reverse())}setCursor(e){if(!(e===this.left.length||e>this.left.length&&0===this.right.length||e<0&&0===this.left.length))if(e<this.left.length){const n=this.left.splice(e,Number.POSITIVE_INFINITY);Ae(this.right,n.reverse())}else{const n=this.right.splice(this.left.length+this.right.length-e,Number.POSITIVE_INFINITY);Ae(this.left,n.reverse())}}}function Ae(e,n){let t=0;if(n.length<1e4)e.push(...n);else for(;t<n.length;)e.push(...n.slice(t,t+1e4)),t+=1e4}function Se(e){const n={};let t,r,o,l,a,i,s,u=-1;const c=new ke(e);for(;++u<c.length;){for(;u in n;)u=n[u];if(t=c.get(u),u&&"chunkFlow"===t[1].type&&"listItemPrefix"===c.get(u-1)[1].type&&(i=t[1]._tokenizer.events,o=0,o<i.length&&"lineEndingBlank"===i[o][1].type&&(o+=2),o<i.length&&"content"===i[o][1].type))for(;++o<i.length&&"content"!==i[o][1].type;)"chunkText"===i[o][1].type&&(i[o][1]._isInFirstContentOfListItem=!0,o++);if("enter"===t[0])t[1].contentType&&(Object.assign(n,xe(c,u)),u=n[u],s=!0);else if(t[1]._container){for(o=u,r=void 0;o--;)if(l=c.get(o),"lineEnding"===l[1].type||"lineEndingBlank"===l[1].type)"enter"===l[0]&&(r&&(c.get(r)[1].type="lineEndingBlank"),l[1].type="lineEnding",r=o);else if("linePrefix"!==l[1].type&&"listItemIndent"!==l[1].type)break;r&&(t[1].end={...c.get(r)[1].start},a=c.slice(r,u),a.unshift(t),c.splice(r,u-r+1,a))}}return be(e,0,Number.POSITIVE_INFINITY,c.slice(0)),!s}function xe(e,n){const t=e.get(n)[1],r=e.get(n)[2];let o=n-1;const l=[];let a=t._tokenizer;a||(a=r.parser[t.contentType](t.start),t._contentTypeTextTrailing&&(a._contentTypeTextTrailing=!0));const i=a.events,s=[],u={};let c,f,d=-1,p=t,h=0,m=0;const g=[m];for(;p;){for(;e.get(++o)[1]!==p;);l.push(o),p._tokenizer||(c=r.sliceStream(p),p.next||c.push(null),f&&a.defineSkip(p.start),p._isInFirstContentOfListItem&&(a._gfmTasklistFirstContentOfListItem=!0),a.write(c),p._isInFirstContentOfListItem&&(a._gfmTasklistFirstContentOfListItem=void 0)),f=p,p=p.next}for(p=t;++d<i.length;)"exit"===i[d][0]&&"enter"===i[d-1][0]&&i[d][1].type===i[d-1][1].type&&i[d][1].start.line!==i[d][1].end.line&&(m=d+1,g.push(m),p._tokenizer=void 0,p.previous=void 0,p=p.next);for(a.events=[],p?(p._tokenizer=void 0,p.previous=void 0):g.pop(),d=g.length;d--;){const n=i.slice(g[d],g[d+1]),t=l.pop();s.push([t,t+n.length-1]),e.splice(t,2,n)}for(s.reverse(),d=-1;++d<s.length;)u[h+s[d][0]]=h+s[d][1],h+=s[d][1]-s[d][0]-1;return u}const Ce={}.hasOwnProperty;function Ee(e,n){let t;for(t in n){const r=(Ce.call(e,t)?e[t]:void 0)||(e[t]={}),o=n[t];let l;if(o)for(l in o){Ce.call(r,l)||(r[l]=[]);const e=o[l];Be(r[l],Array.isArray(e)?e:e?[e]:[])}}}function Be(e,n){let t=-1;const r=[];for(;++t<n.length;)("after"===n[t].add?e:r).push(n[t]);be(e,0,0,r)}const Fe=Me(/[A-Za-z]/),Pe=Me(/[\dA-Za-z]/),Ue=Me(/[#-'*+\--9=?A-Z^-~]/);function Te(e){return null!==e&&(e<32||127===e)}const _e=Me(/\d/),Ie=Me(/[\dA-Fa-f]/),ze=Me(/[!-/:-@[-`{-~]/);function Oe(e){return null!==e&&e<-2}function Le(e){return null!==e&&(e<0||32===e)}function Ne(e){return-2===e||-1===e||32===e}const De=Me(/\p{P}|\p{S}/u),Re=Me(/\s/);function Me(e){return function(n){return null!==n&&n>-1&&e.test(String.fromCharCode(n))}}function je(e,n,t,r){const o=r?r-1:Number.POSITIVE_INFINITY;let l=0;return function(r){return Ne(r)?(e.enter(t),a(r)):n(r)};function a(r){return Ne(r)&&l++<o?(e.consume(r),a):(e.exit(t),n(r))}}const He={tokenize:function(e){const n=e.attempt(this.parser.constructs.contentInitial,(function(t){if(null!==t)return e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),je(e,n,"linePrefix");e.consume(t)}),(function(n){return e.enter("paragraph"),r(n)}));let t;return n;function r(n){const r=e.enter("chunkText",{contentType:"text",previous:t});return t&&(t.next=r),t=r,o(n)}function o(n){return null===n?(e.exit("chunkText"),e.exit("paragraph"),void e.consume(n)):Oe(n)?(e.consume(n),e.exit("chunkText"),r):(e.consume(n),o)}}},$e={tokenize:function(e){const n=this,t=[];let r,o,l,a=0;return i;function i(r){if(a<t.length){const o=t[a];return n.containerState=o[1],e.attempt(o[0].continuation,s,u)(r)}return u(r)}function s(e){if(a++,n.containerState._closeFlow){n.containerState._closeFlow=void 0,r&&v();const t=n.events.length;let o,l=t;for(;l--;)if("exit"===n.events[l][0]&&"chunkFlow"===n.events[l][1].type){o=n.events[l][1].end;break}y(a);let i=t;for(;i<n.events.length;)n.events[i][1].end={...o},i++;return be(n.events,l+1,0,n.events.slice(t)),n.events.length=i,u(e)}return i(e)}function u(o){if(a===t.length){if(!r)return d(o);if(r.currentConstruct&&r.currentConstruct.concrete)return h(o);n.interrupt=Boolean(r.currentConstruct&&!r._gfmTableDynamicInterruptHack)}return n.containerState={},e.check(Ve,c,f)(o)}function c(e){return r&&v(),y(a),d(e)}function f(e){return n.parser.lazy[n.now().line]=a!==t.length,l=n.now().offset,h(e)}function d(t){return n.containerState={},e.attempt(Ve,p,h)(t)}function p(e){return a++,t.push([n.currentConstruct,n.containerState]),d(e)}function h(t){return null===t?(r&&v(),y(0),void e.consume(t)):(r=r||n.parser.flow(n.now()),e.enter("chunkFlow",{_tokenizer:r,contentType:"flow",previous:o}),m(t))}function m(t){return null===t?(g(e.exit("chunkFlow"),!0),y(0),void e.consume(t)):Oe(t)?(e.consume(t),g(e.exit("chunkFlow")),a=0,n.interrupt=void 0,i):(e.consume(t),m)}function g(e,t){const i=n.sliceStream(e);if(t&&i.push(null),e.previous=o,o&&(o.next=e),o=e,r.defineSkip(e.start),r.write(i),n.parser.lazy[e.start.line]){let e=r.events.length;for(;e--;)if(r.events[e][1].start.offset<l&&(!r.events[e][1].end||r.events[e][1].end.offset>l))return;const t=n.events.length;let o,i,s=t;for(;s--;)if("exit"===n.events[s][0]&&"chunkFlow"===n.events[s][1].type){if(o){i=n.events[s][1].end;break}o=!0}for(y(a),e=t;e<n.events.length;)n.events[e][1].end={...i},e++;be(n.events,s+1,0,n.events.slice(t)),n.events.length=e}}function y(r){let o=t.length;for(;o-- >r;){const r=t[o];n.containerState=r[1],r[0].exit.call(n,e)}t.length=r}function v(){r.write([null]),o=void 0,r=void 0,n.containerState._closeFlow=void 0}}},Ve={tokenize:function(e,n,t){return je(e,e.attempt(this.parser.constructs.document,n,t),"linePrefix",this.parser.constructs.disable.null.includes("codeIndented")?void 0:4)}},qe={partial:!0,tokenize:function(e,n,t){return function(n){return Ne(n)?je(e,r,"linePrefix")(n):r(n)};function r(e){return null===e||Oe(e)?n(e):t(e)}}},We={resolve:function(e){return Se(e),e},tokenize:function(e,n){let t;return function(n){return e.enter("content"),t=e.enter("chunkContent",{contentType:"content"}),r(n)};function r(n){return null===n?o(n):Oe(n)?e.check(Qe,l,o)(n):(e.consume(n),r)}function o(t){return e.exit("chunkContent"),e.exit("content"),n(t)}function l(n){return e.consume(n),e.exit("chunkContent"),t.next=e.enter("chunkContent",{contentType:"content",previous:t}),t=t.next,r}}},Qe={partial:!0,tokenize:function(e,n,t){const r=this;return function(n){return e.exit("chunkContent"),e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),je(e,o,"linePrefix")};function o(o){if(null===o||Oe(o))return t(o);const l=r.events[r.events.length-1];return!r.parser.constructs.disable.null.includes("codeIndented")&&l&&"linePrefix"===l[1].type&&l[2].sliceSerialize(l[1],!0).length>=4?n(o):e.interrupt(r.parser.constructs.flow,t,n)(o)}}},Ke={tokenize:function(e){const n=this,t=e.attempt(qe,(function(r){if(null!==r)return e.enter("lineEndingBlank"),e.consume(r),e.exit("lineEndingBlank"),n.currentConstruct=void 0,t;e.consume(r)}),e.attempt(this.parser.constructs.flowInitial,r,je(e,e.attempt(this.parser.constructs.flow,r,e.attempt(We,r)),"linePrefix")));return t;function r(r){if(null!==r)return e.enter("lineEnding"),e.consume(r),e.exit("lineEnding"),n.currentConstruct=void 0,t;e.consume(r)}}},Ye={resolveAll:Je()},Ge=Ze("string"),Xe=Ze("text");function Ze(e){return{resolveAll:Je("text"===e?en:void 0),tokenize:function(n){const t=this,r=this.parser.constructs[e],o=n.attempt(r,l,a);return l;function l(e){return s(e)?o(e):a(e)}function a(e){if(null!==e)return n.enter("data"),n.consume(e),i;n.consume(e)}function i(e){return s(e)?(n.exit("data"),o(e)):(n.consume(e),i)}function s(e){if(null===e)return!0;const n=r[e];let o=-1;if(n)for(;++o<n.length;){const e=n[o];if(!e.previous||e.previous.call(t,t.previous))return!0}return!1}}}}function Je(e){return function(n,t){let r,o=-1;for(;++o<=n.length;)void 0===r?n[o]&&"data"===n[o][1].type&&(r=o,o++):n[o]&&"data"===n[o][1].type||(o!==r+2&&(n[r][1].end=n[o-1][1].end,n.splice(r+2,o-r-2),o=r+2),r=void 0);return e?e(n,t):n}}function en(e,n){let t=0;for(;++t<=e.length;)if((t===e.length||"lineEnding"===e[t][1].type)&&"data"===e[t-1][1].type){const r=e[t-1][1],o=n.sliceStream(r);let l,a=o.length,i=-1,s=0;for(;a--;){const e=o[a];if("string"==typeof e){for(i=e.length;32===e.charCodeAt(i-1);)s++,i--;if(i)break;i=-1}else if(-2===e)l=!0,s++;else if(-1!==e){a++;break}}if(n._contentTypeTextTrailing&&t===e.length&&(s=0),s){const o={type:t===e.length||l||s<2?"lineSuffix":"hardBreakTrailing",start:{_bufferIndex:a?i:r.start._bufferIndex+i,_index:r.start._index+a,line:r.end.line,column:r.end.column-s,offset:r.end.offset-s},end:{...r.end}};r.end={...o.start},r.start.offset===r.end.offset?Object.assign(r,o):(e.splice(t,0,["enter",o,n],["exit",o,n]),t+=2)}t++}return e}const nn={name:"thematicBreak",tokenize:function(e,n,t){let r,o=0;return function(n){return e.enter("thematicBreak"),function(e){return r=e,l(e)}(n)};function l(l){return l===r?(e.enter("thematicBreakSequence"),a(l)):o>=3&&(null===l||Oe(l))?(e.exit("thematicBreak"),n(l)):t(l)}function a(n){return n===r?(e.consume(n),o++,a):(e.exit("thematicBreakSequence"),Ne(n)?je(e,l,"whitespace")(n):l(n))}}},tn={continuation:{tokenize:function(e,n,t){const r=this;return r.containerState._closeFlow=void 0,e.check(qe,(function(t){return r.containerState.furtherBlankLines=r.containerState.furtherBlankLines||r.containerState.initialBlankLine,je(e,n,"listItemIndent",r.containerState.size+1)(t)}),(function(t){return r.containerState.furtherBlankLines||!Ne(t)?(r.containerState.furtherBlankLines=void 0,r.containerState.initialBlankLine=void 0,o(t)):(r.containerState.furtherBlankLines=void 0,r.containerState.initialBlankLine=void 0,e.attempt(on,n,o)(t))}));function o(o){return r.containerState._closeFlow=!0,r.interrupt=void 0,je(e,e.attempt(tn,n,t),"linePrefix",r.parser.constructs.disable.null.includes("codeIndented")?void 0:4)(o)}}},exit:function(e){e.exit(this.containerState.type)},name:"list",tokenize:function(e,n,t){const r=this,o=r.events[r.events.length-1];let l=o&&"linePrefix"===o[1].type?o[2].sliceSerialize(o[1],!0).length:0,a=0;return function(n){const o=r.containerState.type||(42===n||43===n||45===n?"listUnordered":"listOrdered");if("listUnordered"===o?!r.containerState.marker||n===r.containerState.marker:_e(n)){if(r.containerState.type||(r.containerState.type=o,e.enter(o,{_container:!0})),"listUnordered"===o)return e.enter("listItemPrefix"),42===n||45===n?e.check(nn,t,s)(n):s(n);if(!r.interrupt||49===n)return e.enter("listItemPrefix"),e.enter("listItemValue"),i(n)}return t(n)};function i(n){return _e(n)&&++a<10?(e.consume(n),i):(!r.interrupt||a<2)&&(r.containerState.marker?n===r.containerState.marker:41===n||46===n)?(e.exit("listItemValue"),s(n)):t(n)}function s(n){return e.enter("listItemMarker"),e.consume(n),e.exit("listItemMarker"),r.containerState.marker=r.containerState.marker||n,e.check(qe,r.interrupt?t:u,e.attempt(rn,f,c))}function u(e){return r.containerState.initialBlankLine=!0,l++,f(e)}function c(n){return Ne(n)?(e.enter("listItemPrefixWhitespace"),e.consume(n),e.exit("listItemPrefixWhitespace"),f):t(n)}function f(t){return r.containerState.size=l+r.sliceSerialize(e.exit("listItemPrefix"),!0).length,n(t)}}},rn={partial:!0,tokenize:function(e,n,t){const r=this;return je(e,(function(e){const o=r.events[r.events.length-1];return!Ne(e)&&o&&"listItemPrefixWhitespace"===o[1].type?n(e):t(e)}),"listItemPrefixWhitespace",r.parser.constructs.disable.null.includes("codeIndented")?void 0:5)}},on={partial:!0,tokenize:function(e,n,t){const r=this;return je(e,(function(e){const o=r.events[r.events.length-1];return o&&"listItemIndent"===o[1].type&&o[2].sliceSerialize(o[1],!0).length===r.containerState.size?n(e):t(e)}),"listItemIndent",r.containerState.size+1)}},ln={continuation:{tokenize:function(e,n,t){const r=this;return function(n){return Ne(n)?je(e,o,"linePrefix",r.parser.constructs.disable.null.includes("codeIndented")?void 0:4)(n):o(n)};function o(r){return e.attempt(ln,n,t)(r)}}},exit:function(e){e.exit("blockQuote")},name:"blockQuote",tokenize:function(e,n,t){const r=this;return function(n){if(62===n){const t=r.containerState;return t.open||(e.enter("blockQuote",{_container:!0}),t.open=!0),e.enter("blockQuotePrefix"),e.enter("blockQuoteMarker"),e.consume(n),e.exit("blockQuoteMarker"),o}return t(n)};function o(t){return Ne(t)?(e.enter("blockQuotePrefixWhitespace"),e.consume(t),e.exit("blockQuotePrefixWhitespace"),e.exit("blockQuotePrefix"),n):(e.exit("blockQuotePrefix"),n(t))}}};function an(e,n,t,r,o,l,a,i,s){const u=s||Number.POSITIVE_INFINITY;let c=0;return function(n){return 60===n?(e.enter(r),e.enter(o),e.enter(l),e.consume(n),e.exit(l),f):null===n||32===n||41===n||Te(n)?t(n):(e.enter(r),e.enter(a),e.enter(i),e.enter("chunkString",{contentType:"string"}),h(n))};function f(t){return 62===t?(e.enter(l),e.consume(t),e.exit(l),e.exit(o),e.exit(r),n):(e.enter(i),e.enter("chunkString",{contentType:"string"}),d(t))}function d(n){return 62===n?(e.exit("chunkString"),e.exit(i),f(n)):null===n||60===n||Oe(n)?t(n):(e.consume(n),92===n?p:d)}function p(n){return 60===n||62===n||92===n?(e.consume(n),d):d(n)}function h(o){return c||null!==o&&41!==o&&!Le(o)?c<u&&40===o?(e.consume(o),c++,h):41===o?(e.consume(o),c--,h):null===o||32===o||40===o||Te(o)?t(o):(e.consume(o),92===o?m:h):(e.exit("chunkString"),e.exit(i),e.exit(a),e.exit(r),n(o))}function m(n){return 40===n||41===n||92===n?(e.consume(n),h):h(n)}}function sn(e,n,t,r,o,l){const a=this;let i,s=0;return function(n){return e.enter(r),e.enter(o),e.consume(n),e.exit(o),e.enter(l),u};function u(f){return s>999||null===f||91===f||93===f&&!i||94===f&&!s&&"_hiddenFootnoteSupport"in a.parser.constructs?t(f):93===f?(e.exit(l),e.enter(o),e.consume(f),e.exit(o),e.exit(r),n):Oe(f)?(e.enter("lineEnding"),e.consume(f),e.exit("lineEnding"),u):(e.enter("chunkString",{contentType:"string"}),c(f))}function c(n){return null===n||91===n||93===n||Oe(n)||s++>999?(e.exit("chunkString"),u(n)):(e.consume(n),i||(i=!Ne(n)),92===n?f:c)}function f(n){return 91===n||92===n||93===n?(e.consume(n),s++,c):c(n)}}function un(e,n,t,r,o,l){let a;return function(n){return 34===n||39===n||40===n?(e.enter(r),e.enter(o),e.consume(n),e.exit(o),a=40===n?41:n,i):t(n)};function i(t){return t===a?(e.enter(o),e.consume(t),e.exit(o),e.exit(r),n):(e.enter(l),s(t))}function s(n){return n===a?(e.exit(l),i(a)):null===n?t(n):Oe(n)?(e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),je(e,s,"linePrefix")):(e.enter("chunkString",{contentType:"string"}),u(n))}function u(n){return n===a||null===n||Oe(n)?(e.exit("chunkString"),s(n)):(e.consume(n),92===n?c:u)}function c(n){return n===a||92===n?(e.consume(n),u):u(n)}}function cn(e,n){let t;return function r(o){return Oe(o)?(e.enter("lineEnding"),e.consume(o),e.exit("lineEnding"),t=!0,r):Ne(o)?je(e,r,t?"linePrefix":"lineSuffix")(o):n(o)}}function fn(e){return e.replace(/[\t\n\r ]+/g," ").replace(/^ | $/g,"").toLowerCase().toUpperCase()}const dn={name:"definition",tokenize:function(e,n,t){const r=this;let o;return function(n){return e.enter("definition"),function(n){return sn.call(r,e,l,t,"definitionLabel","definitionLabelMarker","definitionLabelString")(n)}(n)};function l(n){return o=fn(r.sliceSerialize(r.events[r.events.length-1][1]).slice(1,-1)),58===n?(e.enter("definitionMarker"),e.consume(n),e.exit("definitionMarker"),a):t(n)}function a(n){return Le(n)?cn(e,i)(n):i(n)}function i(n){return an(e,s,t,"definitionDestination","definitionDestinationLiteral","definitionDestinationLiteralMarker","definitionDestinationRaw","definitionDestinationString")(n)}function s(n){return e.attempt(pn,u,u)(n)}function u(n){return Ne(n)?je(e,c,"whitespace")(n):c(n)}function c(l){return null===l||Oe(l)?(e.exit("definition"),r.parser.defined.push(o),n(l)):t(l)}}},pn={partial:!0,tokenize:function(e,n,t){return function(n){return Le(n)?cn(e,r)(n):t(n)};function r(n){return un(e,o,t,"definitionTitle","definitionTitleMarker","definitionTitleString")(n)}function o(n){return Ne(n)?je(e,l,"whitespace")(n):l(n)}function l(e){return null===e||Oe(e)?n(e):t(e)}}},hn={name:"codeIndented",tokenize:function(e,n,t){const r=this;return function(n){return e.enter("codeIndented"),je(e,o,"linePrefix",5)(n)};function o(e){const n=r.events[r.events.length-1];return n&&"linePrefix"===n[1].type&&n[2].sliceSerialize(n[1],!0).length>=4?l(e):t(e)}function l(n){return null===n?i(n):Oe(n)?e.attempt(mn,l,i)(n):(e.enter("codeFlowValue"),a(n))}function a(n){return null===n||Oe(n)?(e.exit("codeFlowValue"),l(n)):(e.consume(n),a)}function i(t){return e.exit("codeIndented"),n(t)}}},mn={partial:!0,tokenize:function(e,n,t){const r=this;return o;function o(n){return r.parser.lazy[r.now().line]?t(n):Oe(n)?(e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),o):je(e,l,"linePrefix",5)(n)}function l(e){const l=r.events[r.events.length-1];return l&&"linePrefix"===l[1].type&&l[2].sliceSerialize(l[1],!0).length>=4?n(e):Oe(e)?o(e):t(e)}}},gn={name:"headingAtx",resolve:function(e,n){let t,r,o=e.length-2,l=3;return"whitespace"===e[l][1].type&&(l+=2),o-2>l&&"whitespace"===e[o][1].type&&(o-=2),"atxHeadingSequence"===e[o][1].type&&(l===o-1||o-4>l&&"whitespace"===e[o-2][1].type)&&(o-=l+1===o?2:4),o>l&&(t={type:"atxHeadingText",start:e[l][1].start,end:e[o][1].end},r={type:"chunkText",start:e[l][1].start,end:e[o][1].end,contentType:"text"},be(e,l,o-l+1,[["enter",t,n],["enter",r,n],["exit",r,n],["exit",t,n]])),e},tokenize:function(e,n,t){let r=0;return function(n){return e.enter("atxHeading"),function(n){return e.enter("atxHeadingSequence"),o(n)}(n)};function o(n){return 35===n&&r++<6?(e.consume(n),o):null===n||Le(n)?(e.exit("atxHeadingSequence"),l(n)):t(n)}function l(t){return 35===t?(e.enter("atxHeadingSequence"),a(t)):null===t||Oe(t)?(e.exit("atxHeading"),n(t)):Ne(t)?je(e,l,"whitespace")(t):(e.enter("atxHeadingText"),i(t))}function a(n){return 35===n?(e.consume(n),a):(e.exit("atxHeadingSequence"),l(n))}function i(n){return null===n||35===n||Le(n)?(e.exit("atxHeadingText"),l(n)):(e.consume(n),i)}}},yn={name:"setextUnderline",resolveTo:function(e,n){let t,r,o,l=e.length;for(;l--;)if("enter"===e[l][0]){if("content"===e[l][1].type){t=l;break}"paragraph"===e[l][1].type&&(r=l)}else"content"===e[l][1].type&&e.splice(l,1),o||"definition"!==e[l][1].type||(o=l);const a={type:"setextHeading",start:{...e[t][1].start},end:{...e[e.length-1][1].end}};return e[r][1].type="setextHeadingText",o?(e.splice(r,0,["enter",a,n]),e.splice(o+1,0,["exit",e[t][1],n]),e[t][1].end={...e[o][1].end}):e[t][1]=a,e.push(["exit",a,n]),e},tokenize:function(e,n,t){const r=this;let o;return function(n){let a,i=r.events.length;for(;i--;)if("lineEnding"!==r.events[i][1].type&&"linePrefix"!==r.events[i][1].type&&"content"!==r.events[i][1].type){a="paragraph"===r.events[i][1].type;break}return r.parser.lazy[r.now().line]||!r.interrupt&&!a?t(n):(e.enter("setextHeadingLine"),o=n,function(n){return e.enter("setextHeadingLineSequence"),l(n)}(n))};function l(n){return n===o?(e.consume(n),l):(e.exit("setextHeadingLineSequence"),Ne(n)?je(e,a,"lineSuffix")(n):a(n))}function a(r){return null===r||Oe(r)?(e.exit("setextHeadingLine"),n(r)):t(r)}}},vn=["address","article","aside","base","basefont","blockquote","body","caption","center","col","colgroup","dd","details","dialog","dir","div","dl","dt","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hr","html","iframe","legend","li","link","main","menu","menuitem","nav","noframes","ol","optgroup","option","p","param","search","section","summary","table","tbody","td","tfoot","th","thead","title","tr","track","ul"],bn=["pre","script","style","textarea"],wn={concrete:!0,name:"htmlFlow",resolveTo:function(e){let n=e.length;for(;n--&&("enter"!==e[n][0]||"htmlFlow"!==e[n][1].type););return n>1&&"linePrefix"===e[n-2][1].type&&(e[n][1].start=e[n-2][1].start,e[n+1][1].start=e[n-2][1].start,e.splice(n-2,2)),e},tokenize:function(e,n,t){const r=this;let o,l,a,i,s;return function(n){return function(n){return e.enter("htmlFlow"),e.enter("htmlFlowData"),e.consume(n),u}(n)};function u(i){return 33===i?(e.consume(i),c):47===i?(e.consume(i),l=!0,p):63===i?(e.consume(i),o=3,r.interrupt?n:z):Fe(i)?(e.consume(i),a=String.fromCharCode(i),h):t(i)}function c(l){return 45===l?(e.consume(l),o=2,f):91===l?(e.consume(l),o=5,i=0,d):Fe(l)?(e.consume(l),o=4,r.interrupt?n:z):t(l)}function f(o){return 45===o?(e.consume(o),r.interrupt?n:z):t(o)}function d(o){return o==="CDATA[".charCodeAt(i++)?(e.consume(o),6===i?r.interrupt?n:E:d):t(o)}function p(n){return Fe(n)?(e.consume(n),a=String.fromCharCode(n),h):t(n)}function h(i){if(null===i||47===i||62===i||Le(i)){const s=47===i,u=a.toLowerCase();return s||l||!bn.includes(u)?vn.includes(a.toLowerCase())?(o=6,s?(e.consume(i),m):r.interrupt?n(i):E(i)):(o=7,r.interrupt&&!r.parser.lazy[r.now().line]?t(i):l?g(i):y(i)):(o=1,r.interrupt?n(i):E(i))}return 45===i||Pe(i)?(e.consume(i),a+=String.fromCharCode(i),h):t(i)}function m(o){return 62===o?(e.consume(o),r.interrupt?n:E):t(o)}function g(n){return Ne(n)?(e.consume(n),g):x(n)}function y(n){return 47===n?(e.consume(n),x):58===n||95===n||Fe(n)?(e.consume(n),v):Ne(n)?(e.consume(n),y):x(n)}function v(n){return 45===n||46===n||58===n||95===n||Pe(n)?(e.consume(n),v):b(n)}function b(n){return 61===n?(e.consume(n),w):Ne(n)?(e.consume(n),b):y(n)}function w(n){return null===n||60===n||61===n||62===n||96===n?t(n):34===n||39===n?(e.consume(n),s=n,k):Ne(n)?(e.consume(n),w):A(n)}function k(n){return n===s?(e.consume(n),s=null,S):null===n||Oe(n)?t(n):(e.consume(n),k)}function A(n){return null===n||34===n||39===n||47===n||60===n||61===n||62===n||96===n||Le(n)?b(n):(e.consume(n),A)}function S(e){return 47===e||62===e||Ne(e)?y(e):t(e)}function x(n){return 62===n?(e.consume(n),C):t(n)}function C(n){return null===n||Oe(n)?E(n):Ne(n)?(e.consume(n),C):t(n)}function E(n){return 45===n&&2===o?(e.consume(n),U):60===n&&1===o?(e.consume(n),T):62===n&&4===o?(e.consume(n),O):63===n&&3===o?(e.consume(n),z):93===n&&5===o?(e.consume(n),I):!Oe(n)||6!==o&&7!==o?null===n||Oe(n)?(e.exit("htmlFlowData"),B(n)):(e.consume(n),E):(e.exit("htmlFlowData"),e.check(kn,L,B)(n))}function B(n){return e.check(An,F,L)(n)}function F(n){return e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),P}function P(n){return null===n||Oe(n)?B(n):(e.enter("htmlFlowData"),E(n))}function U(n){return 45===n?(e.consume(n),z):E(n)}function T(n){return 47===n?(e.consume(n),a="",_):E(n)}function _(n){if(62===n){const t=a.toLowerCase();return bn.includes(t)?(e.consume(n),O):E(n)}return Fe(n)&&a.length<8?(e.consume(n),a+=String.fromCharCode(n),_):E(n)}function I(n){return 93===n?(e.consume(n),z):E(n)}function z(n){return 62===n?(e.consume(n),O):45===n&&2===o?(e.consume(n),z):E(n)}function O(n){return null===n||Oe(n)?(e.exit("htmlFlowData"),L(n)):(e.consume(n),O)}function L(t){return e.exit("htmlFlow"),n(t)}}},kn={partial:!0,tokenize:function(e,n,t){return function(r){return e.enter("lineEnding"),e.consume(r),e.exit("lineEnding"),e.attempt(qe,n,t)}}},An={partial:!0,tokenize:function(e,n,t){const r=this;return function(n){return Oe(n)?(e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),o):t(n)};function o(e){return r.parser.lazy[r.now().line]?t(e):n(e)}}},Sn={partial:!0,tokenize:function(e,n,t){const r=this;return function(n){return null===n?t(n):(e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),o)};function o(e){return r.parser.lazy[r.now().line]?t(e):n(e)}}},xn={concrete:!0,name:"codeFenced",tokenize:function(e,n,t){const r=this,o={partial:!0,tokenize:function(e,n,t){let o=0;return function(n){return e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),a};function a(n){return e.enter("codeFencedFence"),Ne(n)?je(e,s,"linePrefix",r.parser.constructs.disable.null.includes("codeIndented")?void 0:4)(n):s(n)}function s(n){return n===l?(e.enter("codeFencedFenceSequence"),u(n)):t(n)}function u(n){return n===l?(o++,e.consume(n),u):o>=i?(e.exit("codeFencedFenceSequence"),Ne(n)?je(e,c,"whitespace")(n):c(n)):t(n)}function c(r){return null===r||Oe(r)?(e.exit("codeFencedFence"),n(r)):t(r)}}};let l,a=0,i=0;return function(n){return function(n){const t=r.events[r.events.length-1];return a=t&&"linePrefix"===t[1].type?t[2].sliceSerialize(t[1],!0).length:0,l=n,e.enter("codeFenced"),e.enter("codeFencedFence"),e.enter("codeFencedFenceSequence"),s(n)}(n)};function s(n){return n===l?(i++,e.consume(n),s):i<3?t(n):(e.exit("codeFencedFenceSequence"),Ne(n)?je(e,u,"whitespace")(n):u(n))}function u(t){return null===t||Oe(t)?(e.exit("codeFencedFence"),r.interrupt?n(t):e.check(Sn,p,v)(t)):(e.enter("codeFencedFenceInfo"),e.enter("chunkString",{contentType:"string"}),c(t))}function c(n){return null===n||Oe(n)?(e.exit("chunkString"),e.exit("codeFencedFenceInfo"),u(n)):Ne(n)?(e.exit("chunkString"),e.exit("codeFencedFenceInfo"),je(e,f,"whitespace")(n)):96===n&&n===l?t(n):(e.consume(n),c)}function f(n){return null===n||Oe(n)?u(n):(e.enter("codeFencedFenceMeta"),e.enter("chunkString",{contentType:"string"}),d(n))}function d(n){return null===n||Oe(n)?(e.exit("chunkString"),e.exit("codeFencedFenceMeta"),u(n)):96===n&&n===l?t(n):(e.consume(n),d)}function p(n){return e.attempt(o,v,h)(n)}function h(n){return e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),m}function m(n){return a>0&&Ne(n)?je(e,g,"linePrefix",a+1)(n):g(n)}function g(n){return null===n||Oe(n)?e.check(Sn,p,v)(n):(e.enter("codeFlowValue"),y(n))}function y(n){return null===n||Oe(n)?(e.exit("codeFlowValue"),g(n)):(e.consume(n),y)}function v(t){return e.exit("codeFenced"),n(t)}}},Cn=document.createElement("i");function En(e){const n="&"+e+";";Cn.innerHTML=n;const t=Cn.textContent;return(59!==t.charCodeAt(t.length-1)||"semi"===e)&&t!==n&&t}const Bn={name:"characterReference",tokenize:function(e,n,t){const r=this;let o,l,a=0;return function(n){return e.enter("characterReference"),e.enter("characterReferenceMarker"),e.consume(n),e.exit("characterReferenceMarker"),i};function i(n){return 35===n?(e.enter("characterReferenceMarkerNumeric"),e.consume(n),e.exit("characterReferenceMarkerNumeric"),s):(e.enter("characterReferenceValue"),o=31,l=Pe,u(n))}function s(n){return 88===n||120===n?(e.enter("characterReferenceMarkerHexadecimal"),e.consume(n),e.exit("characterReferenceMarkerHexadecimal"),e.enter("characterReferenceValue"),o=6,l=Ie,u):(e.enter("characterReferenceValue"),o=7,l=_e,u(n))}function u(i){if(59===i&&a){const o=e.exit("characterReferenceValue");return l!==Pe||En(r.sliceSerialize(o))?(e.enter("characterReferenceMarker"),e.consume(i),e.exit("characterReferenceMarker"),e.exit("characterReference"),n):t(i)}return l(i)&&a++<o?(e.consume(i),u):t(i)}}},Fn={name:"characterEscape",tokenize:function(e,n,t){return function(n){return e.enter("characterEscape"),e.enter("escapeMarker"),e.consume(n),e.exit("escapeMarker"),r};function r(r){return ze(r)?(e.enter("characterEscapeValue"),e.consume(r),e.exit("characterEscapeValue"),e.exit("characterEscape"),n):t(r)}}},Pn={name:"lineEnding",tokenize:function(e,n){return function(t){return e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),je(e,n,"linePrefix")}}};function Un(e,n,t){const r=[];let o=-1;for(;++o<e.length;){const l=e[o].resolveAll;l&&!r.includes(l)&&(n=l(n,t),r.push(l))}return n}const Tn={name:"labelEnd",resolveAll:function(e){let n=-1;const t=[];for(;++n<e.length;){const r=e[n][1];if(t.push(e[n]),"labelImage"===r.type||"labelLink"===r.type||"labelEnd"===r.type){const e="labelImage"===r.type?4:2;r.type="data",n+=e}}return e.length!==t.length&&be(e,0,e.length,t),e},resolveTo:function(e,n){let t,r,o,l,a=e.length,i=0;for(;a--;)if(t=e[a][1],r){if("link"===t.type||"labelLink"===t.type&&t._inactive)break;"enter"===e[a][0]&&"labelLink"===t.type&&(t._inactive=!0)}else if(o){if("enter"===e[a][0]&&("labelImage"===t.type||"labelLink"===t.type)&&!t._balanced&&(r=a,"labelLink"!==t.type)){i=2;break}}else"labelEnd"===t.type&&(o=a);const s={type:"labelLink"===e[r][1].type?"link":"image",start:{...e[r][1].start},end:{...e[e.length-1][1].end}},u={type:"label",start:{...e[r][1].start},end:{...e[o][1].end}},c={type:"labelText",start:{...e[r+i+2][1].end},end:{...e[o-2][1].start}};return l=[["enter",s,n],["enter",u,n]],l=we(l,e.slice(r+1,r+i+3)),l=we(l,[["enter",c,n]]),l=we(l,Un(n.parser.constructs.insideSpan.null,e.slice(r+i+4,o-3),n)),l=we(l,[["exit",c,n],e[o-2],e[o-1],["exit",u,n]]),l=we(l,e.slice(o+1)),l=we(l,[["exit",s,n]]),be(e,r,e.length,l),e},tokenize:function(e,n,t){const r=this;let o,l,a=r.events.length;for(;a--;)if(("labelImage"===r.events[a][1].type||"labelLink"===r.events[a][1].type)&&!r.events[a][1]._balanced){o=r.events[a][1];break}return function(n){return o?o._inactive?c(n):(l=r.parser.defined.includes(fn(r.sliceSerialize({start:o.end,end:r.now()}))),e.enter("labelEnd"),e.enter("labelMarker"),e.consume(n),e.exit("labelMarker"),e.exit("labelEnd"),i):t(n)};function i(n){return 40===n?e.attempt(_n,u,l?u:c)(n):91===n?e.attempt(In,u,l?s:c)(n):l?u(n):c(n)}function s(n){return e.attempt(zn,u,c)(n)}function u(e){return n(e)}function c(e){return o._balanced=!0,t(e)}}},_n={tokenize:function(e,n,t){return function(n){return e.enter("resource"),e.enter("resourceMarker"),e.consume(n),e.exit("resourceMarker"),r};function r(n){return Le(n)?cn(e,o)(n):o(n)}function o(n){return 41===n?u(n):an(e,l,a,"resourceDestination","resourceDestinationLiteral","resourceDestinationLiteralMarker","resourceDestinationRaw","resourceDestinationString",32)(n)}function l(n){return Le(n)?cn(e,i)(n):u(n)}function a(e){return t(e)}function i(n){return 34===n||39===n||40===n?un(e,s,t,"resourceTitle","resourceTitleMarker","resourceTitleString")(n):u(n)}function s(n){return Le(n)?cn(e,u)(n):u(n)}function u(r){return 41===r?(e.enter("resourceMarker"),e.consume(r),e.exit("resourceMarker"),e.exit("resource"),n):t(r)}}},In={tokenize:function(e,n,t){const r=this;return function(n){return sn.call(r,e,o,l,"reference","referenceMarker","referenceString")(n)};function o(e){return r.parser.defined.includes(fn(r.sliceSerialize(r.events[r.events.length-1][1]).slice(1,-1)))?n(e):t(e)}function l(e){return t(e)}}},zn={tokenize:function(e,n,t){return function(n){return e.enter("reference"),e.enter("referenceMarker"),e.consume(n),e.exit("referenceMarker"),r};function r(r){return 93===r?(e.enter("referenceMarker"),e.consume(r),e.exit("referenceMarker"),e.exit("reference"),n):t(r)}}},On={name:"labelStartImage",resolveAll:Tn.resolveAll,tokenize:function(e,n,t){const r=this;return function(n){return e.enter("labelImage"),e.enter("labelImageMarker"),e.consume(n),e.exit("labelImageMarker"),o};function o(n){return 91===n?(e.enter("labelMarker"),e.consume(n),e.exit("labelMarker"),e.exit("labelImage"),l):t(n)}function l(e){return 94===e&&"_hiddenFootnoteSupport"in r.parser.constructs?t(e):n(e)}}};function Ln(e){return null===e||Le(e)||Re(e)?1:De(e)?2:void 0}const Nn={name:"attention",resolveAll:function(e,n){let t,r,o,l,a,i,s,u,c=-1;for(;++c<e.length;)if("enter"===e[c][0]&&"attentionSequence"===e[c][1].type&&e[c][1]._close)for(t=c;t--;)if("exit"===e[t][0]&&"attentionSequence"===e[t][1].type&&e[t][1]._open&&n.sliceSerialize(e[t][1]).charCodeAt(0)===n.sliceSerialize(e[c][1]).charCodeAt(0)){if((e[t][1]._close||e[c][1]._open)&&(e[c][1].end.offset-e[c][1].start.offset)%3&&!((e[t][1].end.offset-e[t][1].start.offset+e[c][1].end.offset-e[c][1].start.offset)%3))continue;i=e[t][1].end.offset-e[t][1].start.offset>1&&e[c][1].end.offset-e[c][1].start.offset>1?2:1;const f={...e[t][1].end},d={...e[c][1].start};Dn(f,-i),Dn(d,i),l={type:i>1?"strongSequence":"emphasisSequence",start:f,end:{...e[t][1].end}},a={type:i>1?"strongSequence":"emphasisSequence",start:{...e[c][1].start},end:d},o={type:i>1?"strongText":"emphasisText",start:{...e[t][1].end},end:{...e[c][1].start}},r={type:i>1?"strong":"emphasis",start:{...l.start},end:{...a.end}},e[t][1].end={...l.start},e[c][1].start={...a.end},s=[],e[t][1].end.offset-e[t][1].start.offset&&(s=we(s,[["enter",e[t][1],n],["exit",e[t][1],n]])),s=we(s,[["enter",r,n],["enter",l,n],["exit",l,n],["enter",o,n]]),s=we(s,Un(n.parser.constructs.insideSpan.null,e.slice(t+1,c),n)),s=we(s,[["exit",o,n],["enter",a,n],["exit",a,n],["exit",r,n]]),e[c][1].end.offset-e[c][1].start.offset?(u=2,s=we(s,[["enter",e[c][1],n],["exit",e[c][1],n]])):u=0,be(e,t-1,c-t+3,s),c=t+s.length-u-2;break}for(c=-1;++c<e.length;)"attentionSequence"===e[c][1].type&&(e[c][1].type="data");return e},tokenize:function(e,n){const t=this.parser.constructs.attentionMarkers.null,r=this.previous,o=Ln(r);let l;return function(n){return l=n,e.enter("attentionSequence"),a(n)};function a(i){if(i===l)return e.consume(i),a;const s=e.exit("attentionSequence"),u=Ln(i),c=!u||2===u&&o||t.includes(i),f=!o||2===o&&u||t.includes(r);return s._open=Boolean(42===l?c:c&&(o||!f)),s._close=Boolean(42===l?f:f&&(u||!c)),n(i)}}};function Dn(e,n){e.column+=n,e.offset+=n,e._bufferIndex+=n}const Rn={name:"autolink",tokenize:function(e,n,t){let r=0;return function(n){return e.enter("autolink"),e.enter("autolinkMarker"),e.consume(n),e.exit("autolinkMarker"),e.enter("autolinkProtocol"),o};function o(n){return Fe(n)?(e.consume(n),l):64===n?t(n):s(n)}function l(e){return 43===e||45===e||46===e||Pe(e)?(r=1,a(e)):s(e)}function a(n){return 58===n?(e.consume(n),r=0,i):(43===n||45===n||46===n||Pe(n))&&r++<32?(e.consume(n),a):(r=0,s(n))}function i(r){return 62===r?(e.exit("autolinkProtocol"),e.enter("autolinkMarker"),e.consume(r),e.exit("autolinkMarker"),e.exit("autolink"),n):null===r||32===r||60===r||Te(r)?t(r):(e.consume(r),i)}function s(n){return 64===n?(e.consume(n),u):Ue(n)?(e.consume(n),s):t(n)}function u(e){return Pe(e)?c(e):t(e)}function c(t){return 46===t?(e.consume(t),r=0,u):62===t?(e.exit("autolinkProtocol").type="autolinkEmail",e.enter("autolinkMarker"),e.consume(t),e.exit("autolinkMarker"),e.exit("autolink"),n):f(t)}function f(n){if((45===n||Pe(n))&&r++<63){const t=45===n?f:c;return e.consume(n),t}return t(n)}}},Mn={name:"htmlText",tokenize:function(e,n,t){const r=this;let o,l,a;return function(n){return e.enter("htmlText"),e.enter("htmlTextData"),e.consume(n),i};function i(n){return 33===n?(e.consume(n),s):47===n?(e.consume(n),w):63===n?(e.consume(n),v):Fe(n)?(e.consume(n),S):t(n)}function s(n){return 45===n?(e.consume(n),u):91===n?(e.consume(n),l=0,p):Fe(n)?(e.consume(n),y):t(n)}function u(n){return 45===n?(e.consume(n),d):t(n)}function c(n){return null===n?t(n):45===n?(e.consume(n),f):Oe(n)?(a=c,_(n)):(e.consume(n),c)}function f(n){return 45===n?(e.consume(n),d):c(n)}function d(e){return 62===e?T(e):45===e?f(e):c(e)}function p(n){return n==="CDATA[".charCodeAt(l++)?(e.consume(n),6===l?h:p):t(n)}function h(n){return null===n?t(n):93===n?(e.consume(n),m):Oe(n)?(a=h,_(n)):(e.consume(n),h)}function m(n){return 93===n?(e.consume(n),g):h(n)}function g(n){return 62===n?T(n):93===n?(e.consume(n),g):h(n)}function y(n){return null===n||62===n?T(n):Oe(n)?(a=y,_(n)):(e.consume(n),y)}function v(n){return null===n?t(n):63===n?(e.consume(n),b):Oe(n)?(a=v,_(n)):(e.consume(n),v)}function b(e){return 62===e?T(e):v(e)}function w(n){return Fe(n)?(e.consume(n),k):t(n)}function k(n){return 45===n||Pe(n)?(e.consume(n),k):A(n)}function A(n){return Oe(n)?(a=A,_(n)):Ne(n)?(e.consume(n),A):T(n)}function S(n){return 45===n||Pe(n)?(e.consume(n),S):47===n||62===n||Le(n)?x(n):t(n)}function x(n){return 47===n?(e.consume(n),T):58===n||95===n||Fe(n)?(e.consume(n),C):Oe(n)?(a=x,_(n)):Ne(n)?(e.consume(n),x):T(n)}function C(n){return 45===n||46===n||58===n||95===n||Pe(n)?(e.consume(n),C):E(n)}function E(n){return 61===n?(e.consume(n),B):Oe(n)?(a=E,_(n)):Ne(n)?(e.consume(n),E):x(n)}function B(n){return null===n||60===n||61===n||62===n||96===n?t(n):34===n||39===n?(e.consume(n),o=n,F):Oe(n)?(a=B,_(n)):Ne(n)?(e.consume(n),B):(e.consume(n),P)}function F(n){return n===o?(e.consume(n),o=void 0,U):null===n?t(n):Oe(n)?(a=F,_(n)):(e.consume(n),F)}function P(n){return null===n||34===n||39===n||60===n||61===n||96===n?t(n):47===n||62===n||Le(n)?x(n):(e.consume(n),P)}function U(e){return 47===e||62===e||Le(e)?x(e):t(e)}function T(r){return 62===r?(e.consume(r),e.exit("htmlTextData"),e.exit("htmlText"),n):t(r)}function _(n){return e.exit("htmlTextData"),e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),I}function I(n){return Ne(n)?je(e,z,"linePrefix",r.parser.constructs.disable.null.includes("codeIndented")?void 0:4)(n):z(n)}function z(n){return e.enter("htmlTextData"),a(n)}}},jn={name:"labelStartLink",resolveAll:Tn.resolveAll,tokenize:function(e,n,t){const r=this;return function(n){return e.enter("labelLink"),e.enter("labelMarker"),e.consume(n),e.exit("labelMarker"),e.exit("labelLink"),o};function o(e){return 94===e&&"_hiddenFootnoteSupport"in r.parser.constructs?t(e):n(e)}}},Hn={name:"hardBreakEscape",tokenize:function(e,n,t){return function(n){return e.enter("hardBreakEscape"),e.consume(n),r};function r(r){return Oe(r)?(e.exit("hardBreakEscape"),n(r)):t(r)}}},$n={name:"codeText",previous:function(e){return 96!==e||"characterEscape"===this.events[this.events.length-1][1].type},resolve:function(e){let n,t,r=e.length-4,o=3;if(!("lineEnding"!==e[o][1].type&&"space"!==e[o][1].type||"lineEnding"!==e[r][1].type&&"space"!==e[r][1].type))for(n=o;++n<r;)if("codeTextData"===e[n][1].type){e[o][1].type="codeTextPadding",e[r][1].type="codeTextPadding",o+=2,r-=2;break}for(n=o-1,r++;++n<=r;)void 0===t?n!==r&&"lineEnding"!==e[n][1].type&&(t=n):n!==r&&"lineEnding"!==e[n][1].type||(e[t][1].type="codeTextData",n!==t+2&&(e[t][1].end=e[n-1][1].end,e.splice(t+2,n-t-2),r-=n-t-2,n=t+2),t=void 0);return e},tokenize:function(e,n,t){let r,o,l=0;return function(n){return e.enter("codeText"),e.enter("codeTextSequence"),a(n)};function a(n){return 96===n?(e.consume(n),l++,a):(e.exit("codeTextSequence"),i(n))}function i(n){return null===n?t(n):32===n?(e.enter("space"),e.consume(n),e.exit("space"),i):96===n?(o=e.enter("codeTextSequence"),r=0,u(n)):Oe(n)?(e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),i):(e.enter("codeTextData"),s(n))}function s(n){return null===n||32===n||96===n||Oe(n)?(e.exit("codeTextData"),i(n)):(e.consume(n),s)}function u(t){return 96===t?(e.consume(t),r++,u):r===l?(e.exit("codeTextSequence"),e.exit("codeText"),n(t)):(o.type="codeTextData",s(t))}}},Vn={42:tn,43:tn,45:tn,48:tn,49:tn,50:tn,51:tn,52:tn,53:tn,54:tn,55:tn,56:tn,57:tn,62:ln},qn={91:dn},Wn={[-2]:hn,[-1]:hn,32:hn},Qn={35:gn,42:nn,45:[yn,nn],60:wn,61:yn,95:nn,96:xn,126:xn},Kn={38:Bn,92:Fn},Yn={[-5]:Pn,[-4]:Pn,[-3]:Pn,33:On,38:Bn,42:Nn,60:[Rn,Mn],91:jn,92:[Hn,Fn],93:Tn,95:Nn,96:$n},Gn={null:[Nn,Ye]},Xn={null:[42,95]},Zn={null:[]};function Jn(e,n,t){let r={_bufferIndex:-1,_index:0,line:t&&t.line||1,column:t&&t.column||1,offset:t&&t.offset||0};const o={},l=[];let a=[],i=[],s=!0;const u={attempt:y((function(e,n){v(e,n.from)})),check:y(g),consume:function(e){Oe(e)?(r.line++,r.column=1,r.offset+=-3===e?2:1,b()):-1!==e&&(r.column++,r.offset++),r._bufferIndex<0?r._index++:(r._bufferIndex++,r._bufferIndex===a[r._index].length&&(r._bufferIndex=-1,r._index++)),c.previous=e,s=!0},enter:function(e,n){const t=n||{};return t.type=e,t.start=h(),c.events.push(["enter",t,c]),i.push(t),t},exit:function(e){const n=i.pop();return n.end=h(),c.events.push(["exit",n,c]),n},interrupt:y(g,{interrupt:!0})},c={code:null,containerState:{},defineSkip:function(e){o[e.line]=e.column,b()},events:[],now:h,parser:e,previous:null,sliceSerialize:function(e,n){return function(e,n){let t=-1;const r=[];let o;for(;++t<e.length;){const l=e[t];let a;if("string"==typeof l)a=l;else switch(l){case-5:a="\r";break;case-4:a="\n";break;case-3:a="\r\n";break;case-2:a=n?" ":"\t";break;case-1:if(!n&&o)continue;a=" ";break;default:a=String.fromCharCode(l)}o=-2===l,r.push(a)}return r.join("")}(p(e),n)},sliceStream:p,write:function(e){return a=we(a,e),function(){let e;for(;r._index<a.length;){const n=a[r._index];if("string"==typeof n)for(e=r._index,r._bufferIndex<0&&(r._bufferIndex=0);r._index===e&&r._bufferIndex<n.length;)m(n.charCodeAt(r._bufferIndex));else m(n)}}(),null!==a[a.length-1]?[]:(v(n,0),c.events=Un(l,c.events,c),c.events)}};let f,d=n.tokenize.call(c,u);return n.resolveAll&&l.push(n),c;function p(e){return function(e,n){const t=n.start._index,r=n.start._bufferIndex,o=n.end._index,l=n.end._bufferIndex;let a;if(t===o)a=[e[t].slice(r,l)];else{if(a=e.slice(t,o),r>-1){const e=a[0];"string"==typeof e?a[0]=e.slice(r):a.shift()}l>0&&a.push(e[o].slice(0,l))}return a}(a,e)}function h(){const{_bufferIndex:e,_index:n,line:t,column:o,offset:l}=r;return{_bufferIndex:e,_index:n,line:t,column:o,offset:l}}function m(e){s=void 0,f=e,d=d(e)}function g(e,n){n.restore()}function y(e,n){return function(t,o,l){let a,f,d,p;return Array.isArray(t)?g(t):"tokenize"in t?g([t]):(m=t,function(e){const n=null!==e&&m[e],t=null!==e&&m.null;return g([...Array.isArray(n)?n:n?[n]:[],...Array.isArray(t)?t:t?[t]:[]])(e)});var m;function g(e){return a=e,f=0,0===e.length?l:y(e[f])}function y(e){return function(t){return p=function(){const e=h(),n=c.previous,t=c.currentConstruct,o=c.events.length,l=Array.from(i);return{from:o,restore:function(){r=e,c.previous=n,c.currentConstruct=t,c.events.length=o,i=l,b()}}}(),d=e,e.partial||(c.currentConstruct=e),e.name&&c.parser.constructs.disable.null.includes(e.name)?w():e.tokenize.call(n?Object.assign(Object.create(c),n):c,u,v,w)(t)}}function v(n){return s=!0,e(d,p),o}function w(e){return s=!0,p.restore(),++f<a.length?y(a[f]):l}}}function v(e,n){e.resolveAll&&!l.includes(e)&&l.push(e),e.resolve&&be(c.events,n,c.events.length-n,e.resolve(c.events.slice(n),c)),e.resolveTo&&(c.events=e.resolveTo(c.events,c))}function b(){r.line in o&&r.column<2&&(r.column=o[r.line],r.offset+=o[r.line]-1)}}const et=/[\0\t\n\r]/g;function nt(e,n){const t=Number.parseInt(e,n);return t<9||11===t||t>13&&t<32||t>126&&t<160||t>55295&&t<57344||t>64975&&t<65008||!(65535&~t)||65534==(65535&t)||t>1114111?"�":String.fromCodePoint(t)}const tt=/\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;function rt(e,n,t){if(n)return n;if(35===t.charCodeAt(0)){const e=t.charCodeAt(1),n=120===e||88===e;return nt(t.slice(n?2:1),n?16:10)}return En(t)||e}const ot={}.hasOwnProperty;function lt(e,n,t){return"string"!=typeof n&&(t=n,n=void 0),function(e){const n={transforms:[],canContainEols:["emphasis","fragment","heading","paragraph","strong"],enter:{autolink:o(v),autolinkProtocol:c,autolinkEmail:c,atxHeading:o(m),blockQuote:o((function(){return{type:"blockquote",children:[]}})),characterEscape:c,characterReference:c,codeFenced:o(h),codeFencedFenceInfo:l,codeFencedFenceMeta:l,codeIndented:o(h,l),codeText:o((function(){return{type:"inlineCode",value:""}}),l),codeTextData:c,data:c,codeFlowValue:c,definition:o((function(){return{type:"definition",identifier:"",label:null,title:null,url:""}})),definitionDestinationString:l,definitionLabelString:l,definitionTitleString:l,emphasis:o((function(){return{type:"emphasis",children:[]}})),hardBreakEscape:o(g),hardBreakTrailing:o(g),htmlFlow:o(y,l),htmlFlowData:c,htmlText:o(y,l),htmlTextData:c,image:o((function(){return{type:"image",title:null,url:"",alt:null}})),label:l,link:o(v),listItem:o((function(e){return{type:"listItem",spread:e._spread,checked:null,children:[]}})),listItemValue:function(e){this.data.expectingFirstListItemValue&&(this.stack[this.stack.length-2].start=Number.parseInt(this.sliceSerialize(e),10),this.data.expectingFirstListItemValue=void 0)},listOrdered:o(b,(function(){this.data.expectingFirstListItemValue=!0})),listUnordered:o(b),paragraph:o((function(){return{type:"paragraph",children:[]}})),reference:function(){this.data.referenceType="collapsed"},referenceString:l,resourceDestinationString:l,resourceTitleString:l,setextHeading:o(m),strong:o((function(){return{type:"strong",children:[]}})),thematicBreak:o((function(){return{type:"thematicBreak"}}))},exit:{atxHeading:i(),atxHeadingSequence:function(e){const n=this.stack[this.stack.length-1];if(!n.depth){const t=this.sliceSerialize(e).length;n.depth=t}},autolink:i(),autolinkEmail:function(e){f.call(this,e),this.stack[this.stack.length-1].url="mailto:"+this.sliceSerialize(e)},autolinkProtocol:function(e){f.call(this,e),this.stack[this.stack.length-1].url=this.sliceSerialize(e)},blockQuote:i(),characterEscapeValue:f,characterReferenceMarkerHexadecimal:p,characterReferenceMarkerNumeric:p,characterReferenceValue:function(e){const n=this.sliceSerialize(e),t=this.data.characterReferenceType;let r;t?(r=nt(n,"characterReferenceMarkerNumeric"===t?10:16),this.data.characterReferenceType=void 0):r=En(n);this.stack[this.stack.length-1].value+=r},characterReference:function(e){this.stack.pop().position.end=at(e.end)},codeFenced:i((function(){const e=this.resume();this.stack[this.stack.length-1].value=e.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g,""),this.data.flowCodeInside=void 0})),codeFencedFence:function(){this.data.flowCodeInside||(this.buffer(),this.data.flowCodeInside=!0)},codeFencedFenceInfo:function(){const e=this.resume();this.stack[this.stack.length-1].lang=e},codeFencedFenceMeta:function(){const e=this.resume();this.stack[this.stack.length-1].meta=e},codeFlowValue:f,codeIndented:i((function(){const e=this.resume();this.stack[this.stack.length-1].value=e.replace(/(\r?\n|\r)$/g,"")})),codeText:i((function(){const e=this.resume();this.stack[this.stack.length-1].value=e})),codeTextData:f,data:f,definition:i(),definitionDestinationString:function(){const e=this.resume();this.stack[this.stack.length-1].url=e},definitionLabelString:function(e){const n=this.resume(),t=this.stack[this.stack.length-1];t.label=n,t.identifier=fn(this.sliceSerialize(e)).toLowerCase()},definitionTitleString:function(){const e=this.resume();this.stack[this.stack.length-1].title=e},emphasis:i(),hardBreakEscape:i(d),hardBreakTrailing:i(d),htmlFlow:i((function(){const e=this.resume();this.stack[this.stack.length-1].value=e})),htmlFlowData:f,htmlText:i((function(){const e=this.resume();this.stack[this.stack.length-1].value=e})),htmlTextData:f,image:i((function(){const e=this.stack[this.stack.length-1];if(this.data.inReference){const n=this.data.referenceType||"shortcut";e.type+="Reference",e.referenceType=n,delete e.url,delete e.title}else delete e.identifier,delete e.label;this.data.referenceType=void 0})),label:function(){const e=this.stack[this.stack.length-1],n=this.resume(),t=this.stack[this.stack.length-1];if(this.data.inReference=!0,"link"===t.type){const n=e.children;t.children=n}else t.alt=n},labelText:function(e){const n=this.sliceSerialize(e),t=this.stack[this.stack.length-2];t.label=function(e){return e.replace(tt,rt)}(n),t.identifier=fn(n).toLowerCase()},lineEnding:function(e){const t=this.stack[this.stack.length-1];if(this.data.atHardBreak)return t.children[t.children.length-1].position.end=at(e.end),void(this.data.atHardBreak=void 0);!this.data.setextHeadingSlurpLineEnding&&n.canContainEols.includes(t.type)&&(c.call(this,e),f.call(this,e))},link:i((function(){const e=this.stack[this.stack.length-1];if(this.data.inReference){const n=this.data.referenceType||"shortcut";e.type+="Reference",e.referenceType=n,delete e.url,delete e.title}else delete e.identifier,delete e.label;this.data.referenceType=void 0})),listItem:i(),listOrdered:i(),listUnordered:i(),paragraph:i(),referenceString:function(e){const n=this.resume(),t=this.stack[this.stack.length-1];t.label=n,t.identifier=fn(this.sliceSerialize(e)).toLowerCase(),this.data.referenceType="full"},resourceDestinationString:function(){const e=this.resume();this.stack[this.stack.length-1].url=e},resourceTitleString:function(){const e=this.resume();this.stack[this.stack.length-1].title=e},resource:function(){this.data.inReference=void 0},setextHeading:i((function(){this.data.setextHeadingSlurpLineEnding=void 0})),setextHeadingLineSequence:function(e){this.stack[this.stack.length-1].depth=61===this.sliceSerialize(e).codePointAt(0)?1:2},setextHeadingText:function(){this.data.setextHeadingSlurpLineEnding=!0},strong:i(),thematicBreak:i()}};it(n,(e||{}).mdastExtensions||[]);const t={};return function(e){let o={type:"root",children:[]};const i={stack:[o],tokenStack:[],config:n,enter:a,exit:s,buffer:l,resume:u,data:t},c=[];let f=-1;for(;++f<e.length;)"listOrdered"!==e[f][1].type&&"listUnordered"!==e[f][1].type||("enter"===e[f][0]?c.push(f):f=r(e,c.pop(),f));for(f=-1;++f<e.length;){const t=n[e[f][0]];ot.call(t,e[f][1].type)&&t[e[f][1].type].call(Object.assign({sliceSerialize:e[f][2].sliceSerialize},i),e[f][1])}if(i.tokenStack.length>0){const e=i.tokenStack[i.tokenStack.length-1];(e[1]||ut).call(i,void 0,e[0])}for(o.position={start:at(e.length>0?e[0][1].start:{line:1,column:1,offset:0}),end:at(e.length>0?e[e.length-2][1].end:{line:1,column:1,offset:0})},f=-1;++f<n.transforms.length;)o=n.transforms[f](o)||o;return o};function r(e,n,t){let r,o,l,a,i=n-1,s=-1,u=!1;for(;++i<=t;){const n=e[i];switch(n[1].type){case"listUnordered":case"listOrdered":case"blockQuote":"enter"===n[0]?s++:s--,a=void 0;break;case"lineEndingBlank":"enter"===n[0]&&(!r||a||s||l||(l=i),a=void 0);break;case"linePrefix":case"listItemValue":case"listItemMarker":case"listItemPrefix":case"listItemPrefixWhitespace":break;default:a=void 0}if(!s&&"enter"===n[0]&&"listItemPrefix"===n[1].type||-1===s&&"exit"===n[0]&&("listUnordered"===n[1].type||"listOrdered"===n[1].type)){if(r){let a=i;for(o=void 0;a--;){const n=e[a];if("lineEnding"===n[1].type||"lineEndingBlank"===n[1].type){if("exit"===n[0])continue;o&&(e[o][1].type="lineEndingBlank",u=!0),n[1].type="lineEnding",o=a}else if("linePrefix"!==n[1].type&&"blockQuotePrefix"!==n[1].type&&"blockQuotePrefixWhitespace"!==n[1].type&&"blockQuoteMarker"!==n[1].type&&"listItemIndent"!==n[1].type)break}l&&(!o||l<o)&&(r._spread=!0),r.end=Object.assign({},o?e[o][1].start:n[1].end),e.splice(o||i,0,["exit",r,n[2]]),i++,t++}if("listItemPrefix"===n[1].type){const o={type:"listItem",_spread:!1,start:Object.assign({},n[1].start),end:void 0};r=o,e.splice(i,0,["enter",o,n[2]]),i++,t++,l=void 0,a=!0}}}return e[n][1]._spread=u,t}function o(e,n){return function(t){a.call(this,e(t),t),n&&n.call(this,t)}}function l(){this.stack.push({type:"fragment",children:[]})}function a(e,n,t){this.stack[this.stack.length-1].children.push(e),this.stack.push(e),this.tokenStack.push([n,t||void 0]),e.position={start:at(n.start),end:void 0}}function i(e){return function(n){e&&e.call(this,n),s.call(this,n)}}function s(e,n){const t=this.stack.pop(),r=this.tokenStack.pop();if(!r)throw new Error("Cannot close `"+e.type+"` ("+K({start:e.start,end:e.end})+"): it’s not open");r[0].type!==e.type&&(n?n.call(this,e,r[0]):(r[1]||ut).call(this,e,r[0])),t.position.end=at(e.end)}function u(){return function(e){const n=ge;return ye(e,"boolean"!=typeof n.includeImageAlt||n.includeImageAlt,"boolean"!=typeof n.includeHtml||n.includeHtml)}(this.stack.pop())}function c(e){const n=this.stack[this.stack.length-1].children;let t=n[n.length-1];t&&"text"===t.type||(t={type:"text",value:""},t.position={start:at(e.start),end:void 0},n.push(t)),this.stack.push(t)}function f(e){const n=this.stack.pop();n.value+=this.sliceSerialize(e),n.position.end=at(e.end)}function d(){this.data.atHardBreak=!0}function p(e){this.data.characterReferenceType=e.type}function h(){return{type:"code",lang:null,meta:null,value:""}}function m(){return{type:"heading",depth:0,children:[]}}function g(){return{type:"break"}}function y(){return{type:"html",value:""}}function v(){return{type:"link",title:null,url:"",children:[]}}function b(e){return{type:"list",ordered:"listOrdered"===e.type,start:null,spread:e._spread,children:[]}}}(t)(function(e){for(;!Se(e););return e}(function(e){const n=function(e){const n={};let t=-1;for(;++t<e.length;)Ee(n,e[t]);return n}([o,...(e||{}).extensions||[]]),t={constructs:n,content:r(He),defined:[],document:r($e),flow:r(Ke),lazy:{},string:r(Ge),text:r(Xe)};return t;function r(e){return function(n){return Jn(t,e,n)}}}(t).document().write(function(){let e,n=1,t="",r=!0;return function(o,l,a){const i=[];let s,u,c,f,d;for(o=t+("string"==typeof o?o.toString():new TextDecoder(l||void 0).decode(o)),c=0,t="",r&&(65279===o.charCodeAt(0)&&c++,r=void 0);c<o.length;){if(et.lastIndex=c,s=et.exec(o),f=s&&void 0!==s.index?s.index:o.length,d=o.charCodeAt(f),!s){t=o.slice(c);break}if(10===d&&c===f&&e)i.push(-3),e=void 0;else switch(e&&(i.push(-5),e=void 0),c<f&&(i.push(o.slice(c,f)),n+=f-c),d){case 0:i.push(65533),n++;break;case 9:for(u=4*Math.ceil(n/4),i.push(-2);n++<u;)i.push(-1);break;case 10:i.push(-4),n=1;break;default:e=!0,n=1}c=f+1}return a&&(e&&i.push(-5),t&&i.push(t),i.push(null)),i}}()(e,n,!0))))}function at(e){return{line:e.line,column:e.column,offset:e.offset}}function it(e,n){let t=-1;for(;++t<n.length;){const r=n[t];Array.isArray(r)?it(e,r):st(e,r)}}function st(e,n){let t;for(t in n)if(ot.call(n,t))switch(t){case"canContainEols":{const r=n[t];r&&e[t].push(...r);break}case"transforms":{const r=n[t];r&&e[t].push(...r);break}case"enter":case"exit":{const r=n[t];r&&Object.assign(e[t],r);break}}}function ut(e,n){throw e?new Error("Cannot close `"+e.type+"` ("+K({start:e.start,end:e.end})+"): a different token (`"+n.type+"`, "+K({start:n.start,end:n.end})+") is open"):new Error("Cannot close document, a token (`"+n.type+"`, "+K({start:n.start,end:n.end})+") is still open")}function ct(e){const n=this;n.parser=function(t){return lt(t,{...n.data("settings"),...e,extensions:n.data("micromarkExtensions")||[],mdastExtensions:n.data("fromMarkdownExtensions")||[]})}}const ft="object"==typeof self?self:globalThis,dt=e=>((e,n)=>{const t=(n,t)=>(e.set(t,n),n),r=o=>{if(e.has(o))return e.get(o);const[l,a]=n[o];switch(l){case 0:case-1:return t(a,o);case 1:{const e=t([],o);for(const n of a)e.push(r(n));return e}case 2:{const e=t({},o);for(const[n,t]of a)e[r(n)]=r(t);return e}case 3:return t(new Date(a),o);case 4:{const{source:e,flags:n}=a;return t(new RegExp(e,n),o)}case 5:{const e=t(new Map,o);for(const[n,t]of a)e.set(r(n),r(t));return e}case 6:{const e=t(new Set,o);for(const n of a)e.add(r(n));return e}case 7:{const{name:e,message:n}=a;return t(new ft[e](n),o)}case 8:return t(BigInt(a),o);case"BigInt":return t(Object(BigInt(a)),o);case"ArrayBuffer":return t(new Uint8Array(a).buffer,a);case"DataView":{const{buffer:e}=new Uint8Array(a);return t(new DataView(e),a)}}return t(new ft[l](a),o)};return r})(new Map,e)(0),pt="",{toString:ht}={},{keys:mt}=Object,gt=e=>{const n=typeof e;if("object"!==n||!e)return[0,n];const t=ht.call(e).slice(8,-1);switch(t){case"Array":return[1,pt];case"Object":return[2,pt];case"Date":return[3,pt];case"RegExp":return[4,pt];case"Map":return[5,pt];case"Set":return[6,pt];case"DataView":return[1,t]}return t.includes("Array")?[1,t]:t.includes("Error")?[7,t]:[2,t]},yt=([e,n])=>0===e&&("function"===n||"symbol"===n),vt=(e,{json:n,lossy:t}={})=>{const r=[];return((e,n,t,r)=>{const o=(e,n)=>{const o=r.push(e)-1;return t.set(n,o),o},l=r=>{if(t.has(r))return t.get(r);let[a,i]=gt(r);switch(a){case 0:{let n=r;switch(i){case"bigint":a=8,n=r.toString();break;case"function":case"symbol":if(e)throw new TypeError("unable to serialize "+i);n=null;break;case"undefined":return o([-1],r)}return o([a,n],r)}case 1:{if(i){let e=r;return"DataView"===i?e=new Uint8Array(r.buffer):"ArrayBuffer"===i&&(e=new Uint8Array(r)),o([i,[...e]],r)}const e=[],n=o([a,e],r);for(const n of r)e.push(l(n));return n}case 2:{if(i)switch(i){case"BigInt":return o([i,r.toString()],r);case"Boolean":case"Number":case"String":return o([i,r.valueOf()],r)}if(n&&"toJSON"in r)return l(r.toJSON());const t=[],s=o([a,t],r);for(const n of mt(r))!e&&yt(gt(r[n]))||t.push([l(n),l(r[n])]);return s}case 3:return o([a,r.toISOString()],r);case 4:{const{source:e,flags:n}=r;return o([a,{source:e,flags:n}],r)}case 5:{const n=[],t=o([a,n],r);for(const[t,o]of r)(e||!yt(gt(t))&&!yt(gt(o)))&&n.push([l(t),l(o)]);return t}case 6:{const n=[],t=o([a,n],r);for(const t of r)!e&&yt(gt(t))||n.push(l(t));return t}}const{message:s}=r;return o([a,{name:i,message:s}],r)};return l})(!(n||t),!!n,new Map,r)(e),r},bt="function"==typeof structuredClone?(e,n)=>n&&("json"in n||"lossy"in n)?dt(vt(e,n)):structuredClone(e):(e,n)=>dt(vt(e,n));function wt(e){const n=[];let t=-1,r=0,o=0;for(;++t<e.length;){const l=e.charCodeAt(t);let a="";if(37===l&&Pe(e.charCodeAt(t+1))&&Pe(e.charCodeAt(t+2)))o=2;else if(l<128)/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(l))||(a=String.fromCharCode(l));else if(l>55295&&l<57344){const n=e.charCodeAt(t+1);l<56320&&n>56319&&n<57344?(a=String.fromCharCode(l,n),o=1):a="�"}else a=String.fromCharCode(l);a&&(n.push(e.slice(r,t),encodeURIComponent(a)),r=t+o+1,a=""),o&&(t+=o,o=0)}return n.join("")+e.slice(r)}function kt(e,n){const t=[{type:"text",value:"↩"}];return n>1&&t.push({type:"element",tagName:"sup",properties:{},children:[{type:"text",value:String(n)}]}),t}function At(e,n){return"Back to reference "+(e+1)+(n>1?"-"+n:"")}const St=function(e){if(null==e)return Ct;if("function"==typeof e)return xt(e);if("object"==typeof e)return Array.isArray(e)?function(e){const n=[];let t=-1;for(;++t<e.length;)n[t]=St(e[t]);return xt((function(...e){let t=-1;for(;++t<n.length;)if(n[t].apply(this,e))return!0;return!1}))}(e):function(e){const n=e;return xt((function(t){const r=t;let o;for(o in e)if(r[o]!==n[o])return!1;return!0}))}(e);if("string"==typeof e)return n=e,xt((function(e){return e&&e.type===n}));var n;throw new Error("Expected function, string, or object as test")};function xt(e){return function(n,t,r){return Boolean(function(e){return null!==e&&"object"==typeof e&&"type"in e}(n)&&e.call(this,n,"number"==typeof t?t:void 0,r||void 0))}}function Ct(){return!0}const Et=[],Bt=!0,Ft=!1,Pt="skip";function Ut(e,n,t,r){let o,l,a;"function"==typeof n&&"function"!=typeof t?(l=void 0,a=n,o=t):(l=n,a=t,o=r),function(e,n,t,r){let o;"function"==typeof n&&"function"!=typeof t?(r=t,t=n):o=n;const l=St(o),a=r?-1:1;!function e(o,i,s){const u=o&&"object"==typeof o?o:{};if("string"==typeof u.type){const e="string"==typeof u.tagName?u.tagName:"string"==typeof u.name?u.name:void 0;Object.defineProperty(c,"name",{value:"node ("+o.type+(e?"<"+e+">":"")+")"})}return c;function c(){let u,c,f,d=Et;if((!n||l(o,i,s[s.length-1]||void 0))&&(d=function(e){return Array.isArray(e)?e:"number"==typeof e?[Bt,e]:null==e?Et:[e]}(t(o,s)),d[0]===Ft))return d;if("children"in o&&o.children){const n=o;if(n.children&&d[0]!==Pt)for(c=(r?n.children.length:-1)+a,f=s.concat(n);c>-1&&c<n.children.length;){const t=n.children[c];if(u=e(t,c,f)(),u[0]===Ft)return u;c="number"==typeof u[1]?u[1]:c+a}}return d}}(e,void 0,[])()}(e,l,(function(e,n){const t=n[n.length-1],r=t?t.children.indexOf(e):void 0;return a(e,r,t)}),o)}function Tt(e,n){const t=n.referenceType;let r="]";if("collapsed"===t?r+="[]":"full"===t&&(r+="["+(n.label||n.identifier)+"]"),"imageReference"===n.type)return[{type:"text",value:"!["+n.alt+r}];const o=e.all(n),l=o[0];l&&"text"===l.type?l.value="["+l.value:o.unshift({type:"text",value:"["});const a=o[o.length-1];return a&&"text"===a.type?a.value+=r:o.push({type:"text",value:r}),o}function _t(e){const n=e.spread;return null==n?e.children.length>1:n}const It=9,zt=32;function Ot(e){const n=String(e),t=/\r?\n|\r/g;let r=t.exec(n),o=0;const l=[];for(;r;)l.push(Lt(n.slice(o,r.index),o>0,!0),r[0]),o=r.index+r[0].length,r=t.exec(n);return l.push(Lt(n.slice(o),o>0,!1)),l.join("")}function Lt(e,n,t){let r=0,o=e.length;if(n){let n=e.codePointAt(r);for(;n===It||n===zt;)r++,n=e.codePointAt(r)}if(t){let n=e.codePointAt(o-1);for(;n===It||n===zt;)o--,n=e.codePointAt(o-1)}return o>r?e.slice(r,o):""}const Nt={blockquote:function(e,n){const t={type:"element",tagName:"blockquote",properties:{},children:e.wrap(e.all(n),!0)};return e.patch(n,t),e.applyData(n,t)},break:function(e,n){const t={type:"element",tagName:"br",properties:{},children:[]};return e.patch(n,t),[e.applyData(n,t),{type:"text",value:"\n"}]},code:function(e,n){const t=n.value?n.value+"\n":"",r={};n.lang&&(r.className=["language-"+n.lang]);let o={type:"element",tagName:"code",properties:r,children:[{type:"text",value:t}]};return n.meta&&(o.data={meta:n.meta}),e.patch(n,o),o=e.applyData(n,o),o={type:"element",tagName:"pre",properties:{},children:[o]},e.patch(n,o),o},delete:function(e,n){const t={type:"element",tagName:"del",properties:{},children:e.all(n)};return e.patch(n,t),e.applyData(n,t)},emphasis:function(e,n){const t={type:"element",tagName:"em",properties:{},children:e.all(n)};return e.patch(n,t),e.applyData(n,t)},footnoteReference:function(e,n){const t="string"==typeof e.options.clobberPrefix?e.options.clobberPrefix:"user-content-",r=String(n.identifier).toUpperCase(),o=wt(r.toLowerCase()),l=e.footnoteOrder.indexOf(r);let a,i=e.footnoteCounts.get(r);void 0===i?(i=0,e.footnoteOrder.push(r),a=e.footnoteOrder.length):a=l+1,i+=1,e.footnoteCounts.set(r,i);const s={type:"element",tagName:"a",properties:{href:"#"+t+"fn-"+o,id:t+"fnref-"+o+(i>1?"-"+i:""),dataFootnoteRef:!0,ariaDescribedBy:["footnote-label"]},children:[{type:"text",value:String(a)}]};e.patch(n,s);const u={type:"element",tagName:"sup",properties:{},children:[s]};return e.patch(n,u),e.applyData(n,u)},heading:function(e,n){const t={type:"element",tagName:"h"+n.depth,properties:{},children:e.all(n)};return e.patch(n,t),e.applyData(n,t)},html:function(e,n){if(e.options.allowDangerousHtml){const t={type:"raw",value:n.value};return e.patch(n,t),e.applyData(n,t)}},imageReference:function(e,n){const t=String(n.identifier).toUpperCase(),r=e.definitionById.get(t);if(!r)return Tt(e,n);const o={src:wt(r.url||""),alt:n.alt};null!==r.title&&void 0!==r.title&&(o.title=r.title);const l={type:"element",tagName:"img",properties:o,children:[]};return e.patch(n,l),e.applyData(n,l)},image:function(e,n){const t={src:wt(n.url)};null!==n.alt&&void 0!==n.alt&&(t.alt=n.alt),null!==n.title&&void 0!==n.title&&(t.title=n.title);const r={type:"element",tagName:"img",properties:t,children:[]};return e.patch(n,r),e.applyData(n,r)},inlineCode:function(e,n){const t={type:"text",value:n.value.replace(/\r?\n|\r/g," ")};e.patch(n,t);const r={type:"element",tagName:"code",properties:{},children:[t]};return e.patch(n,r),e.applyData(n,r)},linkReference:function(e,n){const t=String(n.identifier).toUpperCase(),r=e.definitionById.get(t);if(!r)return Tt(e,n);const o={href:wt(r.url||"")};null!==r.title&&void 0!==r.title&&(o.title=r.title);const l={type:"element",tagName:"a",properties:o,children:e.all(n)};return e.patch(n,l),e.applyData(n,l)},link:function(e,n){const t={href:wt(n.url)};null!==n.title&&void 0!==n.title&&(t.title=n.title);const r={type:"element",tagName:"a",properties:t,children:e.all(n)};return e.patch(n,r),e.applyData(n,r)},listItem:function(e,n,t){const r=e.all(n),o=t?function(e){let n=!1;if("list"===e.type){n=e.spread||!1;const t=e.children;let r=-1;for(;!n&&++r<t.length;)n=_t(t[r])}return n}(t):_t(n),l={},a=[];if("boolean"==typeof n.checked){const e=r[0];let t;e&&"element"===e.type&&"p"===e.tagName?t=e:(t={type:"element",tagName:"p",properties:{},children:[]},r.unshift(t)),t.children.length>0&&t.children.unshift({type:"text",value:" "}),t.children.unshift({type:"element",tagName:"input",properties:{type:"checkbox",checked:n.checked,disabled:!0},children:[]}),l.className=["task-list-item"]}let i=-1;for(;++i<r.length;){const e=r[i];(o||0!==i||"element"!==e.type||"p"!==e.tagName)&&a.push({type:"text",value:"\n"}),"element"!==e.type||"p"!==e.tagName||o?a.push(e):a.push(...e.children)}const s=r[r.length-1];s&&(o||"element"!==s.type||"p"!==s.tagName)&&a.push({type:"text",value:"\n"});const u={type:"element",tagName:"li",properties:l,children:a};return e.patch(n,u),e.applyData(n,u)},list:function(e,n){const t={},r=e.all(n);let o=-1;for("number"==typeof n.start&&1!==n.start&&(t.start=n.start);++o<r.length;){const e=r[o];if("element"===e.type&&"li"===e.tagName&&e.properties&&Array.isArray(e.properties.className)&&e.properties.className.includes("task-list-item")){t.className=["contains-task-list"];break}}const l={type:"element",tagName:n.ordered?"ol":"ul",properties:t,children:e.wrap(r,!0)};return e.patch(n,l),e.applyData(n,l)},paragraph:function(e,n){const t={type:"element",tagName:"p",properties:{},children:e.all(n)};return e.patch(n,t),e.applyData(n,t)},root:function(e,n){const t={type:"root",children:e.wrap(e.all(n))};return e.patch(n,t),e.applyData(n,t)},strong:function(e,n){const t={type:"element",tagName:"strong",properties:{},children:e.all(n)};return e.patch(n,t),e.applyData(n,t)},table:function(e,n){const t=e.all(n),r=t.shift(),o=[];if(r){const t={type:"element",tagName:"thead",properties:{},children:e.wrap([r],!0)};e.patch(n.children[0],t),o.push(t)}if(t.length>0){const r={type:"element",tagName:"tbody",properties:{},children:e.wrap(t,!0)},l=W(n.children[1]),a=q(n.children[n.children.length-1]);l&&a&&(r.position={start:l,end:a}),o.push(r)}const l={type:"element",tagName:"table",properties:{},children:e.wrap(o,!0)};return e.patch(n,l),e.applyData(n,l)},tableCell:function(e,n){const t={type:"element",tagName:"td",properties:{},children:e.all(n)};return e.patch(n,t),e.applyData(n,t)},tableRow:function(e,n,t){const r=t?t.children:void 0,o=0===(r?r.indexOf(n):1)?"th":"td",l=t&&"table"===t.type?t.align:void 0,a=l?l.length:n.children.length;let i=-1;const s=[];for(;++i<a;){const t=n.children[i],r={},a=l?l[i]:void 0;a&&(r.align=a);let u={type:"element",tagName:o,properties:r,children:[]};t&&(u.children=e.all(t),e.patch(t,u),u=e.applyData(t,u)),s.push(u)}const u={type:"element",tagName:"tr",properties:{},children:e.wrap(s,!0)};return e.patch(n,u),e.applyData(n,u)},text:function(e,n){const t={type:"text",value:Ot(String(n.value))};return e.patch(n,t),e.applyData(n,t)},thematicBreak:function(e,n){const t={type:"element",tagName:"hr",properties:{},children:[]};return e.patch(n,t),e.applyData(n,t)},toml:Dt,yaml:Dt,definition:Dt,footnoteDefinition:Dt};function Dt(){}const Rt={}.hasOwnProperty,Mt={};function jt(e,n){e.position&&(n.position=function(e){const n=W(e),t=q(e);if(n&&t)return{start:n,end:t}}(e))}function Ht(e,n){let t=n;if(e&&e.data){const n=e.data.hName,r=e.data.hChildren,o=e.data.hProperties;"string"==typeof n&&("element"===t.type?t.tagName=n:t={type:"element",tagName:n,properties:{},children:"children"in t?t.children:[t]}),"element"===t.type&&o&&Object.assign(t.properties,bt(o)),"children"in t&&t.children&&null!=r&&(t.children=r)}return t}function $t(e,n){const t=n.data||{},r=!("value"in n)||Rt.call(t,"hProperties")||Rt.call(t,"hChildren")?{type:"element",tagName:"div",properties:{},children:e.all(n)}:{type:"text",value:n.value};return e.patch(n,r),e.applyData(n,r)}function Vt(e,n){const t=[];let r=-1;for(n&&t.push({type:"text",value:"\n"});++r<e.length;)r&&t.push({type:"text",value:"\n"}),t.push(e[r]);return n&&e.length>0&&t.push({type:"text",value:"\n"}),t}function qt(e){let n=0,t=e.charCodeAt(n);for(;9===t||32===t;)n++,t=e.charCodeAt(n);return e.slice(n)}function Wt(e,n){const t=function(e,n){const t=n||Mt,r=new Map,o=new Map,l=new Map,a={...Nt,...t.handlers},i={all:function(e){const n=[];if("children"in e){const t=e.children;let r=-1;for(;++r<t.length;){const o=i.one(t[r],e);if(o){if(r&&"break"===t[r-1].type&&(Array.isArray(o)||"text"!==o.type||(o.value=qt(o.value)),!Array.isArray(o)&&"element"===o.type)){const e=o.children[0];e&&"text"===e.type&&(e.value=qt(e.value))}Array.isArray(o)?n.push(...o):n.push(o)}}}return n},applyData:Ht,definitionById:r,footnoteById:o,footnoteCounts:l,footnoteOrder:[],handlers:a,one:function(e,n){const t=e.type,r=i.handlers[t];if(Rt.call(i.handlers,t)&&r)return r(i,e,n);if(i.options.passThrough&&i.options.passThrough.includes(t)){if("children"in e){const{children:n,...t}=e,r=bt(t);return r.children=i.all(e),r}return bt(e)}return(i.options.unknownHandler||$t)(i,e,n)},options:t,patch:jt,wrap:Vt};return Ut(e,(function(e){if("definition"===e.type||"footnoteDefinition"===e.type){const n="definition"===e.type?r:o,t=String(e.identifier).toUpperCase();n.has(t)||n.set(t,e)}})),i}(e,n),r=t.one(e,void 0),o=function(e){const n="string"==typeof e.options.clobberPrefix?e.options.clobberPrefix:"user-content-",t=e.options.footnoteBackContent||kt,r=e.options.footnoteBackLabel||At,o=e.options.footnoteLabel||"Footnotes",l=e.options.footnoteLabelTagName||"h2",a=e.options.footnoteLabelProperties||{className:["sr-only"]},i=[];let s=-1;for(;++s<e.footnoteOrder.length;){const o=e.footnoteById.get(e.footnoteOrder[s]);if(!o)continue;const l=e.all(o),a=String(o.identifier).toUpperCase(),u=wt(a.toLowerCase());let c=0;const f=[],d=e.footnoteCounts.get(a);for(;void 0!==d&&++c<=d;){f.length>0&&f.push({type:"text",value:" "});let e="string"==typeof t?t:t(s,c);"string"==typeof e&&(e={type:"text",value:e}),f.push({type:"element",tagName:"a",properties:{href:"#"+n+"fnref-"+u+(c>1?"-"+c:""),dataFootnoteBackref:"",ariaLabel:"string"==typeof r?r:r(s,c),className:["data-footnote-backref"]},children:Array.isArray(e)?e:[e]})}const p=l[l.length-1];if(p&&"element"===p.type&&"p"===p.tagName){const e=p.children[p.children.length-1];e&&"text"===e.type?e.value+=" ":p.children.push({type:"text",value:" "}),p.children.push(...f)}else l.push(...f);const h={type:"element",tagName:"li",properties:{id:n+"fn-"+u},children:e.wrap(l,!0)};e.patch(o,h),i.push(h)}if(0!==i.length)return{type:"element",tagName:"section",properties:{dataFootnotes:!0,className:["footnotes"]},children:[{type:"element",tagName:l,properties:{...bt(a),id:"footnote-label"},children:[{type:"text",value:o}]},{type:"text",value:"\n"},{type:"element",tagName:"ol",properties:{},children:e.wrap(i,!0)},{type:"text",value:"\n"}]}}(t),l=Array.isArray(r)?{type:"root",children:r}:r||{type:"root",children:[]};return o&&l.children.push({type:"text",value:"\n"},o),l}function Qt(e,n){return e&&"run"in e?async function(t,r){const o=Wt(t,{file:r,...n});await e.run(o,r)}:function(t,r){return Wt(t,{file:r,...e||n})}}function Kt(e){if(e)throw e}var Yt=t(2849);function Gt(e){if("object"!=typeof e||null===e)return!1;const n=Object.getPrototypeOf(e);return!(null!==n&&n!==Object.prototype&&null!==Object.getPrototypeOf(n)||Symbol.toStringTag in e||Symbol.iterator in e)}const Xt=function(e,n){if(void 0!==n&&"string"!=typeof n)throw new TypeError('"ext" argument must be a string');tr(e);let t,r=0,o=-1,l=e.length;if(void 0===n||0===n.length||n.length>e.length){for(;l--;)if(47===e.codePointAt(l)){if(t){r=l+1;break}}else o<0&&(t=!0,o=l+1);return o<0?"":e.slice(r,o)}if(n===e)return"";let a=-1,i=n.length-1;for(;l--;)if(47===e.codePointAt(l)){if(t){r=l+1;break}}else a<0&&(t=!0,a=l+1),i>-1&&(e.codePointAt(l)===n.codePointAt(i--)?i<0&&(o=l):(i=-1,o=a));return r===o?o=a:o<0&&(o=e.length),e.slice(r,o)},Zt=function(e){if(tr(e),0===e.length)return".";let n,t=-1,r=e.length;for(;--r;)if(47===e.codePointAt(r)){if(n){t=r;break}}else n||(n=!0);return t<0?47===e.codePointAt(0)?"/":".":1===t&&47===e.codePointAt(0)?"//":e.slice(0,t)},Jt=function(e){tr(e);let n,t=e.length,r=-1,o=0,l=-1,a=0;for(;t--;){const i=e.codePointAt(t);if(47!==i)r<0&&(n=!0,r=t+1),46===i?l<0?l=t:1!==a&&(a=1):l>-1&&(a=-1);else if(n){o=t+1;break}}return l<0||r<0||0===a||1===a&&l===r-1&&l===o+1?"":e.slice(l,r)},er=function(...e){let n,t=-1;for(;++t<e.length;)tr(e[t]),e[t]&&(n=void 0===n?e[t]:n+"/"+e[t]);return void 0===n?".":function(e){tr(e);const n=47===e.codePointAt(0);let t=function(e,n){let t,r,o="",l=0,a=-1,i=0,s=-1;for(;++s<=e.length;){if(s<e.length)t=e.codePointAt(s);else{if(47===t)break;t=47}if(47===t){if(a===s-1||1===i);else if(a!==s-1&&2===i){if(o.length<2||2!==l||46!==o.codePointAt(o.length-1)||46!==o.codePointAt(o.length-2))if(o.length>2){if(r=o.lastIndexOf("/"),r!==o.length-1){r<0?(o="",l=0):(o=o.slice(0,r),l=o.length-1-o.lastIndexOf("/")),a=s,i=0;continue}}else if(o.length>0){o="",l=0,a=s,i=0;continue}n&&(o=o.length>0?o+"/..":"..",l=2)}else o.length>0?o+="/"+e.slice(a+1,s):o=e.slice(a+1,s),l=s-a-1;a=s,i=0}else 46===t&&i>-1?i++:i=-1}return o}(e,!n);return 0!==t.length||n||(t="."),t.length>0&&47===e.codePointAt(e.length-1)&&(t+="/"),n?"/"+t:t}(n)},nr="/";function tr(e){if("string"!=typeof e)throw new TypeError("Path must be a string. Received "+JSON.stringify(e))}const rr=function(){return"/"};function or(e){return Boolean(null!==e&&"object"==typeof e&&"href"in e&&e.href&&"protocol"in e&&e.protocol&&void 0===e.auth)}const lr=["history","path","basename","stem","extname","dirname"];class ar{constructor(e){let n;n=e?or(e)?{path:e}:"string"==typeof e||function(e){return Boolean(e&&"object"==typeof e&&"byteLength"in e&&"byteOffset"in e)}(e)?{value:e}:e:{},this.cwd="cwd"in n?"":rr(),this.data={},this.history=[],this.messages=[],this.value,this.map,this.result,this.stored;let t,r=-1;for(;++r<lr.length;){const e=lr[r];e in n&&void 0!==n[e]&&null!==n[e]&&(this[e]="history"===e?[...n[e]]:n[e])}for(t in n)lr.includes(t)||(this[t]=n[t])}get basename(){return"string"==typeof this.path?Xt(this.path):void 0}set basename(e){sr(e,"basename"),ir(e,"basename"),this.path=er(this.dirname||"",e)}get dirname(){return"string"==typeof this.path?Zt(this.path):void 0}set dirname(e){ur(this.basename,"dirname"),this.path=er(e||"",this.basename)}get extname(){return"string"==typeof this.path?Jt(this.path):void 0}set extname(e){if(ir(e,"extname"),ur(this.dirname,"extname"),e){if(46!==e.codePointAt(0))throw new Error("`extname` must start with `.`");if(e.includes(".",1))throw new Error("`extname` cannot contain multiple dots")}this.path=er(this.dirname,this.stem+(e||""))}get path(){return this.history[this.history.length-1]}set path(e){or(e)&&(e=function(e){if("string"==typeof e)e=new URL(e);else if(!or(e)){const n=new TypeError('The "path" argument must be of type string or an instance of URL. Received `'+e+"`");throw n.code="ERR_INVALID_ARG_TYPE",n}if("file:"!==e.protocol){const e=new TypeError("The URL must be of scheme file");throw e.code="ERR_INVALID_URL_SCHEME",e}return function(e){if(""!==e.hostname){const e=new TypeError('File URL host must be "localhost" or empty on darwin');throw e.code="ERR_INVALID_FILE_URL_HOST",e}const n=e.pathname;let t=-1;for(;++t<n.length;)if(37===n.codePointAt(t)&&50===n.codePointAt(t+1)){const e=n.codePointAt(t+2);if(70===e||102===e){const e=new TypeError("File URL path must not include encoded / characters");throw e.code="ERR_INVALID_FILE_URL_PATH",e}}return decodeURIComponent(n)}(e)}(e)),sr(e,"path"),this.path!==e&&this.history.push(e)}get stem(){return"string"==typeof this.path?Xt(this.path,this.extname):void 0}set stem(e){sr(e,"stem"),ir(e,"stem"),this.path=er(this.dirname||"",e+(this.extname||""))}fail(e,n,t){const r=this.message(e,n,t);throw r.fatal=!0,r}info(e,n,t){const r=this.message(e,n,t);return r.fatal=void 0,r}message(e,n,t){const r=new Z(e,n,t);return this.path&&(r.name=this.path+":"+r.name,r.file=this.path),r.fatal=!1,this.messages.push(r),r}toString(e){return void 0===this.value?"":"string"==typeof this.value?this.value:new TextDecoder(e||void 0).decode(this.value)}}function ir(e,n){if(e&&e.includes(nr))throw new Error("`"+n+"` cannot be a path: did not expect `"+nr+"`")}function sr(e,n){if(!e)throw new Error("`"+n+"` cannot be empty")}function ur(e,n){if(!e)throw new Error("Setting `"+n+"` requires `path` to be set too")}const cr=function(e){const n=this.constructor.prototype,t=n[e],r=function(){return t.apply(r,arguments)};return Object.setPrototypeOf(r,n),r},fr={}.hasOwnProperty;class dr extends cr{constructor(){super("copy"),this.Compiler=void 0,this.Parser=void 0,this.attachers=[],this.compiler=void 0,this.freezeIndex=-1,this.frozen=void 0,this.namespace={},this.parser=void 0,this.transformers=function(){const e=[],n={run:function(...n){let t=-1;const r=n.pop();if("function"!=typeof r)throw new TypeError("Expected function as last argument, not "+r);!function o(l,...a){const i=e[++t];let s=-1;if(l)r(l);else{for(;++s<n.length;)null!==a[s]&&void 0!==a[s]||(a[s]=n[s]);n=a,i?function(e,n){let t;return function(...n){const l=e.length>n.length;let a;l&&n.push(r);try{a=e.apply(this,n)}catch(e){if(l&&t)throw e;return r(e)}l||(a&&a.then&&"function"==typeof a.then?a.then(o,r):a instanceof Error?r(a):o(a))};function r(e,...r){t||(t=!0,n(e,...r))}function o(e){r(null,e)}}(i,o)(...a):r(null,...a)}}(null,...n)},use:function(t){if("function"!=typeof t)throw new TypeError("Expected `middelware` to be a function, not "+t);return e.push(t),n}};return n}()}copy(){const e=new dr;let n=-1;for(;++n<this.attachers.length;){const t=this.attachers[n];e.use(...t)}return e.data(Yt(!0,{},this.namespace)),e}data(e,n){return"string"==typeof e?2===arguments.length?(gr("data",this.frozen),this.namespace[e]=n,this):fr.call(this.namespace,e)&&this.namespace[e]||void 0:e?(gr("data",this.frozen),this.namespace=e,this):this.namespace}freeze(){if(this.frozen)return this;const e=this;for(;++this.freezeIndex<this.attachers.length;){const[n,...t]=this.attachers[this.freezeIndex];if(!1===t[0])continue;!0===t[0]&&(t[0]=void 0);const r=n.call(e,...t);"function"==typeof r&&this.transformers.use(r)}return this.frozen=!0,this.freezeIndex=Number.POSITIVE_INFINITY,this}parse(e){this.freeze();const n=br(e),t=this.parser||this.Parser;return hr("parse",t),t(String(n),n)}process(e,n){const t=this;return this.freeze(),hr("process",this.parser||this.Parser),mr("process",this.compiler||this.Compiler),n?r(void 0,n):new Promise(r);function r(r,o){const l=br(e),a=t.parse(l);function i(e,t){e||!t?o(e):r?r(t):n(void 0,t)}t.run(a,l,(function(e,n,r){if(e||!n||!r)return i(e);const o=n,l=t.stringify(o,r);var a;"string"==typeof(a=l)||function(e){return Boolean(e&&"object"==typeof e&&"byteLength"in e&&"byteOffset"in e)}(a)?r.value=l:r.result=l,i(e,r)}))}}processSync(e){let n,t=!1;return this.freeze(),hr("processSync",this.parser||this.Parser),mr("processSync",this.compiler||this.Compiler),this.process(e,(function(e,r){t=!0,Kt(e),n=r})),vr("processSync","process",t),n}run(e,n,t){yr(e),this.freeze();const r=this.transformers;return t||"function"!=typeof n||(t=n,n=void 0),t?o(void 0,t):new Promise(o);function o(o,l){const a=br(n);r.run(e,a,(function(n,r,a){const i=r||e;n?l(n):o?o(i):t(void 0,i,a)}))}}runSync(e,n){let t,r=!1;return this.run(e,n,(function(e,n){Kt(e),t=n,r=!0})),vr("runSync","run",r),t}stringify(e,n){this.freeze();const t=br(n),r=this.compiler||this.Compiler;return mr("stringify",r),yr(e),r(e,t)}use(e,...n){const t=this.attachers,r=this.namespace;if(gr("use",this.frozen),null==e);else if("function"==typeof e)i(e,n);else{if("object"!=typeof e)throw new TypeError("Expected usable value, not `"+e+"`");Array.isArray(e)?a(e):l(e)}return this;function o(e){if("function"==typeof e)i(e,[]);else{if("object"!=typeof e)throw new TypeError("Expected usable value, not `"+e+"`");if(Array.isArray(e)){const[n,...t]=e;i(n,t)}else l(e)}}function l(e){if(!("plugins"in e)&&!("settings"in e))throw new Error("Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither");a(e.plugins),e.settings&&(r.settings=Yt(!0,r.settings,e.settings))}function a(e){let n=-1;if(null==e);else{if(!Array.isArray(e))throw new TypeError("Expected a list of plugins, not `"+e+"`");for(;++n<e.length;)o(e[n])}}function i(e,n){let r=-1,o=-1;for(;++r<t.length;)if(t[r][0]===e){o=r;break}if(-1===o)t.push([e,...n]);else if(n.length>0){let[r,...l]=n;const a=t[o][1];Gt(a)&&Gt(r)&&(r=Yt(!0,a,r)),t[o]=[e,r,...l]}}}}const pr=(new dr).freeze();function hr(e,n){if("function"!=typeof n)throw new TypeError("Cannot `"+e+"` without `parser`")}function mr(e,n){if("function"!=typeof n)throw new TypeError("Cannot `"+e+"` without `compiler`")}function gr(e,n){if(n)throw new Error("Cannot call `"+e+"` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.")}function yr(e){if(!Gt(e)||"string"!=typeof e.type)throw new TypeError("Expected node, got `"+e+"`")}function vr(e,n,t){if(!t)throw new Error("`"+e+"` finished async. Use `"+n+"` instead")}function br(e){return function(e){return Boolean(e&&"object"==typeof e&&"message"in e&&"messages"in e)}(e)?e:new ar(e)}const wr=[],kr={allowDangerousHtml:!0},Ar=/^(https?|ircs?|mailto|xmpp)$/i,Sr=[{from:"astPlugins",id:"remove-buggy-html-in-markdown-parser"},{from:"allowDangerousHtml",id:"remove-buggy-html-in-markdown-parser"},{from:"allowNode",id:"replace-allownode-allowedtypes-and-disallowedtypes",to:"allowElement"},{from:"allowedTypes",id:"replace-allownode-allowedtypes-and-disallowedtypes",to:"allowedElements"},{from:"className",id:"remove-classname"},{from:"disallowedTypes",id:"replace-allownode-allowedtypes-and-disallowedtypes",to:"disallowedElements"},{from:"escapeHtml",id:"remove-buggy-html-in-markdown-parser"},{from:"includeElementIndex",id:"#remove-includeelementindex"},{from:"includeNodeIndex",id:"change-includenodeindex-to-includeelementindex"},{from:"linkTarget",id:"remove-linktarget"},{from:"plugins",id:"change-plugins-to-remarkplugins",to:"remarkPlugins"},{from:"rawSourcePos",id:"#remove-rawsourcepos"},{from:"renderers",id:"change-renderers-to-components",to:"components"},{from:"source",id:"change-source-to-children",to:"children"},{from:"sourcePos",id:"#remove-sourcepos"},{from:"transformImageUri",id:"#add-urltransform",to:"urlTransform"},{from:"transformLinkUri",id:"#add-urltransform",to:"urlTransform"}];function xr(e){const n=function(e){const n=e.rehypePlugins||wr,t=e.remarkPlugins||wr,r=e.remarkRehypeOptions?{...e.remarkRehypeOptions,...kr}:kr;return pr().use(ct).use(t).use(Qt,r).use(n)}(e),t=function(e){const n=e.children||"",t=new ar;return"string"==typeof n&&(t.value=n),t}(e);return function(e,n){const t=n.allowedElements,r=n.allowElement,o=n.components,l=n.disallowedElements,a=n.skipHtml,i=n.unwrapDisallowed,s=n.urlTransform||Cr;for(const e of Sr)Object.hasOwn(n,e.from)&&(e.from,e.to&&e.to,e.id);return Ut(e,(function(e,n,o){if("raw"===e.type&&o&&"number"==typeof n)return a?o.children.splice(n,1):o.children[n]={type:"text",value:e.value},n;if("element"===e.type){let n;for(n in he)if(Object.hasOwn(he,n)&&Object.hasOwn(e.properties,n)){const t=e.properties[n],r=he[n];(null===r||r.includes(e.tagName))&&(e.properties[n]=s(String(t||""),n,e))}}if("element"===e.type){let a=t?!t.includes(e.tagName):!!l&&l.includes(e.tagName);if(!a&&r&&"number"==typeof n&&(a=!r(e,n,o)),a&&o&&"number"==typeof n)return i&&e.children?o.children.splice(n,1,...e.children):o.children.splice(n,1),n}})),function(e,n){if(!n||void 0===n.Fragment)throw new TypeError("Expected `Fragment` in options");const t=n.filePath||void 0;let r;if(n.development){if("function"!=typeof n.jsxDEV)throw new TypeError("Expected `jsxDEV` in options when `development: true`");r=function(e,n){return function(t,r,o,l){const a=Array.isArray(o.children),i=W(t);return n(r,o,l,a,{columnNumber:i?i.column-1:void 0,fileName:e,lineNumber:i?i.line:void 0},void 0)}}(t,n.jsxDEV)}else{if("function"!=typeof n.jsx)throw new TypeError("Expected `jsx` in production options");if("function"!=typeof n.jsxs)throw new TypeError("Expected `jsxs` in production options");o=n.jsx,l=n.jsxs,r=function(e,n,t,r){const a=Array.isArray(t.children)?l:o;return r?a(n,t,r):a(n,t)}}var o,l;const a={Fragment:n.Fragment,ancestors:[],components:n.components||{},create:r,elementAttributeNameCase:n.elementAttributeNameCase||"react",evaluater:n.createEvaluater?n.createEvaluater():void 0,filePath:t,ignoreInvalidStyle:n.ignoreInvalidStyle||!1,passKeys:!1!==n.passKeys,passNode:n.passNode||!1,schema:"svg"===n.space?N:L,stylePropertyNameCase:n.stylePropertyNameCase||"dom",tableCellAlignToStyle:!1!==n.tableCellAlignToStyle},i=le(a,e,void 0);return i&&"string"!=typeof i?i:a.create(e,a.Fragment,{children:i||void 0},void 0)}(e,{Fragment:me.Fragment,components:o,ignoreInvalidStyle:!0,jsx:me.jsx,jsxs:me.jsxs,passKeys:!0,passNode:!0})}(n.runSync(n.parse(t),t),e)}function Cr(e){const n=e.indexOf(":"),t=e.indexOf("?"),r=e.indexOf("#"),o=e.indexOf("/");return-1===n||-1!==o&&n>o||-1!==t&&n>t||-1!==r&&n>r||Ar.test(e.slice(0,n))?e:""}},8906:(e,n,t)=>{"use strict";e.exports=t.p+"f49a91d60ad49ded7427.woff2"},8917:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.camelCase=void 0;var t=/^--[a-zA-Z0-9_-]+$/,r=/-([a-z])/g,o=/^[^-]+$/,l=/^-(webkit|moz|ms|o|khtml)-/,a=/^-(ms)-/,i=function(e,n){return n.toUpperCase()},s=function(e,n){return"".concat(n,"-")};n.camelCase=function(e,n){return void 0===n&&(n={}),function(e){return!e||o.test(e)||t.test(e)}(e)?e:(e=e.toLowerCase(),(e=n.reactCompat?e.replace(a,s):e.replace(l,s)).replace(r,i))}},9288:(e,n,t)=>{"use strict";t.d(n,{A:()=>H});var r=t(1354),o=t.n(r),l=t(6314),a=t.n(l),i=t(4417),s=t.n(i),u=new URL(t(5879),t.b),c=new URL(t(7137),t.b),f=new URL(t(4365),t.b),d=new URL(t(3412),t.b),p=new URL(t(1494),t.b),h=new URL(t(255),t.b),m=new URL(t(8906),t.b),g=new URL(t(7652),t.b),y=new URL(t(7830),t.b),v=new URL(t(9814),t.b),b=new URL(t(3052),t.b),w=new URL(t(6437),t.b),k=new URL(t(4863),t.b),A=new URL(t(8222),t.b),S=new URL(t(6099),t.b),x=new URL(t(5861),t.b),C=a()(o()),E=s()(u),B=s()(c),F=s()(f),P=s()(d),U=s()(p),T=s()(h),_=s()(m),I=s()(g),z=s()(y),O=s()(v),L=s()(b),N=s()(w),D=s()(k),R=s()(A),M=s()(S),j=s()(x);C.push([e.id,`/* open-sans-cyrillic-ext-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${E}) format('woff2'), url(${B}) format('woff');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* open-sans-cyrillic-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${F}) format('woff2'), url(${B}) format('woff');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* open-sans-greek-ext-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${P}) format('woff2'), url(${B}) format('woff');\n  unicode-range: U+1F00-1FFF;\n}\n/* open-sans-greek-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${U}) format('woff2'), url(${B}) format('woff');\n  unicode-range: U+0370-03FF;\n}\n/* open-sans-vietnamese-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${T}) format('woff2'), url(${B}) format('woff');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* open-sans-latin-ext-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${_}) format('woff2'), url(${B}) format('woff');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* open-sans-latin-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${I}) format('woff2'), url(${B}) format('woff');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n/* open-sans-cyrillic-ext-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${z}) format('woff2'), url(${O}) format('woff');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* open-sans-cyrillic-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${L}) format('woff2'), url(${O}) format('woff');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* open-sans-greek-ext-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${N}) format('woff2'), url(${O}) format('woff');\n  unicode-range: U+1F00-1FFF;\n}\n/* open-sans-greek-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${D}) format('woff2'), url(${O}) format('woff');\n  unicode-range: U+0370-03FF;\n}\n/* open-sans-vietnamese-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${R}) format('woff2'), url(${O}) format('woff');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* open-sans-latin-ext-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${M}) format('woff2'), url(${O}) format('woff');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* open-sans-latin-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${j}) format('woff2'), url(${O}) format('woff');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n`,"",{version:3,sources:["webpack://./node_modules/fontsource-open-sans/700.css"],names:[],mappings:"AAAA,qCAAqC;AACrC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAwI;EACxI,sFAAsF;AACxF;AACA,iCAAiC;AACjC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAoI;EACpI,4DAA4D;AAC9D;AACA,kCAAkC;AAClC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAqI;EACrI,0BAA0B;AAC5B;AACA,8BAA8B;AAC9B;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAiI;EACjI,0BAA0B;AAC5B;AACA,mCAAmC;AACnC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAsI;EACtI,gHAAgH;AAClH;AACA,kCAAkC;AAClC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAqI;EACrI,mHAAmH;AACrH;AACA,8BAA8B;AAC9B;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAiI;EACjI,yKAAyK;AAC3K;AACA,qCAAqC;AACrC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAwI;EACxI,sFAAsF;AACxF;AACA,iCAAiC;AACjC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAoI;EACpI,4DAA4D;AAC9D;AACA,kCAAkC;AAClC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAqI;EACrI,0BAA0B;AAC5B;AACA,8BAA8B;AAC9B;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAiI;EACjI,0BAA0B;AAC5B;AACA,mCAAmC;AACnC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAsI;EACtI,gHAAgH;AAClH;AACA,kCAAkC;AAClC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAqI;EACrI,mHAAmH;AACrH;AACA,8BAA8B;AAC9B;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAiI;EACjI,yKAAyK;AAC3K",sourcesContent:["/* open-sans-cyrillic-ext-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-cyrillic-ext-700-italic.woff2') format('woff2'), url('./files/open-sans-all-700-italic.woff') format('woff');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* open-sans-cyrillic-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-cyrillic-700-italic.woff2') format('woff2'), url('./files/open-sans-all-700-italic.woff') format('woff');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* open-sans-greek-ext-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-greek-ext-700-italic.woff2') format('woff2'), url('./files/open-sans-all-700-italic.woff') format('woff');\n  unicode-range: U+1F00-1FFF;\n}\n/* open-sans-greek-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-greek-700-italic.woff2') format('woff2'), url('./files/open-sans-all-700-italic.woff') format('woff');\n  unicode-range: U+0370-03FF;\n}\n/* open-sans-vietnamese-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-vietnamese-700-italic.woff2') format('woff2'), url('./files/open-sans-all-700-italic.woff') format('woff');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* open-sans-latin-ext-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-latin-ext-700-italic.woff2') format('woff2'), url('./files/open-sans-all-700-italic.woff') format('woff');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* open-sans-latin-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-latin-700-italic.woff2') format('woff2'), url('./files/open-sans-all-700-italic.woff') format('woff');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n/* open-sans-cyrillic-ext-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-cyrillic-ext-700-normal.woff2') format('woff2'), url('./files/open-sans-all-700-normal.woff') format('woff');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* open-sans-cyrillic-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-cyrillic-700-normal.woff2') format('woff2'), url('./files/open-sans-all-700-normal.woff') format('woff');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* open-sans-greek-ext-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-greek-ext-700-normal.woff2') format('woff2'), url('./files/open-sans-all-700-normal.woff') format('woff');\n  unicode-range: U+1F00-1FFF;\n}\n/* open-sans-greek-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-greek-700-normal.woff2') format('woff2'), url('./files/open-sans-all-700-normal.woff') format('woff');\n  unicode-range: U+0370-03FF;\n}\n/* open-sans-vietnamese-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-vietnamese-700-normal.woff2') format('woff2'), url('./files/open-sans-all-700-normal.woff') format('woff');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* open-sans-latin-ext-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-latin-ext-700-normal.woff2') format('woff2'), url('./files/open-sans-all-700-normal.woff') format('woff');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* open-sans-latin-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-latin-700-normal.woff2') format('woff2'), url('./files/open-sans-all-700-normal.woff') format('woff');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n"],sourceRoot:""}]);const H=C},9698:(e,n)=>{"use strict";var t=Symbol.for("react.transitional.element"),r=Symbol.for("react.fragment");function o(e,n,r){var o=null;if(void 0!==r&&(o=""+r),void 0!==n.key&&(o=""+n.key),"key"in n)for(var l in r={},n)"key"!==l&&(r[l]=n[l]);else r=n;return n=r.ref,{$$typeof:t,type:e,key:o,ref:void 0!==n?n:null,props:r}}n.Fragment=r,n.jsx=o,n.jsxs=o},9788:e=>{var n=/\/\*[^*]*\*+([^/*][^*]*\*+)*\//g,t=/\n/g,r=/^\s*/,o=/^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/,l=/^:\s*/,a=/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/,i=/^[;\s]*/,s=/^\s+|\s+$/g,u="";function c(e){return e?e.replace(s,u):u}e.exports=function(e,s){if("string"!=typeof e)throw new TypeError("First argument must be a string");if(!e)return[];s=s||{};var f=1,d=1;function p(e){var n=e.match(t);n&&(f+=n.length);var r=e.lastIndexOf("\n");d=~r?e.length-r:d+e.length}function h(){var e={line:f,column:d};return function(n){return n.position=new m(e),b(),n}}function m(e){this.start=e,this.end={line:f,column:d},this.source=s.source}m.prototype.content=e;var g=[];function y(n){var t=new Error(s.source+":"+f+":"+d+": "+n);if(t.reason=n,t.filename=s.source,t.line=f,t.column=d,t.source=e,!s.silent)throw t;g.push(t)}function v(n){var t=n.exec(e);if(t){var r=t[0];return p(r),e=e.slice(r.length),t}}function b(){v(r)}function w(e){var n;for(e=e||[];n=k();)!1!==n&&e.push(n);return e}function k(){var n=h();if("/"==e.charAt(0)&&"*"==e.charAt(1)){for(var t=2;u!=e.charAt(t)&&("*"!=e.charAt(t)||"/"!=e.charAt(t+1));)++t;if(t+=2,u===e.charAt(t-1))return y("End of comment missing");var r=e.slice(2,t-2);return d+=2,p(r),e=e.slice(t),d+=2,n({type:"comment",comment:r})}}function A(){var e=h(),t=v(o);if(t){if(k(),!v(l))return y("property missing ':'");var r=v(a),s=e({type:"declaration",property:c(t[0].replace(n,u)),value:r?c(r[0].replace(n,u)):u});return v(i),s}}return b(),function(){var e,n=[];for(w(n);e=A();)!1!==e&&(n.push(e),w(n));return n}()}},9814:(e,n,t)=>{"use strict";e.exports=t.p+"56a3dea428762836a958.woff"},9869:(e,n,t)=>{"use strict";var r=t(5606),o=Symbol.for("react.transitional.element"),l=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),i=Symbol.for("react.strict_mode"),s=Symbol.for("react.profiler"),u=Symbol.for("react.consumer"),c=Symbol.for("react.context"),f=Symbol.for("react.forward_ref"),d=Symbol.for("react.suspense"),p=Symbol.for("react.memo"),h=Symbol.for("react.lazy"),m=Symbol.iterator,g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},y=Object.assign,v={};function b(e,n,t){this.props=e,this.context=n,this.refs=v,this.updater=t||g}function w(){}function k(e,n,t){this.props=e,this.context=n,this.refs=v,this.updater=t||g}b.prototype.isReactComponent={},b.prototype.setState=function(e,n){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,n,"setState")},b.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=b.prototype;var A=k.prototype=new w;A.constructor=k,y(A,b.prototype),A.isPureReactComponent=!0;var S=Array.isArray,x={H:null,A:null,T:null,S:null,V:null},C=Object.prototype.hasOwnProperty;function E(e,n,t,r,l,a){return t=a.ref,{$$typeof:o,type:e,key:n,ref:void 0!==t?t:null,props:a}}function B(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var F=/\/+/g;function P(e,n){return"object"==typeof e&&null!==e&&null!=e.key?(t=""+e.key,r={"=":"=0",":":"=2"},"$"+t.replace(/[=:]/g,(function(e){return r[e]}))):n.toString(36);var t,r}function U(){}function T(e,n,t,r,a){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var s,u,c=!1;if(null===e)c=!0;else switch(i){case"bigint":case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case o:case l:c=!0;break;case h:return T((c=e._init)(e._payload),n,t,r,a)}}if(c)return a=a(e),c=""===r?"."+P(e,0):r,S(a)?(t="",null!=c&&(t=c.replace(F,"$&/")+"/"),T(a,n,t,"",(function(e){return e}))):null!=a&&(B(a)&&(s=a,u=t+(null==a.key||e&&e.key===a.key?"":(""+a.key).replace(F,"$&/")+"/")+c,a=E(s.type,u,void 0,0,0,s.props)),n.push(a)),1;c=0;var f,d=""===r?".":r+":";if(S(e))for(var p=0;p<e.length;p++)c+=T(r=e[p],n,t,i=d+P(r,p),a);else if("function"==typeof(p=null===(f=e)||"object"!=typeof f?null:"function"==typeof(f=m&&f[m]||f["@@iterator"])?f:null))for(e=p.call(e),p=0;!(r=e.next()).done;)c+=T(r=r.value,n,t,i=d+P(r,p++),a);else if("object"===i){if("function"==typeof e.then)return T(function(e){switch(e.status){case"fulfilled":return e.value;case"rejected":throw e.reason;default:switch("string"==typeof e.status?e.then(U,U):(e.status="pending",e.then((function(n){"pending"===e.status&&(e.status="fulfilled",e.value=n)}),(function(n){"pending"===e.status&&(e.status="rejected",e.reason=n)}))),e.status){case"fulfilled":return e.value;case"rejected":throw e.reason}}throw e}(e),n,t,r,a);throw n=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n)+"). If you meant to render a collection of children, use an array instead.")}return c}function _(e,n,t){if(null==e)return e;var r=[],o=0;return T(e,r,"","",(function(e){return n.call(t,e,o++)})),r}function I(e){if(-1===e._status){var n=e._result;(n=n()).then((function(n){0!==e._status&&-1!==e._status||(e._status=1,e._result=n)}),(function(n){0!==e._status&&-1!==e._status||(e._status=2,e._result=n)})),-1===e._status&&(e._status=0,e._result=n)}if(1===e._status)return e._result.default;throw e._result}var z="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var n=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(n))return}else if("object"==typeof r&&"function"==typeof r.emit)return void r.emit("uncaughtException",e);console.error(e)};function O(){}n.Children={map:_,forEach:function(e,n,t){_(e,(function(){n.apply(this,arguments)}),t)},count:function(e){var n=0;return _(e,(function(){n++})),n},toArray:function(e){return _(e,(function(e){return e}))||[]},only:function(e){if(!B(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},n.Component=b,n.Fragment=a,n.Profiler=s,n.PureComponent=k,n.StrictMode=i,n.Suspense=d,n.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=x,n.__COMPILER_RUNTIME={__proto__:null,c:function(e){return x.H.useMemoCache(e)}},n.cache=function(e){return function(){return e.apply(null,arguments)}},n.cloneElement=function(e,n,t){if(null==e)throw Error("The argument must be a React element, but you passed "+e+".");var r=y({},e.props),o=e.key;if(null!=n)for(l in n.ref,void 0!==n.key&&(o=""+n.key),n)!C.call(n,l)||"key"===l||"__self"===l||"__source"===l||"ref"===l&&void 0===n.ref||(r[l]=n[l]);var l=arguments.length-2;if(1===l)r.children=t;else if(1<l){for(var a=Array(l),i=0;i<l;i++)a[i]=arguments[i+2];r.children=a}return E(e.type,o,void 0,0,0,r)},n.createContext=function(e){return(e={$$typeof:c,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider=e,e.Consumer={$$typeof:u,_context:e},e},n.createElement=function(e,n,t){var r,o={},l=null;if(null!=n)for(r in void 0!==n.key&&(l=""+n.key),n)C.call(n,r)&&"key"!==r&&"__self"!==r&&"__source"!==r&&(o[r]=n[r]);var a=arguments.length-2;if(1===a)o.children=t;else if(1<a){for(var i=Array(a),s=0;s<a;s++)i[s]=arguments[s+2];o.children=i}if(e&&e.defaultProps)for(r in a=e.defaultProps)void 0===o[r]&&(o[r]=a[r]);return E(e,l,void 0,0,0,o)},n.createRef=function(){return{current:null}},n.forwardRef=function(e){return{$$typeof:f,render:e}},n.isValidElement=B,n.lazy=function(e){return{$$typeof:h,_payload:{_status:-1,_result:e},_init:I}},n.memo=function(e,n){return{$$typeof:p,type:e,compare:void 0===n?null:n}},n.startTransition=function(e){var n=x.T,t={};x.T=t;try{var r=e(),o=x.S;null!==o&&o(t,r),"object"==typeof r&&null!==r&&"function"==typeof r.then&&r.then(O,z)}catch(e){z(e)}finally{x.T=n}},n.unstable_useCacheRefresh=function(){return x.H.useCacheRefresh()},n.use=function(e){return x.H.use(e)},n.useActionState=function(e,n,t){return x.H.useActionState(e,n,t)},n.useCallback=function(e,n){return x.H.useCallback(e,n)},n.useContext=function(e){return x.H.useContext(e)},n.useDebugValue=function(){},n.useDeferredValue=function(e,n){return x.H.useDeferredValue(e,n)},n.useEffect=function(e,n,t){var r=x.H;if("function"==typeof t)throw Error("useEffect CRUD overload is not enabled in this build of React.");return r.useEffect(e,n)},n.useId=function(){return x.H.useId()},n.useImperativeHandle=function(e,n,t){return x.H.useImperativeHandle(e,n,t)},n.useInsertionEffect=function(e,n){return x.H.useInsertionEffect(e,n)},n.useLayoutEffect=function(e,n){return x.H.useLayoutEffect(e,n)},n.useMemo=function(e,n){return x.H.useMemo(e,n)},n.useOptimistic=function(e,n){return x.H.useOptimistic(e,n)},n.useReducer=function(e,n,t){return x.H.useReducer(e,n,t)},n.useRef=function(e){return x.H.useRef(e)},n.useState=function(e){return x.H.useState(e)},n.useSyncExternalStore=function(e,n,t){return x.H.useSyncExternalStore(e,n,t)},n.useTransition=function(){return x.H.useTransition()},n.version="19.1.0"},9982:(e,n,t)=>{"use strict";e.exports=t(4477)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
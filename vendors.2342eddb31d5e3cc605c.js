/*! For license information please see vendors.2342eddb31d5e3cc605c.js.LICENSE.txt */
(self.webpackChunkpessimistic_it_com=self.webpackChunkpessimistic_it_com||[]).push([[216],{3634:(e,n,t)=>{"use strict";t.d(n,{Z:()=>$});var r=t(7537),o=t.n(r),l=t(3645),a=t.n(l),i=t(1667),u=t.n(i),s=new URL(t(9237),t.b),c=new URL(t(6926),t.b),f=new URL(t(1381),t.b),d=new URL(t(6159),t.b),p=new URL(t(2483),t.b),h=new URL(t(461),t.b),m=new URL(t(8252),t.b),g=new URL(t(1196),t.b),y=new URL(t(3829),t.b),v=new URL(t(5447),t.b),b=new URL(t(841),t.b),w=new URL(t(1453),t.b),k=new URL(t(6463),t.b),A=new URL(t(799),t.b),x=new URL(t(375),t.b),C=new URL(t(45),t.b),S=a()(o()),E=u()(s),F=u()(c),B=u()(f),U=u()(d),P=u()(p),_=u()(h),T=u()(m),I=u()(g),O=u()(y),L=u()(v),D=u()(b),z=u()(w),N=u()(k),R=u()(A),M=u()(x),j=u()(C);S.push([e.id,`/* open-sans-cyrillic-ext-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${E}) format('woff2'), url(${F}) format('woff');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* open-sans-cyrillic-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${B}) format('woff2'), url(${F}) format('woff');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* open-sans-greek-ext-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${U}) format('woff2'), url(${F}) format('woff');\n  unicode-range: U+1F00-1FFF;\n}\n/* open-sans-greek-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${P}) format('woff2'), url(${F}) format('woff');\n  unicode-range: U+0370-03FF;\n}\n/* open-sans-vietnamese-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${_}) format('woff2'), url(${F}) format('woff');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* open-sans-latin-ext-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${T}) format('woff2'), url(${F}) format('woff');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* open-sans-latin-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${I}) format('woff2'), url(${F}) format('woff');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n/* open-sans-cyrillic-ext-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${O}) format('woff2'), url(${L}) format('woff');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* open-sans-cyrillic-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${D}) format('woff2'), url(${L}) format('woff');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* open-sans-greek-ext-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${z}) format('woff2'), url(${L}) format('woff');\n  unicode-range: U+1F00-1FFF;\n}\n/* open-sans-greek-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${N}) format('woff2'), url(${L}) format('woff');\n  unicode-range: U+0370-03FF;\n}\n/* open-sans-vietnamese-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${R}) format('woff2'), url(${L}) format('woff');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* open-sans-latin-ext-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${M}) format('woff2'), url(${L}) format('woff');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* open-sans-latin-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${j}) format('woff2'), url(${L}) format('woff');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n`,"",{version:3,sources:["webpack://./node_modules/fontsource-open-sans/400.css"],names:[],mappings:"AAAA,qCAAqC;AACrC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAwI;EACxI,sFAAsF;AACxF;AACA,iCAAiC;AACjC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAoI;EACpI,4DAA4D;AAC9D;AACA,kCAAkC;AAClC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAqI;EACrI,0BAA0B;AAC5B;AACA,8BAA8B;AAC9B;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAiI;EACjI,0BAA0B;AAC5B;AACA,mCAAmC;AACnC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAsI;EACtI,gHAAgH;AAClH;AACA,kCAAkC;AAClC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAqI;EACrI,mHAAmH;AACrH;AACA,8BAA8B;AAC9B;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAiI;EACjI,yKAAyK;AAC3K;AACA,qCAAqC;AACrC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAwI;EACxI,sFAAsF;AACxF;AACA,iCAAiC;AACjC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAoI;EACpI,4DAA4D;AAC9D;AACA,kCAAkC;AAClC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAqI;EACrI,0BAA0B;AAC5B;AACA,8BAA8B;AAC9B;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAiI;EACjI,0BAA0B;AAC5B;AACA,mCAAmC;AACnC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAsI;EACtI,gHAAgH;AAClH;AACA,kCAAkC;AAClC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAqI;EACrI,mHAAmH;AACrH;AACA,8BAA8B;AAC9B;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAiI;EACjI,yKAAyK;AAC3K",sourcesContent:["/* open-sans-cyrillic-ext-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-cyrillic-ext-400-italic.woff2') format('woff2'), url('./files/open-sans-all-400-italic.woff') format('woff');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* open-sans-cyrillic-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-cyrillic-400-italic.woff2') format('woff2'), url('./files/open-sans-all-400-italic.woff') format('woff');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* open-sans-greek-ext-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-greek-ext-400-italic.woff2') format('woff2'), url('./files/open-sans-all-400-italic.woff') format('woff');\n  unicode-range: U+1F00-1FFF;\n}\n/* open-sans-greek-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-greek-400-italic.woff2') format('woff2'), url('./files/open-sans-all-400-italic.woff') format('woff');\n  unicode-range: U+0370-03FF;\n}\n/* open-sans-vietnamese-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-vietnamese-400-italic.woff2') format('woff2'), url('./files/open-sans-all-400-italic.woff') format('woff');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* open-sans-latin-ext-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-latin-ext-400-italic.woff2') format('woff2'), url('./files/open-sans-all-400-italic.woff') format('woff');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* open-sans-latin-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-latin-400-italic.woff2') format('woff2'), url('./files/open-sans-all-400-italic.woff') format('woff');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n/* open-sans-cyrillic-ext-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-cyrillic-ext-400-normal.woff2') format('woff2'), url('./files/open-sans-all-400-normal.woff') format('woff');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* open-sans-cyrillic-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-cyrillic-400-normal.woff2') format('woff2'), url('./files/open-sans-all-400-normal.woff') format('woff');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* open-sans-greek-ext-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-greek-ext-400-normal.woff2') format('woff2'), url('./files/open-sans-all-400-normal.woff') format('woff');\n  unicode-range: U+1F00-1FFF;\n}\n/* open-sans-greek-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-greek-400-normal.woff2') format('woff2'), url('./files/open-sans-all-400-normal.woff') format('woff');\n  unicode-range: U+0370-03FF;\n}\n/* open-sans-vietnamese-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-vietnamese-400-normal.woff2') format('woff2'), url('./files/open-sans-all-400-normal.woff') format('woff');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* open-sans-latin-ext-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-latin-ext-400-normal.woff2') format('woff2'), url('./files/open-sans-all-400-normal.woff') format('woff');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* open-sans-latin-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-latin-400-normal.woff2') format('woff2'), url('./files/open-sans-all-400-normal.woff') format('woff');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n"],sourceRoot:""}]);const $=S},6811:(e,n,t)=>{"use strict";t.d(n,{Z:()=>$});var r=t(7537),o=t.n(r),l=t(3645),a=t.n(l),i=t(1667),u=t.n(i),s=new URL(t(2830),t.b),c=new URL(t(6778),t.b),f=new URL(t(8637),t.b),d=new URL(t(7631),t.b),p=new URL(t(9578),t.b),h=new URL(t(3801),t.b),m=new URL(t(6313),t.b),g=new URL(t(2542),t.b),y=new URL(t(1991),t.b),v=new URL(t(8709),t.b),b=new URL(t(8593),t.b),w=new URL(t(5460),t.b),k=new URL(t(6416),t.b),A=new URL(t(7817),t.b),x=new URL(t(5138),t.b),C=new URL(t(7539),t.b),S=a()(o()),E=u()(s),F=u()(c),B=u()(f),U=u()(d),P=u()(p),_=u()(h),T=u()(m),I=u()(g),O=u()(y),L=u()(v),D=u()(b),z=u()(w),N=u()(k),R=u()(A),M=u()(x),j=u()(C);S.push([e.id,`/* open-sans-cyrillic-ext-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${E}) format('woff2'), url(${F}) format('woff');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* open-sans-cyrillic-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${B}) format('woff2'), url(${F}) format('woff');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* open-sans-greek-ext-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${U}) format('woff2'), url(${F}) format('woff');\n  unicode-range: U+1F00-1FFF;\n}\n/* open-sans-greek-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${P}) format('woff2'), url(${F}) format('woff');\n  unicode-range: U+0370-03FF;\n}\n/* open-sans-vietnamese-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${_}) format('woff2'), url(${F}) format('woff');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* open-sans-latin-ext-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${T}) format('woff2'), url(${F}) format('woff');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* open-sans-latin-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${I}) format('woff2'), url(${F}) format('woff');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n/* open-sans-cyrillic-ext-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${O}) format('woff2'), url(${L}) format('woff');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* open-sans-cyrillic-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${D}) format('woff2'), url(${L}) format('woff');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* open-sans-greek-ext-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${z}) format('woff2'), url(${L}) format('woff');\n  unicode-range: U+1F00-1FFF;\n}\n/* open-sans-greek-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${N}) format('woff2'), url(${L}) format('woff');\n  unicode-range: U+0370-03FF;\n}\n/* open-sans-vietnamese-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${R}) format('woff2'), url(${L}) format('woff');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* open-sans-latin-ext-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${M}) format('woff2'), url(${L}) format('woff');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* open-sans-latin-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${j}) format('woff2'), url(${L}) format('woff');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n`,"",{version:3,sources:["webpack://./node_modules/fontsource-open-sans/700.css"],names:[],mappings:"AAAA,qCAAqC;AACrC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAwI;EACxI,sFAAsF;AACxF;AACA,iCAAiC;AACjC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAoI;EACpI,4DAA4D;AAC9D;AACA,kCAAkC;AAClC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAqI;EACrI,0BAA0B;AAC5B;AACA,8BAA8B;AAC9B;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAiI;EACjI,0BAA0B;AAC5B;AACA,mCAAmC;AACnC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAsI;EACtI,gHAAgH;AAClH;AACA,kCAAkC;AAClC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAqI;EACrI,mHAAmH;AACrH;AACA,8BAA8B;AAC9B;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAiI;EACjI,yKAAyK;AAC3K;AACA,qCAAqC;AACrC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAwI;EACxI,sFAAsF;AACxF;AACA,iCAAiC;AACjC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAoI;EACpI,4DAA4D;AAC9D;AACA,kCAAkC;AAClC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAqI;EACrI,0BAA0B;AAC5B;AACA,8BAA8B;AAC9B;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAiI;EACjI,0BAA0B;AAC5B;AACA,mCAAmC;AACnC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAsI;EACtI,gHAAgH;AAClH;AACA,kCAAkC;AAClC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAqI;EACrI,mHAAmH;AACrH;AACA,8BAA8B;AAC9B;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAiI;EACjI,yKAAyK;AAC3K",sourcesContent:["/* open-sans-cyrillic-ext-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-cyrillic-ext-700-italic.woff2') format('woff2'), url('./files/open-sans-all-700-italic.woff') format('woff');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* open-sans-cyrillic-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-cyrillic-700-italic.woff2') format('woff2'), url('./files/open-sans-all-700-italic.woff') format('woff');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* open-sans-greek-ext-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-greek-ext-700-italic.woff2') format('woff2'), url('./files/open-sans-all-700-italic.woff') format('woff');\n  unicode-range: U+1F00-1FFF;\n}\n/* open-sans-greek-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-greek-700-italic.woff2') format('woff2'), url('./files/open-sans-all-700-italic.woff') format('woff');\n  unicode-range: U+0370-03FF;\n}\n/* open-sans-vietnamese-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-vietnamese-700-italic.woff2') format('woff2'), url('./files/open-sans-all-700-italic.woff') format('woff');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* open-sans-latin-ext-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-latin-ext-700-italic.woff2') format('woff2'), url('./files/open-sans-all-700-italic.woff') format('woff');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* open-sans-latin-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-latin-700-italic.woff2') format('woff2'), url('./files/open-sans-all-700-italic.woff') format('woff');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n/* open-sans-cyrillic-ext-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-cyrillic-ext-700-normal.woff2') format('woff2'), url('./files/open-sans-all-700-normal.woff') format('woff');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* open-sans-cyrillic-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-cyrillic-700-normal.woff2') format('woff2'), url('./files/open-sans-all-700-normal.woff') format('woff');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* open-sans-greek-ext-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-greek-ext-700-normal.woff2') format('woff2'), url('./files/open-sans-all-700-normal.woff') format('woff');\n  unicode-range: U+1F00-1FFF;\n}\n/* open-sans-greek-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-greek-700-normal.woff2') format('woff2'), url('./files/open-sans-all-700-normal.woff') format('woff');\n  unicode-range: U+0370-03FF;\n}\n/* open-sans-vietnamese-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-vietnamese-700-normal.woff2') format('woff2'), url('./files/open-sans-all-700-normal.woff') format('woff');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* open-sans-latin-ext-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-latin-ext-700-normal.woff2') format('woff2'), url('./files/open-sans-all-700-normal.woff') format('woff');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* open-sans-latin-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-latin-700-normal.woff2') format('woff2'), url('./files/open-sans-all-700-normal.woff') format('woff');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n"],sourceRoot:""}]);const $=S},3645:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,l){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var i=0;i<this.length;i++){var u=this[i][0];null!=u&&(a[u]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&a[c[0]]||(void 0!==l&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=l),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),n.push(c))}},n}},1667:e=>{"use strict";e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},7537:e=>{"use strict";e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),l="/*# ".concat(o," */");return[n].concat([l]).join("\n")}return[n].join("\n")}},4470:e=>{"use strict";var n=Object.prototype.hasOwnProperty,t=Object.prototype.toString,r=Object.defineProperty,o=Object.getOwnPropertyDescriptor,l=function(e){return"function"==typeof Array.isArray?Array.isArray(e):"[object Array]"===t.call(e)},a=function(e){if(!e||"[object Object]"!==t.call(e))return!1;var r,o=n.call(e,"constructor"),l=e.constructor&&e.constructor.prototype&&n.call(e.constructor.prototype,"isPrototypeOf");if(e.constructor&&!o&&!l)return!1;for(r in e);return void 0===r||n.call(e,r)},i=function(e,n){r&&"__proto__"===n.name?r(e,n.name,{enumerable:!0,configurable:!0,value:n.newValue,writable:!0}):e[n.name]=n.newValue},u=function(e,t){if("__proto__"===t){if(!n.call(e,t))return;if(o)return o(e,t).value}return e[t]};e.exports=function e(){var n,t,r,o,s,c,f=arguments[0],d=1,p=arguments.length,h=!1;for("boolean"==typeof f&&(h=f,f=arguments[1]||{},d=2),(null==f||"object"!=typeof f&&"function"!=typeof f)&&(f={});d<p;++d)if(null!=(n=arguments[d]))for(t in n)r=u(f,t),f!==(o=u(n,t))&&(h&&o&&(a(o)||(s=l(o)))?(s?(s=!1,c=r&&l(r)?r:[]):c=r&&a(r)?r:{},i(f,{name:t,newValue:e(h,c,o)})):void 0!==o&&i(f,{name:t,newValue:o}));return f}},8139:e=>{var n=/\/\*[^*]*\*+([^/*][^*]*\*+)*\//g,t=/\n/g,r=/^\s*/,o=/^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/,l=/^:\s*/,a=/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/,i=/^[;\s]*/,u=/^\s+|\s+$/g,s="";function c(e){return e?e.replace(u,s):s}e.exports=function(e,u){if("string"!=typeof e)throw new TypeError("First argument must be a string");if(!e)return[];u=u||{};var f=1,d=1;function p(e){var n=e.match(t);n&&(f+=n.length);var r=e.lastIndexOf("\n");d=~r?e.length-r:d+e.length}function h(){var e={line:f,column:d};return function(n){return n.position=new m(e),b(),n}}function m(e){this.start=e,this.end={line:f,column:d},this.source=u.source}m.prototype.content=e;var g=[];function y(n){var t=new Error(u.source+":"+f+":"+d+": "+n);if(t.reason=n,t.filename=u.source,t.line=f,t.column=d,t.source=e,!u.silent)throw t;g.push(t)}function v(n){var t=n.exec(e);if(t){var r=t[0];return p(r),e=e.slice(r.length),t}}function b(){v(r)}function w(e){var n;for(e=e||[];n=k();)!1!==n&&e.push(n);return e}function k(){var n=h();if("/"==e.charAt(0)&&"*"==e.charAt(1)){for(var t=2;s!=e.charAt(t)&&("*"!=e.charAt(t)||"/"!=e.charAt(t+1));)++t;if(t+=2,s===e.charAt(t-1))return y("End of comment missing");var r=e.slice(2,t-2);return d+=2,p(r),e=e.slice(t),d+=2,n({type:"comment",comment:r})}}function A(){var e=h(),t=v(o);if(t){if(k(),!v(l))return y("property missing ':'");var r=v(a),u=e({type:"declaration",property:c(t[0].replace(n,s)),value:r?c(r[0].replace(n,s)):s});return v(i),u}}return b(),function(){var e,n=[];for(w(n);e=A();)!1!==e&&(n.push(e),w(n));return n}()}},8738:e=>{e.exports=function(e){return null!=e&&null!=e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}},4155:e=>{var n,t,r=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function l(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{t="function"==typeof clearTimeout?clearTimeout:l}catch(e){t=l}}();var i,u=[],s=!1,c=-1;function f(){s&&i&&(s=!1,i.length?u=i.concat(u):c=-1,u.length&&d())}function d(){if(!s){var e=a(f);s=!0;for(var n=u.length;n;){for(i=u,u=[];++c<n;)i&&i[c].run();c=-1,n=u.length}i=null,s=!1,function(e){if(t===clearTimeout)return clearTimeout(e);if((t===l||!t)&&clearTimeout)return t=clearTimeout,clearTimeout(e);try{return t(e)}catch(n){try{return t.call(null,e)}catch(n){return t.call(this,e)}}}(e)}}function p(e,n){this.fun=e,this.array=n}function h(){}r.nextTick=function(e){var n=new Array(arguments.length-1);if(arguments.length>1)for(var t=1;t<arguments.length;t++)n[t-1]=arguments[t];u.push(new p(e,n)),1!==u.length||s||a(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=h,r.addListener=h,r.once=h,r.off=h,r.removeListener=h,r.removeAllListeners=h,r.emit=h,r.prependListener=h,r.prependOnceListener=h,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},2703:(e,n,t)=>{"use strict";var r=t(414);function o(){}function l(){}l.resetWarningCache=o,e.exports=function(){function e(e,n,t,o,l,a){if(a!==r){var i=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw i.name="Invariant Violation",i}}function n(){return e}e.isRequired=e;var t={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:n,element:e,elementType:e,instanceOf:n,node:e,objectOf:n,oneOf:n,oneOfType:n,shape:n,exact:n,checkPropTypes:l,resetWarningCache:o};return t.PropTypes=t,t}},5697:(e,n,t)=>{e.exports=t(2703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},4448:(e,n,t)=>{"use strict";var r=t(7294),o=t(3840);function l(e){for(var n="https://reactjs.org/docs/error-decoder.html?invariant="+e,t=1;t<arguments.length;t++)n+="&args[]="+encodeURIComponent(arguments[t]);return"Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var a=new Set,i={};function u(e,n){s(e,n),s(e+"Capture",n)}function s(e,n){for(i[e]=n,e=0;e<n.length;e++)a.add(n[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,n,t,r,o,l,a){this.acceptsBooleans=2===n||3===n||4===n,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=t,this.propertyName=e,this.type=n,this.sanitizeURL=l,this.removeEmptyString=a}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var n=e[0];g[n]=new m(n,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function v(e){return e[1].toUpperCase()}function b(e,n,t,r){var o=g.hasOwnProperty(n)?g[n]:null;(null!==o?0!==o.type:r||!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&(function(e,n,t,r){if(null==n||function(e,n,t,r){if(null!==t&&0===t.type)return!1;switch(typeof n){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==t?!t.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,n,t,r))return!0;if(r)return!1;if(null!==t)switch(t.type){case 3:return!n;case 4:return!1===n;case 5:return isNaN(n);case 6:return isNaN(n)||1>n}return!1}(n,t,o,r)&&(t=null),r||null===o?function(e){return!!f.call(h,e)||!f.call(p,e)&&(d.test(e)?h[e]=!0:(p[e]=!0,!1))}(n)&&(null===t?e.removeAttribute(n):e.setAttribute(n,""+t)):o.mustUseProperty?e[o.propertyName]=null===t?3!==o.type&&"":t:(n=o.attributeName,r=o.attributeNamespace,null===t?e.removeAttribute(n):(t=3===(o=o.type)||4===o&&!0===t?"":""+t,r?e.setAttributeNS(r,n,t):e.setAttribute(n,t))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var n=e.replace(y,v);g[n]=new m(n,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var n=e.replace(y,v);g[n]=new m(n,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var n=e.replace(y,v);g[n]=new m(n,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,k=Symbol.for("react.element"),A=Symbol.for("react.portal"),x=Symbol.for("react.fragment"),C=Symbol.for("react.strict_mode"),S=Symbol.for("react.profiler"),E=Symbol.for("react.provider"),F=Symbol.for("react.context"),B=Symbol.for("react.forward_ref"),U=Symbol.for("react.suspense"),P=Symbol.for("react.suspense_list"),_=Symbol.for("react.memo"),T=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var I=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var O=Symbol.iterator;function L(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=O&&e[O]||e["@@iterator"])?e:null}var D,z=Object.assign;function N(e){if(void 0===D)try{throw Error()}catch(e){var n=e.stack.trim().match(/\n( *(at )?)/);D=n&&n[1]||""}return"\n"+D+e}var R=!1;function M(e,n){if(!e||R)return"";R=!0;var t=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(n)if(n=function(){throw Error()},Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(n){if(n&&r&&"string"==typeof n.stack){for(var o=n.stack.split("\n"),l=r.stack.split("\n"),a=o.length-1,i=l.length-1;1<=a&&0<=i&&o[a]!==l[i];)i--;for(;1<=a&&0<=i;a--,i--)if(o[a]!==l[i]){if(1!==a||1!==i)do{if(a--,0>--i||o[a]!==l[i]){var u="\n"+o[a].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=a&&0<=i);break}}}finally{R=!1,Error.prepareStackTrace=t}return(e=e?e.displayName||e.name:"")?N(e):""}function j(e){switch(e.tag){case 5:return N(e.type);case 16:return N("Lazy");case 13:return N("Suspense");case 19:return N("SuspenseList");case 0:case 2:case 15:return M(e.type,!1);case 11:return M(e.type.render,!1);case 1:return M(e.type,!0);default:return""}}function $(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case x:return"Fragment";case A:return"Portal";case S:return"Profiler";case C:return"StrictMode";case U:return"Suspense";case P:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case F:return(e.displayName||"Context")+".Consumer";case E:return(e._context.displayName||"Context")+".Provider";case B:var n=e.render;return(e=e.displayName)||(e=""!==(e=n.displayName||n.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case _:return null!==(n=e.displayName||null)?n:$(e.type)||"Memo";case T:n=e._payload,e=e._init;try{return $(e(n))}catch(e){}}return null}function H(e){var n=e.type;switch(e.tag){case 24:return"Cache";case 9:return(n.displayName||"Context")+".Consumer";case 10:return(n._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=n.render).displayName||e.name||"",n.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return n;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return $(n);case 8:return n===C?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof n)return n.displayName||n.name||null;if("string"==typeof n)return n}return null}function V(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function q(e){var n=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===n||"radio"===n)}function W(e){e._valueTracker||(e._valueTracker=function(e){var n=q(e)?"checked":"value",t=Object.getOwnPropertyDescriptor(e.constructor.prototype,n),r=""+e[n];if(!e.hasOwnProperty(n)&&void 0!==t&&"function"==typeof t.get&&"function"==typeof t.set){var o=t.get,l=t.set;return Object.defineProperty(e,n,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,l.call(this,e)}}),Object.defineProperty(e,n,{enumerable:t.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[n]}}}}(e))}function Q(e){if(!e)return!1;var n=e._valueTracker;if(!n)return!0;var t=n.getValue(),r="";return e&&(r=q(e)?e.checked?"true":"false":e.value),(e=r)!==t&&(n.setValue(e),!0)}function K(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(n){return e.body}}function Y(e,n){var t=n.checked;return z({},n,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=t?t:e._wrapperState.initialChecked})}function G(e,n){var t=null==n.defaultValue?"":n.defaultValue,r=null!=n.checked?n.checked:n.defaultChecked;t=V(null!=n.value?n.value:t),e._wrapperState={initialChecked:r,initialValue:t,controlled:"checkbox"===n.type||"radio"===n.type?null!=n.checked:null!=n.value}}function X(e,n){null!=(n=n.checked)&&b(e,"checked",n,!1)}function Z(e,n){X(e,n);var t=V(n.value),r=n.type;if(null!=t)"number"===r?(0===t&&""===e.value||e.value!=t)&&(e.value=""+t):e.value!==""+t&&(e.value=""+t);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");n.hasOwnProperty("value")?ee(e,n.type,t):n.hasOwnProperty("defaultValue")&&ee(e,n.type,V(n.defaultValue)),null==n.checked&&null!=n.defaultChecked&&(e.defaultChecked=!!n.defaultChecked)}function J(e,n,t){if(n.hasOwnProperty("value")||n.hasOwnProperty("defaultValue")){var r=n.type;if(!("submit"!==r&&"reset"!==r||void 0!==n.value&&null!==n.value))return;n=""+e._wrapperState.initialValue,t||n===e.value||(e.value=n),e.defaultValue=n}""!==(t=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==t&&(e.name=t)}function ee(e,n,t){"number"===n&&K(e.ownerDocument)===e||(null==t?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+t&&(e.defaultValue=""+t))}var ne=Array.isArray;function te(e,n,t,r){if(e=e.options,n){n={};for(var o=0;o<t.length;o++)n["$"+t[o]]=!0;for(t=0;t<e.length;t++)o=n.hasOwnProperty("$"+e[t].value),e[t].selected!==o&&(e[t].selected=o),o&&r&&(e[t].defaultSelected=!0)}else{for(t=""+V(t),n=null,o=0;o<e.length;o++){if(e[o].value===t)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==n||e[o].disabled||(n=e[o])}null!==n&&(n.selected=!0)}}function re(e,n){if(null!=n.dangerouslySetInnerHTML)throw Error(l(91));return z({},n,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,n){var t=n.value;if(null==t){if(t=n.children,n=n.defaultValue,null!=t){if(null!=n)throw Error(l(92));if(ne(t)){if(1<t.length)throw Error(l(93));t=t[0]}n=t}null==n&&(n=""),t=n}e._wrapperState={initialValue:V(t)}}function le(e,n){var t=V(n.value),r=V(n.defaultValue);null!=t&&((t=""+t)!==e.value&&(e.value=t),null==n.defaultValue&&e.defaultValue!==t&&(e.defaultValue=t)),null!=r&&(e.defaultValue=""+r)}function ae(e){var n=e.textContent;n===e._wrapperState.initialValue&&""!==n&&null!==n&&(e.value=n)}function ie(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,n){return null==e||"http://www.w3.org/1999/xhtml"===e?ie(n):"http://www.w3.org/2000/svg"===e&&"foreignObject"===n?"http://www.w3.org/1999/xhtml":e}var se,ce,fe=(ce=function(e,n){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=n;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+n.valueOf().toString()+"</svg>",n=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;n.firstChild;)e.appendChild(n.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,n,t,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,n)}))}:ce);function de(e,n){if(n){var t=e.firstChild;if(t&&t===e.lastChild&&3===t.nodeType)return void(t.nodeValue=n)}e.textContent=n}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,n,t){return null==n||"boolean"==typeof n||""===n?"":t||"number"!=typeof n||0===n||pe.hasOwnProperty(e)&&pe[e]?(""+n).trim():n+"px"}function ge(e,n){for(var t in e=e.style,n)if(n.hasOwnProperty(t)){var r=0===t.indexOf("--"),o=me(t,n[t],r);"float"===t&&(t="cssFloat"),r?e.setProperty(t,o):e[t]=o}}Object.keys(pe).forEach((function(e){he.forEach((function(n){n=n+e.charAt(0).toUpperCase()+e.substring(1),pe[n]=pe[e]}))}));var ye=z({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ve(e,n){if(n){if(ye[e]&&(null!=n.children||null!=n.dangerouslySetInnerHTML))throw Error(l(137,e));if(null!=n.dangerouslySetInnerHTML){if(null!=n.children)throw Error(l(60));if("object"!=typeof n.dangerouslySetInnerHTML||!("__html"in n.dangerouslySetInnerHTML))throw Error(l(61))}if(null!=n.style&&"object"!=typeof n.style)throw Error(l(62))}}function be(e,n){if(-1===e.indexOf("-"))return"string"==typeof n.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function ke(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ae=null,xe=null,Ce=null;function Se(e){if(e=wo(e)){if("function"!=typeof Ae)throw Error(l(280));var n=e.stateNode;n&&(n=Ao(n),Ae(e.stateNode,e.type,n))}}function Ee(e){xe?Ce?Ce.push(e):Ce=[e]:xe=e}function Fe(){if(xe){var e=xe,n=Ce;if(Ce=xe=null,Se(e),n)for(e=0;e<n.length;e++)Se(n[e])}}function Be(e,n){return e(n)}function Ue(){}var Pe=!1;function _e(e,n,t){if(Pe)return e(n,t);Pe=!0;try{return Be(e,n,t)}finally{Pe=!1,(null!==xe||null!==Ce)&&(Ue(),Fe())}}function Te(e,n){var t=e.stateNode;if(null===t)return null;var r=Ao(t);if(null===r)return null;t=r[n];e:switch(n){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(t&&"function"!=typeof t)throw Error(l(231,n,typeof t));return t}var Ie=!1;if(c)try{var Oe={};Object.defineProperty(Oe,"passive",{get:function(){Ie=!0}}),window.addEventListener("test",Oe,Oe),window.removeEventListener("test",Oe,Oe)}catch(ce){Ie=!1}function Le(e,n,t,r,o,l,a,i,u){var s=Array.prototype.slice.call(arguments,3);try{n.apply(t,s)}catch(e){this.onError(e)}}var De=!1,ze=null,Ne=!1,Re=null,Me={onError:function(e){De=!0,ze=e}};function je(e,n,t,r,o,l,a,i,u){De=!1,ze=null,Le.apply(Me,arguments)}function $e(e){var n=e,t=e;if(e.alternate)for(;n.return;)n=n.return;else{e=n;do{0!=(4098&(n=e).flags)&&(t=n.return),e=n.return}while(e)}return 3===n.tag?t:null}function He(e){if(13===e.tag){var n=e.memoizedState;if(null===n&&null!==(e=e.alternate)&&(n=e.memoizedState),null!==n)return n.dehydrated}return null}function Ve(e){if($e(e)!==e)throw Error(l(188))}function qe(e){return null!==(e=function(e){var n=e.alternate;if(!n){if(null===(n=$e(e)))throw Error(l(188));return n!==e?null:e}for(var t=e,r=n;;){var o=t.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){t=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===t)return Ve(o),e;if(a===r)return Ve(o),n;a=a.sibling}throw Error(l(188))}if(t.return!==r.return)t=o,r=a;else{for(var i=!1,u=o.child;u;){if(u===t){i=!0,t=o,r=a;break}if(u===r){i=!0,r=o,t=a;break}u=u.sibling}if(!i){for(u=a.child;u;){if(u===t){i=!0,t=a,r=o;break}if(u===r){i=!0,r=a,t=o;break}u=u.sibling}if(!i)throw Error(l(189))}}if(t.alternate!==r)throw Error(l(190))}if(3!==t.tag)throw Error(l(188));return t.stateNode.current===t?e:n}(e))?We(e):null}function We(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var n=We(e);if(null!==n)return n;e=e.sibling}return null}var Qe=o.unstable_scheduleCallback,Ke=o.unstable_cancelCallback,Ye=o.unstable_shouldYield,Ge=o.unstable_requestPaint,Xe=o.unstable_now,Ze=o.unstable_getCurrentPriorityLevel,Je=o.unstable_ImmediatePriority,en=o.unstable_UserBlockingPriority,nn=o.unstable_NormalPriority,tn=o.unstable_LowPriority,rn=o.unstable_IdlePriority,on=null,ln=null,an=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(un(e)/sn|0)|0},un=Math.log,sn=Math.LN2,cn=64,fn=4194304;function dn(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function pn(e,n){var t=e.pendingLanes;if(0===t)return 0;var r=0,o=e.suspendedLanes,l=e.pingedLanes,a=268435455&t;if(0!==a){var i=a&~o;0!==i?r=dn(i):0!=(l&=a)&&(r=dn(l))}else 0!=(a=t&~o)?r=dn(a):0!==l&&(r=dn(l));if(0===r)return 0;if(0!==n&&n!==r&&0==(n&o)&&((o=r&-r)>=(l=n&-n)||16===o&&0!=(4194240&l)))return n;if(0!=(4&r)&&(r|=16&t),0!==(n=e.entangledLanes))for(e=e.entanglements,n&=r;0<n;)o=1<<(t=31-an(n)),r|=e[t],n&=~o;return r}function hn(e,n){switch(e){case 1:case 2:case 4:return n+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return n+5e3;default:return-1}}function mn(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function gn(){var e=cn;return 0==(4194240&(cn<<=1))&&(cn=64),e}function yn(e){for(var n=[],t=0;31>t;t++)n.push(e);return n}function vn(e,n,t){e.pendingLanes|=n,536870912!==n&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[n=31-an(n)]=t}function bn(e,n){var t=e.entangledLanes|=n;for(e=e.entanglements;t;){var r=31-an(t),o=1<<r;o&n|e[r]&n&&(e[r]|=n),t&=~o}}var wn=0;function kn(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var An,xn,Cn,Sn,En,Fn=!1,Bn=[],Un=null,Pn=null,_n=null,Tn=new Map,In=new Map,On=[],Ln="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Dn(e,n){switch(e){case"focusin":case"focusout":Un=null;break;case"dragenter":case"dragleave":Pn=null;break;case"mouseover":case"mouseout":_n=null;break;case"pointerover":case"pointerout":Tn.delete(n.pointerId);break;case"gotpointercapture":case"lostpointercapture":In.delete(n.pointerId)}}function zn(e,n,t,r,o,l){return null===e||e.nativeEvent!==l?(e={blockedOn:n,domEventName:t,eventSystemFlags:r,nativeEvent:l,targetContainers:[o]},null!==n&&null!==(n=wo(n))&&xn(n),e):(e.eventSystemFlags|=r,n=e.targetContainers,null!==o&&-1===n.indexOf(o)&&n.push(o),e)}function Nn(e){var n=bo(e.target);if(null!==n){var t=$e(n);if(null!==t)if(13===(n=t.tag)){if(null!==(n=He(t)))return e.blockedOn=n,void En(e.priority,(function(){Cn(t)}))}else if(3===n&&t.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===t.tag?t.stateNode.containerInfo:null)}e.blockedOn=null}function Rn(e){if(null!==e.blockedOn)return!1;for(var n=e.targetContainers;0<n.length;){var t=Gn(e.domEventName,e.eventSystemFlags,n[0],e.nativeEvent);if(null!==t)return null!==(n=wo(t))&&xn(n),e.blockedOn=t,!1;var r=new(t=e.nativeEvent).constructor(t.type,t);we=r,t.target.dispatchEvent(r),we=null,n.shift()}return!0}function Mn(e,n,t){Rn(e)&&t.delete(n)}function jn(){Fn=!1,null!==Un&&Rn(Un)&&(Un=null),null!==Pn&&Rn(Pn)&&(Pn=null),null!==_n&&Rn(_n)&&(_n=null),Tn.forEach(Mn),In.forEach(Mn)}function $n(e,n){e.blockedOn===n&&(e.blockedOn=null,Fn||(Fn=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,jn)))}function Hn(e){function n(n){return $n(n,e)}if(0<Bn.length){$n(Bn[0],e);for(var t=1;t<Bn.length;t++){var r=Bn[t];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Un&&$n(Un,e),null!==Pn&&$n(Pn,e),null!==_n&&$n(_n,e),Tn.forEach(n),In.forEach(n),t=0;t<On.length;t++)(r=On[t]).blockedOn===e&&(r.blockedOn=null);for(;0<On.length&&null===(t=On[0]).blockedOn;)Nn(t),null===t.blockedOn&&On.shift()}var Vn=w.ReactCurrentBatchConfig,qn=!0;function Wn(e,n,t,r){var o=wn,l=Vn.transition;Vn.transition=null;try{wn=1,Kn(e,n,t,r)}finally{wn=o,Vn.transition=l}}function Qn(e,n,t,r){var o=wn,l=Vn.transition;Vn.transition=null;try{wn=4,Kn(e,n,t,r)}finally{wn=o,Vn.transition=l}}function Kn(e,n,t,r){if(qn){var o=Gn(e,n,t,r);if(null===o)Vr(e,n,r,Yn,t),Dn(e,r);else if(function(e,n,t,r,o){switch(n){case"focusin":return Un=zn(Un,e,n,t,r,o),!0;case"dragenter":return Pn=zn(Pn,e,n,t,r,o),!0;case"mouseover":return _n=zn(_n,e,n,t,r,o),!0;case"pointerover":var l=o.pointerId;return Tn.set(l,zn(Tn.get(l)||null,e,n,t,r,o)),!0;case"gotpointercapture":return l=o.pointerId,In.set(l,zn(In.get(l)||null,e,n,t,r,o)),!0}return!1}(o,e,n,t,r))r.stopPropagation();else if(Dn(e,r),4&n&&-1<Ln.indexOf(e)){for(;null!==o;){var l=wo(o);if(null!==l&&An(l),null===(l=Gn(e,n,t,r))&&Vr(e,n,r,Yn,t),l===o)break;o=l}null!==o&&r.stopPropagation()}else Vr(e,n,r,null,t)}}var Yn=null;function Gn(e,n,t,r){if(Yn=null,null!==(e=bo(e=ke(r))))if(null===(n=$e(e)))e=null;else if(13===(t=n.tag)){if(null!==(e=He(n)))return e;e=null}else if(3===t){if(n.stateNode.current.memoizedState.isDehydrated)return 3===n.tag?n.stateNode.containerInfo:null;e=null}else n!==e&&(e=null);return Yn=e,null}function Xn(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ze()){case Je:return 1;case en:return 4;case nn:case tn:return 16;case rn:return 536870912;default:return 16}default:return 16}}var Zn=null,Jn=null,et=null;function nt(){if(et)return et;var e,n,t=Jn,r=t.length,o="value"in Zn?Zn.value:Zn.textContent,l=o.length;for(e=0;e<r&&t[e]===o[e];e++);var a=r-e;for(n=1;n<=a&&t[r-n]===o[l-n];n++);return et=o.slice(e,1<n?1-n:void 0)}function tt(e){var n=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===n&&(e=13):e=n,10===e&&(e=13),32<=e||13===e?e:0}function rt(){return!0}function ot(){return!1}function lt(e){function n(n,t,r,o,l){for(var a in this._reactName=n,this._targetInst=r,this.type=t,this.nativeEvent=o,this.target=l,this.currentTarget=null,e)e.hasOwnProperty(a)&&(n=e[a],this[a]=n?n(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?rt:ot,this.isPropagationStopped=ot,this}return z(n.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=rt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=rt)},persist:function(){},isPersistent:rt}),n}var at,it,ut,st={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},ct=lt(st),ft=z({},st,{view:0,detail:0}),dt=lt(ft),pt=z({},ft,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:St,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ut&&(ut&&"mousemove"===e.type?(at=e.screenX-ut.screenX,it=e.screenY-ut.screenY):it=at=0,ut=e),at)},movementY:function(e){return"movementY"in e?e.movementY:it}}),ht=lt(pt),mt=lt(z({},pt,{dataTransfer:0})),gt=lt(z({},ft,{relatedTarget:0})),yt=lt(z({},st,{animationName:0,elapsedTime:0,pseudoElement:0})),vt=z({},st,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bt=lt(vt),wt=lt(z({},st,{data:0})),kt={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},At={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},xt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Ct(e){var n=this.nativeEvent;return n.getModifierState?n.getModifierState(e):!!(e=xt[e])&&!!n[e]}function St(){return Ct}var Et=z({},ft,{key:function(e){if(e.key){var n=kt[e.key]||e.key;if("Unidentified"!==n)return n}return"keypress"===e.type?13===(e=tt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?At[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:St,charCode:function(e){return"keypress"===e.type?tt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Ft=lt(Et),Bt=lt(z({},pt,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Ut=lt(z({},ft,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:St})),Pt=lt(z({},st,{propertyName:0,elapsedTime:0,pseudoElement:0})),_t=z({},pt,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Tt=lt(_t),It=[9,13,27,32],Ot=c&&"CompositionEvent"in window,Lt=null;c&&"documentMode"in document&&(Lt=document.documentMode);var Dt=c&&"TextEvent"in window&&!Lt,zt=c&&(!Ot||Lt&&8<Lt&&11>=Lt),Nt=String.fromCharCode(32),Rt=!1;function Mt(e,n){switch(e){case"keyup":return-1!==It.indexOf(n.keyCode);case"keydown":return 229!==n.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function jt(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var $t=!1,Ht={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vt(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===n?!!Ht[e.type]:"textarea"===n}function qt(e,n,t,r){Ee(r),0<(n=Wr(n,"onChange")).length&&(t=new ct("onChange","change",null,t,r),e.push({event:t,listeners:n}))}var Wt=null,Qt=null;function Kt(e){Nr(e,0)}function Yt(e){if(Q(ko(e)))return e}function Gt(e,n){if("change"===e)return n}var Xt=!1;if(c){var Zt;if(c){var Jt="oninput"in document;if(!Jt){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jt="function"==typeof er.oninput}Zt=Jt}else Zt=!1;Xt=Zt&&(!document.documentMode||9<document.documentMode)}function nr(){Wt&&(Wt.detachEvent("onpropertychange",tr),Qt=Wt=null)}function tr(e){if("value"===e.propertyName&&Yt(Qt)){var n=[];qt(n,Qt,e,ke(e)),_e(Kt,n)}}function rr(e,n,t){"focusin"===e?(nr(),Qt=t,(Wt=n).attachEvent("onpropertychange",tr)):"focusout"===e&&nr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Yt(Qt)}function lr(e,n){if("click"===e)return Yt(n)}function ar(e,n){if("input"===e||"change"===e)return Yt(n)}var ir="function"==typeof Object.is?Object.is:function(e,n){return e===n&&(0!==e||1/e==1/n)||e!=e&&n!=n};function ur(e,n){if(ir(e,n))return!0;if("object"!=typeof e||null===e||"object"!=typeof n||null===n)return!1;var t=Object.keys(e),r=Object.keys(n);if(t.length!==r.length)return!1;for(r=0;r<t.length;r++){var o=t[r];if(!f.call(n,o)||!ir(e[o],n[o]))return!1}return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,n){var t,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(t=e+r.textContent.length,e<=n&&t>=n)return{node:r,offset:n-e};e=t}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function fr(e,n){return!(!e||!n)&&(e===n||(!e||3!==e.nodeType)&&(n&&3===n.nodeType?fr(e,n.parentNode):"contains"in e?e.contains(n):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(n))))}function dr(){for(var e=window,n=K();n instanceof e.HTMLIFrameElement;){try{var t="string"==typeof n.contentWindow.location.href}catch(e){t=!1}if(!t)break;n=K((e=n.contentWindow).document)}return n}function pr(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return n&&("input"===n&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===n||"true"===e.contentEditable)}function hr(e){var n=dr(),t=e.focusedElem,r=e.selectionRange;if(n!==t&&t&&t.ownerDocument&&fr(t.ownerDocument.documentElement,t)){if(null!==r&&pr(t))if(n=r.start,void 0===(e=r.end)&&(e=n),"selectionStart"in t)t.selectionStart=n,t.selectionEnd=Math.min(e,t.value.length);else if((e=(n=t.ownerDocument||document)&&n.defaultView||window).getSelection){e=e.getSelection();var o=t.textContent.length,l=Math.min(r.start,o);r=void 0===r.end?l:Math.min(r.end,o),!e.extend&&l>r&&(o=r,r=l,l=o),o=cr(t,l);var a=cr(t,r);o&&a&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((n=n.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),l>r?(e.addRange(n),e.extend(a.node,a.offset)):(n.setEnd(a.node,a.offset),e.addRange(n)))}for(n=[],e=t;e=e.parentNode;)1===e.nodeType&&n.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof t.focus&&t.focus(),t=0;t<n.length;t++)(e=n[t]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=c&&"documentMode"in document&&11>=document.documentMode,gr=null,yr=null,vr=null,br=!1;function wr(e,n,t){var r=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;br||null==gr||gr!==K(r)||(r="selectionStart"in(r=gr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&ur(vr,r)||(vr=r,0<(r=Wr(yr,"onSelect")).length&&(n=new ct("onSelect","select",null,n,t),e.push({event:n,listeners:r}),n.target=gr)))}function kr(e,n){var t={};return t[e.toLowerCase()]=n.toLowerCase(),t["Webkit"+e]="webkit"+n,t["Moz"+e]="moz"+n,t}var Ar={animationend:kr("Animation","AnimationEnd"),animationiteration:kr("Animation","AnimationIteration"),animationstart:kr("Animation","AnimationStart"),transitionend:kr("Transition","TransitionEnd")},xr={},Cr={};function Sr(e){if(xr[e])return xr[e];if(!Ar[e])return e;var n,t=Ar[e];for(n in t)if(t.hasOwnProperty(n)&&n in Cr)return xr[e]=t[n];return e}c&&(Cr=document.createElement("div").style,"AnimationEvent"in window||(delete Ar.animationend.animation,delete Ar.animationiteration.animation,delete Ar.animationstart.animation),"TransitionEvent"in window||delete Ar.transitionend.transition);var Er=Sr("animationend"),Fr=Sr("animationiteration"),Br=Sr("animationstart"),Ur=Sr("transitionend"),Pr=new Map,_r="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Tr(e,n){Pr.set(e,n),u(n,[e])}for(var Ir=0;Ir<_r.length;Ir++){var Or=_r[Ir];Tr(Or.toLowerCase(),"on"+(Or[0].toUpperCase()+Or.slice(1)))}Tr(Er,"onAnimationEnd"),Tr(Fr,"onAnimationIteration"),Tr(Br,"onAnimationStart"),Tr("dblclick","onDoubleClick"),Tr("focusin","onFocus"),Tr("focusout","onBlur"),Tr(Ur,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Lr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Dr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Lr));function zr(e,n,t){var r=e.type||"unknown-event";e.currentTarget=t,function(e,n,t,r,o,a,i,u,s){if(je.apply(this,arguments),De){if(!De)throw Error(l(198));var c=ze;De=!1,ze=null,Ne||(Ne=!0,Re=c)}}(r,n,void 0,e),e.currentTarget=null}function Nr(e,n){n=0!=(4&n);for(var t=0;t<e.length;t++){var r=e[t],o=r.event;r=r.listeners;e:{var l=void 0;if(n)for(var a=r.length-1;0<=a;a--){var i=r[a],u=i.instance,s=i.currentTarget;if(i=i.listener,u!==l&&o.isPropagationStopped())break e;zr(o,i,s),l=u}else for(a=0;a<r.length;a++){if(u=(i=r[a]).instance,s=i.currentTarget,i=i.listener,u!==l&&o.isPropagationStopped())break e;zr(o,i,s),l=u}}}if(Ne)throw e=Re,Ne=!1,Re=null,e}function Rr(e,n){var t=n[go];void 0===t&&(t=n[go]=new Set);var r=e+"__bubble";t.has(r)||(Hr(n,e,2,!1),t.add(r))}function Mr(e,n,t){var r=0;n&&(r|=4),Hr(t,e,r,n)}var jr="_reactListening"+Math.random().toString(36).slice(2);function $r(e){if(!e[jr]){e[jr]=!0,a.forEach((function(n){"selectionchange"!==n&&(Dr.has(n)||Mr(n,!1,e),Mr(n,!0,e))}));var n=9===e.nodeType?e:e.ownerDocument;null===n||n[jr]||(n[jr]=!0,Mr("selectionchange",!1,n))}}function Hr(e,n,t,r){switch(Xn(n)){case 1:var o=Wn;break;case 4:o=Qn;break;default:o=Kn}t=o.bind(null,n,t,e),o=void 0,!Ie||"touchstart"!==n&&"touchmove"!==n&&"wheel"!==n||(o=!0),r?void 0!==o?e.addEventListener(n,t,{capture:!0,passive:o}):e.addEventListener(n,t,!0):void 0!==o?e.addEventListener(n,t,{passive:o}):e.addEventListener(n,t,!1)}function Vr(e,n,t,r,o){var l=r;if(0==(1&n)&&0==(2&n)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var i=r.stateNode.containerInfo;if(i===o||8===i.nodeType&&i.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var u=a.tag;if((3===u||4===u)&&((u=a.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;a=a.return}for(;null!==i;){if(null===(a=bo(i)))return;if(5===(u=a.tag)||6===u){r=l=a;continue e}i=i.parentNode}}r=r.return}_e((function(){var r=l,o=ke(t),a=[];e:{var i=Pr.get(e);if(void 0!==i){var u=ct,s=e;switch(e){case"keypress":if(0===tt(t))break e;case"keydown":case"keyup":u=Ft;break;case"focusin":s="focus",u=gt;break;case"focusout":s="blur",u=gt;break;case"beforeblur":case"afterblur":u=gt;break;case"click":if(2===t.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=ht;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=mt;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Ut;break;case Er:case Fr:case Br:u=yt;break;case Ur:u=Pt;break;case"scroll":u=dt;break;case"wheel":u=Tt;break;case"copy":case"cut":case"paste":u=bt;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Bt}var c=0!=(4&n),f=!c&&"scroll"===e,d=c?null!==i?i+"Capture":null:i;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=Te(h,d))&&c.push(qr(h,m,p))),f)break;h=h.return}0<c.length&&(i=new u(i,s,null,t,o),a.push({event:i,listeners:c}))}}if(0==(7&n)){if(u="mouseout"===e||"pointerout"===e,(!(i="mouseover"===e||"pointerover"===e)||t===we||!(s=t.relatedTarget||t.fromElement)||!bo(s)&&!s[mo])&&(u||i)&&(i=o.window===o?o:(i=o.ownerDocument)?i.defaultView||i.parentWindow:window,u?(u=r,null!==(s=(s=t.relatedTarget||t.toElement)?bo(s):null)&&(s!==(f=$e(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=ht,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Bt,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?i:ko(u),p=null==s?i:ko(s),(i=new c(m,h+"leave",u,t,o)).target=f,i.relatedTarget=p,m=null,bo(o)===r&&((c=new c(d,h+"enter",s,t,o)).target=p,c.relatedTarget=f,m=c),f=m,u&&s)e:{for(d=s,h=0,p=c=u;p;p=Qr(p))h++;for(p=0,m=d;m;m=Qr(m))p++;for(;0<h-p;)c=Qr(c),h--;for(;0<p-h;)d=Qr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Qr(c),d=Qr(d)}c=null}else c=null;null!==u&&Kr(a,i,u,c,!1),null!==s&&null!==f&&Kr(a,f,s,c,!0)}if("select"===(u=(i=r?ko(r):window).nodeName&&i.nodeName.toLowerCase())||"input"===u&&"file"===i.type)var g=Gt;else if(Vt(i))if(Xt)g=ar;else{g=or;var y=rr}else(u=i.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(g=lr);switch(g&&(g=g(e,r))?qt(a,g,t,o):(y&&y(e,i,r),"focusout"===e&&(y=i._wrapperState)&&y.controlled&&"number"===i.type&&ee(i,"number",i.value)),y=r?ko(r):window,e){case"focusin":(Vt(y)||"true"===y.contentEditable)&&(gr=y,yr=r,vr=null);break;case"focusout":vr=yr=gr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,wr(a,t,o);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":wr(a,t,o)}var v;if(Ot)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else $t?Mt(e,t)&&(b="onCompositionEnd"):"keydown"===e&&229===t.keyCode&&(b="onCompositionStart");b&&(zt&&"ko"!==t.locale&&($t||"onCompositionStart"!==b?"onCompositionEnd"===b&&$t&&(v=nt()):(Jn="value"in(Zn=o)?Zn.value:Zn.textContent,$t=!0)),0<(y=Wr(r,b)).length&&(b=new wt(b,e,null,t,o),a.push({event:b,listeners:y}),(v||null!==(v=jt(t)))&&(b.data=v))),(v=Dt?function(e,n){switch(e){case"compositionend":return jt(n);case"keypress":return 32!==n.which?null:(Rt=!0,Nt);case"textInput":return(e=n.data)===Nt&&Rt?null:e;default:return null}}(e,t):function(e,n){if($t)return"compositionend"===e||!Ot&&Mt(e,n)?(e=nt(),et=Jn=Zn=null,$t=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(n.ctrlKey||n.altKey||n.metaKey)||n.ctrlKey&&n.altKey){if(n.char&&1<n.char.length)return n.char;if(n.which)return String.fromCharCode(n.which)}return null;case"compositionend":return zt&&"ko"!==n.locale?null:n.data}}(e,t))&&0<(r=Wr(r,"onBeforeInput")).length&&(o=new wt("onBeforeInput","beforeinput",null,t,o),a.push({event:o,listeners:r}),o.data=v)}Nr(a,n)}))}function qr(e,n,t){return{instance:e,listener:n,currentTarget:t}}function Wr(e,n){for(var t=n+"Capture",r=[];null!==e;){var o=e,l=o.stateNode;5===o.tag&&null!==l&&(o=l,null!=(l=Te(e,t))&&r.unshift(qr(e,l,o)),null!=(l=Te(e,n))&&r.push(qr(e,l,o))),e=e.return}return r}function Qr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Kr(e,n,t,r,o){for(var l=n._reactName,a=[];null!==t&&t!==r;){var i=t,u=i.alternate,s=i.stateNode;if(null!==u&&u===r)break;5===i.tag&&null!==s&&(i=s,o?null!=(u=Te(t,l))&&a.unshift(qr(t,u,i)):o||null!=(u=Te(t,l))&&a.push(qr(t,u,i))),t=t.return}0!==a.length&&e.push({event:n,listeners:a})}var Yr=/\r\n?/g,Gr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(Yr,"\n").replace(Gr,"")}function Zr(e,n,t){if(n=Xr(n),Xr(e)!==n&&t)throw Error(l(425))}function Jr(){}var eo=null,no=null;function to(e,n){return"textarea"===e||"noscript"===e||"string"==typeof n.children||"number"==typeof n.children||"object"==typeof n.dangerouslySetInnerHTML&&null!==n.dangerouslySetInnerHTML&&null!=n.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,lo="function"==typeof Promise?Promise:void 0,ao="function"==typeof queueMicrotask?queueMicrotask:void 0!==lo?function(e){return lo.resolve(null).then(e).catch(io)}:ro;function io(e){setTimeout((function(){throw e}))}function uo(e,n){var t=n,r=0;do{var o=t.nextSibling;if(e.removeChild(t),o&&8===o.nodeType)if("/$"===(t=o.data)){if(0===r)return e.removeChild(o),void Hn(n);r--}else"$"!==t&&"$?"!==t&&"$!"!==t||r++;t=o}while(t);Hn(n)}function so(e){for(;null!=e;e=e.nextSibling){var n=e.nodeType;if(1===n||3===n)break;if(8===n){if("$"===(n=e.data)||"$!"===n||"$?"===n)break;if("/$"===n)return null}}return e}function co(e){e=e.previousSibling;for(var n=0;e;){if(8===e.nodeType){var t=e.data;if("$"===t||"$!"===t||"$?"===t){if(0===n)return e;n--}else"/$"===t&&n++}e=e.previousSibling}return null}var fo=Math.random().toString(36).slice(2),po="__reactFiber$"+fo,ho="__reactProps$"+fo,mo="__reactContainer$"+fo,go="__reactEvents$"+fo,yo="__reactListeners$"+fo,vo="__reactHandles$"+fo;function bo(e){var n=e[po];if(n)return n;for(var t=e.parentNode;t;){if(n=t[mo]||t[po]){if(t=n.alternate,null!==n.child||null!==t&&null!==t.child)for(e=co(e);null!==e;){if(t=e[po])return t;e=co(e)}return n}t=(e=t).parentNode}return null}function wo(e){return!(e=e[po]||e[mo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ko(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(l(33))}function Ao(e){return e[ho]||null}var xo=[],Co=-1;function So(e){return{current:e}}function Eo(e){0>Co||(e.current=xo[Co],xo[Co]=null,Co--)}function Fo(e,n){Co++,xo[Co]=e.current,e.current=n}var Bo={},Uo=So(Bo),Po=So(!1),_o=Bo;function To(e,n){var t=e.type.contextTypes;if(!t)return Bo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===n)return r.__reactInternalMemoizedMaskedChildContext;var o,l={};for(o in t)l[o]=n[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=n,e.__reactInternalMemoizedMaskedChildContext=l),l}function Io(e){return null!=e.childContextTypes}function Oo(){Eo(Po),Eo(Uo)}function Lo(e,n,t){if(Uo.current!==Bo)throw Error(l(168));Fo(Uo,n),Fo(Po,t)}function Do(e,n,t){var r=e.stateNode;if(n=n.childContextTypes,"function"!=typeof r.getChildContext)return t;for(var o in r=r.getChildContext())if(!(o in n))throw Error(l(108,H(e)||"Unknown",o));return z({},t,r)}function zo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Bo,_o=Uo.current,Fo(Uo,e),Fo(Po,Po.current),!0}function No(e,n,t){var r=e.stateNode;if(!r)throw Error(l(169));t?(e=Do(e,n,_o),r.__reactInternalMemoizedMergedChildContext=e,Eo(Po),Eo(Uo),Fo(Uo,e)):Eo(Po),Fo(Po,t)}var Ro=null,Mo=!1,jo=!1;function $o(e){null===Ro?Ro=[e]:Ro.push(e)}function Ho(){if(!jo&&null!==Ro){jo=!0;var e=0,n=wn;try{var t=Ro;for(wn=1;e<t.length;e++){var r=t[e];do{r=r(!0)}while(null!==r)}Ro=null,Mo=!1}catch(n){throw null!==Ro&&(Ro=Ro.slice(e+1)),Qe(Je,Ho),n}finally{wn=n,jo=!1}}return null}var Vo=[],qo=0,Wo=null,Qo=0,Ko=[],Yo=0,Go=null,Xo=1,Zo="";function Jo(e,n){Vo[qo++]=Qo,Vo[qo++]=Wo,Wo=e,Qo=n}function el(e,n,t){Ko[Yo++]=Xo,Ko[Yo++]=Zo,Ko[Yo++]=Go,Go=e;var r=Xo;e=Zo;var o=32-an(r)-1;r&=~(1<<o),t+=1;var l=32-an(n)+o;if(30<l){var a=o-o%5;l=(r&(1<<a)-1).toString(32),r>>=a,o-=a,Xo=1<<32-an(n)+o|t<<o|r,Zo=l+e}else Xo=1<<l|t<<o|r,Zo=e}function nl(e){null!==e.return&&(Jo(e,1),el(e,1,0))}function tl(e){for(;e===Wo;)Wo=Vo[--qo],Vo[qo]=null,Qo=Vo[--qo],Vo[qo]=null;for(;e===Go;)Go=Ko[--Yo],Ko[Yo]=null,Zo=Ko[--Yo],Ko[Yo]=null,Xo=Ko[--Yo],Ko[Yo]=null}var rl=null,ol=null,ll=!1,al=null;function il(e,n){var t=Ts(5,null,null,0);t.elementType="DELETED",t.stateNode=n,t.return=e,null===(n=e.deletions)?(e.deletions=[t],e.flags|=16):n.push(t)}function ul(e,n){switch(e.tag){case 5:var t=e.type;return null!==(n=1!==n.nodeType||t.toLowerCase()!==n.nodeName.toLowerCase()?null:n)&&(e.stateNode=n,rl=e,ol=so(n.firstChild),!0);case 6:return null!==(n=""===e.pendingProps||3!==n.nodeType?null:n)&&(e.stateNode=n,rl=e,ol=null,!0);case 13:return null!==(n=8!==n.nodeType?null:n)&&(t=null!==Go?{id:Xo,overflow:Zo}:null,e.memoizedState={dehydrated:n,treeContext:t,retryLane:1073741824},(t=Ts(18,null,null,0)).stateNode=n,t.return=e,e.child=t,rl=e,ol=null,!0);default:return!1}}function sl(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function cl(e){if(ll){var n=ol;if(n){var t=n;if(!ul(e,n)){if(sl(e))throw Error(l(418));n=so(t.nextSibling);var r=rl;n&&ul(e,n)?il(r,t):(e.flags=-4097&e.flags|2,ll=!1,rl=e)}}else{if(sl(e))throw Error(l(418));e.flags=-4097&e.flags|2,ll=!1,rl=e}}}function fl(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;rl=e}function dl(e){if(e!==rl)return!1;if(!ll)return fl(e),ll=!0,!1;var n;if((n=3!==e.tag)&&!(n=5!==e.tag)&&(n="head"!==(n=e.type)&&"body"!==n&&!to(e.type,e.memoizedProps)),n&&(n=ol)){if(sl(e))throw pl(),Error(l(418));for(;n;)il(e,n),n=so(n.nextSibling)}if(fl(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(l(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType){var t=e.data;if("/$"===t){if(0===n){ol=so(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++}e=e.nextSibling}ol=null}}else ol=rl?so(e.stateNode.nextSibling):null;return!0}function pl(){for(var e=ol;e;)e=so(e.nextSibling)}function hl(){ol=rl=null,ll=!1}function ml(e){null===al?al=[e]:al.push(e)}var gl=w.ReactCurrentBatchConfig;function yl(e,n){if(e&&e.defaultProps){for(var t in n=z({},n),e=e.defaultProps)void 0===n[t]&&(n[t]=e[t]);return n}return n}var vl=So(null),bl=null,wl=null,kl=null;function Al(){kl=wl=bl=null}function xl(e){var n=vl.current;Eo(vl),e._currentValue=n}function Cl(e,n,t){for(;null!==e;){var r=e.alternate;if((e.childLanes&n)!==n?(e.childLanes|=n,null!==r&&(r.childLanes|=n)):null!==r&&(r.childLanes&n)!==n&&(r.childLanes|=n),e===t)break;e=e.return}}function Sl(e,n){bl=e,kl=wl=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&n)&&(wi=!0),e.firstContext=null)}function El(e){var n=e._currentValue;if(kl!==e)if(e={context:e,memoizedValue:n,next:null},null===wl){if(null===bl)throw Error(l(308));wl=e,bl.dependencies={lanes:0,firstContext:e}}else wl=wl.next=e;return n}var Fl=null;function Bl(e){null===Fl?Fl=[e]:Fl.push(e)}function Ul(e,n,t,r){var o=n.interleaved;return null===o?(t.next=t,Bl(n)):(t.next=o.next,o.next=t),n.interleaved=t,Pl(e,r)}function Pl(e,n){e.lanes|=n;var t=e.alternate;for(null!==t&&(t.lanes|=n),t=e,e=e.return;null!==e;)e.childLanes|=n,null!==(t=e.alternate)&&(t.childLanes|=n),t=e,e=e.return;return 3===t.tag?t.stateNode:null}var _l=!1;function Tl(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Il(e,n){e=e.updateQueue,n.updateQueue===e&&(n.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Ol(e,n){return{eventTime:e,lane:n,tag:0,payload:null,callback:null,next:null}}function Ll(e,n,t){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Uu)){var o=r.pending;return null===o?n.next=n:(n.next=o.next,o.next=n),r.pending=n,Pl(e,t)}return null===(o=r.interleaved)?(n.next=n,Bl(r)):(n.next=o.next,o.next=n),r.interleaved=n,Pl(e,t)}function Dl(e,n,t){if(null!==(n=n.updateQueue)&&(n=n.shared,0!=(4194240&t))){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,bn(e,t)}}function zl(e,n){var t=e.updateQueue,r=e.alternate;if(null!==r&&t===(r=r.updateQueue)){var o=null,l=null;if(null!==(t=t.firstBaseUpdate)){do{var a={eventTime:t.eventTime,lane:t.lane,tag:t.tag,payload:t.payload,callback:t.callback,next:null};null===l?o=l=a:l=l.next=a,t=t.next}while(null!==t);null===l?o=l=n:l=l.next=n}else o=l=n;return t={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:l,shared:r.shared,effects:r.effects},void(e.updateQueue=t)}null===(e=t.lastBaseUpdate)?t.firstBaseUpdate=n:e.next=n,t.lastBaseUpdate=n}function Nl(e,n,t,r){var o=e.updateQueue;_l=!1;var l=o.firstBaseUpdate,a=o.lastBaseUpdate,i=o.shared.pending;if(null!==i){o.shared.pending=null;var u=i,s=u.next;u.next=null,null===a?l=s:a.next=s,a=u;var c=e.alternate;null!==c&&(i=(c=c.updateQueue).lastBaseUpdate)!==a&&(null===i?c.firstBaseUpdate=s:i.next=s,c.lastBaseUpdate=u)}if(null!==l){var f=o.baseState;for(a=0,c=s=u=null,i=l;;){var d=i.lane,p=i.eventTime;if((r&d)===d){null!==c&&(c=c.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,m=i;switch(d=n,p=t,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=m.payload)?h.call(p,f,d):h))break e;f=z({},f,d);break e;case 2:_l=!0}}null!==i.callback&&0!==i.lane&&(e.flags|=64,null===(d=o.effects)?o.effects=[i]:d.push(i))}else p={eventTime:p,lane:d,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===c?(s=c=p,u=f):c=c.next=p,a|=d;if(null===(i=i.next)){if(null===(i=o.shared.pending))break;i=(d=i).next,d.next=null,o.lastBaseUpdate=d,o.shared.pending=null}}if(null===c&&(u=f),o.baseState=u,o.firstBaseUpdate=s,o.lastBaseUpdate=c,null!==(n=o.shared.interleaved)){o=n;do{a|=o.lane,o=o.next}while(o!==n)}else null===l&&(o.shared.lanes=0);zu|=a,e.lanes=a,e.memoizedState=f}}function Rl(e,n,t){if(e=n.effects,n.effects=null,null!==e)for(n=0;n<e.length;n++){var r=e[n],o=r.callback;if(null!==o){if(r.callback=null,r=t,"function"!=typeof o)throw Error(l(191,o));o.call(r)}}}var Ml=(new r.Component).refs;function jl(e,n,t,r){t=null==(t=t(r,n=e.memoizedState))?n:z({},n,t),e.memoizedState=t,0===e.lanes&&(e.updateQueue.baseState=t)}var $l={isMounted:function(e){return!!(e=e._reactInternals)&&$e(e)===e},enqueueSetState:function(e,n,t){e=e._reactInternals;var r=ns(),o=ts(e),l=Ol(r,o);l.payload=n,null!=t&&(l.callback=t),null!==(n=Ll(e,l,o))&&(rs(n,e,o,r),Dl(n,e,o))},enqueueReplaceState:function(e,n,t){e=e._reactInternals;var r=ns(),o=ts(e),l=Ol(r,o);l.tag=1,l.payload=n,null!=t&&(l.callback=t),null!==(n=Ll(e,l,o))&&(rs(n,e,o,r),Dl(n,e,o))},enqueueForceUpdate:function(e,n){e=e._reactInternals;var t=ns(),r=ts(e),o=Ol(t,r);o.tag=2,null!=n&&(o.callback=n),null!==(n=Ll(e,o,r))&&(rs(n,e,r,t),Dl(n,e,r))}};function Hl(e,n,t,r,o,l,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,l,a):!(n.prototype&&n.prototype.isPureReactComponent&&ur(t,r)&&ur(o,l))}function Vl(e,n,t){var r=!1,o=Bo,l=n.contextType;return"object"==typeof l&&null!==l?l=El(l):(o=Io(n)?_o:Uo.current,l=(r=null!=(r=n.contextTypes))?To(e,o):Bo),n=new n(t,l),e.memoizedState=null!==n.state&&void 0!==n.state?n.state:null,n.updater=$l,e.stateNode=n,n._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=l),n}function ql(e,n,t,r){e=n.state,"function"==typeof n.componentWillReceiveProps&&n.componentWillReceiveProps(t,r),"function"==typeof n.UNSAFE_componentWillReceiveProps&&n.UNSAFE_componentWillReceiveProps(t,r),n.state!==e&&$l.enqueueReplaceState(n,n.state,null)}function Wl(e,n,t,r){var o=e.stateNode;o.props=t,o.state=e.memoizedState,o.refs=Ml,Tl(e);var l=n.contextType;"object"==typeof l&&null!==l?o.context=El(l):(l=Io(n)?_o:Uo.current,o.context=To(e,l)),o.state=e.memoizedState,"function"==typeof(l=n.getDerivedStateFromProps)&&(jl(e,n,l,t),o.state=e.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(n=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),n!==o.state&&$l.enqueueReplaceState(o,o.state,null),Nl(e,t,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function Ql(e,n,t){if(null!==(e=t.ref)&&"function"!=typeof e&&"object"!=typeof e){if(t._owner){if(t=t._owner){if(1!==t.tag)throw Error(l(309));var r=t.stateNode}if(!r)throw Error(l(147,e));var o=r,a=""+e;return null!==n&&null!==n.ref&&"function"==typeof n.ref&&n.ref._stringRef===a?n.ref:(n=function(e){var n=o.refs;n===Ml&&(n=o.refs={}),null===e?delete n[a]:n[a]=e},n._stringRef=a,n)}if("string"!=typeof e)throw Error(l(284));if(!t._owner)throw Error(l(290,e))}return e}function Kl(e,n){throw e=Object.prototype.toString.call(n),Error(l(31,"[object Object]"===e?"object with keys {"+Object.keys(n).join(", ")+"}":e))}function Yl(e){return(0,e._init)(e._payload)}function Gl(e){function n(n,t){if(e){var r=n.deletions;null===r?(n.deletions=[t],n.flags|=16):r.push(t)}}function t(t,r){if(!e)return null;for(;null!==r;)n(t,r),r=r.sibling;return null}function r(e,n){for(e=new Map;null!==n;)null!==n.key?e.set(n.key,n):e.set(n.index,n),n=n.sibling;return e}function o(e,n){return(e=Os(e,n)).index=0,e.sibling=null,e}function a(n,t,r){return n.index=r,e?null!==(r=n.alternate)?(r=r.index)<t?(n.flags|=2,t):r:(n.flags|=2,t):(n.flags|=1048576,t)}function i(n){return e&&null===n.alternate&&(n.flags|=2),n}function u(e,n,t,r){return null===n||6!==n.tag?((n=Ns(t,e.mode,r)).return=e,n):((n=o(n,t)).return=e,n)}function s(e,n,t,r){var l=t.type;return l===x?f(e,n,t.props.children,r,t.key):null!==n&&(n.elementType===l||"object"==typeof l&&null!==l&&l.$$typeof===T&&Yl(l)===n.type)?((r=o(n,t.props)).ref=Ql(e,n,t),r.return=e,r):((r=Ls(t.type,t.key,t.props,null,e.mode,r)).ref=Ql(e,n,t),r.return=e,r)}function c(e,n,t,r){return null===n||4!==n.tag||n.stateNode.containerInfo!==t.containerInfo||n.stateNode.implementation!==t.implementation?((n=Rs(t,e.mode,r)).return=e,n):((n=o(n,t.children||[])).return=e,n)}function f(e,n,t,r,l){return null===n||7!==n.tag?((n=Ds(t,e.mode,r,l)).return=e,n):((n=o(n,t)).return=e,n)}function d(e,n,t){if("string"==typeof n&&""!==n||"number"==typeof n)return(n=Ns(""+n,e.mode,t)).return=e,n;if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return(t=Ls(n.type,n.key,n.props,null,e.mode,t)).ref=Ql(e,null,n),t.return=e,t;case A:return(n=Rs(n,e.mode,t)).return=e,n;case T:return d(e,(0,n._init)(n._payload),t)}if(ne(n)||L(n))return(n=Ds(n,e.mode,t,null)).return=e,n;Kl(e,n)}return null}function p(e,n,t,r){var o=null!==n?n.key:null;if("string"==typeof t&&""!==t||"number"==typeof t)return null!==o?null:u(e,n,""+t,r);if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return t.key===o?s(e,n,t,r):null;case A:return t.key===o?c(e,n,t,r):null;case T:return p(e,n,(o=t._init)(t._payload),r)}if(ne(t)||L(t))return null!==o?null:f(e,n,t,r,null);Kl(e,t)}return null}function h(e,n,t,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return u(n,e=e.get(t)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case k:return s(n,e=e.get(null===r.key?t:r.key)||null,r,o);case A:return c(n,e=e.get(null===r.key?t:r.key)||null,r,o);case T:return h(e,n,t,(0,r._init)(r._payload),o)}if(ne(r)||L(r))return f(n,e=e.get(t)||null,r,o,null);Kl(n,r)}return null}function m(o,l,i,u){for(var s=null,c=null,f=l,m=l=0,g=null;null!==f&&m<i.length;m++){f.index>m?(g=f,f=null):g=f.sibling;var y=p(o,f,i[m],u);if(null===y){null===f&&(f=g);break}e&&f&&null===y.alternate&&n(o,f),l=a(y,l,m),null===c?s=y:c.sibling=y,c=y,f=g}if(m===i.length)return t(o,f),ll&&Jo(o,m),s;if(null===f){for(;m<i.length;m++)null!==(f=d(o,i[m],u))&&(l=a(f,l,m),null===c?s=f:c.sibling=f,c=f);return ll&&Jo(o,m),s}for(f=r(o,f);m<i.length;m++)null!==(g=h(f,o,m,i[m],u))&&(e&&null!==g.alternate&&f.delete(null===g.key?m:g.key),l=a(g,l,m),null===c?s=g:c.sibling=g,c=g);return e&&f.forEach((function(e){return n(o,e)})),ll&&Jo(o,m),s}function g(o,i,u,s){var c=L(u);if("function"!=typeof c)throw Error(l(150));if(null==(u=c.call(u)))throw Error(l(151));for(var f=c=null,m=i,g=i=0,y=null,v=u.next();null!==m&&!v.done;g++,v=u.next()){m.index>g?(y=m,m=null):y=m.sibling;var b=p(o,m,v.value,s);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&n(o,m),i=a(b,i,g),null===f?c=b:f.sibling=b,f=b,m=y}if(v.done)return t(o,m),ll&&Jo(o,g),c;if(null===m){for(;!v.done;g++,v=u.next())null!==(v=d(o,v.value,s))&&(i=a(v,i,g),null===f?c=v:f.sibling=v,f=v);return ll&&Jo(o,g),c}for(m=r(o,m);!v.done;g++,v=u.next())null!==(v=h(m,o,g,v.value,s))&&(e&&null!==v.alternate&&m.delete(null===v.key?g:v.key),i=a(v,i,g),null===f?c=v:f.sibling=v,f=v);return e&&m.forEach((function(e){return n(o,e)})),ll&&Jo(o,g),c}return function e(r,l,a,u){if("object"==typeof a&&null!==a&&a.type===x&&null===a.key&&(a=a.props.children),"object"==typeof a&&null!==a){switch(a.$$typeof){case k:e:{for(var s=a.key,c=l;null!==c;){if(c.key===s){if((s=a.type)===x){if(7===c.tag){t(r,c.sibling),(l=o(c,a.props.children)).return=r,r=l;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===T&&Yl(s)===c.type){t(r,c.sibling),(l=o(c,a.props)).ref=Ql(r,c,a),l.return=r,r=l;break e}t(r,c);break}n(r,c),c=c.sibling}a.type===x?((l=Ds(a.props.children,r.mode,u,a.key)).return=r,r=l):((u=Ls(a.type,a.key,a.props,null,r.mode,u)).ref=Ql(r,l,a),u.return=r,r=u)}return i(r);case A:e:{for(c=a.key;null!==l;){if(l.key===c){if(4===l.tag&&l.stateNode.containerInfo===a.containerInfo&&l.stateNode.implementation===a.implementation){t(r,l.sibling),(l=o(l,a.children||[])).return=r,r=l;break e}t(r,l);break}n(r,l),l=l.sibling}(l=Rs(a,r.mode,u)).return=r,r=l}return i(r);case T:return e(r,l,(c=a._init)(a._payload),u)}if(ne(a))return m(r,l,a,u);if(L(a))return g(r,l,a,u);Kl(r,a)}return"string"==typeof a&&""!==a||"number"==typeof a?(a=""+a,null!==l&&6===l.tag?(t(r,l.sibling),(l=o(l,a)).return=r,r=l):(t(r,l),(l=Ns(a,r.mode,u)).return=r,r=l),i(r)):t(r,l)}}var Xl=Gl(!0),Zl=Gl(!1),Jl={},ea=So(Jl),na=So(Jl),ta=So(Jl);function ra(e){if(e===Jl)throw Error(l(174));return e}function oa(e,n){switch(Fo(ta,n),Fo(na,e),Fo(ea,Jl),e=n.nodeType){case 9:case 11:n=(n=n.documentElement)?n.namespaceURI:ue(null,"");break;default:n=ue(n=(e=8===e?n.parentNode:n).namespaceURI||null,e=e.tagName)}Eo(ea),Fo(ea,n)}function la(){Eo(ea),Eo(na),Eo(ta)}function aa(e){ra(ta.current);var n=ra(ea.current),t=ue(n,e.type);n!==t&&(Fo(na,e),Fo(ea,t))}function ia(e){na.current===e&&(Eo(ea),Eo(na))}var ua=So(0);function sa(e){for(var n=e;null!==n;){if(13===n.tag){var t=n.memoizedState;if(null!==t&&(null===(t=t.dehydrated)||"$?"===t.data||"$!"===t.data))return n}else if(19===n.tag&&void 0!==n.memoizedProps.revealOrder){if(0!=(128&n.flags))return n}else if(null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}return null}var ca=[];function fa(){for(var e=0;e<ca.length;e++)ca[e]._workInProgressVersionPrimary=null;ca.length=0}var da=w.ReactCurrentDispatcher,pa=w.ReactCurrentBatchConfig,ha=0,ma=null,ga=null,ya=null,va=!1,ba=!1,wa=0,ka=0;function Aa(){throw Error(l(321))}function xa(e,n){if(null===n)return!1;for(var t=0;t<n.length&&t<e.length;t++)if(!ir(e[t],n[t]))return!1;return!0}function Ca(e,n,t,r,o,a){if(ha=a,ma=n,n.memoizedState=null,n.updateQueue=null,n.lanes=0,da.current=null===e||null===e.memoizedState?ii:ui,e=t(r,o),ba){a=0;do{if(ba=!1,wa=0,25<=a)throw Error(l(301));a+=1,ya=ga=null,n.updateQueue=null,da.current=si,e=t(r,o)}while(ba)}if(da.current=ai,n=null!==ga&&null!==ga.next,ha=0,ya=ga=ma=null,va=!1,n)throw Error(l(300));return e}function Sa(){var e=0!==wa;return wa=0,e}function Ea(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ya?ma.memoizedState=ya=e:ya=ya.next=e,ya}function Fa(){if(null===ga){var e=ma.alternate;e=null!==e?e.memoizedState:null}else e=ga.next;var n=null===ya?ma.memoizedState:ya.next;if(null!==n)ya=n,ga=e;else{if(null===e)throw Error(l(310));e={memoizedState:(ga=e).memoizedState,baseState:ga.baseState,baseQueue:ga.baseQueue,queue:ga.queue,next:null},null===ya?ma.memoizedState=ya=e:ya=ya.next=e}return ya}function Ba(e,n){return"function"==typeof n?n(e):n}function Ua(e){var n=Fa(),t=n.queue;if(null===t)throw Error(l(311));t.lastRenderedReducer=e;var r=ga,o=r.baseQueue,a=t.pending;if(null!==a){if(null!==o){var i=o.next;o.next=a.next,a.next=i}r.baseQueue=o=a,t.pending=null}if(null!==o){a=o.next,r=r.baseState;var u=i=null,s=null,c=a;do{var f=c.lane;if((ha&f)===f)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var d={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(u=s=d,i=r):s=s.next=d,ma.lanes|=f,zu|=f}c=c.next}while(null!==c&&c!==a);null===s?i=r:s.next=u,ir(r,n.memoizedState)||(wi=!0),n.memoizedState=r,n.baseState=i,n.baseQueue=s,t.lastRenderedState=r}if(null!==(e=t.interleaved)){o=e;do{a=o.lane,ma.lanes|=a,zu|=a,o=o.next}while(o!==e)}else null===o&&(t.lanes=0);return[n.memoizedState,t.dispatch]}function Pa(e){var n=Fa(),t=n.queue;if(null===t)throw Error(l(311));t.lastRenderedReducer=e;var r=t.dispatch,o=t.pending,a=n.memoizedState;if(null!==o){t.pending=null;var i=o=o.next;do{a=e(a,i.action),i=i.next}while(i!==o);ir(a,n.memoizedState)||(wi=!0),n.memoizedState=a,null===n.baseQueue&&(n.baseState=a),t.lastRenderedState=a}return[a,r]}function _a(){}function Ta(e,n){var t=ma,r=Fa(),o=n(),a=!ir(r.memoizedState,o);if(a&&(r.memoizedState=o,wi=!0),r=r.queue,Va(La.bind(null,t,r,e),[e]),r.getSnapshot!==n||a||null!==ya&&1&ya.memoizedState.tag){if(t.flags|=2048,Ra(9,Oa.bind(null,t,r,o,n),void 0,null),null===Pu)throw Error(l(349));0!=(30&ha)||Ia(t,n,o)}return o}function Ia(e,n,t){e.flags|=16384,e={getSnapshot:n,value:t},null===(n=ma.updateQueue)?(n={lastEffect:null,stores:null},ma.updateQueue=n,n.stores=[e]):null===(t=n.stores)?n.stores=[e]:t.push(e)}function Oa(e,n,t,r){n.value=t,n.getSnapshot=r,Da(n)&&za(e)}function La(e,n,t){return t((function(){Da(n)&&za(e)}))}function Da(e){var n=e.getSnapshot;e=e.value;try{var t=n();return!ir(e,t)}catch(e){return!0}}function za(e){var n=Pl(e,1);null!==n&&rs(n,e,1,-1)}function Na(e){var n=Ea();return"function"==typeof e&&(e=e()),n.memoizedState=n.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ba,lastRenderedState:e},n.queue=e,e=e.dispatch=ti.bind(null,ma,e),[n.memoizedState,e]}function Ra(e,n,t,r){return e={tag:e,create:n,destroy:t,deps:r,next:null},null===(n=ma.updateQueue)?(n={lastEffect:null,stores:null},ma.updateQueue=n,n.lastEffect=e.next=e):null===(t=n.lastEffect)?n.lastEffect=e.next=e:(r=t.next,t.next=e,e.next=r,n.lastEffect=e),e}function Ma(){return Fa().memoizedState}function ja(e,n,t,r){var o=Ea();ma.flags|=e,o.memoizedState=Ra(1|n,t,void 0,void 0===r?null:r)}function $a(e,n,t,r){var o=Fa();r=void 0===r?null:r;var l=void 0;if(null!==ga){var a=ga.memoizedState;if(l=a.destroy,null!==r&&xa(r,a.deps))return void(o.memoizedState=Ra(n,t,l,r))}ma.flags|=e,o.memoizedState=Ra(1|n,t,l,r)}function Ha(e,n){return ja(8390656,8,e,n)}function Va(e,n){return $a(2048,8,e,n)}function qa(e,n){return $a(4,2,e,n)}function Wa(e,n){return $a(4,4,e,n)}function Qa(e,n){return"function"==typeof n?(e=e(),n(e),function(){n(null)}):null!=n?(e=e(),n.current=e,function(){n.current=null}):void 0}function Ka(e,n,t){return t=null!=t?t.concat([e]):null,$a(4,4,Qa.bind(null,n,e),t)}function Ya(){}function Ga(e,n){var t=Fa();n=void 0===n?null:n;var r=t.memoizedState;return null!==r&&null!==n&&xa(n,r[1])?r[0]:(t.memoizedState=[e,n],e)}function Xa(e,n){var t=Fa();n=void 0===n?null:n;var r=t.memoizedState;return null!==r&&null!==n&&xa(n,r[1])?r[0]:(e=e(),t.memoizedState=[e,n],e)}function Za(e,n,t){return 0==(21&ha)?(e.baseState&&(e.baseState=!1,wi=!0),e.memoizedState=t):(ir(t,n)||(t=gn(),ma.lanes|=t,zu|=t,e.baseState=!0),n)}function Ja(e,n){var t=wn;wn=0!==t&&4>t?t:4,e(!0);var r=pa.transition;pa.transition={};try{e(!1),n()}finally{wn=t,pa.transition=r}}function ei(){return Fa().memoizedState}function ni(e,n,t){var r=ts(e);t={lane:r,action:t,hasEagerState:!1,eagerState:null,next:null},ri(e)?oi(n,t):null!==(t=Ul(e,n,t,r))&&(rs(t,e,r,ns()),li(t,n,r))}function ti(e,n,t){var r=ts(e),o={lane:r,action:t,hasEagerState:!1,eagerState:null,next:null};if(ri(e))oi(n,o);else{var l=e.alternate;if(0===e.lanes&&(null===l||0===l.lanes)&&null!==(l=n.lastRenderedReducer))try{var a=n.lastRenderedState,i=l(a,t);if(o.hasEagerState=!0,o.eagerState=i,ir(i,a)){var u=n.interleaved;return null===u?(o.next=o,Bl(n)):(o.next=u.next,u.next=o),void(n.interleaved=o)}}catch(e){}null!==(t=Ul(e,n,o,r))&&(rs(t,e,r,o=ns()),li(t,n,r))}}function ri(e){var n=e.alternate;return e===ma||null!==n&&n===ma}function oi(e,n){ba=va=!0;var t=e.pending;null===t?n.next=n:(n.next=t.next,t.next=n),e.pending=n}function li(e,n,t){if(0!=(4194240&t)){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,bn(e,t)}}var ai={readContext:El,useCallback:Aa,useContext:Aa,useEffect:Aa,useImperativeHandle:Aa,useInsertionEffect:Aa,useLayoutEffect:Aa,useMemo:Aa,useReducer:Aa,useRef:Aa,useState:Aa,useDebugValue:Aa,useDeferredValue:Aa,useTransition:Aa,useMutableSource:Aa,useSyncExternalStore:Aa,useId:Aa,unstable_isNewReconciler:!1},ii={readContext:El,useCallback:function(e,n){return Ea().memoizedState=[e,void 0===n?null:n],e},useContext:El,useEffect:Ha,useImperativeHandle:function(e,n,t){return t=null!=t?t.concat([e]):null,ja(4194308,4,Qa.bind(null,n,e),t)},useLayoutEffect:function(e,n){return ja(4194308,4,e,n)},useInsertionEffect:function(e,n){return ja(4,2,e,n)},useMemo:function(e,n){var t=Ea();return n=void 0===n?null:n,e=e(),t.memoizedState=[e,n],e},useReducer:function(e,n,t){var r=Ea();return n=void 0!==t?t(n):n,r.memoizedState=r.baseState=n,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:n},r.queue=e,e=e.dispatch=ni.bind(null,ma,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Ea().memoizedState=e},useState:Na,useDebugValue:Ya,useDeferredValue:function(e){return Ea().memoizedState=e},useTransition:function(){var e=Na(!1),n=e[0];return e=Ja.bind(null,e[1]),Ea().memoizedState=e,[n,e]},useMutableSource:function(){},useSyncExternalStore:function(e,n,t){var r=ma,o=Ea();if(ll){if(void 0===t)throw Error(l(407));t=t()}else{if(t=n(),null===Pu)throw Error(l(349));0!=(30&ha)||Ia(r,n,t)}o.memoizedState=t;var a={value:t,getSnapshot:n};return o.queue=a,Ha(La.bind(null,r,a,e),[e]),r.flags|=2048,Ra(9,Oa.bind(null,r,a,t,n),void 0,null),t},useId:function(){var e=Ea(),n=Pu.identifierPrefix;if(ll){var t=Zo;n=":"+n+"R"+(t=(Xo&~(1<<32-an(Xo)-1)).toString(32)+t),0<(t=wa++)&&(n+="H"+t.toString(32)),n+=":"}else n=":"+n+"r"+(t=ka++).toString(32)+":";return e.memoizedState=n},unstable_isNewReconciler:!1},ui={readContext:El,useCallback:Ga,useContext:El,useEffect:Va,useImperativeHandle:Ka,useInsertionEffect:qa,useLayoutEffect:Wa,useMemo:Xa,useReducer:Ua,useRef:Ma,useState:function(){return Ua(Ba)},useDebugValue:Ya,useDeferredValue:function(e){return Za(Fa(),ga.memoizedState,e)},useTransition:function(){return[Ua(Ba)[0],Fa().memoizedState]},useMutableSource:_a,useSyncExternalStore:Ta,useId:ei,unstable_isNewReconciler:!1},si={readContext:El,useCallback:Ga,useContext:El,useEffect:Va,useImperativeHandle:Ka,useInsertionEffect:qa,useLayoutEffect:Wa,useMemo:Xa,useReducer:Pa,useRef:Ma,useState:function(){return Pa(Ba)},useDebugValue:Ya,useDeferredValue:function(e){var n=Fa();return null===ga?n.memoizedState=e:Za(n,ga.memoizedState,e)},useTransition:function(){return[Pa(Ba)[0],Fa().memoizedState]},useMutableSource:_a,useSyncExternalStore:Ta,useId:ei,unstable_isNewReconciler:!1};function ci(e,n){try{var t="",r=n;do{t+=j(r),r=r.return}while(r);var o=t}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:n,stack:o,digest:null}}function fi(e,n,t){return{value:e,source:null,stack:null!=t?t:null,digest:null!=n?n:null}}function di(e,n){try{console.error(n.value)}catch(e){setTimeout((function(){throw e}))}}var pi="function"==typeof WeakMap?WeakMap:Map;function hi(e,n,t){(t=Ol(-1,t)).tag=3,t.payload={element:null};var r=n.value;return t.callback=function(){qu||(qu=!0,Wu=r),di(0,n)},t}function mi(e,n,t){(t=Ol(-1,t)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=n.value;t.payload=function(){return r(o)},t.callback=function(){di(0,n)}}var l=e.stateNode;return null!==l&&"function"==typeof l.componentDidCatch&&(t.callback=function(){di(0,n),"function"!=typeof r&&(null===Qu?Qu=new Set([this]):Qu.add(this));var e=n.stack;this.componentDidCatch(n.value,{componentStack:null!==e?e:""})}),t}function gi(e,n,t){var r=e.pingCache;if(null===r){r=e.pingCache=new pi;var o=new Set;r.set(n,o)}else void 0===(o=r.get(n))&&(o=new Set,r.set(n,o));o.has(t)||(o.add(t),e=Es.bind(null,e,n,t),n.then(e,e))}function yi(e){do{var n;if((n=13===e.tag)&&(n=null===(n=e.memoizedState)||null!==n.dehydrated),n)return e;e=e.return}while(null!==e);return null}function vi(e,n,t,r,o){return 0==(1&e.mode)?(e===n?e.flags|=65536:(e.flags|=128,t.flags|=131072,t.flags&=-52805,1===t.tag&&(null===t.alternate?t.tag=17:((n=Ol(-1,1)).tag=2,Ll(t,n,1))),t.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}var bi=w.ReactCurrentOwner,wi=!1;function ki(e,n,t,r){n.child=null===e?Zl(n,null,t,r):Xl(n,e.child,t,r)}function Ai(e,n,t,r,o){t=t.render;var l=n.ref;return Sl(n,o),r=Ca(e,n,t,r,l,o),t=Sa(),null===e||wi?(ll&&t&&nl(n),n.flags|=1,ki(e,n,r,o),n.child):(n.updateQueue=e.updateQueue,n.flags&=-2053,e.lanes&=~o,qi(e,n,o))}function xi(e,n,t,r,o){if(null===e){var l=t.type;return"function"!=typeof l||Is(l)||void 0!==l.defaultProps||null!==t.compare||void 0!==t.defaultProps?((e=Ls(t.type,null,r,n,n.mode,o)).ref=n.ref,e.return=n,n.child=e):(n.tag=15,n.type=l,Ci(e,n,l,r,o))}if(l=e.child,0==(e.lanes&o)){var a=l.memoizedProps;if((t=null!==(t=t.compare)?t:ur)(a,r)&&e.ref===n.ref)return qi(e,n,o)}return n.flags|=1,(e=Os(l,r)).ref=n.ref,e.return=n,n.child=e}function Ci(e,n,t,r,o){if(null!==e){var l=e.memoizedProps;if(ur(l,r)&&e.ref===n.ref){if(wi=!1,n.pendingProps=r=l,0==(e.lanes&o))return n.lanes=e.lanes,qi(e,n,o);0!=(131072&e.flags)&&(wi=!0)}}return Fi(e,n,t,r,o)}function Si(e,n,t){var r=n.pendingProps,o=r.children,l=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&n.mode))n.memoizedState={baseLanes:0,cachePool:null,transitions:null},Fo(Ou,Iu),Iu|=t;else{if(0==(1073741824&t))return e=null!==l?l.baseLanes|t:t,n.lanes=n.childLanes=1073741824,n.memoizedState={baseLanes:e,cachePool:null,transitions:null},n.updateQueue=null,Fo(Ou,Iu),Iu|=e,null;n.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==l?l.baseLanes:t,Fo(Ou,Iu),Iu|=r}else null!==l?(r=l.baseLanes|t,n.memoizedState=null):r=t,Fo(Ou,Iu),Iu|=r;return ki(e,n,o,t),n.child}function Ei(e,n){var t=n.ref;(null===e&&null!==t||null!==e&&e.ref!==t)&&(n.flags|=512,n.flags|=2097152)}function Fi(e,n,t,r,o){var l=Io(t)?_o:Uo.current;return l=To(n,l),Sl(n,o),t=Ca(e,n,t,r,l,o),r=Sa(),null===e||wi?(ll&&r&&nl(n),n.flags|=1,ki(e,n,t,o),n.child):(n.updateQueue=e.updateQueue,n.flags&=-2053,e.lanes&=~o,qi(e,n,o))}function Bi(e,n,t,r,o){if(Io(t)){var l=!0;zo(n)}else l=!1;if(Sl(n,o),null===n.stateNode)Vi(e,n),Vl(n,t,r),Wl(n,t,r,o),r=!0;else if(null===e){var a=n.stateNode,i=n.memoizedProps;a.props=i;var u=a.context,s=t.contextType;s="object"==typeof s&&null!==s?El(s):To(n,s=Io(t)?_o:Uo.current);var c=t.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(i!==r||u!==s)&&ql(n,a,r,s),_l=!1;var d=n.memoizedState;a.state=d,Nl(n,r,a,o),u=n.memoizedState,i!==r||d!==u||Po.current||_l?("function"==typeof c&&(jl(n,t,c,r),u=n.memoizedState),(i=_l||Hl(n,t,i,r,d,u,s))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(n.flags|=4194308)):("function"==typeof a.componentDidMount&&(n.flags|=4194308),n.memoizedProps=r,n.memoizedState=u),a.props=r,a.state=u,a.context=s,r=i):("function"==typeof a.componentDidMount&&(n.flags|=4194308),r=!1)}else{a=n.stateNode,Il(e,n),i=n.memoizedProps,s=n.type===n.elementType?i:yl(n.type,i),a.props=s,f=n.pendingProps,d=a.context,u="object"==typeof(u=t.contextType)&&null!==u?El(u):To(n,u=Io(t)?_o:Uo.current);var p=t.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(i!==f||d!==u)&&ql(n,a,r,u),_l=!1,d=n.memoizedState,a.state=d,Nl(n,r,a,o);var h=n.memoizedState;i!==f||d!==h||Po.current||_l?("function"==typeof p&&(jl(n,t,p,r),h=n.memoizedState),(s=_l||Hl(n,t,s,r,d,h,u)||!1)?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,u),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof a.componentDidUpdate&&(n.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(n.flags|=1024)):("function"!=typeof a.componentDidUpdate||i===e.memoizedProps&&d===e.memoizedState||(n.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||i===e.memoizedProps&&d===e.memoizedState||(n.flags|=1024),n.memoizedProps=r,n.memoizedState=h),a.props=r,a.state=h,a.context=u,r=s):("function"!=typeof a.componentDidUpdate||i===e.memoizedProps&&d===e.memoizedState||(n.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||i===e.memoizedProps&&d===e.memoizedState||(n.flags|=1024),r=!1)}return Ui(e,n,t,r,l,o)}function Ui(e,n,t,r,o,l){Ei(e,n);var a=0!=(128&n.flags);if(!r&&!a)return o&&No(n,t,!1),qi(e,n,l);r=n.stateNode,bi.current=n;var i=a&&"function"!=typeof t.getDerivedStateFromError?null:r.render();return n.flags|=1,null!==e&&a?(n.child=Xl(n,e.child,null,l),n.child=Xl(n,null,i,l)):ki(e,n,i,l),n.memoizedState=r.state,o&&No(n,t,!0),n.child}function Pi(e){var n=e.stateNode;n.pendingContext?Lo(0,n.pendingContext,n.pendingContext!==n.context):n.context&&Lo(0,n.context,!1),oa(e,n.containerInfo)}function _i(e,n,t,r,o){return hl(),ml(o),n.flags|=256,ki(e,n,t,r),n.child}var Ti,Ii,Oi,Li,Di={dehydrated:null,treeContext:null,retryLane:0};function zi(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ni(e,n,t){var r,o=n.pendingProps,a=ua.current,i=!1,u=0!=(128&n.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(i=!0,n.flags&=-129):null!==e&&null===e.memoizedState||(a|=1),Fo(ua,1&a),null===e)return cl(n),null!==(e=n.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&n.mode)?n.lanes=1:"$!"===e.data?n.lanes=8:n.lanes=1073741824,null):(u=o.children,e=o.fallback,i?(o=n.mode,i=n.child,u={mode:"hidden",children:u},0==(1&o)&&null!==i?(i.childLanes=0,i.pendingProps=u):i=zs(u,o,0,null),e=Ds(e,o,t,null),i.return=n,e.return=n,i.sibling=e,n.child=i,n.child.memoizedState=zi(t),n.memoizedState=Di,e):Ri(n,u));if(null!==(a=e.memoizedState)&&null!==(r=a.dehydrated))return function(e,n,t,r,o,a,i){if(t)return 256&n.flags?(n.flags&=-257,Mi(e,n,i,r=fi(Error(l(422))))):null!==n.memoizedState?(n.child=e.child,n.flags|=128,null):(a=r.fallback,o=n.mode,r=zs({mode:"visible",children:r.children},o,0,null),(a=Ds(a,o,i,null)).flags|=2,r.return=n,a.return=n,r.sibling=a,n.child=r,0!=(1&n.mode)&&Xl(n,e.child,null,i),n.child.memoizedState=zi(i),n.memoizedState=Di,a);if(0==(1&n.mode))return Mi(e,n,i,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var u=r.dgst;return r=u,Mi(e,n,i,r=fi(a=Error(l(419)),r,void 0))}if(u=0!=(i&e.childLanes),wi||u){if(null!==(r=Pu)){switch(i&-i){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=0!=(o&(r.suspendedLanes|i))?0:o)&&o!==a.retryLane&&(a.retryLane=o,Pl(e,o),rs(r,e,o,-1))}return gs(),Mi(e,n,i,r=fi(Error(l(421))))}return"$?"===o.data?(n.flags|=128,n.child=e.child,n=Bs.bind(null,e),o._reactRetry=n,null):(e=a.treeContext,ol=so(o.nextSibling),rl=n,ll=!0,al=null,null!==e&&(Ko[Yo++]=Xo,Ko[Yo++]=Zo,Ko[Yo++]=Go,Xo=e.id,Zo=e.overflow,Go=n),(n=Ri(n,r.children)).flags|=4096,n)}(e,n,u,o,r,a,t);if(i){i=o.fallback,u=n.mode,r=(a=e.child).sibling;var s={mode:"hidden",children:o.children};return 0==(1&u)&&n.child!==a?((o=n.child).childLanes=0,o.pendingProps=s,n.deletions=null):(o=Os(a,s)).subtreeFlags=14680064&a.subtreeFlags,null!==r?i=Os(r,i):(i=Ds(i,u,t,null)).flags|=2,i.return=n,o.return=n,o.sibling=i,n.child=o,o=i,i=n.child,u=null===(u=e.child.memoizedState)?zi(t):{baseLanes:u.baseLanes|t,cachePool:null,transitions:u.transitions},i.memoizedState=u,i.childLanes=e.childLanes&~t,n.memoizedState=Di,o}return e=(i=e.child).sibling,o=Os(i,{mode:"visible",children:o.children}),0==(1&n.mode)&&(o.lanes=t),o.return=n,o.sibling=null,null!==e&&(null===(t=n.deletions)?(n.deletions=[e],n.flags|=16):t.push(e)),n.child=o,n.memoizedState=null,o}function Ri(e,n){return(n=zs({mode:"visible",children:n},e.mode,0,null)).return=e,e.child=n}function Mi(e,n,t,r){return null!==r&&ml(r),Xl(n,e.child,null,t),(e=Ri(n,n.pendingProps.children)).flags|=2,n.memoizedState=null,e}function ji(e,n,t){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n),Cl(e.return,n,t)}function $i(e,n,t,r,o){var l=e.memoizedState;null===l?e.memoizedState={isBackwards:n,rendering:null,renderingStartTime:0,last:r,tail:t,tailMode:o}:(l.isBackwards=n,l.rendering=null,l.renderingStartTime=0,l.last=r,l.tail=t,l.tailMode=o)}function Hi(e,n,t){var r=n.pendingProps,o=r.revealOrder,l=r.tail;if(ki(e,n,r.children,t),0!=(2&(r=ua.current)))r=1&r|2,n.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=n.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&ji(e,t,n);else if(19===e.tag)ji(e,t,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Fo(ua,r),0==(1&n.mode))n.memoizedState=null;else switch(o){case"forwards":for(t=n.child,o=null;null!==t;)null!==(e=t.alternate)&&null===sa(e)&&(o=t),t=t.sibling;null===(t=o)?(o=n.child,n.child=null):(o=t.sibling,t.sibling=null),$i(n,!1,o,t,l);break;case"backwards":for(t=null,o=n.child,n.child=null;null!==o;){if(null!==(e=o.alternate)&&null===sa(e)){n.child=o;break}e=o.sibling,o.sibling=t,t=o,o=e}$i(n,!0,t,null,l);break;case"together":$i(n,!1,null,null,void 0);break;default:n.memoizedState=null}return n.child}function Vi(e,n){0==(1&n.mode)&&null!==e&&(e.alternate=null,n.alternate=null,n.flags|=2)}function qi(e,n,t){if(null!==e&&(n.dependencies=e.dependencies),zu|=n.lanes,0==(t&n.childLanes))return null;if(null!==e&&n.child!==e.child)throw Error(l(153));if(null!==n.child){for(t=Os(e=n.child,e.pendingProps),n.child=t,t.return=n;null!==e.sibling;)e=e.sibling,(t=t.sibling=Os(e,e.pendingProps)).return=n;t.sibling=null}return n.child}function Wi(e,n){if(!ll)switch(e.tailMode){case"hidden":n=e.tail;for(var t=null;null!==n;)null!==n.alternate&&(t=n),n=n.sibling;null===t?e.tail=null:t.sibling=null;break;case"collapsed":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?n||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Qi(e){var n=null!==e.alternate&&e.alternate.child===e.child,t=0,r=0;if(n)for(var o=e.child;null!==o;)t|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)t|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=t,n}function Ki(e,n,t){var r=n.pendingProps;switch(tl(n),n.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Qi(n),null;case 1:case 17:return Io(n.type)&&Oo(),Qi(n),null;case 3:return r=n.stateNode,la(),Eo(Po),Eo(Uo),fa(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(dl(n)?n.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&n.flags)||(n.flags|=1024,null!==al&&(is(al),al=null))),Ii(e,n),Qi(n),null;case 5:ia(n);var o=ra(ta.current);if(t=n.type,null!==e&&null!=n.stateNode)Oi(e,n,t,r,o),e.ref!==n.ref&&(n.flags|=512,n.flags|=2097152);else{if(!r){if(null===n.stateNode)throw Error(l(166));return Qi(n),null}if(e=ra(ea.current),dl(n)){r=n.stateNode,t=n.type;var a=n.memoizedProps;switch(r[po]=n,r[ho]=a,e=0!=(1&n.mode),t){case"dialog":Rr("cancel",r),Rr("close",r);break;case"iframe":case"object":case"embed":Rr("load",r);break;case"video":case"audio":for(o=0;o<Lr.length;o++)Rr(Lr[o],r);break;case"source":Rr("error",r);break;case"img":case"image":case"link":Rr("error",r),Rr("load",r);break;case"details":Rr("toggle",r);break;case"input":G(r,a),Rr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!a.multiple},Rr("invalid",r);break;case"textarea":oe(r,a),Rr("invalid",r)}for(var u in ve(t,a),o=null,a)if(a.hasOwnProperty(u)){var s=a[u];"children"===u?"string"==typeof s?r.textContent!==s&&(!0!==a.suppressHydrationWarning&&Zr(r.textContent,s,e),o=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(!0!==a.suppressHydrationWarning&&Zr(r.textContent,s,e),o=["children",""+s]):i.hasOwnProperty(u)&&null!=s&&"onScroll"===u&&Rr("scroll",r)}switch(t){case"input":W(r),J(r,a,!0);break;case"textarea":W(r),ae(r);break;case"select":case"option":break;default:"function"==typeof a.onClick&&(r.onclick=Jr)}r=o,n.updateQueue=r,null!==r&&(n.flags|=4)}else{u=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=ie(t)),"http://www.w3.org/1999/xhtml"===e?"script"===t?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(t,{is:r.is}):(e=u.createElement(t),"select"===t&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,t),e[po]=n,e[ho]=r,Ti(e,n,!1,!1),n.stateNode=e;e:{switch(u=be(t,r),t){case"dialog":Rr("cancel",e),Rr("close",e),o=r;break;case"iframe":case"object":case"embed":Rr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Lr.length;o++)Rr(Lr[o],e);o=r;break;case"source":Rr("error",e),o=r;break;case"img":case"image":case"link":Rr("error",e),Rr("load",e),o=r;break;case"details":Rr("toggle",e),o=r;break;case"input":G(e,r),o=Y(e,r),Rr("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=z({},r,{value:void 0}),Rr("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),Rr("invalid",e)}for(a in ve(t,o),s=o)if(s.hasOwnProperty(a)){var c=s[a];"style"===a?ge(e,c):"dangerouslySetInnerHTML"===a?null!=(c=c?c.__html:void 0)&&fe(e,c):"children"===a?"string"==typeof c?("textarea"!==t||""!==c)&&de(e,c):"number"==typeof c&&de(e,""+c):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(i.hasOwnProperty(a)?null!=c&&"onScroll"===a&&Rr("scroll",e):null!=c&&b(e,a,c,u))}switch(t){case"input":W(e),J(e,r,!1);break;case"textarea":W(e),ae(e);break;case"option":null!=r.value&&e.setAttribute("value",""+V(r.value));break;case"select":e.multiple=!!r.multiple,null!=(a=r.value)?te(e,!!r.multiple,a,!1):null!=r.defaultValue&&te(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Jr)}switch(t){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(n.flags|=4)}null!==n.ref&&(n.flags|=512,n.flags|=2097152)}return Qi(n),null;case 6:if(e&&null!=n.stateNode)Li(e,n,e.memoizedProps,r);else{if("string"!=typeof r&&null===n.stateNode)throw Error(l(166));if(t=ra(ta.current),ra(ea.current),dl(n)){if(r=n.stateNode,t=n.memoizedProps,r[po]=n,(a=r.nodeValue!==t)&&null!==(e=rl))switch(e.tag){case 3:Zr(r.nodeValue,t,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Zr(r.nodeValue,t,0!=(1&e.mode))}a&&(n.flags|=4)}else(r=(9===t.nodeType?t:t.ownerDocument).createTextNode(r))[po]=n,n.stateNode=r}return Qi(n),null;case 13:if(Eo(ua),r=n.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ll&&null!==ol&&0!=(1&n.mode)&&0==(128&n.flags))pl(),hl(),n.flags|=98560,a=!1;else if(a=dl(n),null!==r&&null!==r.dehydrated){if(null===e){if(!a)throw Error(l(318));if(!(a=null!==(a=n.memoizedState)?a.dehydrated:null))throw Error(l(317));a[po]=n}else hl(),0==(128&n.flags)&&(n.memoizedState=null),n.flags|=4;Qi(n),a=!1}else null!==al&&(is(al),al=null),a=!0;if(!a)return 65536&n.flags?n:null}return 0!=(128&n.flags)?(n.lanes=t,n):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(n.child.flags|=8192,0!=(1&n.mode)&&(null===e||0!=(1&ua.current)?0===Lu&&(Lu=3):gs())),null!==n.updateQueue&&(n.flags|=4),Qi(n),null);case 4:return la(),Ii(e,n),null===e&&$r(n.stateNode.containerInfo),Qi(n),null;case 10:return xl(n.type._context),Qi(n),null;case 19:if(Eo(ua),null===(a=n.memoizedState))return Qi(n),null;if(r=0!=(128&n.flags),null===(u=a.rendering))if(r)Wi(a,!1);else{if(0!==Lu||null!==e&&0!=(128&e.flags))for(e=n.child;null!==e;){if(null!==(u=sa(e))){for(n.flags|=128,Wi(a,!1),null!==(r=u.updateQueue)&&(n.updateQueue=r,n.flags|=4),n.subtreeFlags=0,r=t,t=n.child;null!==t;)e=r,(a=t).flags&=14680066,null===(u=a.alternate)?(a.childLanes=0,a.lanes=e,a.child=null,a.subtreeFlags=0,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null,a.stateNode=null):(a.childLanes=u.childLanes,a.lanes=u.lanes,a.child=u.child,a.subtreeFlags=0,a.deletions=null,a.memoizedProps=u.memoizedProps,a.memoizedState=u.memoizedState,a.updateQueue=u.updateQueue,a.type=u.type,e=u.dependencies,a.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),t=t.sibling;return Fo(ua,1&ua.current|2),n.child}e=e.sibling}null!==a.tail&&Xe()>Hu&&(n.flags|=128,r=!0,Wi(a,!1),n.lanes=4194304)}else{if(!r)if(null!==(e=sa(u))){if(n.flags|=128,r=!0,null!==(t=e.updateQueue)&&(n.updateQueue=t,n.flags|=4),Wi(a,!0),null===a.tail&&"hidden"===a.tailMode&&!u.alternate&&!ll)return Qi(n),null}else 2*Xe()-a.renderingStartTime>Hu&&1073741824!==t&&(n.flags|=128,r=!0,Wi(a,!1),n.lanes=4194304);a.isBackwards?(u.sibling=n.child,n.child=u):(null!==(t=a.last)?t.sibling=u:n.child=u,a.last=u)}return null!==a.tail?(n=a.tail,a.rendering=n,a.tail=n.sibling,a.renderingStartTime=Xe(),n.sibling=null,t=ua.current,Fo(ua,r?1&t|2:1&t),n):(Qi(n),null);case 22:case 23:return ds(),r=null!==n.memoizedState,null!==e&&null!==e.memoizedState!==r&&(n.flags|=8192),r&&0!=(1&n.mode)?0!=(1073741824&Iu)&&(Qi(n),6&n.subtreeFlags&&(n.flags|=8192)):Qi(n),null;case 24:case 25:return null}throw Error(l(156,n.tag))}function Yi(e,n){switch(tl(n),n.tag){case 1:return Io(n.type)&&Oo(),65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 3:return la(),Eo(Po),Eo(Uo),fa(),0!=(65536&(e=n.flags))&&0==(128&e)?(n.flags=-65537&e|128,n):null;case 5:return ia(n),null;case 13:if(Eo(ua),null!==(e=n.memoizedState)&&null!==e.dehydrated){if(null===n.alternate)throw Error(l(340));hl()}return 65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 19:return Eo(ua),null;case 4:return la(),null;case 10:return xl(n.type._context),null;case 22:case 23:return ds(),null;default:return null}}Ti=function(e,n){for(var t=n.child;null!==t;){if(5===t.tag||6===t.tag)e.appendChild(t.stateNode);else if(4!==t.tag&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===n)break;for(;null===t.sibling;){if(null===t.return||t.return===n)return;t=t.return}t.sibling.return=t.return,t=t.sibling}},Ii=function(){},Oi=function(e,n,t,r){var o=e.memoizedProps;if(o!==r){e=n.stateNode,ra(ea.current);var l,a=null;switch(t){case"input":o=Y(e,o),r=Y(e,r),a=[];break;case"select":o=z({},o,{value:void 0}),r=z({},r,{value:void 0}),a=[];break;case"textarea":o=re(e,o),r=re(e,r),a=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(c in ve(t,r),t=null,o)if(!r.hasOwnProperty(c)&&o.hasOwnProperty(c)&&null!=o[c])if("style"===c){var u=o[c];for(l in u)u.hasOwnProperty(l)&&(t||(t={}),t[l]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(i.hasOwnProperty(c)?a||(a=[]):(a=a||[]).push(c,null));for(c in r){var s=r[c];if(u=null!=o?o[c]:void 0,r.hasOwnProperty(c)&&s!==u&&(null!=s||null!=u))if("style"===c)if(u){for(l in u)!u.hasOwnProperty(l)||s&&s.hasOwnProperty(l)||(t||(t={}),t[l]="");for(l in s)s.hasOwnProperty(l)&&u[l]!==s[l]&&(t||(t={}),t[l]=s[l])}else t||(a||(a=[]),a.push(c,t)),t=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,u=u?u.__html:void 0,null!=s&&u!==s&&(a=a||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(a=a||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(i.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&Rr("scroll",e),a||u===s||(a=[])):(a=a||[]).push(c,s))}t&&(a=a||[]).push("style",t);var c=a;(n.updateQueue=c)&&(n.flags|=4)}},Li=function(e,n,t,r){t!==r&&(n.flags|=4)};var Gi=!1,Xi=!1,Zi="function"==typeof WeakSet?WeakSet:Set,Ji=null;function eu(e,n){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Ss(e,n,t)}else t.current=null}function nu(e,n,t){try{t()}catch(t){Ss(e,n,t)}}var tu=!1;function ru(e,n,t){var r=n.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var l=o.destroy;o.destroy=void 0,void 0!==l&&nu(n,t,l)}o=o.next}while(o!==r)}}function ou(e,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var t=n=n.next;do{if((t.tag&e)===e){var r=t.create;t.destroy=r()}t=t.next}while(t!==n)}}function lu(e){var n=e.ref;if(null!==n){var t=e.stateNode;e.tag,e=t,"function"==typeof n?n(e):n.current=e}}function au(e){var n=e.alternate;null!==n&&(e.alternate=null,au(n)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(n=e.stateNode)&&(delete n[po],delete n[ho],delete n[go],delete n[yo],delete n[vo]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function iu(e){return 5===e.tag||3===e.tag||4===e.tag}function uu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||iu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function su(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?8===t.nodeType?t.parentNode.insertBefore(e,n):t.insertBefore(e,n):(8===t.nodeType?(n=t.parentNode).insertBefore(e,t):(n=t).appendChild(e),null!=(t=t._reactRootContainer)||null!==n.onclick||(n.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(su(e,n,t),e=e.sibling;null!==e;)su(e,n,t),e=e.sibling}function cu(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?t.insertBefore(e,n):t.appendChild(e);else if(4!==r&&null!==(e=e.child))for(cu(e,n,t),e=e.sibling;null!==e;)cu(e,n,t),e=e.sibling}var fu=null,du=!1;function pu(e,n,t){for(t=t.child;null!==t;)hu(e,n,t),t=t.sibling}function hu(e,n,t){if(ln&&"function"==typeof ln.onCommitFiberUnmount)try{ln.onCommitFiberUnmount(on,t)}catch(e){}switch(t.tag){case 5:Xi||eu(t,n);case 6:var r=fu,o=du;fu=null,pu(e,n,t),du=o,null!==(fu=r)&&(du?(e=fu,t=t.stateNode,8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)):fu.removeChild(t.stateNode));break;case 18:null!==fu&&(du?(e=fu,t=t.stateNode,8===e.nodeType?uo(e.parentNode,t):1===e.nodeType&&uo(e,t),Hn(e)):uo(fu,t.stateNode));break;case 4:r=fu,o=du,fu=t.stateNode.containerInfo,du=!0,pu(e,n,t),fu=r,du=o;break;case 0:case 11:case 14:case 15:if(!Xi&&null!==(r=t.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var l=o,a=l.destroy;l=l.tag,void 0!==a&&(0!=(2&l)||0!=(4&l))&&nu(t,n,a),o=o.next}while(o!==r)}pu(e,n,t);break;case 1:if(!Xi&&(eu(t,n),"function"==typeof(r=t.stateNode).componentWillUnmount))try{r.props=t.memoizedProps,r.state=t.memoizedState,r.componentWillUnmount()}catch(e){Ss(t,n,e)}pu(e,n,t);break;case 21:pu(e,n,t);break;case 22:1&t.mode?(Xi=(r=Xi)||null!==t.memoizedState,pu(e,n,t),Xi=r):pu(e,n,t);break;default:pu(e,n,t)}}function mu(e){var n=e.updateQueue;if(null!==n){e.updateQueue=null;var t=e.stateNode;null===t&&(t=e.stateNode=new Zi),n.forEach((function(n){var r=Us.bind(null,e,n);t.has(n)||(t.add(n),n.then(r,r))}))}}function gu(e,n){var t=n.deletions;if(null!==t)for(var r=0;r<t.length;r++){var o=t[r];try{var a=e,i=n,u=i;e:for(;null!==u;){switch(u.tag){case 5:fu=u.stateNode,du=!1;break e;case 3:case 4:fu=u.stateNode.containerInfo,du=!0;break e}u=u.return}if(null===fu)throw Error(l(160));hu(a,i,o),fu=null,du=!1;var s=o.alternate;null!==s&&(s.return=null),o.return=null}catch(e){Ss(o,n,e)}}if(12854&n.subtreeFlags)for(n=n.child;null!==n;)yu(n,e),n=n.sibling}function yu(e,n){var t=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(gu(n,e),vu(e),4&r){try{ru(3,e,e.return),ou(3,e)}catch(n){Ss(e,e.return,n)}try{ru(5,e,e.return)}catch(n){Ss(e,e.return,n)}}break;case 1:gu(n,e),vu(e),512&r&&null!==t&&eu(t,t.return);break;case 5:if(gu(n,e),vu(e),512&r&&null!==t&&eu(t,t.return),32&e.flags){var o=e.stateNode;try{de(o,"")}catch(n){Ss(e,e.return,n)}}if(4&r&&null!=(o=e.stateNode)){var a=e.memoizedProps,i=null!==t?t.memoizedProps:a,u=e.type,s=e.updateQueue;if(e.updateQueue=null,null!==s)try{"input"===u&&"radio"===a.type&&null!=a.name&&X(o,a),be(u,i);var c=be(u,a);for(i=0;i<s.length;i+=2){var f=s[i],d=s[i+1];"style"===f?ge(o,d):"dangerouslySetInnerHTML"===f?fe(o,d):"children"===f?de(o,d):b(o,f,d,c)}switch(u){case"input":Z(o,a);break;case"textarea":le(o,a);break;case"select":var p=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!a.multiple;var h=a.value;null!=h?te(o,!!a.multiple,h,!1):p!==!!a.multiple&&(null!=a.defaultValue?te(o,!!a.multiple,a.defaultValue,!0):te(o,!!a.multiple,a.multiple?[]:"",!1))}o[ho]=a}catch(n){Ss(e,e.return,n)}}break;case 6:if(gu(n,e),vu(e),4&r){if(null===e.stateNode)throw Error(l(162));o=e.stateNode,a=e.memoizedProps;try{o.nodeValue=a}catch(n){Ss(e,e.return,n)}}break;case 3:if(gu(n,e),vu(e),4&r&&null!==t&&t.memoizedState.isDehydrated)try{Hn(n.containerInfo)}catch(n){Ss(e,e.return,n)}break;case 4:default:gu(n,e),vu(e);break;case 13:gu(n,e),vu(e),8192&(o=e.child).flags&&(a=null!==o.memoizedState,o.stateNode.isHidden=a,!a||null!==o.alternate&&null!==o.alternate.memoizedState||($u=Xe())),4&r&&mu(e);break;case 22:if(f=null!==t&&null!==t.memoizedState,1&e.mode?(Xi=(c=Xi)||f,gu(n,e),Xi=c):gu(n,e),vu(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!f&&0!=(1&e.mode))for(Ji=e,f=e.child;null!==f;){for(d=Ji=f;null!==Ji;){switch(h=(p=Ji).child,p.tag){case 0:case 11:case 14:case 15:ru(4,p,p.return);break;case 1:eu(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,t=p.return;try{n=r,m.props=n.memoizedProps,m.state=n.memoizedState,m.componentWillUnmount()}catch(e){Ss(r,t,e)}}break;case 5:eu(p,p.return);break;case 22:if(null!==p.memoizedState){Au(d);continue}}null!==h?(h.return=p,Ji=h):Au(d)}f=f.sibling}e:for(f=null,d=e;;){if(5===d.tag){if(null===f){f=d;try{o=d.stateNode,c?"function"==typeof(a=o.style).setProperty?a.setProperty("display","none","important"):a.display="none":(u=d.stateNode,i=null!=(s=d.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null,u.style.display=me("display",i))}catch(n){Ss(e,e.return,n)}}}else if(6===d.tag){if(null===f)try{d.stateNode.nodeValue=c?"":d.memoizedProps}catch(n){Ss(e,e.return,n)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;f===d&&(f=null),d=d.return}f===d&&(f=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:gu(n,e),vu(e),4&r&&mu(e);case 21:}}function vu(e){var n=e.flags;if(2&n){try{e:{for(var t=e.return;null!==t;){if(iu(t)){var r=t;break e}t=t.return}throw Error(l(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(de(o,""),r.flags&=-33),cu(e,uu(e),o);break;case 3:case 4:var a=r.stateNode.containerInfo;su(e,uu(e),a);break;default:throw Error(l(161))}}catch(n){Ss(e,e.return,n)}e.flags&=-3}4096&n&&(e.flags&=-4097)}function bu(e,n,t){Ji=e,wu(e,n,t)}function wu(e,n,t){for(var r=0!=(1&e.mode);null!==Ji;){var o=Ji,l=o.child;if(22===o.tag&&r){var a=null!==o.memoizedState||Gi;if(!a){var i=o.alternate,u=null!==i&&null!==i.memoizedState||Xi;i=Gi;var s=Xi;if(Gi=a,(Xi=u)&&!s)for(Ji=o;null!==Ji;)u=(a=Ji).child,22===a.tag&&null!==a.memoizedState?xu(o):null!==u?(u.return=a,Ji=u):xu(o);for(;null!==l;)Ji=l,wu(l,n,t),l=l.sibling;Ji=o,Gi=i,Xi=s}ku(e)}else 0!=(8772&o.subtreeFlags)&&null!==l?(l.return=o,Ji=l):ku(e)}}function ku(e){for(;null!==Ji;){var n=Ji;if(0!=(8772&n.flags)){var t=n.alternate;try{if(0!=(8772&n.flags))switch(n.tag){case 0:case 11:case 15:Xi||ou(5,n);break;case 1:var r=n.stateNode;if(4&n.flags&&!Xi)if(null===t)r.componentDidMount();else{var o=n.elementType===n.type?t.memoizedProps:yl(n.type,t.memoizedProps);r.componentDidUpdate(o,t.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var a=n.updateQueue;null!==a&&Rl(n,a,r);break;case 3:var i=n.updateQueue;if(null!==i){if(t=null,null!==n.child)switch(n.child.tag){case 5:case 1:t=n.child.stateNode}Rl(n,i,t)}break;case 5:var u=n.stateNode;if(null===t&&4&n.flags){t=u;var s=n.memoizedProps;switch(n.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&t.focus();break;case"img":s.src&&(t.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===n.memoizedState){var c=n.alternate;if(null!==c){var f=c.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&Hn(d)}}}break;default:throw Error(l(163))}Xi||512&n.flags&&lu(n)}catch(e){Ss(n,n.return,e)}}if(n===e){Ji=null;break}if(null!==(t=n.sibling)){t.return=n.return,Ji=t;break}Ji=n.return}}function Au(e){for(;null!==Ji;){var n=Ji;if(n===e){Ji=null;break}var t=n.sibling;if(null!==t){t.return=n.return,Ji=t;break}Ji=n.return}}function xu(e){for(;null!==Ji;){var n=Ji;try{switch(n.tag){case 0:case 11:case 15:var t=n.return;try{ou(4,n)}catch(e){Ss(n,t,e)}break;case 1:var r=n.stateNode;if("function"==typeof r.componentDidMount){var o=n.return;try{r.componentDidMount()}catch(e){Ss(n,o,e)}}var l=n.return;try{lu(n)}catch(e){Ss(n,l,e)}break;case 5:var a=n.return;try{lu(n)}catch(e){Ss(n,a,e)}}}catch(e){Ss(n,n.return,e)}if(n===e){Ji=null;break}var i=n.sibling;if(null!==i){i.return=n.return,Ji=i;break}Ji=n.return}}var Cu,Su=Math.ceil,Eu=w.ReactCurrentDispatcher,Fu=w.ReactCurrentOwner,Bu=w.ReactCurrentBatchConfig,Uu=0,Pu=null,_u=null,Tu=0,Iu=0,Ou=So(0),Lu=0,Du=null,zu=0,Nu=0,Ru=0,Mu=null,ju=null,$u=0,Hu=1/0,Vu=null,qu=!1,Wu=null,Qu=null,Ku=!1,Yu=null,Gu=0,Xu=0,Zu=null,Ju=-1,es=0;function ns(){return 0!=(6&Uu)?Xe():-1!==Ju?Ju:Ju=Xe()}function ts(e){return 0==(1&e.mode)?1:0!=(2&Uu)&&0!==Tu?Tu&-Tu:null!==gl.transition?(0===es&&(es=gn()),es):0!==(e=wn)?e:e=void 0===(e=window.event)?16:Xn(e.type)}function rs(e,n,t,r){if(50<Xu)throw Xu=0,Zu=null,Error(l(185));vn(e,t,r),0!=(2&Uu)&&e===Pu||(e===Pu&&(0==(2&Uu)&&(Nu|=t),4===Lu&&us(e,Tu)),os(e,r),1===t&&0===Uu&&0==(1&n.mode)&&(Hu=Xe()+500,Mo&&Ho()))}function os(e,n){var t=e.callbackNode;!function(e,n){for(var t=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,l=e.pendingLanes;0<l;){var a=31-an(l),i=1<<a,u=o[a];-1===u?0!=(i&t)&&0==(i&r)||(o[a]=hn(i,n)):u<=n&&(e.expiredLanes|=i),l&=~i}}(e,n);var r=pn(e,e===Pu?Tu:0);if(0===r)null!==t&&Ke(t),e.callbackNode=null,e.callbackPriority=0;else if(n=r&-r,e.callbackPriority!==n){if(null!=t&&Ke(t),1===n)0===e.tag?function(e){Mo=!0,$o(e)}(ss.bind(null,e)):$o(ss.bind(null,e)),ao((function(){0==(6&Uu)&&Ho()})),t=null;else{switch(kn(r)){case 1:t=Je;break;case 4:t=en;break;case 16:default:t=nn;break;case 536870912:t=rn}t=Ps(t,ls.bind(null,e))}e.callbackPriority=n,e.callbackNode=t}}function ls(e,n){if(Ju=-1,es=0,0!=(6&Uu))throw Error(l(327));var t=e.callbackNode;if(xs()&&e.callbackNode!==t)return null;var r=pn(e,e===Pu?Tu:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||n)n=ys(e,r);else{n=r;var o=Uu;Uu|=2;var a=ms();for(Pu===e&&Tu===n||(Vu=null,Hu=Xe()+500,ps(e,n));;)try{bs();break}catch(n){hs(e,n)}Al(),Eu.current=a,Uu=o,null!==_u?n=0:(Pu=null,Tu=0,n=Lu)}if(0!==n){if(2===n&&0!==(o=mn(e))&&(r=o,n=as(e,o)),1===n)throw t=Du,ps(e,0),us(e,r),os(e,Xe()),t;if(6===n)us(e,r);else{if(o=e.current.alternate,0==(30&r)&&!function(e){for(var n=e;;){if(16384&n.flags){var t=n.updateQueue;if(null!==t&&null!==(t=t.stores))for(var r=0;r<t.length;r++){var o=t[r],l=o.getSnapshot;o=o.value;try{if(!ir(l(),o))return!1}catch(e){return!1}}}if(t=n.child,16384&n.subtreeFlags&&null!==t)t.return=n,n=t;else{if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return!0;n=n.return}n.sibling.return=n.return,n=n.sibling}}return!0}(o)&&(2===(n=ys(e,r))&&0!==(a=mn(e))&&(r=a,n=as(e,a)),1===n))throw t=Du,ps(e,0),us(e,r),os(e,Xe()),t;switch(e.finishedWork=o,e.finishedLanes=r,n){case 0:case 1:throw Error(l(345));case 2:case 5:As(e,ju,Vu);break;case 3:if(us(e,r),(130023424&r)===r&&10<(n=$u+500-Xe())){if(0!==pn(e,0))break;if(((o=e.suspendedLanes)&r)!==r){ns(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(As.bind(null,e,ju,Vu),n);break}As(e,ju,Vu);break;case 4:if(us(e,r),(4194240&r)===r)break;for(n=e.eventTimes,o=-1;0<r;){var i=31-an(r);a=1<<i,(i=n[i])>o&&(o=i),r&=~a}if(r=o,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Su(r/1960))-r)){e.timeoutHandle=ro(As.bind(null,e,ju,Vu),r);break}As(e,ju,Vu);break;default:throw Error(l(329))}}}return os(e,Xe()),e.callbackNode===t?ls.bind(null,e):null}function as(e,n){var t=Mu;return e.current.memoizedState.isDehydrated&&(ps(e,n).flags|=256),2!==(e=ys(e,n))&&(n=ju,ju=t,null!==n&&is(n)),e}function is(e){null===ju?ju=e:ju.push.apply(ju,e)}function us(e,n){for(n&=~Ru,n&=~Nu,e.suspendedLanes|=n,e.pingedLanes&=~n,e=e.expirationTimes;0<n;){var t=31-an(n),r=1<<t;e[t]=-1,n&=~r}}function ss(e){if(0!=(6&Uu))throw Error(l(327));xs();var n=pn(e,0);if(0==(1&n))return os(e,Xe()),null;var t=ys(e,n);if(0!==e.tag&&2===t){var r=mn(e);0!==r&&(n=r,t=as(e,r))}if(1===t)throw t=Du,ps(e,0),us(e,n),os(e,Xe()),t;if(6===t)throw Error(l(345));return e.finishedWork=e.current.alternate,e.finishedLanes=n,As(e,ju,Vu),os(e,Xe()),null}function cs(e,n){var t=Uu;Uu|=1;try{return e(n)}finally{0===(Uu=t)&&(Hu=Xe()+500,Mo&&Ho())}}function fs(e){null!==Yu&&0===Yu.tag&&0==(6&Uu)&&xs();var n=Uu;Uu|=1;var t=Bu.transition,r=wn;try{if(Bu.transition=null,wn=1,e)return e()}finally{wn=r,Bu.transition=t,0==(6&(Uu=n))&&Ho()}}function ds(){Iu=Ou.current,Eo(Ou)}function ps(e,n){e.finishedWork=null,e.finishedLanes=0;var t=e.timeoutHandle;if(-1!==t&&(e.timeoutHandle=-1,oo(t)),null!==_u)for(t=_u.return;null!==t;){var r=t;switch(tl(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Oo();break;case 3:la(),Eo(Po),Eo(Uo),fa();break;case 5:ia(r);break;case 4:la();break;case 13:case 19:Eo(ua);break;case 10:xl(r.type._context);break;case 22:case 23:ds()}t=t.return}if(Pu=e,_u=e=Os(e.current,null),Tu=Iu=n,Lu=0,Du=null,Ru=Nu=zu=0,ju=Mu=null,null!==Fl){for(n=0;n<Fl.length;n++)if(null!==(r=(t=Fl[n]).interleaved)){t.interleaved=null;var o=r.next,l=t.pending;if(null!==l){var a=l.next;l.next=o,r.next=a}t.pending=r}Fl=null}return e}function hs(e,n){for(;;){var t=_u;try{if(Al(),da.current=ai,va){for(var r=ma.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}va=!1}if(ha=0,ya=ga=ma=null,ba=!1,wa=0,Fu.current=null,null===t||null===t.return){Lu=1,Du=n,_u=null;break}e:{var a=e,i=t.return,u=t,s=n;if(n=Tu,u.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,f=u,d=f.tag;if(0==(1&f.mode)&&(0===d||11===d||15===d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=yi(i);if(null!==h){h.flags&=-257,vi(h,i,u,0,n),1&h.mode&&gi(a,c,n),s=c;var m=(n=h).updateQueue;if(null===m){var g=new Set;g.add(s),n.updateQueue=g}else m.add(s);break e}if(0==(1&n)){gi(a,c,n),gs();break e}s=Error(l(426))}else if(ll&&1&u.mode){var y=yi(i);if(null!==y){0==(65536&y.flags)&&(y.flags|=256),vi(y,i,u,0,n),ml(ci(s,u));break e}}a=s=ci(s,u),4!==Lu&&(Lu=2),null===Mu?Mu=[a]:Mu.push(a),a=i;do{switch(a.tag){case 3:a.flags|=65536,n&=-n,a.lanes|=n,zl(a,hi(0,s,n));break e;case 1:u=s;var v=a.type,b=a.stateNode;if(0==(128&a.flags)&&("function"==typeof v.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Qu||!Qu.has(b)))){a.flags|=65536,n&=-n,a.lanes|=n,zl(a,mi(a,u,n));break e}}a=a.return}while(null!==a)}ks(t)}catch(e){n=e,_u===t&&null!==t&&(_u=t=t.return);continue}break}}function ms(){var e=Eu.current;return Eu.current=ai,null===e?ai:e}function gs(){0!==Lu&&3!==Lu&&2!==Lu||(Lu=4),null===Pu||0==(268435455&zu)&&0==(268435455&Nu)||us(Pu,Tu)}function ys(e,n){var t=Uu;Uu|=2;var r=ms();for(Pu===e&&Tu===n||(Vu=null,ps(e,n));;)try{vs();break}catch(n){hs(e,n)}if(Al(),Uu=t,Eu.current=r,null!==_u)throw Error(l(261));return Pu=null,Tu=0,Lu}function vs(){for(;null!==_u;)ws(_u)}function bs(){for(;null!==_u&&!Ye();)ws(_u)}function ws(e){var n=Cu(e.alternate,e,Iu);e.memoizedProps=e.pendingProps,null===n?ks(e):_u=n,Fu.current=null}function ks(e){var n=e;do{var t=n.alternate;if(e=n.return,0==(32768&n.flags)){if(null!==(t=Ki(t,n,Iu)))return void(_u=t)}else{if(null!==(t=Yi(t,n)))return t.flags&=32767,void(_u=t);if(null===e)return Lu=6,void(_u=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(n=n.sibling))return void(_u=n);_u=n=e}while(null!==n);0===Lu&&(Lu=5)}function As(e,n,t){var r=wn,o=Bu.transition;try{Bu.transition=null,wn=1,function(e,n,t,r){do{xs()}while(null!==Yu);if(0!=(6&Uu))throw Error(l(327));t=e.finishedWork;var o=e.finishedLanes;if(null===t)return null;if(e.finishedWork=null,e.finishedLanes=0,t===e.current)throw Error(l(177));e.callbackNode=null,e.callbackPriority=0;var a=t.lanes|t.childLanes;if(function(e,n){var t=e.pendingLanes&~n;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=n,e.mutableReadLanes&=n,e.entangledLanes&=n,n=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<t;){var o=31-an(t),l=1<<o;n[o]=0,r[o]=-1,e[o]=-1,t&=~l}}(e,a),e===Pu&&(_u=Pu=null,Tu=0),0==(2064&t.subtreeFlags)&&0==(2064&t.flags)||Ku||(Ku=!0,Ps(nn,(function(){return xs(),null}))),a=0!=(15990&t.flags),0!=(15990&t.subtreeFlags)||a){a=Bu.transition,Bu.transition=null;var i=wn;wn=1;var u=Uu;Uu|=4,Fu.current=null,function(e,n){if(eo=qn,pr(e=dr())){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(t=(t=e.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(r&&0!==r.rangeCount){t=r.anchorNode;var o=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{t.nodeType,a.nodeType}catch(e){t=null;break e}var i=0,u=-1,s=-1,c=0,f=0,d=e,p=null;n:for(;;){for(var h;d!==t||0!==o&&3!==d.nodeType||(u=i+o),d!==a||0!==r&&3!==d.nodeType||(s=i+r),3===d.nodeType&&(i+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break n;if(p===t&&++c===o&&(u=i),p===a&&++f===r&&(s=i),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}t=-1===u||-1===s?null:{start:u,end:s}}else t=null}t=t||{start:0,end:0}}else t=null;for(no={focusedElem:e,selectionRange:t},qn=!1,Ji=n;null!==Ji;)if(e=(n=Ji).child,0!=(1028&n.subtreeFlags)&&null!==e)e.return=n,Ji=e;else for(;null!==Ji;){n=Ji;try{var m=n.alternate;if(0!=(1024&n.flags))switch(n.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var g=m.memoizedProps,y=m.memoizedState,v=n.stateNode,b=v.getSnapshotBeforeUpdate(n.elementType===n.type?g:yl(n.type,g),y);v.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=n.stateNode.containerInfo;1===w.nodeType?w.textContent="":9===w.nodeType&&w.documentElement&&w.removeChild(w.documentElement);break;default:throw Error(l(163))}}catch(e){Ss(n,n.return,e)}if(null!==(e=n.sibling)){e.return=n.return,Ji=e;break}Ji=n.return}m=tu,tu=!1}(e,t),yu(t,e),hr(no),qn=!!eo,no=eo=null,e.current=t,bu(t,e,o),Ge(),Uu=u,wn=i,Bu.transition=a}else e.current=t;if(Ku&&(Ku=!1,Yu=e,Gu=o),0===(a=e.pendingLanes)&&(Qu=null),function(e){if(ln&&"function"==typeof ln.onCommitFiberRoot)try{ln.onCommitFiberRoot(on,e,void 0,128==(128&e.current.flags))}catch(e){}}(t.stateNode),os(e,Xe()),null!==n)for(r=e.onRecoverableError,t=0;t<n.length;t++)r((o=n[t]).value,{componentStack:o.stack,digest:o.digest});if(qu)throw qu=!1,e=Wu,Wu=null,e;0!=(1&Gu)&&0!==e.tag&&xs(),0!=(1&(a=e.pendingLanes))?e===Zu?Xu++:(Xu=0,Zu=e):Xu=0,Ho()}(e,n,t,r)}finally{Bu.transition=o,wn=r}return null}function xs(){if(null!==Yu){var e=kn(Gu),n=Bu.transition,t=wn;try{if(Bu.transition=null,wn=16>e?16:e,null===Yu)var r=!1;else{if(e=Yu,Yu=null,Gu=0,0!=(6&Uu))throw Error(l(331));var o=Uu;for(Uu|=4,Ji=e.current;null!==Ji;){var a=Ji,i=a.child;if(0!=(16&Ji.flags)){var u=a.deletions;if(null!==u){for(var s=0;s<u.length;s++){var c=u[s];for(Ji=c;null!==Ji;){var f=Ji;switch(f.tag){case 0:case 11:case 15:ru(8,f,a)}var d=f.child;if(null!==d)d.return=f,Ji=d;else for(;null!==Ji;){var p=(f=Ji).sibling,h=f.return;if(au(f),f===c){Ji=null;break}if(null!==p){p.return=h,Ji=p;break}Ji=h}}}var m=a.alternate;if(null!==m){var g=m.child;if(null!==g){m.child=null;do{var y=g.sibling;g.sibling=null,g=y}while(null!==g)}}Ji=a}}if(0!=(2064&a.subtreeFlags)&&null!==i)i.return=a,Ji=i;else e:for(;null!==Ji;){if(0!=(2048&(a=Ji).flags))switch(a.tag){case 0:case 11:case 15:ru(9,a,a.return)}var v=a.sibling;if(null!==v){v.return=a.return,Ji=v;break e}Ji=a.return}}var b=e.current;for(Ji=b;null!==Ji;){var w=(i=Ji).child;if(0!=(2064&i.subtreeFlags)&&null!==w)w.return=i,Ji=w;else e:for(i=b;null!==Ji;){if(0!=(2048&(u=Ji).flags))try{switch(u.tag){case 0:case 11:case 15:ou(9,u)}}catch(e){Ss(u,u.return,e)}if(u===i){Ji=null;break e}var k=u.sibling;if(null!==k){k.return=u.return,Ji=k;break e}Ji=u.return}}if(Uu=o,Ho(),ln&&"function"==typeof ln.onPostCommitFiberRoot)try{ln.onPostCommitFiberRoot(on,e)}catch(e){}r=!0}return r}finally{wn=t,Bu.transition=n}}return!1}function Cs(e,n,t){e=Ll(e,n=hi(0,n=ci(t,n),1),1),n=ns(),null!==e&&(vn(e,1,n),os(e,n))}function Ss(e,n,t){if(3===e.tag)Cs(e,e,t);else for(;null!==n;){if(3===n.tag){Cs(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Qu||!Qu.has(r))){n=Ll(n,e=mi(n,e=ci(t,e),1),1),e=ns(),null!==n&&(vn(n,1,e),os(n,e));break}}n=n.return}}function Es(e,n,t){var r=e.pingCache;null!==r&&r.delete(n),n=ns(),e.pingedLanes|=e.suspendedLanes&t,Pu===e&&(Tu&t)===t&&(4===Lu||3===Lu&&(130023424&Tu)===Tu&&500>Xe()-$u?ps(e,0):Ru|=t),os(e,n)}function Fs(e,n){0===n&&(0==(1&e.mode)?n=1:(n=fn,0==(130023424&(fn<<=1))&&(fn=4194304)));var t=ns();null!==(e=Pl(e,n))&&(vn(e,n,t),os(e,t))}function Bs(e){var n=e.memoizedState,t=0;null!==n&&(t=n.retryLane),Fs(e,t)}function Us(e,n){var t=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(t=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(l(314))}null!==r&&r.delete(n),Fs(e,t)}function Ps(e,n){return Qe(e,n)}function _s(e,n,t,r){this.tag=e,this.key=t,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=n,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ts(e,n,t,r){return new _s(e,n,t,r)}function Is(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Os(e,n){var t=e.alternate;return null===t?((t=Ts(e.tag,n,e.key,e.mode)).elementType=e.elementType,t.type=e.type,t.stateNode=e.stateNode,t.alternate=e,e.alternate=t):(t.pendingProps=n,t.type=e.type,t.flags=0,t.subtreeFlags=0,t.deletions=null),t.flags=14680064&e.flags,t.childLanes=e.childLanes,t.lanes=e.lanes,t.child=e.child,t.memoizedProps=e.memoizedProps,t.memoizedState=e.memoizedState,t.updateQueue=e.updateQueue,n=e.dependencies,t.dependencies=null===n?null:{lanes:n.lanes,firstContext:n.firstContext},t.sibling=e.sibling,t.index=e.index,t.ref=e.ref,t}function Ls(e,n,t,r,o,a){var i=2;if(r=e,"function"==typeof e)Is(e)&&(i=1);else if("string"==typeof e)i=5;else e:switch(e){case x:return Ds(t.children,o,a,n);case C:i=8,o|=8;break;case S:return(e=Ts(12,t,n,2|o)).elementType=S,e.lanes=a,e;case U:return(e=Ts(13,t,n,o)).elementType=U,e.lanes=a,e;case P:return(e=Ts(19,t,n,o)).elementType=P,e.lanes=a,e;case I:return zs(t,o,a,n);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case E:i=10;break e;case F:i=9;break e;case B:i=11;break e;case _:i=14;break e;case T:i=16,r=null;break e}throw Error(l(130,null==e?e:typeof e,""))}return(n=Ts(i,t,n,o)).elementType=e,n.type=r,n.lanes=a,n}function Ds(e,n,t,r){return(e=Ts(7,e,r,n)).lanes=t,e}function zs(e,n,t,r){return(e=Ts(22,e,r,n)).elementType=I,e.lanes=t,e.stateNode={isHidden:!1},e}function Ns(e,n,t){return(e=Ts(6,e,null,n)).lanes=t,e}function Rs(e,n,t){return(n=Ts(4,null!==e.children?e.children:[],e.key,n)).lanes=t,n.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},n}function Ms(e,n,t,r,o){this.tag=n,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=yn(0),this.expirationTimes=yn(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=yn(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function js(e,n,t,r,o,l,a,i,u){return e=new Ms(e,n,t,i,u),1===n?(n=1,!0===l&&(n|=8)):n=0,l=Ts(3,null,null,n),e.current=l,l.stateNode=e,l.memoizedState={element:r,isDehydrated:t,cache:null,transitions:null,pendingSuspenseBoundaries:null},Tl(l),e}function $s(e){if(!e)return Bo;e:{if($e(e=e._reactInternals)!==e||1!==e.tag)throw Error(l(170));var n=e;do{switch(n.tag){case 3:n=n.stateNode.context;break e;case 1:if(Io(n.type)){n=n.stateNode.__reactInternalMemoizedMergedChildContext;break e}}n=n.return}while(null!==n);throw Error(l(171))}if(1===e.tag){var t=e.type;if(Io(t))return Do(e,t,n)}return n}function Hs(e,n,t,r,o,l,a,i,u){return(e=js(t,r,!0,e,0,l,0,i,u)).context=$s(null),t=e.current,(l=Ol(r=ns(),o=ts(t))).callback=null!=n?n:null,Ll(t,l,o),e.current.lanes=o,vn(e,o,r),os(e,r),e}function Vs(e,n,t,r){var o=n.current,l=ns(),a=ts(o);return t=$s(t),null===n.context?n.context=t:n.pendingContext=t,(n=Ol(l,a)).payload={element:e},null!==(r=void 0===r?null:r)&&(n.callback=r),null!==(e=Ll(o,n,a))&&(rs(e,o,a,l),Dl(e,o,a)),a}function qs(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Ws(e,n){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var t=e.retryLane;e.retryLane=0!==t&&t<n?t:n}}function Qs(e,n){Ws(e,n),(e=e.alternate)&&Ws(e,n)}Cu=function(e,n,t){if(null!==e)if(e.memoizedProps!==n.pendingProps||Po.current)wi=!0;else{if(0==(e.lanes&t)&&0==(128&n.flags))return wi=!1,function(e,n,t){switch(n.tag){case 3:Pi(n),hl();break;case 5:aa(n);break;case 1:Io(n.type)&&zo(n);break;case 4:oa(n,n.stateNode.containerInfo);break;case 10:var r=n.type._context,o=n.memoizedProps.value;Fo(vl,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=n.memoizedState))return null!==r.dehydrated?(Fo(ua,1&ua.current),n.flags|=128,null):0!=(t&n.child.childLanes)?Ni(e,n,t):(Fo(ua,1&ua.current),null!==(e=qi(e,n,t))?e.sibling:null);Fo(ua,1&ua.current);break;case 19:if(r=0!=(t&n.childLanes),0!=(128&e.flags)){if(r)return Hi(e,n,t);n.flags|=128}if(null!==(o=n.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),Fo(ua,ua.current),r)break;return null;case 22:case 23:return n.lanes=0,Si(e,n,t)}return qi(e,n,t)}(e,n,t);wi=0!=(131072&e.flags)}else wi=!1,ll&&0!=(1048576&n.flags)&&el(n,Qo,n.index);switch(n.lanes=0,n.tag){case 2:var r=n.type;Vi(e,n),e=n.pendingProps;var o=To(n,Uo.current);Sl(n,t),o=Ca(null,n,r,e,o,t);var a=Sa();return n.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(n.tag=1,n.memoizedState=null,n.updateQueue=null,Io(r)?(a=!0,zo(n)):a=!1,n.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,Tl(n),o.updater=$l,n.stateNode=o,o._reactInternals=n,Wl(n,r,e,t),n=Ui(null,n,r,!0,a,t)):(n.tag=0,ll&&a&&nl(n),ki(null,n,o,t),n=n.child),n;case 16:r=n.elementType;e:{switch(Vi(e,n),e=n.pendingProps,r=(o=r._init)(r._payload),n.type=r,o=n.tag=function(e){if("function"==typeof e)return Is(e)?1:0;if(null!=e){if((e=e.$$typeof)===B)return 11;if(e===_)return 14}return 2}(r),e=yl(r,e),o){case 0:n=Fi(null,n,r,e,t);break e;case 1:n=Bi(null,n,r,e,t);break e;case 11:n=Ai(null,n,r,e,t);break e;case 14:n=xi(null,n,r,yl(r.type,e),t);break e}throw Error(l(306,r,""))}return n;case 0:return r=n.type,o=n.pendingProps,Fi(e,n,r,o=n.elementType===r?o:yl(r,o),t);case 1:return r=n.type,o=n.pendingProps,Bi(e,n,r,o=n.elementType===r?o:yl(r,o),t);case 3:e:{if(Pi(n),null===e)throw Error(l(387));r=n.pendingProps,o=(a=n.memoizedState).element,Il(e,n),Nl(n,r,null,t);var i=n.memoizedState;if(r=i.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:i.cache,pendingSuspenseBoundaries:i.pendingSuspenseBoundaries,transitions:i.transitions},n.updateQueue.baseState=a,n.memoizedState=a,256&n.flags){n=_i(e,n,r,t,o=ci(Error(l(423)),n));break e}if(r!==o){n=_i(e,n,r,t,o=ci(Error(l(424)),n));break e}for(ol=so(n.stateNode.containerInfo.firstChild),rl=n,ll=!0,al=null,t=Zl(n,null,r,t),n.child=t;t;)t.flags=-3&t.flags|4096,t=t.sibling}else{if(hl(),r===o){n=qi(e,n,t);break e}ki(e,n,r,t)}n=n.child}return n;case 5:return aa(n),null===e&&cl(n),r=n.type,o=n.pendingProps,a=null!==e?e.memoizedProps:null,i=o.children,to(r,o)?i=null:null!==a&&to(r,a)&&(n.flags|=32),Ei(e,n),ki(e,n,i,t),n.child;case 6:return null===e&&cl(n),null;case 13:return Ni(e,n,t);case 4:return oa(n,n.stateNode.containerInfo),r=n.pendingProps,null===e?n.child=Xl(n,null,r,t):ki(e,n,r,t),n.child;case 11:return r=n.type,o=n.pendingProps,Ai(e,n,r,o=n.elementType===r?o:yl(r,o),t);case 7:return ki(e,n,n.pendingProps,t),n.child;case 8:case 12:return ki(e,n,n.pendingProps.children,t),n.child;case 10:e:{if(r=n.type._context,o=n.pendingProps,a=n.memoizedProps,i=o.value,Fo(vl,r._currentValue),r._currentValue=i,null!==a)if(ir(a.value,i)){if(a.children===o.children&&!Po.current){n=qi(e,n,t);break e}}else for(null!==(a=n.child)&&(a.return=n);null!==a;){var u=a.dependencies;if(null!==u){i=a.child;for(var s=u.firstContext;null!==s;){if(s.context===r){if(1===a.tag){(s=Ol(-1,t&-t)).tag=2;var c=a.updateQueue;if(null!==c){var f=(c=c.shared).pending;null===f?s.next=s:(s.next=f.next,f.next=s),c.pending=s}}a.lanes|=t,null!==(s=a.alternate)&&(s.lanes|=t),Cl(a.return,t,n),u.lanes|=t;break}s=s.next}}else if(10===a.tag)i=a.type===n.type?null:a.child;else if(18===a.tag){if(null===(i=a.return))throw Error(l(341));i.lanes|=t,null!==(u=i.alternate)&&(u.lanes|=t),Cl(i,t,n),i=a.sibling}else i=a.child;if(null!==i)i.return=a;else for(i=a;null!==i;){if(i===n){i=null;break}if(null!==(a=i.sibling)){a.return=i.return,i=a;break}i=i.return}a=i}ki(e,n,o.children,t),n=n.child}return n;case 9:return o=n.type,r=n.pendingProps.children,Sl(n,t),r=r(o=El(o)),n.flags|=1,ki(e,n,r,t),n.child;case 14:return o=yl(r=n.type,n.pendingProps),xi(e,n,r,o=yl(r.type,o),t);case 15:return Ci(e,n,n.type,n.pendingProps,t);case 17:return r=n.type,o=n.pendingProps,o=n.elementType===r?o:yl(r,o),Vi(e,n),n.tag=1,Io(r)?(e=!0,zo(n)):e=!1,Sl(n,t),Vl(n,r,o),Wl(n,r,o,t),Ui(null,n,r,!0,e,t);case 19:return Hi(e,n,t);case 22:return Si(e,n,t)}throw Error(l(156,n.tag))};var Ks="function"==typeof reportError?reportError:function(e){console.error(e)};function Ys(e){this._internalRoot=e}function Gs(e){this._internalRoot=e}function Xs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Zs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Js(){}function ec(e,n,t,r,o){var l=t._reactRootContainer;if(l){var a=l;if("function"==typeof o){var i=o;o=function(){var e=qs(a);i.call(e)}}Vs(n,a,e,o)}else a=function(e,n,t,r,o){if(o){if("function"==typeof r){var l=r;r=function(){var e=qs(a);l.call(e)}}var a=Hs(n,r,e,0,null,!1,0,"",Js);return e._reactRootContainer=a,e[mo]=a.current,$r(8===e.nodeType?e.parentNode:e),fs(),a}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var i=r;r=function(){var e=qs(u);i.call(e)}}var u=js(e,0,!1,null,0,!1,0,"",Js);return e._reactRootContainer=u,e[mo]=u.current,$r(8===e.nodeType?e.parentNode:e),fs((function(){Vs(n,u,t,r)})),u}(t,n,e,o,r);return qs(a)}Gs.prototype.render=Ys.prototype.render=function(e){var n=this._internalRoot;if(null===n)throw Error(l(409));Vs(e,n,null,null)},Gs.prototype.unmount=Ys.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var n=e.containerInfo;fs((function(){Vs(null,e,null,null)})),n[mo]=null}},Gs.prototype.unstable_scheduleHydration=function(e){if(e){var n=Sn();e={blockedOn:null,target:e,priority:n};for(var t=0;t<On.length&&0!==n&&n<On[t].priority;t++);On.splice(t,0,e),0===t&&Nn(e)}},An=function(e){switch(e.tag){case 3:var n=e.stateNode;if(n.current.memoizedState.isDehydrated){var t=dn(n.pendingLanes);0!==t&&(bn(n,1|t),os(n,Xe()),0==(6&Uu)&&(Hu=Xe()+500,Ho()))}break;case 13:fs((function(){var n=Pl(e,1);if(null!==n){var t=ns();rs(n,e,1,t)}})),Qs(e,1)}},xn=function(e){if(13===e.tag){var n=Pl(e,134217728);null!==n&&rs(n,e,134217728,ns()),Qs(e,134217728)}},Cn=function(e){if(13===e.tag){var n=ts(e),t=Pl(e,n);null!==t&&rs(t,e,n,ns()),Qs(e,n)}},Sn=function(){return wn},En=function(e,n){var t=wn;try{return wn=e,n()}finally{wn=t}},Ae=function(e,n,t){switch(n){case"input":if(Z(e,t),n=t.name,"radio"===t.type&&null!=n){for(t=e;t.parentNode;)t=t.parentNode;for(t=t.querySelectorAll("input[name="+JSON.stringify(""+n)+'][type="radio"]'),n=0;n<t.length;n++){var r=t[n];if(r!==e&&r.form===e.form){var o=Ao(r);if(!o)throw Error(l(90));Q(r),Z(r,o)}}}break;case"textarea":le(e,t);break;case"select":null!=(n=t.value)&&te(e,!!t.multiple,n,!1)}},Be=cs,Ue=fs;var nc={usingClientEntryPoint:!1,Events:[wo,ko,Ao,Ee,Fe,cs]},tc={findFiberByHostInstance:bo,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rc={bundleType:tc.bundleType,version:tc.version,rendererPackageName:tc.rendererPackageName,rendererConfig:tc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=qe(e))?null:e.stateNode},findFiberByHostInstance:tc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var oc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!oc.isDisabled&&oc.supportsFiber)try{on=oc.inject(rc),ln=oc}catch(ce){}}n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=nc,n.createPortal=function(e,n){var t=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xs(n))throw Error(l(200));return function(e,n,t){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:A,key:null==r?null:""+r,children:e,containerInfo:n,implementation:t}}(e,n,null,t)},n.createRoot=function(e,n){if(!Xs(e))throw Error(l(299));var t=!1,r="",o=Ks;return null!=n&&(!0===n.unstable_strictMode&&(t=!0),void 0!==n.identifierPrefix&&(r=n.identifierPrefix),void 0!==n.onRecoverableError&&(o=n.onRecoverableError)),n=js(e,1,!1,null,0,t,0,r,o),e[mo]=n.current,$r(8===e.nodeType?e.parentNode:e),new Ys(n)},n.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var n=e._reactInternals;if(void 0===n){if("function"==typeof e.render)throw Error(l(188));throw e=Object.keys(e).join(","),Error(l(268,e))}return null===(e=qe(n))?null:e.stateNode},n.flushSync=function(e){return fs(e)},n.hydrate=function(e,n,t){if(!Zs(n))throw Error(l(200));return ec(null,e,n,!0,t)},n.hydrateRoot=function(e,n,t){if(!Xs(e))throw Error(l(405));var r=null!=t&&t.hydratedSources||null,o=!1,a="",i=Ks;if(null!=t&&(!0===t.unstable_strictMode&&(o=!0),void 0!==t.identifierPrefix&&(a=t.identifierPrefix),void 0!==t.onRecoverableError&&(i=t.onRecoverableError)),n=Hs(n,null,e,1,null!=t?t:null,o,0,a,i),e[mo]=n.current,$r(e),r)for(e=0;e<r.length;e++)o=(o=(t=r[e])._getVersion)(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o);return new Gs(n)},n.render=function(e,n,t){if(!Zs(n))throw Error(l(200));return ec(null,e,n,!1,t)},n.unmountComponentAtNode=function(e){if(!Zs(e))throw Error(l(40));return!!e._reactRootContainer&&(fs((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[mo]=null}))})),!0)},n.unstable_batchedUpdates=cs,n.unstable_renderSubtreeIntoContainer=function(e,n,t,r){if(!Zs(t))throw Error(l(200));if(null==e||void 0===e._reactInternals)throw Error(l(38));return ec(e,n,t,!1,r)},n.version="18.2.0-next-9e3b772b8-20220608"},3935:(e,n,t)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=t(4448)},1471:(e,n)=>{"use strict";var t,r=Symbol.for("react.element"),o=Symbol.for("react.portal"),l=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),u=Symbol.for("react.provider"),s=Symbol.for("react.context"),c=Symbol.for("react.server_context"),f=Symbol.for("react.forward_ref"),d=Symbol.for("react.suspense"),p=Symbol.for("react.suspense_list"),h=Symbol.for("react.memo"),m=Symbol.for("react.lazy"),g=Symbol.for("react.offscreen");function y(e){if("object"==typeof e&&null!==e){var n=e.$$typeof;switch(n){case r:switch(e=e.type){case l:case i:case a:case d:case p:return e;default:switch(e=e&&e.$$typeof){case c:case s:case f:case m:case h:case u:return e;default:return n}}case o:return n}}}t=Symbol.for("react.module.reference"),n.ContextConsumer=s,n.ContextProvider=u,n.Element=r,n.ForwardRef=f,n.Fragment=l,n.Lazy=m,n.Memo=h,n.Portal=o,n.Profiler=i,n.StrictMode=a,n.Suspense=d,n.SuspenseList=p,n.isAsyncMode=function(){return!1},n.isConcurrentMode=function(){return!1},n.isContextConsumer=function(e){return y(e)===s},n.isContextProvider=function(e){return y(e)===u},n.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},n.isForwardRef=function(e){return y(e)===f},n.isFragment=function(e){return y(e)===l},n.isLazy=function(e){return y(e)===m},n.isMemo=function(e){return y(e)===h},n.isPortal=function(e){return y(e)===o},n.isProfiler=function(e){return y(e)===i},n.isStrictMode=function(e){return y(e)===a},n.isSuspense=function(e){return y(e)===d},n.isSuspenseList=function(e){return y(e)===p},n.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===l||e===i||e===a||e===d||e===p||e===g||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===h||e.$$typeof===u||e.$$typeof===s||e.$$typeof===f||e.$$typeof===t||void 0!==e.getModuleId)},n.typeOf=y},2143:(e,n,t)=>{"use strict";e.exports=t(1471)},2408:(e,n)=>{"use strict";var t=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),l=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),i=Symbol.for("react.provider"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,g={};function y(e,n,t){this.props=e,this.context=n,this.refs=g,this.updater=t||h}function v(){}function b(e,n,t){this.props=e,this.context=n,this.refs=g,this.updater=t||h}y.prototype.isReactComponent={},y.prototype.setState=function(e,n){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,n,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=y.prototype;var w=b.prototype=new v;w.constructor=b,m(w,y.prototype),w.isPureReactComponent=!0;var k=Array.isArray,A=Object.prototype.hasOwnProperty,x={current:null},C={key:!0,ref:!0,__self:!0,__source:!0};function S(e,n,r){var o,l={},a=null,i=null;if(null!=n)for(o in void 0!==n.ref&&(i=n.ref),void 0!==n.key&&(a=""+n.key),n)A.call(n,o)&&!C.hasOwnProperty(o)&&(l[o]=n[o]);var u=arguments.length-2;if(1===u)l.children=r;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];l.children=s}if(e&&e.defaultProps)for(o in u=e.defaultProps)void 0===l[o]&&(l[o]=u[o]);return{$$typeof:t,type:e,key:a,ref:i,props:l,_owner:x.current}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===t}var F=/\/+/g;function B(e,n){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var n={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return n[e]}))}(""+e.key):n.toString(36)}function U(e,n,o,l,a){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var u=!1;if(null===e)u=!0;else switch(i){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case t:case r:u=!0}}if(u)return a=a(u=e),e=""===l?"."+B(u,0):l,k(a)?(o="",null!=e&&(o=e.replace(F,"$&/")+"/"),U(a,n,o,"",(function(e){return e}))):null!=a&&(E(a)&&(a=function(e,n){return{$$typeof:t,type:e.type,key:n,ref:e.ref,props:e.props,_owner:e._owner}}(a,o+(!a.key||u&&u.key===a.key?"":(""+a.key).replace(F,"$&/")+"/")+e)),n.push(a)),1;if(u=0,l=""===l?".":l+":",k(e))for(var s=0;s<e.length;s++){var c=l+B(i=e[s],s);u+=U(i,n,o,c,a)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(i=e.next()).done;)u+=U(i=i.value,n,o,c=l+B(i,s++),a);else if("object"===i)throw n=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n)+"). If you meant to render a collection of children, use an array instead.");return u}function P(e,n,t){if(null==e)return e;var r=[],o=0;return U(e,r,"","",(function(e){return n.call(t,e,o++)})),r}function _(e){if(-1===e._status){var n=e._result;(n=n()).then((function(n){0!==e._status&&-1!==e._status||(e._status=1,e._result=n)}),(function(n){0!==e._status&&-1!==e._status||(e._status=2,e._result=n)})),-1===e._status&&(e._status=0,e._result=n)}if(1===e._status)return e._result.default;throw e._result}var T={current:null},I={transition:null},O={ReactCurrentDispatcher:T,ReactCurrentBatchConfig:I,ReactCurrentOwner:x};n.Children={map:P,forEach:function(e,n,t){P(e,(function(){n.apply(this,arguments)}),t)},count:function(e){var n=0;return P(e,(function(){n++})),n},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},n.Component=y,n.Fragment=o,n.Profiler=a,n.PureComponent=b,n.StrictMode=l,n.Suspense=c,n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=O,n.cloneElement=function(e,n,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=m({},e.props),l=e.key,a=e.ref,i=e._owner;if(null!=n){if(void 0!==n.ref&&(a=n.ref,i=x.current),void 0!==n.key&&(l=""+n.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(s in n)A.call(n,s)&&!C.hasOwnProperty(s)&&(o[s]=void 0===n[s]&&void 0!==u?u[s]:n[s])}var s=arguments.length-2;if(1===s)o.children=r;else if(1<s){u=Array(s);for(var c=0;c<s;c++)u[c]=arguments[c+2];o.children=u}return{$$typeof:t,type:e.type,key:l,ref:a,props:o,_owner:i}},n.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},n.createElement=S,n.createFactory=function(e){var n=S.bind(null,e);return n.type=e,n},n.createRef=function(){return{current:null}},n.forwardRef=function(e){return{$$typeof:s,render:e}},n.isValidElement=E,n.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:_}},n.memo=function(e,n){return{$$typeof:f,type:e,compare:void 0===n?null:n}},n.startTransition=function(e){var n=I.transition;I.transition={};try{e()}finally{I.transition=n}},n.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},n.useCallback=function(e,n){return T.current.useCallback(e,n)},n.useContext=function(e){return T.current.useContext(e)},n.useDebugValue=function(){},n.useDeferredValue=function(e){return T.current.useDeferredValue(e)},n.useEffect=function(e,n){return T.current.useEffect(e,n)},n.useId=function(){return T.current.useId()},n.useImperativeHandle=function(e,n,t){return T.current.useImperativeHandle(e,n,t)},n.useInsertionEffect=function(e,n){return T.current.useInsertionEffect(e,n)},n.useLayoutEffect=function(e,n){return T.current.useLayoutEffect(e,n)},n.useMemo=function(e,n){return T.current.useMemo(e,n)},n.useReducer=function(e,n,t){return T.current.useReducer(e,n,t)},n.useRef=function(e){return T.current.useRef(e)},n.useState=function(e){return T.current.useState(e)},n.useSyncExternalStore=function(e,n,t){return T.current.useSyncExternalStore(e,n,t)},n.useTransition=function(){return T.current.useTransition()},n.version="18.2.0"},7294:(e,n,t)=>{"use strict";e.exports=t(2408)},53:(e,n)=>{"use strict";function t(e,n){var t=e.length;e.push(n);e:for(;0<t;){var r=t-1>>>1,o=e[r];if(!(0<l(o,n)))break e;e[r]=n,e[t]=o,t=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var n=e[0],t=e.pop();if(t!==n){e[0]=t;e:for(var r=0,o=e.length,a=o>>>1;r<a;){var i=2*(r+1)-1,u=e[i],s=i+1,c=e[s];if(0>l(u,t))s<o&&0>l(c,u)?(e[r]=c,e[s]=t,r=s):(e[r]=u,e[i]=t,r=i);else{if(!(s<o&&0>l(c,t)))break e;e[r]=c,e[s]=t,r=s}}}return n}function l(e,n){var t=e.sortIndex-n.sortIndex;return 0!==t?t:e.id-n.id}if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;n.unstable_now=function(){return a.now()}}else{var i=Date,u=i.now();n.unstable_now=function(){return i.now()-u}}var s=[],c=[],f=1,d=null,p=3,h=!1,m=!1,g=!1,y="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var n=r(c);null!==n;){if(null===n.callback)o(c);else{if(!(n.startTime<=e))break;o(c),n.sortIndex=n.expirationTime,t(s,n)}n=r(c)}}function k(e){if(g=!1,w(e),!m)if(null!==r(s))m=!0,I(A);else{var n=r(c);null!==n&&O(k,n.startTime-e)}}function A(e,t){m=!1,g&&(g=!1,v(E),E=-1),h=!0;var l=p;try{for(w(t),d=r(s);null!==d&&(!(d.expirationTime>t)||e&&!U());){var a=d.callback;if("function"==typeof a){d.callback=null,p=d.priorityLevel;var i=a(d.expirationTime<=t);t=n.unstable_now(),"function"==typeof i?d.callback=i:d===r(s)&&o(s),w(t)}else o(s);d=r(s)}if(null!==d)var u=!0;else{var f=r(c);null!==f&&O(k,f.startTime-t),u=!1}return u}finally{d=null,p=l,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var x,C=!1,S=null,E=-1,F=5,B=-1;function U(){return!(n.unstable_now()-B<F)}function P(){if(null!==S){var e=n.unstable_now();B=e;var t=!0;try{t=S(!0,e)}finally{t?x():(C=!1,S=null)}}else C=!1}if("function"==typeof b)x=function(){b(P)};else if("undefined"!=typeof MessageChannel){var _=new MessageChannel,T=_.port2;_.port1.onmessage=P,x=function(){T.postMessage(null)}}else x=function(){y(P,0)};function I(e){S=e,C||(C=!0,x())}function O(e,t){E=y((function(){e(n.unstable_now())}),t)}n.unstable_IdlePriority=5,n.unstable_ImmediatePriority=1,n.unstable_LowPriority=4,n.unstable_NormalPriority=3,n.unstable_Profiling=null,n.unstable_UserBlockingPriority=2,n.unstable_cancelCallback=function(e){e.callback=null},n.unstable_continueExecution=function(){m||h||(m=!0,I(A))},n.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):F=0<e?Math.floor(1e3/e):5},n.unstable_getCurrentPriorityLevel=function(){return p},n.unstable_getFirstCallbackNode=function(){return r(s)},n.unstable_next=function(e){switch(p){case 1:case 2:case 3:var n=3;break;default:n=p}var t=p;p=n;try{return e()}finally{p=t}},n.unstable_pauseExecution=function(){},n.unstable_requestPaint=function(){},n.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var t=p;p=e;try{return n()}finally{p=t}},n.unstable_scheduleCallback=function(e,o,l){var a=n.unstable_now();switch(l="object"==typeof l&&null!==l&&"number"==typeof(l=l.delay)&&0<l?a+l:a,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return e={id:f++,callback:o,priorityLevel:e,startTime:l,expirationTime:i=l+i,sortIndex:-1},l>a?(e.sortIndex=l,t(c,e),null===r(s)&&e===r(c)&&(g?(v(E),E=-1):g=!0,O(k,l-a))):(e.sortIndex=i,t(s,e),m||h||(m=!0,I(A))),e},n.unstable_shouldYield=U,n.unstable_wrapCallback=function(e){var n=p;return function(){var t=p;p=n;try{return e.apply(this,arguments)}finally{p=t}}}},3840:(e,n,t)=>{"use strict";e.exports=t(53)},6774:e=>{e.exports=function(e,n,t,r){var o=t?t.call(r,e,n):void 0;if(void 0!==o)return!!o;if(e===n)return!0;if("object"!=typeof e||!e||"object"!=typeof n||!n)return!1;var l=Object.keys(e),a=Object.keys(n);if(l.length!==a.length)return!1;for(var i=Object.prototype.hasOwnProperty.bind(n),u=0;u<l.length;u++){var s=l[u];if(!i(s))return!1;var c=e[s],f=n[s];if(!1===(o=t?t.call(r,c,f,s):void 0)||void 0===o&&c!==f)return!1}return!0}},7300:(e,n,t)=>{"use strict";var r=t(3379),o=t.n(r),l=t(7795),a=t.n(l),i=t(569),u=t.n(i),s=t(3565),c=t.n(s),f=t(9216),d=t.n(f),p=t(4589),h=t.n(p),m=t(3634),g={};g.styleTagTransform=h(),g.setAttributes=c(),g.insert=u().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d(),o()(m.Z,g),m.Z&&m.Z.locals&&m.Z.locals},9612:(e,n,t)=>{"use strict";var r=t(3379),o=t.n(r),l=t(7795),a=t.n(l),i=t(569),u=t.n(i),s=t(3565),c=t.n(s),f=t(9216),d=t.n(f),p=t(4589),h=t.n(p),m=t(6811),g={};g.styleTagTransform=h(),g.setAttributes=c(),g.insert=u().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d(),o()(m.Z,g),m.Z&&m.Z.locals&&m.Z.locals},3379:e=>{"use strict";var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var l={},a=[],i=0;i<e.length;i++){var u=e[i],s=r.base?u[0]+r.base:u[0],c=l[s]||0,f="".concat(s," ").concat(c);l[s]=c+1;var d=t(f),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==d)n[d].references++,n[d].updater(p);else{var h=o(p,r);r.byIndex=i,n.splice(i,0,{identifier:f,updater:h,references:1})}a.push(f)}return a}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var l=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<l.length;a++){var i=t(l[a]);n[i].references--}for(var u=r(e,o),s=0;s<l.length;s++){var c=t(l[s]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}l=u}}},569:e=>{"use strict";var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},9216:e=>{"use strict";e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},3565:(e,n,t)=>{"use strict";e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},7795:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var l=t.sourceMap;l&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(l))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},4589:e=>{"use strict";e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},7848:(e,n,t)=>{var r=t(8139);function o(e,n){var t,o=null;if(!e||"string"!=typeof e)return o;for(var l,a,i=r(e),u="function"==typeof n,s=0,c=i.length;s<c;s++)l=(t=i[s]).property,a=t.value,u?n(l,a,t):a&&(o||(o={}),o[l]=a);return o}e.exports=o,e.exports.default=o},5086:(e,n,t)=>{"use strict";t.d(n,{vJ:()=>Vn,ZP:()=>$n});var r=function(){return r=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var o in n=arguments[t])Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o]);return e},r.apply(this,arguments)};function o(e,n,t){if(t||2===arguments.length)for(var r,o=0,l=n.length;o<l;o++)!r&&o in n||(r||(r=Array.prototype.slice.call(n,0,o)),r[o]=n[o]);return e.concat(r||Array.prototype.slice.call(n))}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var l=t(7294),a=t(6774),i=t.n(a),u="-ms-",s="-moz-",c="-webkit-",f="comm",d="rule",p="decl",h="@import",m="@keyframes",g="@layer",y=Math.abs,v=String.fromCharCode,b=Object.assign;function w(e){return e.trim()}function k(e,n){return(e=n.exec(e))?e[0]:e}function A(e,n,t){return e.replace(n,t)}function x(e,n){return e.indexOf(n)}function C(e,n){return 0|e.charCodeAt(n)}function S(e,n,t){return e.slice(n,t)}function E(e){return e.length}function F(e){return e.length}function B(e,n){return n.push(e),e}function U(e,n){return e.filter((function(e){return!k(e,n)}))}var P=1,_=1,T=0,I=0,O=0,L="";function D(e,n,t,r,o,l,a,i){return{value:e,root:n,parent:t,type:r,props:o,children:l,line:P,column:_,length:a,return:"",siblings:i}}function z(e,n){return b(D("",null,null,"",null,null,0,e.siblings),e,{length:-e.length},n)}function N(e){for(;e.root;)e=z(e.root,{children:[e]});B(e,e.siblings)}function R(){return O=I>0?C(L,--I):0,_--,10===O&&(_=1,P--),O}function M(){return O=I<T?C(L,I++):0,_++,10===O&&(_=1,P++),O}function j(){return C(L,I)}function $(){return I}function H(e,n){return S(L,e,n)}function V(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function q(e){return w(H(I-1,K(91===e?e+2:40===e?e+1:e)))}function W(e){for(;(O=j())&&O<33;)M();return V(e)>2||V(O)>3?"":" "}function Q(e,n){for(;--n&&M()&&!(O<48||O>102||O>57&&O<65||O>70&&O<97););return H(e,$()+(n<6&&32==j()&&32==M()))}function K(e){for(;M();)switch(O){case e:return I;case 34:case 39:34!==e&&39!==e&&K(O);break;case 40:41===e&&K(e);break;case 92:M()}return I}function Y(e,n){for(;M()&&e+O!==57&&(e+O!==84||47!==j()););return"/*"+H(n,I-1)+"*"+v(47===e?e:M())}function G(e){for(;!V(j());)M();return H(e,I)}function X(e,n){for(var t="",r=0;r<e.length;r++)t+=n(e[r],r,e,n)||"";return t}function Z(e,n,t,r){switch(e.type){case g:if(e.children.length)break;case h:case p:return e.return=e.return||e.value;case f:return"";case m:return e.return=e.value+"{"+X(e.children,r)+"}";case d:if(!E(e.value=e.props.join(",")))return""}return E(t=X(e.children,r))?e.return=e.value+"{"+t+"}":""}function J(e,n,t){switch(function(e,n){return 45^C(e,0)?(((n<<2^C(e,0))<<2^C(e,1))<<2^C(e,2))<<2^C(e,3):0}(e,n)){case 5103:return c+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return c+e+e;case 4789:return s+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return c+e+s+e+u+e+e;case 5936:switch(C(e,n+11)){case 114:return c+e+u+A(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return c+e+u+A(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return c+e+u+A(e,/[svh]\w+-[tblr]{2}/,"lr")+e}case 6828:case 4268:case 2903:return c+e+u+e+e;case 6165:return c+e+u+"flex-"+e+e;case 5187:return c+e+A(e,/(\w+).+(:[^]+)/,c+"box-$1$2"+u+"flex-$1$2")+e;case 5443:return c+e+u+"flex-item-"+A(e,/flex-|-self/g,"")+(k(e,/flex-|baseline/)?"":u+"grid-row-"+A(e,/flex-|-self/g,""))+e;case 4675:return c+e+u+"flex-line-pack"+A(e,/align-content|flex-|-self/g,"")+e;case 5548:return c+e+u+A(e,"shrink","negative")+e;case 5292:return c+e+u+A(e,"basis","preferred-size")+e;case 6060:return c+"box-"+A(e,"-grow","")+c+e+u+A(e,"grow","positive")+e;case 4554:return c+A(e,/([^-])(transform)/g,"$1"+c+"$2")+e;case 6187:return A(A(A(e,/(zoom-|grab)/,c+"$1"),/(image-set)/,c+"$1"),e,"")+e;case 5495:case 3959:return A(e,/(image-set\([^]*)/,c+"$1$`$1");case 4968:return A(A(e,/(.+:)(flex-)?(.*)/,c+"box-pack:$3"+u+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+c+e+e;case 4200:if(!k(e,/flex-|baseline/))return u+"grid-column-align"+S(e,n)+e;break;case 2592:case 3360:return u+A(e,"template-","")+e;case 4384:case 3616:return t&&t.some((function(e,t){return n=t,k(e.props,/grid-\w+-end/)}))?~x(e+(t=t[n].value),"span")?e:u+A(e,"-start","")+e+u+"grid-row-span:"+(~x(t,"span")?k(t,/\d+/):+k(t,/\d+/)-+k(e,/\d+/))+";":u+A(e,"-start","")+e;case 4896:case 4128:return t&&t.some((function(e){return k(e.props,/grid-\w+-start/)}))?e:u+A(A(e,"-end","-span"),"span ","")+e;case 4095:case 3583:case 4068:case 2532:return A(e,/(.+)-inline(.+)/,c+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(E(e)-1-n>6)switch(C(e,n+1)){case 109:if(45!==C(e,n+4))break;case 102:return A(e,/(.+:)(.+)-([^]+)/,"$1"+c+"$2-$3$1"+s+(108==C(e,n+3)?"$3":"$2-$3"))+e;case 115:return~x(e,"stretch")?J(A(e,"stretch","fill-available"),n,t)+e:e}break;case 5152:case 5920:return A(e,/(.+?):(\d+)(\s*\/\s*(span)?\s*(\d+))?(.*)/,(function(n,t,r,o,l,a,i){return u+t+":"+r+i+(o?u+t+"-span:"+(l?a:+a-+r)+i:"")+e}));case 4949:if(121===C(e,n+6))return A(e,":",":"+c)+e;break;case 6444:switch(C(e,45===C(e,14)?18:11)){case 120:return A(e,/(.+:)([^;\s!]+)(;|(\s+)?!.+)?/,"$1"+c+(45===C(e,14)?"inline-":"")+"box$3$1"+c+"$2$3$1"+u+"$2box$3")+e;case 100:return A(e,":",":"+u)+e}break;case 5719:case 2647:case 2135:case 3927:case 2391:return A(e,"scroll-","scroll-snap-")+e}return e}function ee(e,n,t,r){if(e.length>-1&&!e.return)switch(e.type){case p:return void(e.return=J(e.value,e.length,t));case m:return X([z(e,{value:A(e.value,"@","@"+c)})],r);case d:if(e.length)return function(e,n){return e.map(n).join("")}(t=e.props,(function(n){switch(k(n,r=/(::plac\w+|:read-\w+)/)){case":read-only":case":read-write":N(z(e,{props:[A(n,/:(read-\w+)/,":"+s+"$1")]})),N(z(e,{props:[n]})),b(e,{props:U(t,r)});break;case"::placeholder":N(z(e,{props:[A(n,/:(plac\w+)/,":"+c+"input-$1")]})),N(z(e,{props:[A(n,/:(plac\w+)/,":"+s+"$1")]})),N(z(e,{props:[A(n,/:(plac\w+)/,u+"input-$1")]})),N(z(e,{props:[n]})),b(e,{props:U(t,r)})}return""}))}}function ne(e){return function(e){return L="",e}(te("",null,null,null,[""],e=function(e){return P=_=1,T=E(L=e),I=0,[]}(e),0,[0],e))}function te(e,n,t,r,o,l,a,i,u){for(var s=0,c=0,f=a,d=0,p=0,h=0,m=1,g=1,y=1,b=0,w="",k=o,S=l,F=r,U=w;g;)switch(h=b,b=M()){case 40:if(108!=h&&58==C(U,f-1)){-1!=x(U+=A(q(b),"&","&\f"),"&\f")&&(y=-1);break}case 34:case 39:case 91:U+=q(b);break;case 9:case 10:case 13:case 32:U+=W(h);break;case 92:U+=Q($()-1,7);continue;case 47:switch(j()){case 42:case 47:B(oe(Y(M(),$()),n,t,u),u);break;default:U+="/"}break;case 123*m:i[s++]=E(U)*y;case 125*m:case 59:case 0:switch(b){case 0:case 125:g=0;case 59+c:-1==y&&(U=A(U,/\f/g,"")),p>0&&E(U)-f&&B(p>32?le(U+";",r,t,f-1,u):le(A(U," ","")+";",r,t,f-2,u),u);break;case 59:U+=";";default:if(B(F=re(U,n,t,s,c,o,i,w,k=[],S=[],f,l),l),123===b)if(0===c)te(U,n,F,F,k,l,f,i,S);else switch(99===d&&110===C(U,3)?100:d){case 100:case 108:case 109:case 115:te(e,F,F,r&&B(re(e,F,F,0,0,o,i,w,o,k=[],f,S),S),o,S,f,i,r?k:S);break;default:te(U,F,F,F,[""],S,0,i,S)}}s=c=p=0,m=y=1,w=U="",f=a;break;case 58:f=1+E(U),p=h;default:if(m<1)if(123==b)--m;else if(125==b&&0==m++&&125==R())continue;switch(U+=v(b),b*m){case 38:y=c>0?1:(U+="\f",-1);break;case 44:i[s++]=(E(U)-1)*y,y=1;break;case 64:45===j()&&(U+=q(M())),d=j(),c=f=E(w=U+=G($())),b++;break;case 45:45===h&&2==E(U)&&(m=0)}}return l}function re(e,n,t,r,o,l,a,i,u,s,c,f){for(var p=o-1,h=0===o?l:[""],m=F(h),g=0,v=0,b=0;g<r;++g)for(var k=0,x=S(e,p+1,p=y(v=a[g])),C=e;k<m;++k)(C=w(v>0?h[k]+" "+x:A(x,/&\f/g,h[k])))&&(u[b++]=C);return D(e,n,t,0===o?d:i,u,s,c,f)}function oe(e,n,t,r){return D(e,n,t,f,v(O),S(e,2,-2),0,r)}function le(e,n,t,r,o){return D(e,n,t,p,S(e,0,r),S(e,r+1,-1),r,o)}var ae={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},ie=t(4155),ue=void 0!==ie&&void 0!==ie.env&&(ie.env.REACT_APP_SC_ATTR||ie.env.SC_ATTR)||"data-styled",se="undefined"!=typeof window&&"HTMLElement"in window,ce=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:void 0!==ie&&void 0!==ie.env&&void 0!==ie.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==ie.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==ie.env.REACT_APP_SC_DISABLE_SPEEDY&&ie.env.REACT_APP_SC_DISABLE_SPEEDY:void 0!==ie&&void 0!==ie.env&&void 0!==ie.env.SC_DISABLE_SPEEDY&&""!==ie.env.SC_DISABLE_SPEEDY&&"false"!==ie.env.SC_DISABLE_SPEEDY&&ie.env.SC_DISABLE_SPEEDY),fe={},de=(new Set,Object.freeze([])),pe=Object.freeze({});function he(e,n,t){return void 0===t&&(t=pe),e.theme!==t.theme&&e.theme||n||t.theme}var me=new Set(["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","use","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"]),ge=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,ye=/(^-|-$)/g;function ve(e){return e.replace(ge,"-").replace(ye,"")}var be=/(a)(d)/gi,we=function(e){return String.fromCharCode(e+(e>25?39:97))};function ke(e){var n,t="";for(n=Math.abs(e);n>52;n=n/52|0)t=we(n%52)+t;return(we(n%52)+t).replace(be,"$1-$2")}var Ae,xe=function(e,n){for(var t=n.length;t;)e=33*e^n.charCodeAt(--t);return e},Ce=function(e){return xe(5381,e)};function Se(e){return ke(Ce(e)>>>0)}function Ee(e){return"string"==typeof e&&!0}var Fe="function"==typeof Symbol&&Symbol.for,Be=Fe?Symbol.for("react.memo"):60115,Ue=Fe?Symbol.for("react.forward_ref"):60112,Pe={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},_e={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},Te={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},Ie=((Ae={})[Ue]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},Ae[Be]=Te,Ae);function Oe(e){return("type"in(n=e)&&n.type.$$typeof)===Be?Te:"$$typeof"in e?Ie[e.$$typeof]:Pe;var n}var Le=Object.defineProperty,De=Object.getOwnPropertyNames,ze=Object.getOwnPropertySymbols,Ne=Object.getOwnPropertyDescriptor,Re=Object.getPrototypeOf,Me=Object.prototype;function je(e,n,t){if("string"!=typeof n){if(Me){var r=Re(n);r&&r!==Me&&je(e,r,t)}var o=De(n);ze&&(o=o.concat(ze(n)));for(var l=Oe(e),a=Oe(n),i=0;i<o.length;++i){var u=o[i];if(!(u in _e||t&&t[u]||a&&u in a||l&&u in l)){var s=Ne(n,u);try{Le(e,u,s)}catch(e){}}}}return e}function $e(e){return"function"==typeof e}function He(e){return"object"==typeof e&&"styledComponentId"in e}function Ve(e,n){return e&&n?"".concat(e," ").concat(n):e||n||""}function qe(e,n){if(0===e.length)return"";for(var t=e[0],r=1;r<e.length;r++)t+=n?n+e[r]:e[r];return t}function We(e){return null!==e&&"object"==typeof e&&e.constructor.name===Object.name&&!("props"in e&&e.$$typeof)}function Qe(e,n,t){if(void 0===t&&(t=!1),!t&&!We(e)&&!Array.isArray(e))return n;if(Array.isArray(n))for(var r=0;r<n.length;r++)e[r]=Qe(e[r],n[r]);else if(We(n))for(var r in n)e[r]=Qe(e[r],n[r]);return e}function Ke(e,n){Object.defineProperty(e,"toString",{value:n})}function Ye(e){for(var n=[],t=1;t<arguments.length;t++)n[t-1]=arguments[t];return new Error("An error occurred. See https://github.com/styled-components/styled-components/blob/main/packages/styled-components/src/utils/errors.md#".concat(e," for more information.").concat(n.length>0?" Args: ".concat(n.join(", ")):""))}var Ge=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}return e.prototype.indexOfGroup=function(e){for(var n=0,t=0;t<e;t++)n+=this.groupSizes[t];return n},e.prototype.insertRules=function(e,n){if(e>=this.groupSizes.length){for(var t=this.groupSizes,r=t.length,o=r;e>=o;)if((o<<=1)<0)throw Ye(16,"".concat(e));this.groupSizes=new Uint32Array(o),this.groupSizes.set(t),this.length=o;for(var l=r;l<o;l++)this.groupSizes[l]=0}for(var a=this.indexOfGroup(e+1),i=(l=0,n.length);l<i;l++)this.tag.insertRule(a,n[l])&&(this.groupSizes[e]++,a++)},e.prototype.clearGroup=function(e){if(e<this.length){var n=this.groupSizes[e],t=this.indexOfGroup(e),r=t+n;this.groupSizes[e]=0;for(var o=t;o<r;o++)this.tag.deleteRule(t)}},e.prototype.getGroup=function(e){var n="";if(e>=this.length||0===this.groupSizes[e])return n;for(var t=this.groupSizes[e],r=this.indexOfGroup(e),o=r+t,l=r;l<o;l++)n+="".concat(this.tag.getRule(l)).concat("/*!sc*/\n");return n},e}(),Xe=new Map,Ze=new Map,Je=1,en=function(e){if(Xe.has(e))return Xe.get(e);for(;Ze.has(Je);)Je++;var n=Je++;return Xe.set(e,n),Ze.set(n,e),n},nn=function(e,n){Xe.set(e,n),Ze.set(n,e)},tn="style[".concat(ue,"][").concat("data-styled-version",'="').concat("6.0.7",'"]'),rn=new RegExp("^".concat(ue,'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)')),on=function(e,n,t){for(var r,o=t.split(","),l=0,a=o.length;l<a;l++)(r=o[l])&&e.registerName(n,r)},ln=function(e,n){for(var t,r=(null!==(t=n.textContent)&&void 0!==t?t:"").split("/*!sc*/\n"),o=[],l=0,a=r.length;l<a;l++){var i=r[l].trim();if(i){var u=i.match(rn);if(u){var s=0|parseInt(u[1],10),c=u[2];0!==s&&(nn(c,s),on(e,c,u[3]),e.getTag().insertRules(s,o)),o.length=0}else o.push(i)}}};function an(){return t.nc}var un=function(e){var n=document.head,t=e||n,r=document.createElement("style"),o=function(e){var n=Array.from(e.querySelectorAll("style[".concat(ue,"]")));return n[n.length-1]}(t),l=void 0!==o?o.nextSibling:null;r.setAttribute(ue,"active"),r.setAttribute("data-styled-version","6.0.7");var a=an();return a&&r.setAttribute("nonce",a),t.insertBefore(r,l),r},sn=function(){function e(e){this.element=un(e),this.element.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var n=document.styleSheets,t=0,r=n.length;t<r;t++){var o=n[t];if(o.ownerNode===e)return o}throw Ye(17)}(this.element),this.length=0}return e.prototype.insertRule=function(e,n){try{return this.sheet.insertRule(n,e),this.length++,!0}catch(e){return!1}},e.prototype.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},e.prototype.getRule=function(e){var n=this.sheet.cssRules[e];return n&&n.cssText?n.cssText:""},e}(),cn=function(){function e(e){this.element=un(e),this.nodes=this.element.childNodes,this.length=0}return e.prototype.insertRule=function(e,n){if(e<=this.length&&e>=0){var t=document.createTextNode(n);return this.element.insertBefore(t,this.nodes[e]||null),this.length++,!0}return!1},e.prototype.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},e.prototype.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),fn=function(){function e(e){this.rules=[],this.length=0}return e.prototype.insertRule=function(e,n){return e<=this.length&&(this.rules.splice(e,0,n),this.length++,!0)},e.prototype.deleteRule=function(e){this.rules.splice(e,1),this.length--},e.prototype.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),dn=se,pn={isServer:!se,useCSSOMInjection:!ce},hn=function(){function e(e,n,t){void 0===e&&(e=pe),void 0===n&&(n={});var o=this;this.options=r(r({},pn),e),this.gs=n,this.names=new Map(t),this.server=!!e.isServer,!this.server&&se&&dn&&(dn=!1,function(e){for(var n=document.querySelectorAll(tn),t=0,r=n.length;t<r;t++){var o=n[t];o&&"active"!==o.getAttribute(ue)&&(ln(e,o),o.parentNode&&o.parentNode.removeChild(o))}}(this)),Ke(this,(function(){return function(e){for(var n=e.getTag(),t=n.length,r="",o=function(t){var o=function(e){return Ze.get(e)}(t);if(void 0===o)return"continue";var l=e.names.get(o),a=n.getGroup(t);if(void 0===l||0===a.length)return"continue";var i="".concat(ue,".g").concat(t,'[id="').concat(o,'"]'),u="";void 0!==l&&l.forEach((function(e){e.length>0&&(u+="".concat(e,","))})),r+="".concat(a).concat(i,'{content:"').concat(u,'"}').concat("/*!sc*/\n")},l=0;l<t;l++)o(l);return r}(o)}))}return e.registerId=function(e){return en(e)},e.prototype.reconstructWithOptions=function(n,t){return void 0===t&&(t=!0),new e(r(r({},this.options),n),this.gs,t&&this.names||void 0)},e.prototype.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},e.prototype.getTag=function(){return this.tag||(this.tag=(e=function(e){var n=e.useCSSOMInjection,t=e.target;return e.isServer?new fn(t):n?new sn(t):new cn(t)}(this.options),new Ge(e)));var e},e.prototype.hasNameForId=function(e,n){return this.names.has(e)&&this.names.get(e).has(n)},e.prototype.registerName=function(e,n){if(en(e),this.names.has(e))this.names.get(e).add(n);else{var t=new Set;t.add(n),this.names.set(e,t)}},e.prototype.insertRules=function(e,n,t){this.registerName(e,n),this.getTag().insertRules(en(e),t)},e.prototype.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},e.prototype.clearRules=function(e){this.getTag().clearGroup(en(e)),this.clearNames(e)},e.prototype.clearTag=function(){this.tag=void 0},e}(),mn=/&/g,gn=/^\s*\/\/.*$/gm;function yn(e,n){return e.map((function(e){return"rule"===e.type&&(e.value="".concat(n," ").concat(e.value),e.value=e.value.replaceAll(",",",".concat(n," ")),e.props=e.props.map((function(e){return"".concat(n," ").concat(e)}))),Array.isArray(e.children)&&"@keyframes"!==e.type&&(e.children=yn(e.children,n)),e}))}function vn(e){var n,t,r,o=void 0===e?pe:e,l=o.options,a=void 0===l?pe:l,i=o.plugins,u=void 0===i?de:i,s=function(e,r,o){return o===t||o.startsWith(t)&&o.endsWith(t)&&o.replaceAll(t,"").length>0?".".concat(n):e},c=u.slice();c.push((function(e){e.type===d&&e.value.includes("&")&&(e.props[0]=e.props[0].replace(mn,t).replace(r,s))})),a.prefix&&c.push(ee),c.push(Z);var f=function(e,o,l,i){void 0===o&&(o=""),void 0===l&&(l=""),void 0===i&&(i="&"),n=i,t=o,r=new RegExp("\\".concat(t,"\\b"),"g");var u=e.replace(gn,""),s=ne(l||o?"".concat(l," ").concat(o," { ").concat(u," }"):u);a.namespace&&(s=yn(s,a.namespace));var f,d,p,h=[];return X(s,(f=c.concat((p=function(e){return h.push(e)},function(e){e.root||(e=e.return)&&p(e)})),d=F(f),function(e,n,t,r){for(var o="",l=0;l<d;l++)o+=f[l](e,n,t,r)||"";return o})),h};return f.hash=u.length?u.reduce((function(e,n){return n.name||Ye(15),xe(e,n.name)}),5381).toString():"",f}var bn=new hn,wn=vn(),kn=l.createContext({shouldForwardProp:void 0,styleSheet:bn,stylis:wn}),An=(kn.Consumer,l.createContext(void 0));function xn(){return(0,l.useContext)(kn)}function Cn(e){var n=(0,l.useState)(e.stylisPlugins),t=n[0],r=n[1],o=xn().styleSheet,a=(0,l.useMemo)((function(){var n=o;return e.sheet?n=e.sheet:e.target&&(n=n.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(n=n.reconstructWithOptions({useCSSOMInjection:!1})),n}),[e.disableCSSOMInjection,e.sheet,e.target,o]),u=(0,l.useMemo)((function(){return vn({options:{namespace:e.namespace,prefix:e.enableVendorPrefixes},plugins:t})}),[e.enableVendorPrefixes,e.namespace,t]);return(0,l.useEffect)((function(){i()(t,e.stylisPlugins)||r(e.stylisPlugins)}),[e.stylisPlugins]),l.createElement(kn.Provider,{value:{shouldForwardProp:e.shouldForwardProp,styleSheet:a,stylis:u}},l.createElement(An.Provider,{value:u},e.children))}var Sn=function(){function e(e,n){var t=this;this.inject=function(e,n){void 0===n&&(n=wn);var r=t.name+n.hash;e.hasNameForId(t.id,r)||e.insertRules(t.id,r,n(t.rules,r,"@keyframes"))},this.name=e,this.id="sc-keyframes-".concat(e),this.rules=n,Ke(this,(function(){throw Ye(12,String(t.name))}))}return e.prototype.getName=function(e){return void 0===e&&(e=wn),this.name+e.hash},e}(),En=function(e){return e>="A"&&e<="Z"};function Fn(e){for(var n="",t=0;t<e.length;t++){var r=e[t];if(1===t&&"-"===r&&"-"===e[0])return e;En(r)?n+="-"+r.toLowerCase():n+=r}return n.startsWith("ms-")?"-"+n:n}var Bn=function(e){return null==e||!1===e||""===e},Un=function(e){var n,t,r=[];for(var l in e){var a=e[l];e.hasOwnProperty(l)&&!Bn(a)&&(Array.isArray(a)&&a.isCss||$e(a)?r.push("".concat(Fn(l),":"),a,";"):We(a)?r.push.apply(r,o(o(["".concat(l," {")],Un(a),!1),["}"],!1)):r.push("".concat(Fn(l),": ").concat((n=l,null==(t=a)||"boolean"==typeof t||""===t?"":"number"!=typeof t||0===t||n in ae||n.startsWith("--")?String(t).trim():"".concat(t,"px")),";")))}return r};function Pn(e,n,t,r){return Bn(e)?[]:He(e)?[".".concat(e.styledComponentId)]:$e(e)?!$e(o=e)||o.prototype&&o.prototype.isReactComponent||!n?[e]:Pn(e(n),n,t,r):e instanceof Sn?t?(e.inject(t,r),[e.getName(r)]):[e]:We(e)?Un(e):Array.isArray(e)?Array.prototype.concat.apply(de,e.map((function(e){return Pn(e,n,t,r)}))):[e.toString()];var o}function _n(e){for(var n=0;n<e.length;n+=1){var t=e[n];if($e(t)&&!He(t))return!1}return!0}var Tn=Ce("6.0.7"),In=function(){function e(e,n,t){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===t||t.isStatic)&&_n(e),this.componentId=n,this.baseHash=xe(Tn,n),this.baseStyle=t,hn.registerId(n)}return e.prototype.generateAndInjectStyles=function(e,n,t){var r=this.baseStyle?this.baseStyle.generateAndInjectStyles(e,n,t):"";if(this.isStatic&&!t.hash)if(this.staticRulesId&&n.hasNameForId(this.componentId,this.staticRulesId))r=Ve(r,this.staticRulesId);else{var o=qe(Pn(this.rules,e,n,t)),l=ke(xe(this.baseHash,o)>>>0);if(!n.hasNameForId(this.componentId,l)){var a=t(o,".".concat(l),void 0,this.componentId);n.insertRules(this.componentId,l,a)}r=Ve(r,l),this.staticRulesId=l}else{for(var i=xe(this.baseHash,t.hash),u="",s=0;s<this.rules.length;s++){var c=this.rules[s];if("string"==typeof c)u+=c;else if(c){var f=qe(Pn(c,e,n,t));i=xe(i,f),u+=f}}if(u){var d=ke(i>>>0);n.hasNameForId(this.componentId,d)||n.insertRules(this.componentId,d,t(u,".".concat(d),void 0,this.componentId)),r=Ve(r,d)}}return r},e}(),On=l.createContext(void 0);On.Consumer;var Ln={};function Dn(e,n,t){var o=He(e),a=e,i=!Ee(e),u=n.attrs,s=void 0===u?de:u,c=n.componentId,f=void 0===c?function(e,n){var t="string"!=typeof e?"sc":ve(e);Ln[t]=(Ln[t]||0)+1;var r="".concat(t,"-").concat(Se("6.0.7"+t+Ln[t]));return n?"".concat(n,"-").concat(r):r}(n.displayName,n.parentComponentId):c,d=(void 0===n.displayName&&function(e){Ee(e)?"styled.".concat(e):"Styled(".concat(function(e){return e.displayName||e.name||"Component"}(e),")")}(e),n.displayName&&n.componentId?"".concat(ve(n.displayName),"-").concat(n.componentId):n.componentId||f),p=o&&a.attrs?a.attrs.concat(s).filter(Boolean):s,h=n.shouldForwardProp;if(o&&a.shouldForwardProp){var m=a.shouldForwardProp;if(n.shouldForwardProp){var g=n.shouldForwardProp;h=function(e,n){return m(e,n)&&g(e,n)}}else h=m}var y=new In(t,d,o?a.componentStyle:void 0),v=l.forwardRef((function(e,n){return function(e,n,t){var o=e.attrs,a=e.componentStyle,i=e.defaultProps,u=e.foldedComponentIds,s=e.styledComponentId,c=e.target,f=l.useContext(On),d=xn(),p=e.shouldForwardProp||d.shouldForwardProp,h=function(e,n,t){for(var o,l=r(r({},n),{className:void 0,theme:t}),a=0;a<e.length;a+=1){var i=$e(o=e[a])?o(l):o;for(var u in i)l[u]="className"===u?Ve(l[u],i[u]):"style"===u?r(r({},l[u]),i[u]):i[u]}return n.className&&(l.className=Ve(l.className,n.className)),l}(o,n,he(n,f,i)||pe),m=h.as||c,g={};for(var y in h)void 0===h[y]||"$"===y[0]||"as"===y||"theme"===y||("forwardedAs"===y?g.as=h.forwardedAs:p&&!p(y,m)||(g[y]=h[y]));var v=function(e,n){var t=xn();return e.generateAndInjectStyles(n,t.styleSheet,t.stylis)}(a,h),b=Ve(u,s);return v&&(b+=" "+v),h.className&&(b+=" "+h.className),g[Ee(m)&&!me.has(m)?"class":"className"]=b,g.ref=t,(0,l.createElement)(m,g)}(v,e,n)}));return v.attrs=p,v.componentStyle=y,v.shouldForwardProp=h,v.foldedComponentIds=o?Ve(a.foldedComponentIds,a.styledComponentId):"",v.styledComponentId=d,v.target=o?a.target:e,Object.defineProperty(v,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(e){this._foldedDefaultProps=o?function(e){for(var n=[],t=1;t<arguments.length;t++)n[t-1]=arguments[t];for(var r=0,o=n;r<o.length;r++)Qe(e,o[r],!0);return e}({},a.defaultProps,e):e}}),Ke(v,(function(){return".".concat(v.styledComponentId)})),i&&je(v,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0}),v}function zn(e,n){for(var t=[e[0]],r=0,o=n.length;r<o;r+=1)t.push(n[r],e[r+1]);return t}new Set;var Nn=function(e){return Object.assign(e,{isCss:!0})};function Rn(e){for(var n=[],t=1;t<arguments.length;t++)n[t-1]=arguments[t];if($e(e)||We(e))return Nn(Pn(zn(de,o([e],n,!0))));var r=e;return 0===n.length&&1===r.length&&"string"==typeof r[0]?Pn(r):Nn(Pn(zn(r,n)))}function Mn(e,n,t){if(void 0===t&&(t=pe),!n)throw Ye(1,n);var l=function(r){for(var l=[],a=1;a<arguments.length;a++)l[a-1]=arguments[a];return e(n,t,Rn.apply(void 0,o([r],l,!1)))};return l.attrs=function(o){return Mn(e,n,r(r({},t),{attrs:Array.prototype.concat(t.attrs,o).filter(Boolean)}))},l.withConfig=function(o){return Mn(e,n,r(r({},t),o))},l}var jn=function(e){return Mn(Dn,e)},$n=jn;me.forEach((function(e){$n[e]=jn(e)}));var Hn=function(){function e(e,n){this.rules=e,this.componentId=n,this.isStatic=_n(e),hn.registerId(this.componentId+1)}return e.prototype.createStyles=function(e,n,t,r){var o=r(qe(Pn(this.rules,n,t,r)),""),l=this.componentId+e;t.insertRules(l,l,o)},e.prototype.removeStyles=function(e,n){n.clearRules(this.componentId+e)},e.prototype.renderStyles=function(e,n,t,r){e>2&&hn.registerId(this.componentId+e),this.removeStyles(e,t),this.createStyles(e,n,t,r)},e}();function Vn(e){for(var n=[],t=1;t<arguments.length;t++)n[t-1]=arguments[t];var a=Rn.apply(void 0,o([e],n,!1)),i="sc-global-".concat(Se(JSON.stringify(a))),u=new Hn(a,i),s=function(e){var n=xn(),t=l.useContext(On),r=l.useRef(n.styleSheet.allocateGSInstance(i)).current;return n.styleSheet.server&&c(r,e,n.styleSheet,t,n.stylis),l.useLayoutEffect((function(){if(!n.styleSheet.server)return c(r,e,n.styleSheet,t,n.stylis),function(){return u.removeStyles(r,n.styleSheet)}}),[r,e,n.styleSheet,t,n.stylis]),null};function c(e,n,t,o,l){if(u.isStatic)u.renderStyles(e,fe,t,l);else{var a=r(r({},n),{theme:he(n,o,s.defaultProps)});u.renderStyles(e,a,t,l)}}return l.memo(s)}(function(){function e(){var e=this;this._emitSheetCSS=function(){var n=e.instance.toString(),t=an(),r=qe([t&&'nonce="'.concat(t,'"'),"".concat(ue,'="true"'),"".concat("data-styled-version",'="').concat("6.0.7",'"')].filter(Boolean)," ");return"<style ".concat(r,">").concat(n,"</style>")},this.getStyleTags=function(){if(e.sealed)throw Ye(2);return e._emitSheetCSS()},this.getStyleElement=function(){var n;if(e.sealed)throw Ye(2);var t=((n={})[ue]="",n["data-styled-version"]="6.0.7",n.dangerouslySetInnerHTML={__html:e.instance.toString()},n),o=an();return o&&(t.nonce=o),[l.createElement("style",r({},t,{key:"sc-0-0"}))]},this.seal=function(){e.sealed=!0},this.instance=new hn({isServer:!0}),this.sealed=!1}e.prototype.collectStyles=function(e){if(this.sealed)throw Ye(2);return l.createElement(Cn,{sheet:this.instance},e)},e.prototype.interleaveWithNodeStream=function(e){throw Ye(3)}})(),"__sc-".concat(ue,"__")},6926:(e,n,t)=>{"use strict";e.exports=t.p+"b2f7fa8bb26a2699b579.woff"},5447:(e,n,t)=>{"use strict";e.exports=t.p+"4f2cda059485c5f324fa.woff"},6778:(e,n,t)=>{"use strict";e.exports=t.p+"d2f757dd50016882086f.woff"},8709:(e,n,t)=>{"use strict";e.exports=t.p+"56a3dea428762836a958.woff"},1381:(e,n,t)=>{"use strict";e.exports=t.p+"4db1bf0c1f6d5f32f320.woff2"},841:(e,n,t)=>{"use strict";e.exports=t.p+"b3501f3f1fa72bcb728a.woff2"},8637:(e,n,t)=>{"use strict";e.exports=t.p+"6ab1e89d0317d8c309cf.woff2"},8593:(e,n,t)=>{"use strict";e.exports=t.p+"d09ca2b77e933d5c6582.woff2"},9237:(e,n,t)=>{"use strict";e.exports=t.p+"07b851eaa771083aa412.woff2"},3829:(e,n,t)=>{"use strict";e.exports=t.p+"ea48f4ff22a3d336ebb0.woff2"},2830:(e,n,t)=>{"use strict";e.exports=t.p+"1f9b868798d3a62c002f.woff2"},1991:(e,n,t)=>{"use strict";e.exports=t.p+"7ab4304a4f29ec9dc89c.woff2"},2483:(e,n,t)=>{"use strict";e.exports=t.p+"df10eb39af19eaf363ee.woff2"},6463:(e,n,t)=>{"use strict";e.exports=t.p+"3efbf9f403ae2d6791f1.woff2"},9578:(e,n,t)=>{"use strict";e.exports=t.p+"4d586f42acbc9e933a80.woff2"},6416:(e,n,t)=>{"use strict";e.exports=t.p+"f8a27a6de63d2728adc4.woff2"},6159:(e,n,t)=>{"use strict";e.exports=t.p+"c9f3696e45388e46f544.woff2"},1453:(e,n,t)=>{"use strict";e.exports=t.p+"18af2512ed41dc94e197.woff2"},7631:(e,n,t)=>{"use strict";e.exports=t.p+"036a954126763c1dac55.woff2"},5460:(e,n,t)=>{"use strict";e.exports=t.p+"6644a09ac3084b55fcc2.woff2"},1196:(e,n,t)=>{"use strict";e.exports=t.p+"bb915319f59c02c348a6.woff2"},45:(e,n,t)=>{"use strict";e.exports=t.p+"f57a62e9efddf6ace18b.woff2"},2542:(e,n,t)=>{"use strict";e.exports=t.p+"2a0783bd1c6c1469558b.woff2"},7539:(e,n,t)=>{"use strict";e.exports=t.p+"92425c623934facef057.woff2"},8252:(e,n,t)=>{"use strict";e.exports=t.p+"9b5f4ef6bec817044bca.woff2"},375:(e,n,t)=>{"use strict";e.exports=t.p+"e21fda72f7303338832c.woff2"},6313:(e,n,t)=>{"use strict";e.exports=t.p+"f49a91d60ad49ded7427.woff2"},5138:(e,n,t)=>{"use strict";e.exports=t.p+"3e3826616c156f9d249f.woff2"},461:(e,n,t)=>{"use strict";e.exports=t.p+"deef4f2bcf876c281b29.woff2"},799:(e,n,t)=>{"use strict";e.exports=t.p+"5ec64a942bafa79974d2.woff2"},3801:(e,n,t)=>{"use strict";e.exports=t.p+"3a3a54b62ca9291563a7.woff2"},7817:(e,n,t)=>{"use strict";e.exports=t.p+"122371a2c0cfc6530047.woff2"},9931:(e,n,t)=>{"use strict";t.d(n,{D:()=>Xt});var r={};t.r(r),t.d(r,{attentionMarkers:()=>gn,contentInitial:()=>cn,disable:()=>yn,document:()=>sn,flow:()=>dn,flowInitial:()=>fn,insideSpan:()=>mn,string:()=>pn,text:()=>hn});var o={};t.r(o),t.d(o,{boolean:()=>at,booleanish:()=>it,commaOrSpaceSeparated:()=>dt,commaSeparated:()=>ft,number:()=>st,overloadedBoolean:()=>ut,spaceSeparated:()=>ct});var l=t(7294),a=t(8738),i={}.hasOwnProperty;function u(e){return e&&"object"==typeof e?i.call(e,"position")||i.call(e,"type")?c(e.position):i.call(e,"start")||i.call(e,"end")?c(e):i.call(e,"line")||i.call(e,"column")?s(e):"":""}function s(e){return f(e&&e.line)+":"+f(e&&e.column)}function c(e){return s(e&&e.start)+"-"+s(e&&e.end)}function f(e){return e&&"number"==typeof e?e:1}class d extends Error{constructor(e,n,t){var r,o=[null,null],l={start:{line:null,column:null},end:{line:null,column:null}};super(),"string"==typeof n&&(t=n,n=null),"string"==typeof t&&(-1===(r=t.indexOf(":"))?o[1]=t:(o[0]=t.slice(0,r),o[1]=t.slice(r+1))),n&&("type"in n||"position"in n?n.position&&(l=n.position):"start"in n||"end"in n?l=n:("line"in n||"column"in n)&&(l.start=n)),this.name=u(n)||"1:1",this.message="object"==typeof e?e.message:e,this.stack="object"==typeof e?e.stack:"",this.reason=this.message,this.line=l.start.line,this.column=l.start.column,this.source=o[0],this.ruleId=o[1],this.position=l,this.file,this.fatal,this.url,this.note}}d.prototype.file="",d.prototype.name="",d.prototype.reason="",d.prototype.message="",d.prototype.stack="",d.prototype.fatal=null,d.prototype.column=null,d.prototype.line=null,d.prototype.source=null,d.prototype.ruleId=null,d.prototype.position=null;const p=function(e,n){if(void 0!==n&&"string"!=typeof n)throw new TypeError('"ext" argument must be a string');v(e);let t,r=0,o=-1,l=e.length;if(void 0===n||0===n.length||n.length>e.length){for(;l--;)if(47===e.charCodeAt(l)){if(t){r=l+1;break}}else o<0&&(t=!0,o=l+1);return o<0?"":e.slice(r,o)}if(n===e)return"";let a=-1,i=n.length-1;for(;l--;)if(47===e.charCodeAt(l)){if(t){r=l+1;break}}else a<0&&(t=!0,a=l+1),i>-1&&(e.charCodeAt(l)===n.charCodeAt(i--)?i<0&&(o=l):(i=-1,o=a));return r===o?o=a:o<0&&(o=e.length),e.slice(r,o)},h=function(e){if(v(e),0===e.length)return".";let n,t=-1,r=e.length;for(;--r;)if(47===e.charCodeAt(r)){if(n){t=r;break}}else n||(n=!0);return t<0?47===e.charCodeAt(0)?"/":".":1===t&&47===e.charCodeAt(0)?"//":e.slice(0,t)},m=function(e){v(e);let n,t=e.length,r=-1,o=0,l=-1,a=0;for(;t--;){const i=e.charCodeAt(t);if(47!==i)r<0&&(n=!0,r=t+1),46===i?l<0?l=t:1!==a&&(a=1):l>-1&&(a=-1);else if(n){o=t+1;break}}return l<0||r<0||0===a||1===a&&l===r-1&&l===o+1?"":e.slice(l,r)},g=function(...e){let n,t=-1;for(;++t<e.length;)v(e[t]),e[t]&&(n=void 0===n?e[t]:n+"/"+e[t]);return void 0===n?".":function(e){v(e);const n=47===e.charCodeAt(0);let t=function(e,n){let t,r,o="",l=0,a=-1,i=0,u=-1;for(;++u<=e.length;){if(u<e.length)t=e.charCodeAt(u);else{if(47===t)break;t=47}if(47===t){if(a===u-1||1===i);else if(a!==u-1&&2===i){if(o.length<2||2!==l||46!==o.charCodeAt(o.length-1)||46!==o.charCodeAt(o.length-2))if(o.length>2){if(r=o.lastIndexOf("/"),r!==o.length-1){r<0?(o="",l=0):(o=o.slice(0,r),l=o.length-1-o.lastIndexOf("/")),a=u,i=0;continue}}else if(o.length>0){o="",l=0,a=u,i=0;continue}n&&(o=o.length>0?o+"/..":"..",l=2)}else o.length>0?o+="/"+e.slice(a+1,u):o=e.slice(a+1,u),l=u-a-1;a=u,i=0}else 46===t&&i>-1?i++:i=-1}return o}(e,!n);return 0!==t.length||n||(t="."),t.length>0&&47===e.charCodeAt(e.length-1)&&(t+="/"),n?"/"+t:t}(n)},y="/";function v(e){if("string"!=typeof e)throw new TypeError("Path must be a string. Received "+JSON.stringify(e))}const b=function(){return"/"};function w(e){return null!==e&&"object"==typeof e&&e.href&&e.origin}const k=["history","path","basename","stem","extname","dirname"];class A{constructor(e){let n;n=e?"string"==typeof e||a(e)?{value:e}:w(e)?{path:e}:e:{},this.data={},this.messages=[],this.history=[],this.cwd=b(),this.value,this.stored,this.result,this.map;let t,r=-1;for(;++r<k.length;){const e=k[r];e in n&&void 0!==n[e]&&(this[e]="history"===e?[...n[e]]:n[e])}for(t in n)k.includes(t)||(this[t]=n[t])}get path(){return this.history[this.history.length-1]}set path(e){w(e)&&(e=function(e){if("string"==typeof e)e=new URL(e);else if(!w(e)){const n=new TypeError('The "path" argument must be of type string or an instance of URL. Received `'+e+"`");throw n.code="ERR_INVALID_ARG_TYPE",n}if("file:"!==e.protocol){const e=new TypeError("The URL must be of scheme file");throw e.code="ERR_INVALID_URL_SCHEME",e}return function(e){if(""!==e.hostname){const e=new TypeError('File URL host must be "localhost" or empty on darwin');throw e.code="ERR_INVALID_FILE_URL_HOST",e}const n=e.pathname;let t=-1;for(;++t<n.length;)if(37===n.charCodeAt(t)&&50===n.charCodeAt(t+1)){const e=n.charCodeAt(t+2);if(70===e||102===e){const e=new TypeError("File URL path must not include encoded / characters");throw e.code="ERR_INVALID_FILE_URL_PATH",e}}return decodeURIComponent(n)}(e)}(e)),C(e,"path"),this.path!==e&&this.history.push(e)}get dirname(){return"string"==typeof this.path?h(this.path):void 0}set dirname(e){S(this.basename,"dirname"),this.path=g(e||"",this.basename)}get basename(){return"string"==typeof this.path?p(this.path):void 0}set basename(e){C(e,"basename"),x(e,"basename"),this.path=g(this.dirname||"",e)}get extname(){return"string"==typeof this.path?m(this.path):void 0}set extname(e){if(x(e,"extname"),S(this.dirname,"extname"),e){if(46!==e.charCodeAt(0))throw new Error("`extname` must start with `.`");if(e.includes(".",1))throw new Error("`extname` cannot contain multiple dots")}this.path=g(this.dirname,this.stem+(e||""))}get stem(){return"string"==typeof this.path?p(this.path,this.extname):void 0}set stem(e){C(e,"stem"),x(e,"stem"),this.path=g(this.dirname||"",e+(this.extname||""))}toString(e){return(this.value||"").toString(e)}message(e,n,t){const r=new d(e,n,t);return this.path&&(r.name=this.path+":"+r.name,r.file=this.path),r.fatal=!1,this.messages.push(r),r}info(e,n,t){const r=this.message(e,n,t);return r.fatal=null,r}fail(e,n,t){const r=this.message(e,n,t);throw r.fatal=!0,r}}function x(e,n){if(e&&e.includes(y))throw new Error("`"+n+"` cannot be a path: did not expect `"+y+"`")}function C(e,n){if(!e)throw new Error("`"+n+"` cannot be empty")}function S(e,n){if(!e)throw new Error("Setting `"+n+"` requires `path` to be set too")}function E(e){if(e)throw e}var F=t(4470);function B(e){if("[object Object]"!==Object.prototype.toString.call(e))return!1;const n=Object.getPrototypeOf(e);return null===n||n===Object.prototype}const U=function e(){const n=function(){const e=[],n={run:function(...n){let t=-1;const r=n.pop();if("function"!=typeof r)throw new TypeError("Expected function as last argument, not "+r);!function o(l,...a){const i=e[++t];let u=-1;if(l)r(l);else{for(;++u<n.length;)null!==a[u]&&void 0!==a[u]||(a[u]=n[u]);n=a,i?function(e,n){let t;return function(...n){const l=e.length>n.length;let a;l&&n.push(r);try{a=e(...n)}catch(e){if(l&&t)throw e;return r(e)}l||(a instanceof Promise?a.then(o,r):a instanceof Error?r(a):o(a))};function r(e,...r){t||(t=!0,n(e,...r))}function o(e){r(null,e)}}(i,o)(...a):r(null,...a)}}(null,...n)},use:function(t){if("function"!=typeof t)throw new TypeError("Expected `middelware` to be a function, not "+t);return e.push(t),n}};return n}(),t=[];let r,o={},l=-1;return i.data=function(e,n){return"string"==typeof e?2===arguments.length?(O("data",r),o[e]=n,i):P.call(o,e)&&o[e]||null:e?(O("data",r),o=e,i):o},i.Parser=void 0,i.Compiler=void 0,i.freeze=function(){if(r)return i;for(;++l<t.length;){const[e,...r]=t[l];if(!1===r[0])continue;!0===r[0]&&(r[1]=void 0);const o=e.call(i,...r);"function"==typeof o&&n.use(o)}return r=!0,l=Number.POSITIVE_INFINITY,i},i.attachers=t,i.use=function(e,...n){let l;if(O("use",r),null==e);else if("function"==typeof e)c(e,...n);else{if("object"!=typeof e)throw new TypeError("Expected usable value, not `"+e+"`");Array.isArray(e)?s(e):u(e)}return l&&(o.settings=Object.assign(o.settings||{},l)),i;function a(e){if("function"==typeof e)c(e);else{if("object"!=typeof e)throw new TypeError("Expected usable value, not `"+e+"`");if(Array.isArray(e)){const[n,...t]=e;c(n,...t)}else u(e)}}function u(e){s(e.plugins),e.settings&&(l=Object.assign(l||{},e.settings))}function s(e){let n=-1;if(null==e);else{if(!Array.isArray(e))throw new TypeError("Expected a list of plugins, not `"+e+"`");for(;++n<e.length;)a(e[n])}}function c(e,n){let r,o=-1;for(;++o<t.length;)if(t[o][0]===e){r=t[o];break}r?(B(r[1])&&B(n)&&(n=F(!0,r[1],n)),r[1]=n):t.push([...arguments])}},i.parse=function(e){i.freeze();const n=z(e),t=i.Parser;return T("parse",t),_(t,"parse")?new t(String(n),n).parse():t(String(n),n)},i.stringify=function(e,n){i.freeze();const t=z(n),r=i.Compiler;return I("stringify",r),L(e),_(r,"compile")?new r(e,t).compile():r(e,t)},i.run=function(e,t,r){if(L(e),i.freeze(),r||"function"!=typeof t||(r=t,t=void 0),!r)return new Promise(o);function o(o,l){n.run(e,z(t),(function(n,t,a){t=t||e,n?l(n):o?o(t):r(null,t,a)}))}o(null,r)},i.runSync=function(e,n){let t,r;return i.run(e,n,(function(e,n){E(e),t=n,r=!0})),D("runSync","run",r),t},i.process=function(e,n){if(i.freeze(),T("process",i.Parser),I("process",i.Compiler),!n)return new Promise(t);function t(t,r){const o=z(e);function l(e,o){e||!o?r(e):t?t(o):n(null,o)}i.run(i.parse(o),o,((e,n,t)=>{if(!e&&n&&t){const o=i.stringify(n,t);null==o||("string"==typeof(r=o)||a(r)?t.value=o:t.result=o),l(e,t)}else l(e);var r}))}t(null,n)},i.processSync=function(e){let n;i.freeze(),T("processSync",i.Parser),I("processSync",i.Compiler);const t=z(e);return i.process(t,(function(e){n=!0,E(e)})),D("processSync","process",n),t},i;function i(){const n=e();let r=-1;for(;++r<t.length;)n.use(...t[r]);return n.data(F(!0,{},o)),n}}().freeze(),P={}.hasOwnProperty;function _(e,n){return"function"==typeof e&&e.prototype&&(function(e){let n;for(n in e)if(P.call(e,n))return!0;return!1}(e.prototype)||n in e.prototype)}function T(e,n){if("function"!=typeof n)throw new TypeError("Cannot `"+e+"` without `Parser`")}function I(e,n){if("function"!=typeof n)throw new TypeError("Cannot `"+e+"` without `Compiler`")}function O(e,n){if(n)throw new Error("Cannot call `"+e+"` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.")}function L(e){if(!B(e)||"string"!=typeof e.type)throw new TypeError("Expected node, got `"+e+"`")}function D(e,n,t){if(!t)throw new Error("`"+e+"` finished async. Use `"+n+"` instead")}function z(e){return function(e){return Boolean(e&&"object"==typeof e&&"message"in e&&"messages"in e)}(e)?e:new A(e)}function N(e,n){return e&&"object"==typeof e&&(e.value||(n?e.alt:"")||"children"in e&&R(e.children,n)||Array.isArray(e)&&R(e,n))||""}function R(e,n){for(var t=[],r=-1;++r<e.length;)t[r]=N(e[r],n);return t.join("")}function M(e,n,t,r){const o=e.length;let l,a=0;if(n=n<0?-n>o?0:o+n:n>o?o:n,t=t>0?t:0,r.length<1e4)l=Array.from(r),l.unshift(n,t),[].splice.apply(e,l);else for(t&&[].splice.apply(e,[n,t]);a<r.length;)l=r.slice(a,a+1e4),l.unshift(n,0),[].splice.apply(e,l),a+=1e4,n+=1e4}function j(e,n){return e.length>0?(M(e,e.length,0,n),e):n}const $={}.hasOwnProperty;function H(e,n){let t;for(t in n){const r=($.call(e,t)?e[t]:void 0)||(e[t]={}),o=n[t];let l;for(l in o){$.call(r,l)||(r[l]=[]);const e=o[l];V(r[l],Array.isArray(e)?e:e?[e]:[])}}}function V(e,n){let t=-1;const r=[];for(;++t<n.length;)("after"===n[t].add?e:r).push(n[t]);M(e,0,0,r)}const q=re(/[A-Za-z]/),W=re(/\d/),Q=re(/[\dA-Fa-f]/),K=re(/[\dA-Za-z]/),Y=re(/[!-/:-@[-`{-~]/),G=re(/[#-'*+\--9=?A-Z^-~]/);function X(e){return null!==e&&(e<32||127===e)}function Z(e){return null!==e&&(e<0||32===e)}function J(e){return null!==e&&e<-2}function ee(e){return-2===e||-1===e||32===e}const ne=re(/\s/),te=re(/[!-/:-@[-`{-~\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/);function re(e){return function(n){return null!==n&&e.test(String.fromCharCode(n))}}function oe(e,n,t,r){const o=r?r-1:Number.POSITIVE_INFINITY;let l=0;return function(r){return ee(r)?(e.enter(t),a(r)):n(r)};function a(r){return ee(r)&&l++<o?(e.consume(r),a):(e.exit(t),n(r))}}const le={tokenize:function(e){const n=e.attempt(this.parser.constructs.contentInitial,(function(t){if(null!==t)return e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),oe(e,n,"linePrefix");e.consume(t)}),(function(n){return e.enter("paragraph"),r(n)}));let t;return n;function r(n){const r=e.enter("chunkText",{contentType:"text",previous:t});return t&&(t.next=r),t=r,o(n)}function o(n){return null===n?(e.exit("chunkText"),e.exit("paragraph"),void e.consume(n)):J(n)?(e.consume(n),e.exit("chunkText"),r):(e.consume(n),o)}}},ae={tokenize:function(e){const n=this,t=[];let r,o,l,a=0;return i;function i(r){if(a<t.length){const o=t[a];return n.containerState=o[1],e.attempt(o[0].continuation,u,s)(r)}return s(r)}function u(e){if(a++,n.containerState._closeFlow){n.containerState._closeFlow=void 0,r&&v();const t=n.events.length;let o,l=t;for(;l--;)if("exit"===n.events[l][0]&&"chunkFlow"===n.events[l][1].type){o=n.events[l][1].end;break}y(a);let i=t;for(;i<n.events.length;)n.events[i][1].end=Object.assign({},o),i++;return M(n.events,l+1,0,n.events.slice(t)),n.events.length=i,s(e)}return i(e)}function s(o){if(a===t.length){if(!r)return d(o);if(r.currentConstruct&&r.currentConstruct.concrete)return h(o);n.interrupt=Boolean(r.currentConstruct)}return n.containerState={},e.check(ie,c,f)(o)}function c(e){return r&&v(),y(a),d(e)}function f(e){return n.parser.lazy[n.now().line]=a!==t.length,l=n.now().offset,h(e)}function d(t){return n.containerState={},e.attempt(ie,p,h)(t)}function p(e){return a++,t.push([n.currentConstruct,n.containerState]),d(e)}function h(t){return null===t?(r&&v(),y(0),void e.consume(t)):(r=r||n.parser.flow(n.now()),e.enter("chunkFlow",{contentType:"flow",previous:o,_tokenizer:r}),m(t))}function m(t){return null===t?(g(e.exit("chunkFlow"),!0),y(0),void e.consume(t)):J(t)?(e.consume(t),g(e.exit("chunkFlow")),a=0,n.interrupt=void 0,i):(e.consume(t),m)}function g(e,t){const i=n.sliceStream(e);if(t&&i.push(null),e.previous=o,o&&(o.next=e),o=e,r.defineSkip(e.start),r.write(i),n.parser.lazy[e.start.line]){let e=r.events.length;for(;e--;)if(r.events[e][1].start.offset<l&&(!r.events[e][1].end||r.events[e][1].end.offset>l))return;const t=n.events.length;let o,i,u=t;for(;u--;)if("exit"===n.events[u][0]&&"chunkFlow"===n.events[u][1].type){if(o){i=n.events[u][1].end;break}o=!0}for(y(a),e=t;e<n.events.length;)n.events[e][1].end=Object.assign({},i),e++;M(n.events,u+1,0,n.events.slice(t)),n.events.length=e}}function y(r){let o=t.length;for(;o-- >r;){const r=t[o];n.containerState=r[1],r[0].exit.call(n,e)}t.length=r}function v(){r.write([null]),o=void 0,r=void 0,n.containerState._closeFlow=void 0}}},ie={tokenize:function(e,n,t){return oe(e,e.attempt(this.parser.constructs.document,n,t),"linePrefix",this.parser.constructs.disable.null.includes("codeIndented")?void 0:4)}},ue={tokenize:function(e,n,t){return oe(e,(function(e){return null===e||J(e)?n(e):t(e)}),"linePrefix")},partial:!0};function se(e){const n={};let t,r,o,l,a,i,u,s=-1;for(;++s<e.length;){for(;s in n;)s=n[s];if(t=e[s],s&&"chunkFlow"===t[1].type&&"listItemPrefix"===e[s-1][1].type&&(i=t[1]._tokenizer.events,o=0,o<i.length&&"lineEndingBlank"===i[o][1].type&&(o+=2),o<i.length&&"content"===i[o][1].type))for(;++o<i.length&&"content"!==i[o][1].type;)"chunkText"===i[o][1].type&&(i[o][1]._isInFirstContentOfListItem=!0,o++);if("enter"===t[0])t[1].contentType&&(Object.assign(n,ce(e,s)),s=n[s],u=!0);else if(t[1]._container){for(o=s,r=void 0;o--&&(l=e[o],"lineEnding"===l[1].type||"lineEndingBlank"===l[1].type);)"enter"===l[0]&&(r&&(e[r][1].type="lineEndingBlank"),l[1].type="lineEnding",r=o);r&&(t[1].end=Object.assign({},e[r][1].start),a=e.slice(r,s),a.unshift(t),M(e,r,s-r+1,a))}}return!u}function ce(e,n){const t=e[n][1],r=e[n][2];let o=n-1;const l=[],a=t._tokenizer||r.parser[t.contentType](t.start),i=a.events,u=[],s={};let c,f,d=-1,p=t,h=0,m=0;const g=[m];for(;p;){for(;e[++o][1]!==p;);l.push(o),p._tokenizer||(c=r.sliceStream(p),p.next||c.push(null),f&&a.defineSkip(p.start),p._isInFirstContentOfListItem&&(a._gfmTasklistFirstContentOfListItem=!0),a.write(c),p._isInFirstContentOfListItem&&(a._gfmTasklistFirstContentOfListItem=void 0)),f=p,p=p.next}for(p=t;++d<i.length;)"exit"===i[d][0]&&"enter"===i[d-1][0]&&i[d][1].type===i[d-1][1].type&&i[d][1].start.line!==i[d][1].end.line&&(m=d+1,g.push(m),p._tokenizer=void 0,p.previous=void 0,p=p.next);for(a.events=[],p?(p._tokenizer=void 0,p.previous=void 0):g.pop(),d=g.length;d--;){const n=i.slice(g[d],g[d+1]),t=l.pop();u.unshift([t,t+n.length-1]),M(e,t,2,n)}for(d=-1;++d<u.length;)s[h+u[d][0]]=h+u[d][1],h+=u[d][1]-u[d][0]-1;return s}const fe={tokenize:function(e,n){let t;return function(n){return e.enter("content"),t=e.enter("chunkContent",{contentType:"content"}),r(n)};function r(n){return null===n?o(n):J(n)?e.check(de,l,o)(n):(e.consume(n),r)}function o(t){return e.exit("chunkContent"),e.exit("content"),n(t)}function l(n){return e.consume(n),e.exit("chunkContent"),t.next=e.enter("chunkContent",{contentType:"content",previous:t}),t=t.next,r}},resolve:function(e){return se(e),e}},de={tokenize:function(e,n,t){const r=this;return function(n){return e.exit("chunkContent"),e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),oe(e,o,"linePrefix")};function o(o){if(null===o||J(o))return t(o);const l=r.events[r.events.length-1];return!r.parser.constructs.disable.null.includes("codeIndented")&&l&&"linePrefix"===l[1].type&&l[2].sliceSerialize(l[1],!0).length>=4?n(o):e.interrupt(r.parser.constructs.flow,t,n)(o)}},partial:!0},pe={tokenize:function(e){const n=this,t=e.attempt(ue,(function(r){if(null!==r)return e.enter("lineEndingBlank"),e.consume(r),e.exit("lineEndingBlank"),n.currentConstruct=void 0,t;e.consume(r)}),e.attempt(this.parser.constructs.flowInitial,r,oe(e,e.attempt(this.parser.constructs.flow,r,e.attempt(fe,r)),"linePrefix")));return t;function r(r){if(null!==r)return e.enter("lineEnding"),e.consume(r),e.exit("lineEnding"),n.currentConstruct=void 0,t;e.consume(r)}}},he={resolveAll:ve()},me=ye("string"),ge=ye("text");function ye(e){return{tokenize:function(n){const t=this,r=this.parser.constructs[e],o=n.attempt(r,l,a);return l;function l(e){return u(e)?o(e):a(e)}function a(e){if(null!==e)return n.enter("data"),n.consume(e),i;n.consume(e)}function i(e){return u(e)?(n.exit("data"),o(e)):(n.consume(e),i)}function u(e){if(null===e)return!0;const n=r[e];let o=-1;if(n)for(;++o<n.length;){const e=n[o];if(!e.previous||e.previous.call(t,t.previous))return!0}return!1}},resolveAll:ve("text"===e?be:void 0)}}function ve(e){return function(n,t){let r,o=-1;for(;++o<=n.length;)void 0===r?n[o]&&"data"===n[o][1].type&&(r=o,o++):n[o]&&"data"===n[o][1].type||(o!==r+2&&(n[r][1].end=n[o-1][1].end,n.splice(r+2,o-r-2),o=r+2),r=void 0);return e?e(n,t):n}}function be(e,n){let t=-1;for(;++t<=e.length;)if((t===e.length||"lineEnding"===e[t][1].type)&&"data"===e[t-1][1].type){const r=e[t-1][1],o=n.sliceStream(r);let l,a=o.length,i=-1,u=0;for(;a--;){const e=o[a];if("string"==typeof e){for(i=e.length;32===e.charCodeAt(i-1);)u++,i--;if(i)break;i=-1}else if(-2===e)l=!0,u++;else if(-1!==e){a++;break}}if(u){const o={type:t===e.length||l||u<2?"lineSuffix":"hardBreakTrailing",start:{line:r.end.line,column:r.end.column-u,offset:r.end.offset-u,_index:r.start._index+a,_bufferIndex:a?i:r.start._bufferIndex+i},end:Object.assign({},r.end)};r.end=Object.assign({},o.start),r.start.offset===r.end.offset?Object.assign(r,o):(e.splice(t,0,["enter",o,n],["exit",o,n]),t+=2)}t++}return e}function we(e,n,t){const r=[];let o=-1;for(;++o<e.length;){const l=e[o].resolveAll;l&&!r.includes(l)&&(n=l(n,t),r.push(l))}return n}function ke(e,n,t){let r=Object.assign(t?Object.assign({},t):{line:1,column:1,offset:0},{_index:0,_bufferIndex:-1});const o={},l=[];let a=[],i=[],u=!0;const s={consume:function(e){J(e)?(r.line++,r.column=1,r.offset+=-3===e?2:1,b()):-1!==e&&(r.column++,r.offset++),r._bufferIndex<0?r._index++:(r._bufferIndex++,r._bufferIndex===a[r._index].length&&(r._bufferIndex=-1,r._index++)),c.previous=e,u=!0},enter:function(e,n){const t=n||{};return t.type=e,t.start=h(),c.events.push(["enter",t,c]),i.push(t),t},exit:function(e){const n=i.pop();return n.end=h(),c.events.push(["exit",n,c]),n},attempt:y((function(e,n){v(e,n.from)})),check:y(g),interrupt:y(g,{interrupt:!0})},c={previous:null,code:null,containerState:{},events:[],parser:e,sliceStream:p,sliceSerialize:function(e,n){return function(e,n){let t=-1;const r=[];let o;for(;++t<e.length;){const l=e[t];let a;if("string"==typeof l)a=l;else switch(l){case-5:a="\r";break;case-4:a="\n";break;case-3:a="\r\n";break;case-2:a=n?" ":"\t";break;case-1:if(!n&&o)continue;a=" ";break;default:a=String.fromCharCode(l)}o=-2===l,r.push(a)}return r.join("")}(p(e),n)},now:h,defineSkip:function(e){o[e.line]=e.column,b()},write:function(e){return a=j(a,e),function(){let e;for(;r._index<a.length;){const n=a[r._index];if("string"==typeof n)for(e=r._index,r._bufferIndex<0&&(r._bufferIndex=0);r._index===e&&r._bufferIndex<n.length;)m(n.charCodeAt(r._bufferIndex));else m(n)}}(),null!==a[a.length-1]?[]:(v(n,0),c.events=we(l,c.events,c),c.events)}};let f,d=n.tokenize.call(c,s);return n.resolveAll&&l.push(n),c;function p(e){return function(e,n){const t=n.start._index,r=n.start._bufferIndex,o=n.end._index,l=n.end._bufferIndex;let a;return t===o?a=[e[t].slice(r,l)]:(a=e.slice(t,o),r>-1&&(a[0]=a[0].slice(r)),l>0&&a.push(e[o].slice(0,l))),a}(a,e)}function h(){return Object.assign({},r)}function m(e){u=void 0,f=e,d=d(e)}function g(e,n){n.restore()}function y(e,n){return function(t,o,l){let a,f,d,p;return Array.isArray(t)?g(t):"tokenize"in t?g([t]):(m=t,function(e){const n=null!==e&&m[e],t=null!==e&&m.null;return g([...Array.isArray(n)?n:n?[n]:[],...Array.isArray(t)?t:t?[t]:[]])(e)});var m;function g(e){return a=e,f=0,0===e.length?l:y(e[f])}function y(e){return function(t){return p=function(){const e=h(),n=c.previous,t=c.currentConstruct,o=c.events.length,l=Array.from(i);return{restore:function(){r=e,c.previous=n,c.currentConstruct=t,c.events.length=o,i=l,b()},from:o}}(),d=e,e.partial||(c.currentConstruct=e),e.name&&c.parser.constructs.disable.null.includes(e.name)?w():e.tokenize.call(n?Object.assign(Object.create(c),n):c,s,v,w)(t)}}function v(n){return u=!0,e(d,p),o}function w(e){return u=!0,p.restore(),++f<a.length?y(a[f]):l}}}function v(e,n){e.resolveAll&&!l.includes(e)&&l.push(e),e.resolve&&M(c.events,n,c.events.length-n,e.resolve(c.events.slice(n),c)),e.resolveTo&&(c.events=e.resolveTo(c.events,c))}function b(){r.line in o&&r.column<2&&(r.column=o[r.line],r.offset+=o[r.line]-1)}}const Ae={name:"thematicBreak",tokenize:function(e,n,t){let r,o=0;return function(n){return e.enter("thematicBreak"),r=n,l(n)};function l(i){return i===r?(e.enter("thematicBreakSequence"),a(i)):ee(i)?oe(e,l,"whitespace")(i):o<3||null!==i&&!J(i)?t(i):(e.exit("thematicBreak"),n(i))}function a(n){return n===r?(e.consume(n),o++,a):(e.exit("thematicBreakSequence"),l(n))}}},xe={name:"list",tokenize:function(e,n,t){const r=this,o=r.events[r.events.length-1];let l=o&&"linePrefix"===o[1].type?o[2].sliceSerialize(o[1],!0).length:0,a=0;return function(n){const o=r.containerState.type||(42===n||43===n||45===n?"listUnordered":"listOrdered");if("listUnordered"===o?!r.containerState.marker||n===r.containerState.marker:W(n)){if(r.containerState.type||(r.containerState.type=o,e.enter(o,{_container:!0})),"listUnordered"===o)return e.enter("listItemPrefix"),42===n||45===n?e.check(Ae,t,u)(n):u(n);if(!r.interrupt||49===n)return e.enter("listItemPrefix"),e.enter("listItemValue"),i(n)}return t(n)};function i(n){return W(n)&&++a<10?(e.consume(n),i):(!r.interrupt||a<2)&&(r.containerState.marker?n===r.containerState.marker:41===n||46===n)?(e.exit("listItemValue"),u(n)):t(n)}function u(n){return e.enter("listItemMarker"),e.consume(n),e.exit("listItemMarker"),r.containerState.marker=r.containerState.marker||n,e.check(ue,r.interrupt?t:s,e.attempt(Ce,f,c))}function s(e){return r.containerState.initialBlankLine=!0,l++,f(e)}function c(n){return ee(n)?(e.enter("listItemPrefixWhitespace"),e.consume(n),e.exit("listItemPrefixWhitespace"),f):t(n)}function f(t){return r.containerState.size=l+r.sliceSerialize(e.exit("listItemPrefix"),!0).length,n(t)}},continuation:{tokenize:function(e,n,t){const r=this;return r.containerState._closeFlow=void 0,e.check(ue,(function(t){return r.containerState.furtherBlankLines=r.containerState.furtherBlankLines||r.containerState.initialBlankLine,oe(e,n,"listItemIndent",r.containerState.size+1)(t)}),(function(t){return r.containerState.furtherBlankLines||!ee(t)?(r.containerState.furtherBlankLines=void 0,r.containerState.initialBlankLine=void 0,o(t)):(r.containerState.furtherBlankLines=void 0,r.containerState.initialBlankLine=void 0,e.attempt(Se,n,o)(t))}));function o(o){return r.containerState._closeFlow=!0,r.interrupt=void 0,oe(e,e.attempt(xe,n,t),"linePrefix",r.parser.constructs.disable.null.includes("codeIndented")?void 0:4)(o)}}},exit:function(e){e.exit(this.containerState.type)}},Ce={tokenize:function(e,n,t){const r=this;return oe(e,(function(e){const o=r.events[r.events.length-1];return!ee(e)&&o&&"listItemPrefixWhitespace"===o[1].type?n(e):t(e)}),"listItemPrefixWhitespace",r.parser.constructs.disable.null.includes("codeIndented")?void 0:5)},partial:!0},Se={tokenize:function(e,n,t){const r=this;return oe(e,(function(e){const o=r.events[r.events.length-1];return o&&"listItemIndent"===o[1].type&&o[2].sliceSerialize(o[1],!0).length===r.containerState.size?n(e):t(e)}),"listItemIndent",r.containerState.size+1)},partial:!0},Ee={name:"blockQuote",tokenize:function(e,n,t){const r=this;return function(n){if(62===n){const t=r.containerState;return t.open||(e.enter("blockQuote",{_container:!0}),t.open=!0),e.enter("blockQuotePrefix"),e.enter("blockQuoteMarker"),e.consume(n),e.exit("blockQuoteMarker"),o}return t(n)};function o(t){return ee(t)?(e.enter("blockQuotePrefixWhitespace"),e.consume(t),e.exit("blockQuotePrefixWhitespace"),e.exit("blockQuotePrefix"),n):(e.exit("blockQuotePrefix"),n(t))}},continuation:{tokenize:function(e,n,t){return oe(e,e.attempt(Ee,n,t),"linePrefix",this.parser.constructs.disable.null.includes("codeIndented")?void 0:4)}},exit:function(e){e.exit("blockQuote")}};function Fe(e,n,t,r,o,l,a,i,u){const s=u||Number.POSITIVE_INFINITY;let c=0;return function(n){return 60===n?(e.enter(r),e.enter(o),e.enter(l),e.consume(n),e.exit(l),f):null===n||41===n||X(n)?t(n):(e.enter(r),e.enter(a),e.enter(i),e.enter("chunkString",{contentType:"string"}),h(n))};function f(t){return 62===t?(e.enter(l),e.consume(t),e.exit(l),e.exit(o),e.exit(r),n):(e.enter(i),e.enter("chunkString",{contentType:"string"}),d(t))}function d(n){return 62===n?(e.exit("chunkString"),e.exit(i),f(n)):null===n||60===n||J(n)?t(n):(e.consume(n),92===n?p:d)}function p(n){return 60===n||62===n||92===n?(e.consume(n),d):d(n)}function h(o){return 40===o?++c>s?t(o):(e.consume(o),h):41===o?c--?(e.consume(o),h):(e.exit("chunkString"),e.exit(i),e.exit(a),e.exit(r),n(o)):null===o||Z(o)?c?t(o):(e.exit("chunkString"),e.exit(i),e.exit(a),e.exit(r),n(o)):X(o)?t(o):(e.consume(o),92===o?m:h)}function m(n){return 40===n||41===n||92===n?(e.consume(n),h):h(n)}}function Be(e,n,t,r,o,l){const a=this;let i,u=0;return function(n){return e.enter(r),e.enter(o),e.consume(n),e.exit(o),e.enter(l),s};function s(f){return null===f||91===f||93===f&&!i||94===f&&!u&&"_hiddenFootnoteSupport"in a.parser.constructs||u>999?t(f):93===f?(e.exit(l),e.enter(o),e.consume(f),e.exit(o),e.exit(r),n):J(f)?(e.enter("lineEnding"),e.consume(f),e.exit("lineEnding"),s):(e.enter("chunkString",{contentType:"string"}),c(f))}function c(n){return null===n||91===n||93===n||J(n)||u++>999?(e.exit("chunkString"),s(n)):(e.consume(n),i=i||!ee(n),92===n?f:c)}function f(n){return 91===n||92===n||93===n?(e.consume(n),u++,c):c(n)}}function Ue(e,n,t,r,o,l){let a;return function(n){return e.enter(r),e.enter(o),e.consume(n),e.exit(o),a=40===n?41:n,i};function i(t){return t===a?(e.enter(o),e.consume(t),e.exit(o),e.exit(r),n):(e.enter(l),u(t))}function u(n){return n===a?(e.exit(l),i(a)):null===n?t(n):J(n)?(e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),oe(e,u,"linePrefix")):(e.enter("chunkString",{contentType:"string"}),s(n))}function s(n){return n===a||null===n||J(n)?(e.exit("chunkString"),u(n)):(e.consume(n),92===n?c:s)}function c(n){return n===a||92===n?(e.consume(n),s):s(n)}}function Pe(e,n){let t;return function r(o){return J(o)?(e.enter("lineEnding"),e.consume(o),e.exit("lineEnding"),t=!0,r):ee(o)?oe(e,r,t?"linePrefix":"lineSuffix")(o):n(o)}}function _e(e){return e.replace(/[\t\n\r ]+/g," ").replace(/^ | $/g,"").toLowerCase().toUpperCase()}const Te={name:"definition",tokenize:function(e,n,t){const r=this;let o;return function(n){return e.enter("definition"),Be.call(r,e,l,t,"definitionLabel","definitionLabelMarker","definitionLabelString")(n)};function l(n){return o=_e(r.sliceSerialize(r.events[r.events.length-1][1]).slice(1,-1)),58===n?(e.enter("definitionMarker"),e.consume(n),e.exit("definitionMarker"),Pe(e,Fe(e,e.attempt(Ie,oe(e,a,"whitespace"),oe(e,a,"whitespace")),t,"definitionDestination","definitionDestinationLiteral","definitionDestinationLiteralMarker","definitionDestinationRaw","definitionDestinationString"))):t(n)}function a(l){return null===l||J(l)?(e.exit("definition"),r.parser.defined.includes(o)||r.parser.defined.push(o),n(l)):t(l)}}},Ie={tokenize:function(e,n,t){return function(n){return Z(n)?Pe(e,r)(n):t(n)};function r(n){return 34===n||39===n||40===n?Ue(e,oe(e,o,"whitespace"),t,"definitionTitle","definitionTitleMarker","definitionTitleString")(n):t(n)}function o(e){return null===e||J(e)?n(e):t(e)}},partial:!0},Oe={name:"codeIndented",tokenize:function(e,n,t){const r=this;return function(n){return e.enter("codeIndented"),oe(e,o,"linePrefix",5)(n)};function o(e){const n=r.events[r.events.length-1];return n&&"linePrefix"===n[1].type&&n[2].sliceSerialize(n[1],!0).length>=4?l(e):t(e)}function l(n){return null===n?i(n):J(n)?e.attempt(Le,l,i)(n):(e.enter("codeFlowValue"),a(n))}function a(n){return null===n||J(n)?(e.exit("codeFlowValue"),l(n)):(e.consume(n),a)}function i(t){return e.exit("codeIndented"),n(t)}}},Le={tokenize:function(e,n,t){const r=this;return o;function o(n){return r.parser.lazy[r.now().line]?t(n):J(n)?(e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),o):oe(e,l,"linePrefix",5)(n)}function l(e){const l=r.events[r.events.length-1];return l&&"linePrefix"===l[1].type&&l[2].sliceSerialize(l[1],!0).length>=4?n(e):J(e)?o(e):t(e)}},partial:!0},De={name:"headingAtx",tokenize:function(e,n,t){const r=this;let o=0;return function(n){return e.enter("atxHeading"),e.enter("atxHeadingSequence"),l(n)};function l(i){return 35===i&&o++<6?(e.consume(i),l):null===i||Z(i)?(e.exit("atxHeadingSequence"),r.interrupt?n(i):a(i)):t(i)}function a(t){return 35===t?(e.enter("atxHeadingSequence"),i(t)):null===t||J(t)?(e.exit("atxHeading"),n(t)):ee(t)?oe(e,a,"whitespace")(t):(e.enter("atxHeadingText"),u(t))}function i(n){return 35===n?(e.consume(n),i):(e.exit("atxHeadingSequence"),a(n))}function u(n){return null===n||35===n||Z(n)?(e.exit("atxHeadingText"),a(n)):(e.consume(n),u)}},resolve:function(e,n){let t,r,o=e.length-2,l=3;return"whitespace"===e[l][1].type&&(l+=2),o-2>l&&"whitespace"===e[o][1].type&&(o-=2),"atxHeadingSequence"===e[o][1].type&&(l===o-1||o-4>l&&"whitespace"===e[o-2][1].type)&&(o-=l+1===o?2:4),o>l&&(t={type:"atxHeadingText",start:e[l][1].start,end:e[o][1].end},r={type:"chunkText",start:e[l][1].start,end:e[o][1].end,contentType:"text"},M(e,l,o-l+1,[["enter",t,n],["enter",r,n],["exit",r,n],["exit",t,n]])),e}},ze={name:"setextUnderline",tokenize:function(e,n,t){const r=this;let o,l,a=r.events.length;for(;a--;)if("lineEnding"!==r.events[a][1].type&&"linePrefix"!==r.events[a][1].type&&"content"!==r.events[a][1].type){l="paragraph"===r.events[a][1].type;break}return function(n){return r.parser.lazy[r.now().line]||!r.interrupt&&!l?t(n):(e.enter("setextHeadingLine"),e.enter("setextHeadingLineSequence"),o=n,i(n))};function i(n){return n===o?(e.consume(n),i):(e.exit("setextHeadingLineSequence"),oe(e,u,"lineSuffix")(n))}function u(r){return null===r||J(r)?(e.exit("setextHeadingLine"),n(r)):t(r)}},resolveTo:function(e,n){let t,r,o,l=e.length;for(;l--;)if("enter"===e[l][0]){if("content"===e[l][1].type){t=l;break}"paragraph"===e[l][1].type&&(r=l)}else"content"===e[l][1].type&&e.splice(l,1),o||"definition"!==e[l][1].type||(o=l);const a={type:"setextHeading",start:Object.assign({},e[r][1].start),end:Object.assign({},e[e.length-1][1].end)};return e[r][1].type="setextHeadingText",o?(e.splice(r,0,["enter",a,n]),e.splice(o+1,0,["exit",e[t][1],n]),e[t][1].end=Object.assign({},e[o][1].end)):e[t][1]=a,e.push(["exit",a,n]),e}},Ne=["address","article","aside","base","basefont","blockquote","body","caption","center","col","colgroup","dd","details","dialog","dir","div","dl","dt","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hr","html","iframe","legend","li","link","main","menu","menuitem","nav","noframes","ol","optgroup","option","p","param","section","source","summary","table","tbody","td","tfoot","th","thead","title","tr","track","ul"],Re=["pre","script","style","textarea"],Me={name:"htmlFlow",tokenize:function(e,n,t){const r=this;let o,l,a,i,u;return function(n){return e.enter("htmlFlow"),e.enter("htmlFlowData"),e.consume(n),s};function s(i){return 33===i?(e.consume(i),c):47===i?(e.consume(i),p):63===i?(e.consume(i),o=3,r.interrupt?n:O):q(i)?(e.consume(i),a=String.fromCharCode(i),l=!0,h):t(i)}function c(l){return 45===l?(e.consume(l),o=2,f):91===l?(e.consume(l),o=5,a="CDATA[",i=0,d):q(l)?(e.consume(l),o=4,r.interrupt?n:O):t(l)}function f(o){return 45===o?(e.consume(o),r.interrupt?n:O):t(o)}function d(o){return o===a.charCodeAt(i++)?(e.consume(o),i===a.length?r.interrupt?n:E:d):t(o)}function p(n){return q(n)?(e.consume(n),a=String.fromCharCode(n),h):t(n)}function h(i){return null===i||47===i||62===i||Z(i)?47!==i&&l&&Re.includes(a.toLowerCase())?(o=1,r.interrupt?n(i):E(i)):Ne.includes(a.toLowerCase())?(o=6,47===i?(e.consume(i),m):r.interrupt?n(i):E(i)):(o=7,r.interrupt&&!r.parser.lazy[r.now().line]?t(i):l?y(i):g(i)):45===i||K(i)?(e.consume(i),a+=String.fromCharCode(i),h):t(i)}function m(o){return 62===o?(e.consume(o),r.interrupt?n:E):t(o)}function g(n){return ee(n)?(e.consume(n),g):C(n)}function y(n){return 47===n?(e.consume(n),C):58===n||95===n||q(n)?(e.consume(n),v):ee(n)?(e.consume(n),y):C(n)}function v(n){return 45===n||46===n||58===n||95===n||K(n)?(e.consume(n),v):b(n)}function b(n){return 61===n?(e.consume(n),w):ee(n)?(e.consume(n),b):y(n)}function w(n){return null===n||60===n||61===n||62===n||96===n?t(n):34===n||39===n?(e.consume(n),u=n,k):ee(n)?(e.consume(n),w):(u=null,A(n))}function k(n){return null===n||J(n)?t(n):n===u?(e.consume(n),x):(e.consume(n),k)}function A(n){return null===n||34===n||39===n||60===n||61===n||62===n||96===n||Z(n)?b(n):(e.consume(n),A)}function x(e){return 47===e||62===e||ee(e)?y(e):t(e)}function C(n){return 62===n?(e.consume(n),S):t(n)}function S(n){return ee(n)?(e.consume(n),S):null===n||J(n)?E(n):t(n)}function E(n){return 45===n&&2===o?(e.consume(n),P):60===n&&1===o?(e.consume(n),_):62===n&&4===o?(e.consume(n),L):63===n&&3===o?(e.consume(n),O):93===n&&5===o?(e.consume(n),I):!J(n)||6!==o&&7!==o?null===n||J(n)?F(n):(e.consume(n),E):e.check(je,L,F)(n)}function F(n){return e.exit("htmlFlowData"),B(n)}function B(n){return null===n?D(n):J(n)?e.attempt({tokenize:U,partial:!0},B,D)(n):(e.enter("htmlFlowData"),E(n))}function U(e,n,t){return function(n){return e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),o};function o(e){return r.parser.lazy[r.now().line]?t(e):n(e)}}function P(n){return 45===n?(e.consume(n),O):E(n)}function _(n){return 47===n?(e.consume(n),a="",T):E(n)}function T(n){return 62===n&&Re.includes(a.toLowerCase())?(e.consume(n),L):q(n)&&a.length<8?(e.consume(n),a+=String.fromCharCode(n),T):E(n)}function I(n){return 93===n?(e.consume(n),O):E(n)}function O(n){return 62===n?(e.consume(n),L):E(n)}function L(n){return null===n||J(n)?(e.exit("htmlFlowData"),D(n)):(e.consume(n),L)}function D(t){return e.exit("htmlFlow"),n(t)}},resolveTo:function(e){let n=e.length;for(;n--&&("enter"!==e[n][0]||"htmlFlow"!==e[n][1].type););return n>1&&"linePrefix"===e[n-2][1].type&&(e[n][1].start=e[n-2][1].start,e[n+1][1].start=e[n-2][1].start,e.splice(n-2,2)),e},concrete:!0},je={tokenize:function(e,n,t){return function(r){return e.exit("htmlFlowData"),e.enter("lineEndingBlank"),e.consume(r),e.exit("lineEndingBlank"),e.attempt(ue,n,t)}},partial:!0},$e={name:"codeFenced",tokenize:function(e,n,t){const r=this,o={tokenize:function(e,n,t){let r=0;return oe(e,(function(n){return e.enter("codeFencedFence"),e.enter("codeFencedFenceSequence"),o(n)}),"linePrefix",this.parser.constructs.disable.null.includes("codeIndented")?void 0:4);function o(n){return n===u?(e.consume(n),r++,o):r<s?t(n):(e.exit("codeFencedFenceSequence"),oe(e,l,"whitespace")(n))}function l(r){return null===r||J(r)?(e.exit("codeFencedFence"),n(r)):t(r)}},partial:!0},l={tokenize:function(e,n,t){const r=this;return function(n){return e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),o};function o(e){return r.parser.lazy[r.now().line]?t(e):n(e)}},partial:!0},a=this.events[this.events.length-1],i=a&&"linePrefix"===a[1].type?a[2].sliceSerialize(a[1],!0).length:0;let u,s=0;return function(n){return e.enter("codeFenced"),e.enter("codeFencedFence"),e.enter("codeFencedFenceSequence"),u=n,c(n)};function c(n){return n===u?(e.consume(n),s++,c):(e.exit("codeFencedFenceSequence"),s<3?t(n):oe(e,f,"whitespace")(n))}function f(n){return null===n||J(n)?m(n):(e.enter("codeFencedFenceInfo"),e.enter("chunkString",{contentType:"string"}),d(n))}function d(n){return null===n||Z(n)?(e.exit("chunkString"),e.exit("codeFencedFenceInfo"),oe(e,p,"whitespace")(n)):96===n&&n===u?t(n):(e.consume(n),d)}function p(n){return null===n||J(n)?m(n):(e.enter("codeFencedFenceMeta"),e.enter("chunkString",{contentType:"string"}),h(n))}function h(n){return null===n||J(n)?(e.exit("chunkString"),e.exit("codeFencedFenceMeta"),m(n)):96===n&&n===u?t(n):(e.consume(n),h)}function m(t){return e.exit("codeFencedFence"),r.interrupt?n(t):g(t)}function g(n){return null===n?v(n):J(n)?e.attempt(l,e.attempt(o,v,i?oe(e,g,"linePrefix",i+1):g),v)(n):(e.enter("codeFlowValue"),y(n))}function y(n){return null===n||J(n)?(e.exit("codeFlowValue"),g(n)):(e.consume(n),y)}function v(t){return e.exit("codeFenced"),n(t)}},concrete:!0};var He,Ve=59;function qe(e){var n,t="&"+e+";";return(He=He||document.createElement("i")).innerHTML=t,((n=He.textContent).charCodeAt(n.length-1)!==Ve||"semi"===e)&&n!==t&&n}const We={name:"characterReference",tokenize:function(e,n,t){const r=this;let o,l,a=0;return function(n){return e.enter("characterReference"),e.enter("characterReferenceMarker"),e.consume(n),e.exit("characterReferenceMarker"),i};function i(n){return 35===n?(e.enter("characterReferenceMarkerNumeric"),e.consume(n),e.exit("characterReferenceMarkerNumeric"),u):(e.enter("characterReferenceValue"),o=31,l=K,s(n))}function u(n){return 88===n||120===n?(e.enter("characterReferenceMarkerHexadecimal"),e.consume(n),e.exit("characterReferenceMarkerHexadecimal"),e.enter("characterReferenceValue"),o=6,l=Q,s):(e.enter("characterReferenceValue"),o=7,l=W,s(n))}function s(i){let u;return 59===i&&a?(u=e.exit("characterReferenceValue"),l!==K||qe(r.sliceSerialize(u))?(e.enter("characterReferenceMarker"),e.consume(i),e.exit("characterReferenceMarker"),e.exit("characterReference"),n):t(i)):l(i)&&a++<o?(e.consume(i),s):t(i)}}},Qe={name:"characterEscape",tokenize:function(e,n,t){return function(n){return e.enter("characterEscape"),e.enter("escapeMarker"),e.consume(n),e.exit("escapeMarker"),r};function r(r){return Y(r)?(e.enter("characterEscapeValue"),e.consume(r),e.exit("characterEscapeValue"),e.exit("characterEscape"),n):t(r)}}},Ke={name:"lineEnding",tokenize:function(e,n){return function(t){return e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),oe(e,n,"linePrefix")}}},Ye={name:"labelEnd",tokenize:function(e,n,t){const r=this;let o,l,a=r.events.length;for(;a--;)if(("labelImage"===r.events[a][1].type||"labelLink"===r.events[a][1].type)&&!r.events[a][1]._balanced){o=r.events[a][1];break}return function(n){return o?o._inactive?u(n):(l=r.parser.defined.includes(_e(r.sliceSerialize({start:o.end,end:r.now()}))),e.enter("labelEnd"),e.enter("labelMarker"),e.consume(n),e.exit("labelMarker"),e.exit("labelEnd"),i):t(n)};function i(t){return 40===t?e.attempt(Ge,n,l?n:u)(t):91===t?e.attempt(Xe,n,l?e.attempt(Ze,n,u):u)(t):l?n(t):u(t)}function u(e){return o._balanced=!0,t(e)}},resolveTo:function(e,n){let t,r,o,l,a=e.length,i=0;for(;a--;)if(t=e[a][1],r){if("link"===t.type||"labelLink"===t.type&&t._inactive)break;"enter"===e[a][0]&&"labelLink"===t.type&&(t._inactive=!0)}else if(o){if("enter"===e[a][0]&&("labelImage"===t.type||"labelLink"===t.type)&&!t._balanced&&(r=a,"labelLink"!==t.type)){i=2;break}}else"labelEnd"===t.type&&(o=a);const u={type:"labelLink"===e[r][1].type?"link":"image",start:Object.assign({},e[r][1].start),end:Object.assign({},e[e.length-1][1].end)},s={type:"label",start:Object.assign({},e[r][1].start),end:Object.assign({},e[o][1].end)},c={type:"labelText",start:Object.assign({},e[r+i+2][1].end),end:Object.assign({},e[o-2][1].start)};return l=[["enter",u,n],["enter",s,n]],l=j(l,e.slice(r+1,r+i+3)),l=j(l,[["enter",c,n]]),l=j(l,we(n.parser.constructs.insideSpan.null,e.slice(r+i+4,o-3),n)),l=j(l,[["exit",c,n],e[o-2],e[o-1],["exit",s,n]]),l=j(l,e.slice(o+1)),l=j(l,[["exit",u,n]]),M(e,r,e.length,l),e},resolveAll:function(e){let n,t=-1;for(;++t<e.length;)n=e[t][1],"labelImage"!==n.type&&"labelLink"!==n.type&&"labelEnd"!==n.type||(e.splice(t+1,"labelImage"===n.type?4:2),n.type="data",t++);return e}},Ge={tokenize:function(e,n,t){return function(n){return e.enter("resource"),e.enter("resourceMarker"),e.consume(n),e.exit("resourceMarker"),Pe(e,r)};function r(n){return 41===n?a(n):Fe(e,o,t,"resourceDestination","resourceDestinationLiteral","resourceDestinationLiteralMarker","resourceDestinationRaw","resourceDestinationString",3)(n)}function o(n){return Z(n)?Pe(e,l)(n):a(n)}function l(n){return 34===n||39===n||40===n?Ue(e,Pe(e,a),t,"resourceTitle","resourceTitleMarker","resourceTitleString")(n):a(n)}function a(r){return 41===r?(e.enter("resourceMarker"),e.consume(r),e.exit("resourceMarker"),e.exit("resource"),n):t(r)}}},Xe={tokenize:function(e,n,t){const r=this;return function(n){return Be.call(r,e,o,t,"reference","referenceMarker","referenceString")(n)};function o(e){return r.parser.defined.includes(_e(r.sliceSerialize(r.events[r.events.length-1][1]).slice(1,-1)))?n(e):t(e)}}},Ze={tokenize:function(e,n,t){return function(n){return e.enter("reference"),e.enter("referenceMarker"),e.consume(n),e.exit("referenceMarker"),r};function r(r){return 93===r?(e.enter("referenceMarker"),e.consume(r),e.exit("referenceMarker"),e.exit("reference"),n):t(r)}}},Je={name:"labelStartImage",tokenize:function(e,n,t){const r=this;return function(n){return e.enter("labelImage"),e.enter("labelImageMarker"),e.consume(n),e.exit("labelImageMarker"),o};function o(n){return 91===n?(e.enter("labelMarker"),e.consume(n),e.exit("labelMarker"),e.exit("labelImage"),l):t(n)}function l(e){return 94===e&&"_hiddenFootnoteSupport"in r.parser.constructs?t(e):n(e)}},resolveAll:Ye.resolveAll};function en(e){return null===e||Z(e)||ne(e)?1:te(e)?2:void 0}const nn={name:"attention",tokenize:function(e,n){const t=this.parser.constructs.attentionMarkers.null,r=this.previous,o=en(r);let l;return function(n){return e.enter("attentionSequence"),l=n,a(n)};function a(i){if(i===l)return e.consume(i),a;const u=e.exit("attentionSequence"),s=en(i),c=!s||2===s&&o||t.includes(i),f=!o||2===o&&s||t.includes(r);return u._open=Boolean(42===l?c:c&&(o||!f)),u._close=Boolean(42===l?f:f&&(s||!c)),n(i)}},resolveAll:function(e,n){let t,r,o,l,a,i,u,s,c=-1;for(;++c<e.length;)if("enter"===e[c][0]&&"attentionSequence"===e[c][1].type&&e[c][1]._close)for(t=c;t--;)if("exit"===e[t][0]&&"attentionSequence"===e[t][1].type&&e[t][1]._open&&n.sliceSerialize(e[t][1]).charCodeAt(0)===n.sliceSerialize(e[c][1]).charCodeAt(0)){if((e[t][1]._close||e[c][1]._open)&&(e[c][1].end.offset-e[c][1].start.offset)%3&&!((e[t][1].end.offset-e[t][1].start.offset+e[c][1].end.offset-e[c][1].start.offset)%3))continue;i=e[t][1].end.offset-e[t][1].start.offset>1&&e[c][1].end.offset-e[c][1].start.offset>1?2:1;const f=Object.assign({},e[t][1].end),d=Object.assign({},e[c][1].start);tn(f,-i),tn(d,i),l={type:i>1?"strongSequence":"emphasisSequence",start:f,end:Object.assign({},e[t][1].end)},a={type:i>1?"strongSequence":"emphasisSequence",start:Object.assign({},e[c][1].start),end:d},o={type:i>1?"strongText":"emphasisText",start:Object.assign({},e[t][1].end),end:Object.assign({},e[c][1].start)},r={type:i>1?"strong":"emphasis",start:Object.assign({},l.start),end:Object.assign({},a.end)},e[t][1].end=Object.assign({},l.start),e[c][1].start=Object.assign({},a.end),u=[],e[t][1].end.offset-e[t][1].start.offset&&(u=j(u,[["enter",e[t][1],n],["exit",e[t][1],n]])),u=j(u,[["enter",r,n],["enter",l,n],["exit",l,n],["enter",o,n]]),u=j(u,we(n.parser.constructs.insideSpan.null,e.slice(t+1,c),n)),u=j(u,[["exit",o,n],["enter",a,n],["exit",a,n],["exit",r,n]]),e[c][1].end.offset-e[c][1].start.offset?(s=2,u=j(u,[["enter",e[c][1],n],["exit",e[c][1],n]])):s=0,M(e,t-1,c-t+3,u),c=t+u.length-s-2;break}for(c=-1;++c<e.length;)"attentionSequence"===e[c][1].type&&(e[c][1].type="data");return e}};function tn(e,n){e.column+=n,e.offset+=n,e._bufferIndex+=n}const rn={name:"autolink",tokenize:function(e,n,t){let r=1;return function(n){return e.enter("autolink"),e.enter("autolinkMarker"),e.consume(n),e.exit("autolinkMarker"),e.enter("autolinkProtocol"),o};function o(n){return q(n)?(e.consume(n),l):G(n)?u(n):t(n)}function l(e){return 43===e||45===e||46===e||K(e)?a(e):u(e)}function a(n){return 58===n?(e.consume(n),i):(43===n||45===n||46===n||K(n))&&r++<32?(e.consume(n),a):u(n)}function i(n){return 62===n?(e.exit("autolinkProtocol"),d(n)):null===n||32===n||60===n||X(n)?t(n):(e.consume(n),i)}function u(n){return 64===n?(e.consume(n),r=0,s):G(n)?(e.consume(n),u):t(n)}function s(e){return K(e)?c(e):t(e)}function c(n){return 46===n?(e.consume(n),r=0,s):62===n?(e.exit("autolinkProtocol").type="autolinkEmail",d(n)):f(n)}function f(n){return(45===n||K(n))&&r++<63?(e.consume(n),45===n?f:c):t(n)}function d(t){return e.enter("autolinkMarker"),e.consume(t),e.exit("autolinkMarker"),e.exit("autolink"),n}}},on={name:"htmlText",tokenize:function(e,n,t){const r=this;let o,l,a,i;return function(n){return e.enter("htmlText"),e.enter("htmlTextData"),e.consume(n),u};function u(n){return 33===n?(e.consume(n),s):47===n?(e.consume(n),A):63===n?(e.consume(n),w):q(n)?(e.consume(n),S):t(n)}function s(n){return 45===n?(e.consume(n),c):91===n?(e.consume(n),l="CDATA[",a=0,m):q(n)?(e.consume(n),b):t(n)}function c(n){return 45===n?(e.consume(n),f):t(n)}function f(n){return null===n||62===n?t(n):45===n?(e.consume(n),d):p(n)}function d(e){return null===e||62===e?t(e):p(e)}function p(n){return null===n?t(n):45===n?(e.consume(n),h):J(n)?(i=p,I(n)):(e.consume(n),p)}function h(n){return 45===n?(e.consume(n),L):p(n)}function m(n){return n===l.charCodeAt(a++)?(e.consume(n),a===l.length?g:m):t(n)}function g(n){return null===n?t(n):93===n?(e.consume(n),y):J(n)?(i=g,I(n)):(e.consume(n),g)}function y(n){return 93===n?(e.consume(n),v):g(n)}function v(n){return 62===n?L(n):93===n?(e.consume(n),v):g(n)}function b(n){return null===n||62===n?L(n):J(n)?(i=b,I(n)):(e.consume(n),b)}function w(n){return null===n?t(n):63===n?(e.consume(n),k):J(n)?(i=w,I(n)):(e.consume(n),w)}function k(e){return 62===e?L(e):w(e)}function A(n){return q(n)?(e.consume(n),x):t(n)}function x(n){return 45===n||K(n)?(e.consume(n),x):C(n)}function C(n){return J(n)?(i=C,I(n)):ee(n)?(e.consume(n),C):L(n)}function S(n){return 45===n||K(n)?(e.consume(n),S):47===n||62===n||Z(n)?E(n):t(n)}function E(n){return 47===n?(e.consume(n),L):58===n||95===n||q(n)?(e.consume(n),F):J(n)?(i=E,I(n)):ee(n)?(e.consume(n),E):L(n)}function F(n){return 45===n||46===n||58===n||95===n||K(n)?(e.consume(n),F):B(n)}function B(n){return 61===n?(e.consume(n),U):J(n)?(i=B,I(n)):ee(n)?(e.consume(n),B):E(n)}function U(n){return null===n||60===n||61===n||62===n||96===n?t(n):34===n||39===n?(e.consume(n),o=n,P):J(n)?(i=U,I(n)):ee(n)?(e.consume(n),U):(e.consume(n),o=void 0,T)}function P(n){return n===o?(e.consume(n),_):null===n?t(n):J(n)?(i=P,I(n)):(e.consume(n),P)}function _(e){return 62===e||47===e||Z(e)?E(e):t(e)}function T(n){return null===n||34===n||39===n||60===n||61===n||96===n?t(n):62===n||Z(n)?E(n):(e.consume(n),T)}function I(n){return e.exit("htmlTextData"),e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),oe(e,O,"linePrefix",r.parser.constructs.disable.null.includes("codeIndented")?void 0:4)}function O(n){return e.enter("htmlTextData"),i(n)}function L(r){return 62===r?(e.consume(r),e.exit("htmlTextData"),e.exit("htmlText"),n):t(r)}}},ln={name:"labelStartLink",tokenize:function(e,n,t){const r=this;return function(n){return e.enter("labelLink"),e.enter("labelMarker"),e.consume(n),e.exit("labelMarker"),e.exit("labelLink"),o};function o(e){return 94===e&&"_hiddenFootnoteSupport"in r.parser.constructs?t(e):n(e)}},resolveAll:Ye.resolveAll},an={name:"hardBreakEscape",tokenize:function(e,n,t){return function(n){return e.enter("hardBreakEscape"),e.enter("escapeMarker"),e.consume(n),r};function r(r){return J(r)?(e.exit("escapeMarker"),e.exit("hardBreakEscape"),n(r)):t(r)}}},un={name:"codeText",tokenize:function(e,n,t){let r,o,l=0;return function(n){return e.enter("codeText"),e.enter("codeTextSequence"),a(n)};function a(n){return 96===n?(e.consume(n),l++,a):(e.exit("codeTextSequence"),i(n))}function i(n){return null===n?t(n):96===n?(o=e.enter("codeTextSequence"),r=0,s(n)):32===n?(e.enter("space"),e.consume(n),e.exit("space"),i):J(n)?(e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),i):(e.enter("codeTextData"),u(n))}function u(n){return null===n||32===n||96===n||J(n)?(e.exit("codeTextData"),i(n)):(e.consume(n),u)}function s(t){return 96===t?(e.consume(t),r++,s):r===l?(e.exit("codeTextSequence"),e.exit("codeText"),n(t)):(o.type="codeTextData",u(t))}},resolve:function(e){let n,t,r=e.length-4,o=3;if(!("lineEnding"!==e[o][1].type&&"space"!==e[o][1].type||"lineEnding"!==e[r][1].type&&"space"!==e[r][1].type))for(n=o;++n<r;)if("codeTextData"===e[n][1].type){e[o][1].type="codeTextPadding",e[r][1].type="codeTextPadding",o+=2,r-=2;break}for(n=o-1,r++;++n<=r;)void 0===t?n!==r&&"lineEnding"!==e[n][1].type&&(t=n):n!==r&&"lineEnding"!==e[n][1].type||(e[t][1].type="codeTextData",n!==t+2&&(e[t][1].end=e[n-1][1].end,e.splice(t+2,n-t-2),r-=n-t-2,n=t+2),t=void 0);return e},previous:function(e){return 96!==e||"characterEscape"===this.events[this.events.length-1][1].type}},sn={42:xe,43:xe,45:xe,48:xe,49:xe,50:xe,51:xe,52:xe,53:xe,54:xe,55:xe,56:xe,57:xe,62:Ee},cn={91:Te},fn={[-2]:Oe,[-1]:Oe,32:Oe},dn={35:De,42:Ae,45:[ze,Ae],60:Me,61:ze,95:Ae,96:$e,126:$e},pn={38:We,92:Qe},hn={[-5]:Ke,[-4]:Ke,[-3]:Ke,33:Je,38:We,42:nn,60:[rn,on],91:ln,92:[an,Qe],93:Ye,95:nn,96:un},mn={null:[nn,he]},gn={null:[42,95]},yn={null:[]};const vn=/[\0\t\n\r]/g;function bn(e,n){const t=Number.parseInt(e,n);return t<9||11===t||t>13&&t<32||t>126&&t<160||t>55295&&t<57344||t>64975&&t<65008||65535==(65535&t)||65534==(65535&t)||t>1114111?"�":String.fromCharCode(t)}const wn=/\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;function kn(e,n,t){if(n)return n;if(35===t.charCodeAt(0)){const e=t.charCodeAt(1),n=120===e||88===e;return bn(t.slice(n?2:1),n?16:10)}return qe(t)||e}const An={}.hasOwnProperty,xn=function(e,n,t){return"string"!=typeof n&&(t=n,n=void 0),function(e={}){const n=Cn({transforms:[],canContainEols:["emphasis","fragment","heading","paragraph","strong"],enter:{autolink:i(A),autolinkProtocol:h,autolinkEmail:h,atxHeading:i(b),blockQuote:i((function(){return{type:"blockquote",children:[]}})),characterEscape:h,characterReference:h,codeFenced:i(v),codeFencedFenceInfo:s,codeFencedFenceMeta:s,codeIndented:i(v,s),codeText:i((function(){return{type:"inlineCode",value:""}}),s),codeTextData:h,data:h,codeFlowValue:h,definition:i((function(){return{type:"definition",identifier:"",label:null,title:null,url:""}})),definitionDestinationString:s,definitionLabelString:s,definitionTitleString:s,emphasis:i((function(){return{type:"emphasis",children:[]}})),hardBreakEscape:i(w),hardBreakTrailing:i(w),htmlFlow:i(k,s),htmlFlowData:h,htmlText:i(k,s),htmlTextData:h,image:i((function(){return{type:"image",title:null,url:"",alt:null}})),label:s,link:i(A),listItem:i((function(e){return{type:"listItem",spread:e._spread,checked:null,children:[]}})),listItemValue:function(e){l("expectingFirstListItemValue")&&(this.stack[this.stack.length-2].start=Number.parseInt(this.sliceSerialize(e),10),o("expectingFirstListItemValue"))},listOrdered:i(x,(function(){o("expectingFirstListItemValue",!0)})),listUnordered:i(x),paragraph:i((function(){return{type:"paragraph",children:[]}})),reference:function(){o("referenceType","collapsed")},referenceString:s,resourceDestinationString:s,resourceTitleString:s,setextHeading:i(b),strong:i((function(){return{type:"strong",children:[]}})),thematicBreak:i((function(){return{type:"thematicBreak"}}))},exit:{atxHeading:f(),atxHeadingSequence:function(e){const n=this.stack[this.stack.length-1];if(!n.depth){const t=this.sliceSerialize(e).length;n.depth=t}},autolink:f(),autolinkEmail:function(e){m.call(this,e),this.stack[this.stack.length-1].url="mailto:"+this.sliceSerialize(e)},autolinkProtocol:function(e){m.call(this,e),this.stack[this.stack.length-1].url=this.sliceSerialize(e)},blockQuote:f(),characterEscapeValue:m,characterReferenceMarkerHexadecimal:y,characterReferenceMarkerNumeric:y,characterReferenceValue:function(e){const n=this.sliceSerialize(e),t=l("characterReferenceType");let r;t?(r=bn(n,"characterReferenceMarkerNumeric"===t?10:16),o("characterReferenceType")):r=qe(n);const i=this.stack.pop();i.value+=r,i.position.end=a(e.end)},codeFenced:f((function(){const e=this.resume();this.stack[this.stack.length-1].value=e.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g,""),o("flowCodeInside")})),codeFencedFence:function(){l("flowCodeInside")||(this.buffer(),o("flowCodeInside",!0))},codeFencedFenceInfo:function(){const e=this.resume();this.stack[this.stack.length-1].lang=e},codeFencedFenceMeta:function(){const e=this.resume();this.stack[this.stack.length-1].meta=e},codeFlowValue:m,codeIndented:f((function(){const e=this.resume();this.stack[this.stack.length-1].value=e.replace(/(\r?\n|\r)$/g,"")})),codeText:f((function(){const e=this.resume();this.stack[this.stack.length-1].value=e})),codeTextData:m,data:m,definition:f(),definitionDestinationString:function(){const e=this.resume();this.stack[this.stack.length-1].url=e},definitionLabelString:function(e){const n=this.resume(),t=this.stack[this.stack.length-1];t.label=n,t.identifier=_e(this.sliceSerialize(e)).toLowerCase()},definitionTitleString:function(){const e=this.resume();this.stack[this.stack.length-1].title=e},emphasis:f(),hardBreakEscape:f(g),hardBreakTrailing:f(g),htmlFlow:f((function(){const e=this.resume();this.stack[this.stack.length-1].value=e})),htmlFlowData:m,htmlText:f((function(){const e=this.resume();this.stack[this.stack.length-1].value=e})),htmlTextData:m,image:f((function(){const e=this.stack[this.stack.length-1];l("inReference")?(e.type+="Reference",e.referenceType=l("referenceType")||"shortcut",delete e.url,delete e.title):(delete e.identifier,delete e.label),o("referenceType")})),label:function(){const e=this.stack[this.stack.length-1],n=this.resume(),t=this.stack[this.stack.length-1];o("inReference",!0),"link"===t.type?t.children=e.children:t.alt=n},labelText:function(e){const n=this.stack[this.stack.length-2],t=this.sliceSerialize(e);n.label=function(e){return e.replace(wn,kn)}(t),n.identifier=_e(t).toLowerCase()},lineEnding:function(e){const t=this.stack[this.stack.length-1];if(l("atHardBreak"))return t.children[t.children.length-1].position.end=a(e.end),void o("atHardBreak");!l("setextHeadingSlurpLineEnding")&&n.canContainEols.includes(t.type)&&(h.call(this,e),m.call(this,e))},link:f((function(){const e=this.stack[this.stack.length-1];l("inReference")?(e.type+="Reference",e.referenceType=l("referenceType")||"shortcut",delete e.url,delete e.title):(delete e.identifier,delete e.label),o("referenceType")})),listItem:f(),listOrdered:f(),listUnordered:f(),paragraph:f(),referenceString:function(e){const n=this.resume(),t=this.stack[this.stack.length-1];t.label=n,t.identifier=_e(this.sliceSerialize(e)).toLowerCase(),o("referenceType","full")},resourceDestinationString:function(){const e=this.resume();this.stack[this.stack.length-1].url=e},resourceTitleString:function(){const e=this.resume();this.stack[this.stack.length-1].title=e},resource:function(){o("inReference")},setextHeading:f((function(){o("setextHeadingSlurpLineEnding")})),setextHeadingLineSequence:function(e){this.stack[this.stack.length-1].depth=61===this.sliceSerialize(e).charCodeAt(0)?1:2},setextHeadingText:function(){o("setextHeadingSlurpLineEnding",!0)},strong:f(),thematicBreak:f()}},e.mdastExtensions||[]),t={};return function(e){let t={type:"root",children:[]};const i=[],f=[],h={stack:[t],tokenStack:i,config:n,enter:c,exit:d,buffer:s,resume:p,setData:o,getData:l};let m=-1;for(;++m<e.length;)"listOrdered"!==e[m][1].type&&"listUnordered"!==e[m][1].type||("enter"===e[m][0]?f.push(m):m=r(e,f.pop(),m));for(m=-1;++m<e.length;){const t=n[e[m][0]];An.call(t,e[m][1].type)&&t[e[m][1].type].call(Object.assign({sliceSerialize:e[m][2].sliceSerialize},h),e[m][1])}if(i.length>0)throw new Error("Cannot close document, a token (`"+i[i.length-1].type+"`, "+u({start:i[i.length-1].start,end:i[i.length-1].end})+") is still open");for(t.position={start:a(e.length>0?e[0][1].start:{line:1,column:1,offset:0}),end:a(e.length>0?e[e.length-2][1].end:{line:1,column:1,offset:0})},m=-1;++m<n.transforms.length;)t=n.transforms[m](t)||t;return t};function r(e,n,t){let r,o,l,a,i=n-1,u=-1,s=!1;for(;++i<=t;){const n=e[i];if("listUnordered"===n[1].type||"listOrdered"===n[1].type||"blockQuote"===n[1].type?("enter"===n[0]?u++:u--,a=void 0):"lineEndingBlank"===n[1].type?"enter"===n[0]&&(!r||a||u||l||(l=i),a=void 0):"linePrefix"===n[1].type||"listItemValue"===n[1].type||"listItemMarker"===n[1].type||"listItemPrefix"===n[1].type||"listItemPrefixWhitespace"===n[1].type||(a=void 0),!u&&"enter"===n[0]&&"listItemPrefix"===n[1].type||-1===u&&"exit"===n[0]&&("listUnordered"===n[1].type||"listOrdered"===n[1].type)){if(r){let a=i;for(o=void 0;a--;){const n=e[a];if("lineEnding"===n[1].type||"lineEndingBlank"===n[1].type){if("exit"===n[0])continue;o&&(e[o][1].type="lineEndingBlank",s=!0),n[1].type="lineEnding",o=a}else if("linePrefix"!==n[1].type&&"blockQuotePrefix"!==n[1].type&&"blockQuotePrefixWhitespace"!==n[1].type&&"blockQuoteMarker"!==n[1].type&&"listItemIndent"!==n[1].type)break}l&&(!o||l<o)&&(r._spread=!0),r.end=Object.assign({},o?e[o][1].start:n[1].end),e.splice(o||i,0,["exit",r,n[2]]),i++,t++}"listItemPrefix"===n[1].type&&(r={type:"listItem",_spread:!1,start:Object.assign({},n[1].start)},e.splice(i,0,["enter",r,n[2]]),i++,t++,l=void 0,a=!0)}}return e[n][1]._spread=s,t}function o(e,n){t[e]=n}function l(e){return t[e]}function a(e){return{line:e.line,column:e.column,offset:e.offset}}function i(e,n){return function(t){c.call(this,e(t),t),n&&n.call(this,t)}}function s(){this.stack.push({type:"fragment",children:[]})}function c(e,n){return this.stack[this.stack.length-1].children.push(e),this.stack.push(e),this.tokenStack.push(n),e.position={start:a(n.start)},e}function f(e){return function(n){e&&e.call(this,n),d.call(this,n)}}function d(e){const n=this.stack.pop(),t=this.tokenStack.pop();if(!t)throw new Error("Cannot close `"+e.type+"` ("+u({start:e.start,end:e.end})+"): it’s not open");if(t.type!==e.type)throw new Error("Cannot close `"+e.type+"` ("+u({start:e.start,end:e.end})+"): a different token (`"+t.type+"`, "+u({start:t.start,end:t.end})+") is open");return n.position.end=a(e.end),n}function p(){return function(e,n){var{includeImageAlt:t=!0}={};return N(e,t)}(this.stack.pop())}function h(e){const n=this.stack[this.stack.length-1];let t=n.children[n.children.length-1];t&&"text"===t.type||(t={type:"text",value:""},t.position={start:a(e.start)},n.children.push(t)),this.stack.push(t)}function m(e){const n=this.stack.pop();n.value+=this.sliceSerialize(e),n.position.end=a(e.end)}function g(){o("atHardBreak",!0)}function y(e){o("characterReferenceType",e.type)}function v(){return{type:"code",lang:null,meta:null,value:""}}function b(){return{type:"heading",depth:void 0,children:[]}}function w(){return{type:"break"}}function k(){return{type:"html",value:""}}function A(){return{type:"link",title:null,url:"",children:[]}}function x(e){return{type:"list",ordered:"listOrdered"===e.type,start:null,spread:e._spread,children:[]}}}(t)(function(e){for(;!se(e););return e}(function(e={}){const n=function(e){const n={};let t=-1;for(;++t<e.length;)H(n,e[t]);return n}([r].concat(e.extensions||[])),t={defined:[],lazy:{},constructs:n,content:o(le),document:o(ae),flow:o(pe),string:o(me),text:o(ge)};return t;function o(e){return function(n){return ke(t,e,n)}}}(t).document().write(function(){let e,n=1,t="",r=!0;return function(o,l,a){const i=[];let u,s,c,f,d;for(o=t+o.toString(l),c=0,t="",r&&(65279===o.charCodeAt(0)&&c++,r=void 0);c<o.length;){if(vn.lastIndex=c,u=vn.exec(o),f=u&&void 0!==u.index?u.index:o.length,d=o.charCodeAt(f),!u){t=o.slice(c);break}if(10===d&&c===f&&e)i.push(-3),e=void 0;else switch(e&&(i.push(-5),e=void 0),c<f&&(i.push(o.slice(c,f)),n+=f-c),d){case 0:i.push(65533),n++;break;case 9:for(s=4*Math.ceil(n/4),i.push(-2);n++<s;)i.push(-1);break;case 10:i.push(-4),n=1;break;default:e=!0,n=1}c=f+1}return a&&(e&&i.push(-5),t&&i.push(t),i.push(null)),i}}()(e,n,!0))))};function Cn(e,n){let t=-1;for(;++t<n.length;){const r=n[t];Array.isArray(r)?Cn(e,r):Sn(e,r)}return e}function Sn(e,n){let t;for(t in n)if(An.call(n,t)){const r="canContainEols"===t||"transforms"===t,o=(An.call(e,t)?e[t]:void 0)||(e[t]=r?[]:{}),l=n[t];l&&(r?e[t]=[...o,...l]:Object.assign(o,l))}}const En=function(e){Object.assign(this,{Parser:n=>{const t=this.data("settings");return xn(n,Object.assign({},t,e,{extensions:this.data("micromarkExtensions")||[],mdastExtensions:this.data("fromMarkdownExtensions")||[]}))}})};function Fn(e){const n=[];let t=-1,r=0,o=0;for(;++t<e.length;){const l=e.charCodeAt(t);let a="";if(37===l&&K(e.charCodeAt(t+1))&&K(e.charCodeAt(t+2)))o=2;else if(l<128)/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(l))||(a=String.fromCharCode(l));else if(l>55295&&l<57344){const n=e.charCodeAt(t+1);l<56320&&n>56319&&n<57344?(a=String.fromCharCode(l,n),o=1):a="�"}else a=String.fromCharCode(l);a&&(n.push(e.slice(r,t),encodeURIComponent(a)),r=t+o+1,a=""),o&&(t+=o,o=0)}return n.join("")+e.slice(r)}const Bn=function(e){if(null==e)return Pn;if("string"==typeof e)return n=e,Un((function(e){return e&&e.type===n}));var n;if("object"==typeof e)return Array.isArray(e)?function(e){const n=[];let t=-1;for(;++t<e.length;)n[t]=Bn(e[t]);return Un((function(...e){let t=-1;for(;++t<n.length;)if(n[t].call(this,...e))return!0;return!1}))}(e):function(e){return Un((function(n){let t;for(t in e)if(n[t]!==e[t])return!1;return!0}))}(e);if("function"==typeof e)return Un(e);throw new Error("Expected function, string, or object as test")};function Un(e){return function(n,...t){return Boolean(n&&"object"==typeof n&&"type"in n&&Boolean(e.call(this,n,...t)))}}function Pn(){return!0}const _n=function(e,n,t,r){"function"==typeof n&&"function"!=typeof t&&(r=t,t=n,n=null),function(e,n,t,r){"function"==typeof n&&"function"!=typeof t&&(r=t,t=n,n=null);const o=Bn(n),l=r?-1:1;!function e(a,i,u){const s=a&&"object"==typeof a?a:{};if("string"==typeof s.type){const e="string"==typeof s.tagName?s.tagName:"string"==typeof s.name?s.name:void 0;Object.defineProperty(c,"name",{value:"node ("+a.type+(e?"<"+e+">":"")+")"})}return c;function c(){let s,c,f,d=[];if((!n||o(a,i,u[u.length-1]||null))&&(d=function(e){return Array.isArray(e)?e:"number"==typeof e?[!0,e]:[e]}(t(a,u)),!1===d[0]))return d;if(a.children&&"skip"!==d[0])for(c=(r?a.children.length:-1)+l,f=u.concat(a);c>-1&&c<a.children.length;){if(s=e(a.children[c],c,f)(),!1===s[0])return s;c="number"==typeof s[1]?s[1]:c+l}return d}}(e,void 0,[])()}(e,n,(function(e,n){const r=n[n.length-1];return t(e,r?r.children.indexOf(e):null,r)}),r)},Tn=On("start"),In=On("end");function On(e){return function(n){const t=n&&n.position&&n.position[e]||{};return{line:t.line||null,column:t.column||null,offset:t.offset>-1?t.offset:null}}}const Ln={}.hasOwnProperty;function Dn(e){return String(e||"").toUpperCase()}function zn(e,n){const t=String(n.identifier).toUpperCase(),r=Fn(t.toLowerCase()),o=e.footnoteOrder.indexOf(t);let l;-1===o?(e.footnoteOrder.push(t),e.footnoteCounts[t]=1,l=e.footnoteOrder.length):(e.footnoteCounts[t]++,l=o+1);const a=e.footnoteCounts[t],i={type:"element",tagName:"a",properties:{href:"#"+e.clobberPrefix+"fn-"+r,id:e.clobberPrefix+"fnref-"+r+(a>1?"-"+a:""),dataFootnoteRef:!0,ariaDescribedBy:["footnote-label"]},children:[{type:"text",value:String(l)}]};e.patch(n,i);const u={type:"element",tagName:"sup",properties:{},children:[i]};return e.patch(n,u),e.applyData(n,u)}function Nn(e,n){const t=n.referenceType;let r="]";if("collapsed"===t?r+="[]":"full"===t&&(r+="["+(n.label||n.identifier)+"]"),"imageReference"===n.type)return{type:"text",value:"!["+n.alt+r};const o=e.all(n),l=o[0];l&&"text"===l.type?l.value="["+l.value:o.unshift({type:"text",value:"["});const a=o[o.length-1];return a&&"text"===a.type?a.value+=r:o.push({type:"text",value:r}),o}function Rn(e){const n=e.spread;return null==n?e.children.length>1:n}const Mn=9,jn=32;function $n(e){const n=String(e),t=/\r?\n|\r/g;let r=t.exec(n),o=0;const l=[];for(;r;)l.push(Hn(n.slice(o,r.index),o>0,!0),r[0]),o=r.index+r[0].length,r=t.exec(n);return l.push(Hn(n.slice(o),o>0,!1)),l.join("")}function Hn(e,n,t){let r=0,o=e.length;if(n){let n=e.codePointAt(r);for(;n===Mn||n===jn;)r++,n=e.codePointAt(r)}if(t){let n=e.codePointAt(o-1);for(;n===Mn||n===jn;)o--,n=e.codePointAt(o-1)}return o>r?e.slice(r,o):""}const Vn={blockquote:function(e,n){const t={type:"element",tagName:"blockquote",properties:{},children:e.wrap(e.all(n),!0)};return e.patch(n,t),e.applyData(n,t)},break:function(e,n){const t={type:"element",tagName:"br",properties:{},children:[]};return e.patch(n,t),[e.applyData(n,t),{type:"text",value:"\n"}]},code:function(e,n){const t=n.value?n.value+"\n":"",r=n.lang?n.lang.match(/^[^ \t]+(?=[ \t]|$)/):null,o={};r&&(o.className=["language-"+r]);let l={type:"element",tagName:"code",properties:o,children:[{type:"text",value:t}]};return n.meta&&(l.data={meta:n.meta}),e.patch(n,l),l=e.applyData(n,l),l={type:"element",tagName:"pre",properties:{},children:[l]},e.patch(n,l),l},delete:function(e,n){const t={type:"element",tagName:"del",properties:{},children:e.all(n)};return e.patch(n,t),e.applyData(n,t)},emphasis:function(e,n){const t={type:"element",tagName:"em",properties:{},children:e.all(n)};return e.patch(n,t),e.applyData(n,t)},footnoteReference:zn,footnote:function(e,n){const t=e.footnoteById;let r=1;for(;r in t;)r++;const o=String(r);return t[o]={type:"footnoteDefinition",identifier:o,children:[{type:"paragraph",children:n.children}],position:n.position},zn(e,{type:"footnoteReference",identifier:o,position:n.position})},heading:function(e,n){const t={type:"element",tagName:"h"+n.depth,properties:{},children:e.all(n)};return e.patch(n,t),e.applyData(n,t)},html:function(e,n){if(e.dangerous){const t={type:"raw",value:n.value};return e.patch(n,t),e.applyData(n,t)}return null},imageReference:function(e,n){const t=e.definition(n.identifier);if(!t)return Nn(e,n);const r={src:Fn(t.url||""),alt:n.alt};null!==t.title&&void 0!==t.title&&(r.title=t.title);const o={type:"element",tagName:"img",properties:r,children:[]};return e.patch(n,o),e.applyData(n,o)},image:function(e,n){const t={src:Fn(n.url)};null!==n.alt&&void 0!==n.alt&&(t.alt=n.alt),null!==n.title&&void 0!==n.title&&(t.title=n.title);const r={type:"element",tagName:"img",properties:t,children:[]};return e.patch(n,r),e.applyData(n,r)},inlineCode:function(e,n){const t={type:"text",value:n.value.replace(/\r?\n|\r/g," ")};e.patch(n,t);const r={type:"element",tagName:"code",properties:{},children:[t]};return e.patch(n,r),e.applyData(n,r)},linkReference:function(e,n){const t=e.definition(n.identifier);if(!t)return Nn(e,n);const r={href:Fn(t.url||"")};null!==t.title&&void 0!==t.title&&(r.title=t.title);const o={type:"element",tagName:"a",properties:r,children:e.all(n)};return e.patch(n,o),e.applyData(n,o)},link:function(e,n){const t={href:Fn(n.url)};null!==n.title&&void 0!==n.title&&(t.title=n.title);const r={type:"element",tagName:"a",properties:t,children:e.all(n)};return e.patch(n,r),e.applyData(n,r)},listItem:function(e,n,t){const r=e.all(n),o=t?function(e){let n=!1;if("list"===e.type){n=e.spread||!1;const t=e.children;let r=-1;for(;!n&&++r<t.length;)n=Rn(t[r])}return n}(t):Rn(n),l={},a=[];if("boolean"==typeof n.checked){const e=r[0];let t;e&&"element"===e.type&&"p"===e.tagName?t=e:(t={type:"element",tagName:"p",properties:{},children:[]},r.unshift(t)),t.children.length>0&&t.children.unshift({type:"text",value:" "}),t.children.unshift({type:"element",tagName:"input",properties:{type:"checkbox",checked:n.checked,disabled:!0},children:[]}),l.className=["task-list-item"]}let i=-1;for(;++i<r.length;){const e=r[i];(o||0!==i||"element"!==e.type||"p"!==e.tagName)&&a.push({type:"text",value:"\n"}),"element"!==e.type||"p"!==e.tagName||o?a.push(e):a.push(...e.children)}const u=r[r.length-1];u&&(o||"element"!==u.type||"p"!==u.tagName)&&a.push({type:"text",value:"\n"});const s={type:"element",tagName:"li",properties:l,children:a};return e.patch(n,s),e.applyData(n,s)},list:function(e,n){const t={},r=e.all(n);let o=-1;for("number"==typeof n.start&&1!==n.start&&(t.start=n.start);++o<r.length;){const e=r[o];if("element"===e.type&&"li"===e.tagName&&e.properties&&Array.isArray(e.properties.className)&&e.properties.className.includes("task-list-item")){t.className=["contains-task-list"];break}}const l={type:"element",tagName:n.ordered?"ol":"ul",properties:t,children:e.wrap(r,!0)};return e.patch(n,l),e.applyData(n,l)},paragraph:function(e,n){const t={type:"element",tagName:"p",properties:{},children:e.all(n)};return e.patch(n,t),e.applyData(n,t)},root:function(e,n){const t={type:"root",children:e.wrap(e.all(n))};return e.patch(n,t),e.applyData(n,t)},strong:function(e,n){const t={type:"element",tagName:"strong",properties:{},children:e.all(n)};return e.patch(n,t),e.applyData(n,t)},table:function(e,n){const t=e.all(n),r=t.shift(),o=[];if(r){const t={type:"element",tagName:"thead",properties:{},children:e.wrap([r],!0)};e.patch(n.children[0],t),o.push(t)}if(t.length>0){const r={type:"element",tagName:"tbody",properties:{},children:e.wrap(t,!0)},l=Tn(n.children[1]),a=In(n.children[n.children.length-1]);l.line&&a.line&&(r.position={start:l,end:a}),o.push(r)}const l={type:"element",tagName:"table",properties:{},children:e.wrap(o,!0)};return e.patch(n,l),e.applyData(n,l)},tableCell:function(e,n){const t={type:"element",tagName:"td",properties:{},children:e.all(n)};return e.patch(n,t),e.applyData(n,t)},tableRow:function(e,n,t){const r=t?t.children:void 0,o=0===(r?r.indexOf(n):1)?"th":"td",l=t&&"table"===t.type?t.align:void 0,a=l?l.length:n.children.length;let i=-1;const u=[];for(;++i<a;){const t=n.children[i],r={},a=l?l[i]:void 0;a&&(r.align=a);let s={type:"element",tagName:o,properties:r,children:[]};t&&(s.children=e.all(t),e.patch(t,s),s=e.applyData(n,s)),u.push(s)}const s={type:"element",tagName:"tr",properties:{},children:e.wrap(u,!0)};return e.patch(n,s),e.applyData(n,s)},text:function(e,n){const t={type:"text",value:$n(String(n.value))};return e.patch(n,t),e.applyData(n,t)},thematicBreak:function(e,n){const t={type:"element",tagName:"hr",properties:{},children:[]};return e.patch(n,t),e.applyData(n,t)},toml:qn,yaml:qn,definition:qn,footnoteDefinition:qn};function qn(){return null}const Wn={}.hasOwnProperty;function Qn(e,n){var t;e.position&&(n.position={start:Tn(t=e),end:In(t)})}function Kn(e,n){let t=n;if(e&&e.data){const n=e.data.hName,r=e.data.hChildren,o=e.data.hProperties;"string"==typeof n&&("element"===t.type?t.tagName=n:t={type:"element",tagName:n,properties:{},children:[]}),"element"===t.type&&o&&(t.properties={...t.properties,...o}),"children"in t&&t.children&&null!=r&&(t.children=r)}return t}function Yn(e,n,t){const r=n&&n.type;if(!r)throw new Error("Expected node, got `"+n+"`");return Wn.call(e.handlers,r)?e.handlers[r](e,n,t):e.passThrough&&e.passThrough.includes(r)?"children"in n?{...n,children:Gn(e,n)}:n:e.unknownHandler?e.unknownHandler(e,n,t):function(e,n){const t=n.data||{},r=!("value"in n)||Wn.call(t,"hProperties")||Wn.call(t,"hChildren")?{type:"element",tagName:"div",properties:{},children:Gn(e,n)}:{type:"text",value:n.value};return e.patch(n,r),e.applyData(n,r)}(e,n)}function Gn(e,n){const t=[];if("children"in n){const r=n.children;let o=-1;for(;++o<r.length;){const l=Yn(e,r[o],n);if(l){if(o&&"break"===r[o-1].type&&(Array.isArray(l)||"text"!==l.type||(l.value=l.value.replace(/^\s+/,"")),!Array.isArray(l)&&"element"===l.type)){const e=l.children[0];e&&"text"===e.type&&(e.value=e.value.replace(/^\s+/,""))}Array.isArray(l)?t.push(...l):t.push(l)}}}return t}function Xn(e,n){const t=[];let r=-1;for(n&&t.push({type:"text",value:"\n"});++r<e.length;)r&&t.push({type:"text",value:"\n"}),t.push(e[r]);return n&&e.length>0&&t.push({type:"text",value:"\n"}),t}function Zn(e,n){const t=function(e,n){const t=n||{},r=t.allowDangerousHtml||!1,o={};return a.dangerous=r,a.clobberPrefix=void 0===t.clobberPrefix||null===t.clobberPrefix?"user-content-":t.clobberPrefix,a.footnoteLabel=t.footnoteLabel||"Footnotes",a.footnoteLabelTagName=t.footnoteLabelTagName||"h2",a.footnoteLabelProperties=t.footnoteLabelProperties||{className:["sr-only"]},a.footnoteBackLabel=t.footnoteBackLabel||"Back to content",a.unknownHandler=t.unknownHandler,a.passThrough=t.passThrough,a.handlers={...Vn,...t.handlers},a.definition=function(e){const n=Object.create(null);if(!e||!e.type)throw new Error("mdast-util-definitions expected node");return _n(e,"definition",(e=>{const t=Dn(e.identifier);t&&!Ln.call(n,t)&&(n[t]=e)})),function(e){const t=Dn(e);return t&&Ln.call(n,t)?n[t]:null}}(e),a.footnoteById=o,a.footnoteOrder=[],a.footnoteCounts={},a.patch=Qn,a.applyData=Kn,a.one=function(e,n){return Yn(a,e,n)},a.all=function(e){return Gn(a,e)},a.wrap=Xn,a.augment=l,_n(e,"footnoteDefinition",(e=>{const n=String(e.identifier).toUpperCase();Wn.call(o,n)||(o[n]=e)})),a;function l(e,n){if(e&&"data"in e&&e.data){const t=e.data;t.hName&&("element"!==n.type&&(n={type:"element",tagName:"",properties:{},children:[]}),n.tagName=t.hName),"element"===n.type&&t.hProperties&&(n.properties={...n.properties,...t.hProperties}),"children"in n&&n.children&&t.hChildren&&(n.children=t.hChildren)}if(e){const r="type"in e?e:{position:e};(t=r)&&t.position&&t.position.start&&t.position.start.line&&t.position.start.column&&t.position.end&&t.position.end.line&&t.position.end.column&&(n.position={start:Tn(r),end:In(r)})}var t;return n}function a(e,n,t,r){return Array.isArray(t)&&(r=t,t={}),l(e,{type:"element",tagName:n,properties:t||{},children:r||[]})}}(e,n),r=t.one(e,null),o=function(e){const n=[];let t=-1;for(;++t<e.footnoteOrder.length;){const r=e.footnoteById[e.footnoteOrder[t]];if(!r)continue;const o=e.all(r),l=String(r.identifier).toUpperCase(),a=Fn(l.toLowerCase());let i=0;const u=[];for(;++i<=e.footnoteCounts[l];){const n={type:"element",tagName:"a",properties:{href:"#"+e.clobberPrefix+"fnref-"+a+(i>1?"-"+i:""),dataFootnoteBackref:!0,className:["data-footnote-backref"],ariaLabel:e.footnoteBackLabel},children:[{type:"text",value:"↩"}]};i>1&&n.children.push({type:"element",tagName:"sup",children:[{type:"text",value:String(i)}]}),u.length>0&&u.push({type:"text",value:" "}),u.push(n)}const s=o[o.length-1];if(s&&"element"===s.type&&"p"===s.tagName){const e=s.children[s.children.length-1];e&&"text"===e.type?e.value+=" ":s.children.push({type:"text",value:" "}),s.children.push(...u)}else o.push(...u);const c={type:"element",tagName:"li",properties:{id:e.clobberPrefix+"fn-"+a},children:e.wrap(o,!0)};e.patch(r,c),n.push(c)}if(0!==n.length)return{type:"element",tagName:"section",properties:{dataFootnotes:!0,className:["footnotes"]},children:[{type:"element",tagName:e.footnoteLabelTagName,properties:{...JSON.parse(JSON.stringify(e.footnoteLabelProperties)),id:"footnote-label"},children:[{type:"text",value:e.footnoteLabel}]},{type:"text",value:"\n"},{type:"element",tagName:"ol",properties:{},children:e.wrap(n,!0)},{type:"text",value:"\n"}]}}(t);return o&&r.children.push({type:"text",value:"\n"},o),Array.isArray(r)?{type:"root",children:r}:r}const Jn=function(e,n){return e&&"run"in e?function(e,n){return(t,r,o)=>{e.run(Zn(t,n),r,(e=>{o(e)}))}}(e,n):function(e){return n=>Zn(n,e)}(e||n)};var et=t(5697);class nt{constructor(e,n,t){this.property=e,this.normal=n,t&&(this.space=t)}}function tt(e,n){for(var t={},r={},o=-1;++o<e.length;)Object.assign(t,e[o].property),Object.assign(r,e[o].normal);return new nt(t,r,n)}function rt(e){return e.toLowerCase()}nt.prototype.property={},nt.prototype.normal={},nt.prototype.space=null;class ot{constructor(e,n){this.property=e,this.attribute=n}}ot.prototype.space=null,ot.prototype.attribute=null,ot.prototype.property=null,ot.prototype.boolean=!1,ot.prototype.booleanish=!1,ot.prototype.overloadedBoolean=!1,ot.prototype.number=!1,ot.prototype.commaSeparated=!1,ot.prototype.spaceSeparated=!1,ot.prototype.commaOrSpaceSeparated=!1,ot.prototype.mustUseProperty=!1,ot.prototype.defined=!1;var lt=0,at=pt(),it=pt(),ut=pt(),st=pt(),ct=pt(),ft=pt(),dt=pt();function pt(){return 2**++lt}var ht=Object.keys(o);class mt extends ot{constructor(e,n,t,r){var l=-1;for(super(e,n),gt(this,"space",r);++l<ht.length;)gt(this,ht[l],(t&o[ht[l]])===o[ht[l]])}}function gt(e,n,t){t&&(e[n]=t)}mt.prototype.defined=!0;var yt={}.hasOwnProperty;function vt(e){var n,t,r={},o={};for(n in e.properties)yt.call(e.properties,n)&&(t=new mt(n,e.transform(e.attributes,n),e.properties[n],e.space),e.mustUseProperty&&e.mustUseProperty.includes(n)&&(t.mustUseProperty=!0),r[n]=t,o[rt(n)]=n,o[rt(t.attribute)]=n);return new nt(r,o,e.space)}var bt=vt({space:"xlink",transform:function(e,n){return"xlink:"+n.slice(5).toLowerCase()},properties:{xLinkActuate:null,xLinkArcRole:null,xLinkHref:null,xLinkRole:null,xLinkShow:null,xLinkTitle:null,xLinkType:null}}),wt=vt({space:"xml",transform:function(e,n){return"xml:"+n.slice(3).toLowerCase()},properties:{xmlLang:null,xmlBase:null,xmlSpace:null}});function kt(e,n){return n in e?e[n]:n}function At(e,n){return kt(e,n.toLowerCase())}var xt=vt({space:"xmlns",attributes:{xmlnsxlink:"xmlns:xlink"},transform:At,properties:{xmlns:null,xmlnsXLink:null}}),Ct=vt({transform:function(e,n){return"role"===n?n:"aria-"+n.slice(4).toLowerCase()},properties:{ariaActiveDescendant:null,ariaAtomic:it,ariaAutoComplete:null,ariaBusy:it,ariaChecked:it,ariaColCount:st,ariaColIndex:st,ariaColSpan:st,ariaControls:ct,ariaCurrent:null,ariaDescribedBy:ct,ariaDetails:null,ariaDisabled:it,ariaDropEffect:ct,ariaErrorMessage:null,ariaExpanded:it,ariaFlowTo:ct,ariaGrabbed:it,ariaHasPopup:null,ariaHidden:it,ariaInvalid:null,ariaKeyShortcuts:null,ariaLabel:null,ariaLabelledBy:ct,ariaLevel:st,ariaLive:null,ariaModal:it,ariaMultiLine:it,ariaMultiSelectable:it,ariaOrientation:null,ariaOwns:ct,ariaPlaceholder:null,ariaPosInSet:st,ariaPressed:it,ariaReadOnly:it,ariaRelevant:null,ariaRequired:it,ariaRoleDescription:ct,ariaRowCount:st,ariaRowIndex:st,ariaRowSpan:st,ariaSelected:it,ariaSetSize:st,ariaSort:null,ariaValueMax:st,ariaValueMin:st,ariaValueNow:st,ariaValueText:null,role:null}}),St=vt({space:"html",attributes:{acceptcharset:"accept-charset",classname:"class",htmlfor:"for",httpequiv:"http-equiv"},transform:At,mustUseProperty:["checked","multiple","muted","selected"],properties:{abbr:null,accept:ft,acceptCharset:ct,accessKey:ct,action:null,allow:null,allowFullScreen:at,allowPaymentRequest:at,allowUserMedia:at,alt:null,as:null,async:at,autoCapitalize:null,autoComplete:ct,autoFocus:at,autoPlay:at,capture:at,charSet:null,checked:at,cite:null,className:ct,cols:st,colSpan:null,content:null,contentEditable:it,controls:at,controlsList:ct,coords:st|ft,crossOrigin:null,data:null,dateTime:null,decoding:null,default:at,defer:at,dir:null,dirName:null,disabled:at,download:ut,draggable:it,encType:null,enterKeyHint:null,form:null,formAction:null,formEncType:null,formMethod:null,formNoValidate:at,formTarget:null,headers:ct,height:st,hidden:at,high:st,href:null,hrefLang:null,htmlFor:ct,httpEquiv:ct,id:null,imageSizes:null,imageSrcSet:ft,inputMode:null,integrity:null,is:null,isMap:at,itemId:null,itemProp:ct,itemRef:ct,itemScope:at,itemType:ct,kind:null,label:null,lang:null,language:null,list:null,loading:null,loop:at,low:st,manifest:null,max:null,maxLength:st,media:null,method:null,min:null,minLength:st,multiple:at,muted:at,name:null,nonce:null,noModule:at,noValidate:at,onAbort:null,onAfterPrint:null,onAuxClick:null,onBeforePrint:null,onBeforeUnload:null,onBlur:null,onCancel:null,onCanPlay:null,onCanPlayThrough:null,onChange:null,onClick:null,onClose:null,onContextMenu:null,onCopy:null,onCueChange:null,onCut:null,onDblClick:null,onDrag:null,onDragEnd:null,onDragEnter:null,onDragExit:null,onDragLeave:null,onDragOver:null,onDragStart:null,onDrop:null,onDurationChange:null,onEmptied:null,onEnded:null,onError:null,onFocus:null,onFormData:null,onHashChange:null,onInput:null,onInvalid:null,onKeyDown:null,onKeyPress:null,onKeyUp:null,onLanguageChange:null,onLoad:null,onLoadedData:null,onLoadedMetadata:null,onLoadEnd:null,onLoadStart:null,onMessage:null,onMessageError:null,onMouseDown:null,onMouseEnter:null,onMouseLeave:null,onMouseMove:null,onMouseOut:null,onMouseOver:null,onMouseUp:null,onOffline:null,onOnline:null,onPageHide:null,onPageShow:null,onPaste:null,onPause:null,onPlay:null,onPlaying:null,onPopState:null,onProgress:null,onRateChange:null,onRejectionHandled:null,onReset:null,onResize:null,onScroll:null,onSecurityPolicyViolation:null,onSeeked:null,onSeeking:null,onSelect:null,onSlotChange:null,onStalled:null,onStorage:null,onSubmit:null,onSuspend:null,onTimeUpdate:null,onToggle:null,onUnhandledRejection:null,onUnload:null,onVolumeChange:null,onWaiting:null,onWheel:null,open:at,optimum:st,pattern:null,ping:ct,placeholder:null,playsInline:at,poster:null,preload:null,readOnly:at,referrerPolicy:null,rel:ct,required:at,reversed:at,rows:st,rowSpan:st,sandbox:ct,scope:null,scoped:at,seamless:at,selected:at,shape:null,size:st,sizes:null,slot:null,span:st,spellCheck:it,src:null,srcDoc:null,srcLang:null,srcSet:ft,start:st,step:null,style:null,tabIndex:st,target:null,title:null,translate:null,type:null,typeMustMatch:at,useMap:null,value:it,width:st,wrap:null,align:null,aLink:null,archive:ct,axis:null,background:null,bgColor:null,border:st,borderColor:null,bottomMargin:st,cellPadding:null,cellSpacing:null,char:null,charOff:null,classId:null,clear:null,code:null,codeBase:null,codeType:null,color:null,compact:at,declare:at,event:null,face:null,frame:null,frameBorder:null,hSpace:st,leftMargin:st,link:null,longDesc:null,lowSrc:null,marginHeight:st,marginWidth:st,noResize:at,noHref:at,noShade:at,noWrap:at,object:null,profile:null,prompt:null,rev:null,rightMargin:st,rules:null,scheme:null,scrolling:it,standby:null,summary:null,text:null,topMargin:st,valueType:null,version:null,vAlign:null,vLink:null,vSpace:st,allowTransparency:null,autoCorrect:null,autoSave:null,disablePictureInPicture:at,disableRemotePlayback:at,prefix:null,property:null,results:st,security:null,unselectable:null}}),Et=vt({space:"svg",attributes:{accentHeight:"accent-height",alignmentBaseline:"alignment-baseline",arabicForm:"arabic-form",baselineShift:"baseline-shift",capHeight:"cap-height",className:"class",clipPath:"clip-path",clipRule:"clip-rule",colorInterpolation:"color-interpolation",colorInterpolationFilters:"color-interpolation-filters",colorProfile:"color-profile",colorRendering:"color-rendering",crossOrigin:"crossorigin",dataType:"datatype",dominantBaseline:"dominant-baseline",enableBackground:"enable-background",fillOpacity:"fill-opacity",fillRule:"fill-rule",floodColor:"flood-color",floodOpacity:"flood-opacity",fontFamily:"font-family",fontSize:"font-size",fontSizeAdjust:"font-size-adjust",fontStretch:"font-stretch",fontStyle:"font-style",fontVariant:"font-variant",fontWeight:"font-weight",glyphName:"glyph-name",glyphOrientationHorizontal:"glyph-orientation-horizontal",glyphOrientationVertical:"glyph-orientation-vertical",hrefLang:"hreflang",horizAdvX:"horiz-adv-x",horizOriginX:"horiz-origin-x",horizOriginY:"horiz-origin-y",imageRendering:"image-rendering",letterSpacing:"letter-spacing",lightingColor:"lighting-color",markerEnd:"marker-end",markerMid:"marker-mid",markerStart:"marker-start",navDown:"nav-down",navDownLeft:"nav-down-left",navDownRight:"nav-down-right",navLeft:"nav-left",navNext:"nav-next",navPrev:"nav-prev",navRight:"nav-right",navUp:"nav-up",navUpLeft:"nav-up-left",navUpRight:"nav-up-right",onAbort:"onabort",onActivate:"onactivate",onAfterPrint:"onafterprint",onBeforePrint:"onbeforeprint",onBegin:"onbegin",onCancel:"oncancel",onCanPlay:"oncanplay",onCanPlayThrough:"oncanplaythrough",onChange:"onchange",onClick:"onclick",onClose:"onclose",onCopy:"oncopy",onCueChange:"oncuechange",onCut:"oncut",onDblClick:"ondblclick",onDrag:"ondrag",onDragEnd:"ondragend",onDragEnter:"ondragenter",onDragExit:"ondragexit",onDragLeave:"ondragleave",onDragOver:"ondragover",onDragStart:"ondragstart",onDrop:"ondrop",onDurationChange:"ondurationchange",onEmptied:"onemptied",onEnd:"onend",onEnded:"onended",onError:"onerror",onFocus:"onfocus",onFocusIn:"onfocusin",onFocusOut:"onfocusout",onHashChange:"onhashchange",onInput:"oninput",onInvalid:"oninvalid",onKeyDown:"onkeydown",onKeyPress:"onkeypress",onKeyUp:"onkeyup",onLoad:"onload",onLoadedData:"onloadeddata",onLoadedMetadata:"onloadedmetadata",onLoadStart:"onloadstart",onMessage:"onmessage",onMouseDown:"onmousedown",onMouseEnter:"onmouseenter",onMouseLeave:"onmouseleave",onMouseMove:"onmousemove",onMouseOut:"onmouseout",onMouseOver:"onmouseover",onMouseUp:"onmouseup",onMouseWheel:"onmousewheel",onOffline:"onoffline",onOnline:"ononline",onPageHide:"onpagehide",onPageShow:"onpageshow",onPaste:"onpaste",onPause:"onpause",onPlay:"onplay",onPlaying:"onplaying",onPopState:"onpopstate",onProgress:"onprogress",onRateChange:"onratechange",onRepeat:"onrepeat",onReset:"onreset",onResize:"onresize",onScroll:"onscroll",onSeeked:"onseeked",onSeeking:"onseeking",onSelect:"onselect",onShow:"onshow",onStalled:"onstalled",onStorage:"onstorage",onSubmit:"onsubmit",onSuspend:"onsuspend",onTimeUpdate:"ontimeupdate",onToggle:"ontoggle",onUnload:"onunload",onVolumeChange:"onvolumechange",onWaiting:"onwaiting",onZoom:"onzoom",overlinePosition:"overline-position",overlineThickness:"overline-thickness",paintOrder:"paint-order",panose1:"panose-1",pointerEvents:"pointer-events",referrerPolicy:"referrerpolicy",renderingIntent:"rendering-intent",shapeRendering:"shape-rendering",stopColor:"stop-color",stopOpacity:"stop-opacity",strikethroughPosition:"strikethrough-position",strikethroughThickness:"strikethrough-thickness",strokeDashArray:"stroke-dasharray",strokeDashOffset:"stroke-dashoffset",strokeLineCap:"stroke-linecap",strokeLineJoin:"stroke-linejoin",strokeMiterLimit:"stroke-miterlimit",strokeOpacity:"stroke-opacity",strokeWidth:"stroke-width",tabIndex:"tabindex",textAnchor:"text-anchor",textDecoration:"text-decoration",textRendering:"text-rendering",typeOf:"typeof",underlinePosition:"underline-position",underlineThickness:"underline-thickness",unicodeBidi:"unicode-bidi",unicodeRange:"unicode-range",unitsPerEm:"units-per-em",vAlphabetic:"v-alphabetic",vHanging:"v-hanging",vIdeographic:"v-ideographic",vMathematical:"v-mathematical",vectorEffect:"vector-effect",vertAdvY:"vert-adv-y",vertOriginX:"vert-origin-x",vertOriginY:"vert-origin-y",wordSpacing:"word-spacing",writingMode:"writing-mode",xHeight:"x-height",playbackOrder:"playbackorder",timelineBegin:"timelinebegin"},transform:kt,properties:{about:dt,accentHeight:st,accumulate:null,additive:null,alignmentBaseline:null,alphabetic:st,amplitude:st,arabicForm:null,ascent:st,attributeName:null,attributeType:null,azimuth:st,bandwidth:null,baselineShift:null,baseFrequency:null,baseProfile:null,bbox:null,begin:null,bias:st,by:null,calcMode:null,capHeight:st,className:ct,clip:null,clipPath:null,clipPathUnits:null,clipRule:null,color:null,colorInterpolation:null,colorInterpolationFilters:null,colorProfile:null,colorRendering:null,content:null,contentScriptType:null,contentStyleType:null,crossOrigin:null,cursor:null,cx:null,cy:null,d:null,dataType:null,defaultAction:null,descent:st,diffuseConstant:st,direction:null,display:null,dur:null,divisor:st,dominantBaseline:null,download:at,dx:null,dy:null,edgeMode:null,editable:null,elevation:st,enableBackground:null,end:null,event:null,exponent:st,externalResourcesRequired:null,fill:null,fillOpacity:st,fillRule:null,filter:null,filterRes:null,filterUnits:null,floodColor:null,floodOpacity:null,focusable:null,focusHighlight:null,fontFamily:null,fontSize:null,fontSizeAdjust:null,fontStretch:null,fontStyle:null,fontVariant:null,fontWeight:null,format:null,fr:null,from:null,fx:null,fy:null,g1:ft,g2:ft,glyphName:ft,glyphOrientationHorizontal:null,glyphOrientationVertical:null,glyphRef:null,gradientTransform:null,gradientUnits:null,handler:null,hanging:st,hatchContentUnits:null,hatchUnits:null,height:null,href:null,hrefLang:null,horizAdvX:st,horizOriginX:st,horizOriginY:st,id:null,ideographic:st,imageRendering:null,initialVisibility:null,in:null,in2:null,intercept:st,k:st,k1:st,k2:st,k3:st,k4:st,kernelMatrix:dt,kernelUnitLength:null,keyPoints:null,keySplines:null,keyTimes:null,kerning:null,lang:null,lengthAdjust:null,letterSpacing:null,lightingColor:null,limitingConeAngle:st,local:null,markerEnd:null,markerMid:null,markerStart:null,markerHeight:null,markerUnits:null,markerWidth:null,mask:null,maskContentUnits:null,maskUnits:null,mathematical:null,max:null,media:null,mediaCharacterEncoding:null,mediaContentEncodings:null,mediaSize:st,mediaTime:null,method:null,min:null,mode:null,name:null,navDown:null,navDownLeft:null,navDownRight:null,navLeft:null,navNext:null,navPrev:null,navRight:null,navUp:null,navUpLeft:null,navUpRight:null,numOctaves:null,observer:null,offset:null,onAbort:null,onActivate:null,onAfterPrint:null,onBeforePrint:null,onBegin:null,onCancel:null,onCanPlay:null,onCanPlayThrough:null,onChange:null,onClick:null,onClose:null,onCopy:null,onCueChange:null,onCut:null,onDblClick:null,onDrag:null,onDragEnd:null,onDragEnter:null,onDragExit:null,onDragLeave:null,onDragOver:null,onDragStart:null,onDrop:null,onDurationChange:null,onEmptied:null,onEnd:null,onEnded:null,onError:null,onFocus:null,onFocusIn:null,onFocusOut:null,onHashChange:null,onInput:null,onInvalid:null,onKeyDown:null,onKeyPress:null,onKeyUp:null,onLoad:null,onLoadedData:null,onLoadedMetadata:null,onLoadStart:null,onMessage:null,onMouseDown:null,onMouseEnter:null,onMouseLeave:null,onMouseMove:null,onMouseOut:null,onMouseOver:null,onMouseUp:null,onMouseWheel:null,onOffline:null,onOnline:null,onPageHide:null,onPageShow:null,onPaste:null,onPause:null,onPlay:null,onPlaying:null,onPopState:null,onProgress:null,onRateChange:null,onRepeat:null,onReset:null,onResize:null,onScroll:null,onSeeked:null,onSeeking:null,onSelect:null,onShow:null,onStalled:null,onStorage:null,onSubmit:null,onSuspend:null,onTimeUpdate:null,onToggle:null,onUnload:null,onVolumeChange:null,onWaiting:null,onZoom:null,opacity:null,operator:null,order:null,orient:null,orientation:null,origin:null,overflow:null,overlay:null,overlinePosition:st,overlineThickness:st,paintOrder:null,panose1:null,path:null,pathLength:st,patternContentUnits:null,patternTransform:null,patternUnits:null,phase:null,ping:ct,pitch:null,playbackOrder:null,pointerEvents:null,points:null,pointsAtX:st,pointsAtY:st,pointsAtZ:st,preserveAlpha:null,preserveAspectRatio:null,primitiveUnits:null,propagate:null,property:dt,r:null,radius:null,referrerPolicy:null,refX:null,refY:null,rel:dt,rev:dt,renderingIntent:null,repeatCount:null,repeatDur:null,requiredExtensions:dt,requiredFeatures:dt,requiredFonts:dt,requiredFormats:dt,resource:null,restart:null,result:null,rotate:null,rx:null,ry:null,scale:null,seed:null,shapeRendering:null,side:null,slope:null,snapshotTime:null,specularConstant:st,specularExponent:st,spreadMethod:null,spacing:null,startOffset:null,stdDeviation:null,stemh:null,stemv:null,stitchTiles:null,stopColor:null,stopOpacity:null,strikethroughPosition:st,strikethroughThickness:st,string:null,stroke:null,strokeDashArray:dt,strokeDashOffset:null,strokeLineCap:null,strokeLineJoin:null,strokeMiterLimit:st,strokeOpacity:st,strokeWidth:null,style:null,surfaceScale:st,syncBehavior:null,syncBehaviorDefault:null,syncMaster:null,syncTolerance:null,syncToleranceDefault:null,systemLanguage:dt,tabIndex:st,tableValues:null,target:null,targetX:st,targetY:st,textAnchor:null,textDecoration:null,textRendering:null,textLength:null,timelineBegin:null,title:null,transformBehavior:null,type:null,typeOf:dt,to:null,transform:null,u1:null,u2:null,underlinePosition:st,underlineThickness:st,unicode:null,unicodeBidi:null,unicodeRange:null,unitsPerEm:st,values:null,vAlphabetic:st,vMathematical:st,vectorEffect:null,vHanging:st,vIdeographic:st,version:null,vertAdvY:st,vertOriginX:st,vertOriginY:st,viewBox:null,viewTarget:null,visibility:null,width:null,widths:null,wordSpacing:null,writingMode:null,x:null,x1:null,x2:null,xChannelSelector:null,xHeight:st,y:null,y1:null,y2:null,yChannelSelector:null,z:null,zoomAndPan:null}}),Ft=tt([wt,bt,xt,Ct,St],"html"),Bt=tt([wt,bt,xt,Ct,Et],"svg");function Ut(e){if(e.allowedElements&&e.disallowedElements)throw new TypeError("Only one of `allowedElements` and `disallowedElements` should be defined");if(e.allowedElements||e.disallowedElements||e.allowElement)return n=>{_n(n,"element",((n,t,r)=>{const o=r;let l;if(e.allowedElements?l=!e.allowedElements.includes(n.tagName):e.disallowedElements&&(l=e.disallowedElements.includes(n.tagName)),!l&&e.allowElement&&"number"==typeof t&&(l=!e.allowElement(n,t,o)),l&&"number"==typeof t)return e.unwrapDisallowed&&n.children?o.children.splice(t,1,...n.children):o.children.splice(t,1),t}))}}var Pt=t(2143);function _t(e){const n=e&&"object"==typeof e&&"text"===e.type?e.value||"":e;return"string"==typeof n&&""===n.replace(/[ \t\n\f\r]/g,"")}var Tt=/^data[-\w.:]+$/i,It=/-[a-z]/g,Ot=/[A-Z]/g;function Lt(e){return"-"+e.toLowerCase()}function Dt(e){return e.charAt(1).toUpperCase()}var zt={classId:"classID",dataType:"datatype",itemId:"itemID",strokeDashArray:"strokeDasharray",strokeDashOffset:"strokeDashoffset",strokeLineCap:"strokeLinecap",strokeLineJoin:"strokeLinejoin",strokeMiterLimit:"strokeMiterlimit",typeOf:"typeof",xLinkActuate:"xlinkActuate",xLinkArcRole:"xlinkArcrole",xLinkHref:"xlinkHref",xLinkRole:"xlinkRole",xLinkShow:"xlinkShow",xLinkTitle:"xlinkTitle",xLinkType:"xlinkType",xmlnsXLink:"xmlnsXlink"};const Nt=t(7848),Rt=["http","https","mailto","tel"];function Mt(e){const n=(e||"").trim(),t=n.charAt(0);if("#"===t||"/"===t)return n;const r=n.indexOf(":");if(-1===r)return n;let o=-1;for(;++o<Rt.length;){const e=Rt[o];if(r===e.length&&n.slice(0,e.length).toLowerCase()===e)return n}return o=n.indexOf("?"),-1!==o&&r>o?n:(o=n.indexOf("#"),-1!==o&&r>o?n:"javascript:void(0)")}const jt={}.hasOwnProperty,$t=new Set(["table","thead","tbody","tfoot","tr"]);function Ht(e,n){const t=[];let r,o=-1;for(;++o<n.children.length;)r=n.children[o],"element"===r.type?t.push(Vt(e,r,o,n)):"text"===r.type?"element"===n.type&&$t.has(n.tagName)&&_t(r)||t.push(r.value):"raw"!==r.type||e.options.skipHtml||t.push(r.value);return t}function Vt(e,n,t,r){const o=e.options,a=void 0===o.transformLinkUri?Mt:o.transformLinkUri,i=e.schema,u=n.tagName,s={};let c,f=i;if("html"===i.space&&"svg"===u&&(f=Bt,e.schema=f),n.properties)for(c in n.properties)jt.call(n.properties,c)&&Wt(s,c,n.properties[c],e);"ol"!==u&&"ul"!==u||e.listDepth++;const d=Ht(e,n);"ol"!==u&&"ul"!==u||e.listDepth--,e.schema=i;const p=n.position||{start:{line:null,column:null,offset:null},end:{line:null,column:null,offset:null}},h=o.components&&jt.call(o.components,u)?o.components[u]:u,m="string"==typeof h||h===l.Fragment;if(!Pt.isValidElementType(h))throw new TypeError(`Component for name \`${u}\` not defined or is not renderable`);if(s.key=t,"a"===u&&o.linkTarget&&(s.target="function"==typeof o.linkTarget?o.linkTarget(String(s.href||""),n.children,"string"==typeof s.title?s.title:null):o.linkTarget),"a"===u&&a&&(s.href=a(String(s.href||""),n.children,"string"==typeof s.title?s.title:null)),m||"code"!==u||"element"!==r.type||"pre"===r.tagName||(s.inline=!0),m||"h1"!==u&&"h2"!==u&&"h3"!==u&&"h4"!==u&&"h5"!==u&&"h6"!==u||(s.level=Number.parseInt(u.charAt(1),10)),"img"===u&&o.transformImageUri&&(s.src=o.transformImageUri(String(s.src||""),String(s.alt||""),"string"==typeof s.title?s.title:null)),!m&&"li"===u&&"element"===r.type){const e=function(e){let n=-1;for(;++n<e.children.length;){const t=e.children[n];if("element"===t.type&&"input"===t.tagName)return t}return null}(n);s.checked=e&&e.properties?Boolean(e.properties.checked):null,s.index=qt(r,n),s.ordered="ol"===r.tagName}var g;return m||"ol"!==u&&"ul"!==u||(s.ordered="ol"===u,s.depth=e.listDepth),"td"!==u&&"th"!==u||(s.align&&(s.style||(s.style={}),s.style.textAlign=s.align,delete s.align),m||(s.isHeader="th"===u)),m||"tr"!==u||"element"!==r.type||(s.isHeader=Boolean("thead"===r.tagName)),o.sourcePos&&(s["data-sourcepos"]=[(g=p).start.line,":",g.start.column,"-",g.end.line,":",g.end.column].map(String).join("")),!m&&o.rawSourcePos&&(s.sourcePosition=n.position),!m&&o.includeElementIndex&&(s.index=qt(r,n),s.siblingCount=qt(r)),m||(s.node=n),d.length>0?l.createElement(h,s,d):l.createElement(h,s)}function qt(e,n){let t=-1,r=0;for(;++t<e.children.length&&e.children[t]!==n;)"element"===e.children[t].type&&r++;return r}function Wt(e,n,t,r){const o=function(e,n){var t=rt(n),r=n,o=ot;return t in e.normal?e.property[e.normal[t]]:(t.length>4&&"data"===t.slice(0,4)&&Tt.test(n)&&("-"===n.charAt(4)?r=function(e){var n=e.slice(5).replace(It,Dt);return"data"+n.charAt(0).toUpperCase()+n.slice(1)}(n):n=function(e){var n=e.slice(4);return It.test(n)?e:("-"!==(n=n.replace(Ot,Lt)).charAt(0)&&(n="-"+n),"data"+n)}(n),o=mt),new o(r,n))}(r.schema,n);let l=t;var a,i;null!=l&&l==l&&(Array.isArray(l)&&(l=o.commaSeparated?(i={},""===(a=l)[a.length-1]&&(a=a.concat("")),a.join((i.padRight?" ":"")+","+(!1===i.padLeft?"":" ")).trim()):function(e){return e.join(" ").trim()}(l)),"style"===o.property&&"string"==typeof l&&(l=function(e){const n={};try{Nt(e,(function(e,t){const r="-ms-"===e.slice(0,4)?`ms-${e.slice(4)}`:e;n[r.replace(/-([a-z])/g,Qt)]=t}))}catch{}return n}(l)),o.space&&o.property?e[jt.call(zt,o.property)?zt[o.property]:o.property]=l:o.attribute&&(e[o.attribute]=l))}function Qt(e,n){return n.toUpperCase()}const Kt={}.hasOwnProperty,Yt="https://github.com/remarkjs/react-markdown/blob/main/changelog.md",Gt={plugins:{to:"remarkPlugins",id:"change-plugins-to-remarkplugins"},renderers:{to:"components",id:"change-renderers-to-components"},astPlugins:{id:"remove-buggy-html-in-markdown-parser"},allowDangerousHtml:{id:"remove-buggy-html-in-markdown-parser"},escapeHtml:{id:"remove-buggy-html-in-markdown-parser"},source:{to:"children",id:"change-source-to-children"},allowNode:{to:"allowElement",id:"replace-allownode-allowedtypes-and-disallowedtypes"},allowedTypes:{to:"allowedElements",id:"replace-allownode-allowedtypes-and-disallowedtypes"},disallowedTypes:{to:"disallowedElements",id:"replace-allownode-allowedtypes-and-disallowedtypes"},includeNodeIndex:{to:"includeElementIndex",id:"change-includenodeindex-to-includeelementindex"}};function Xt(e){for(const n in Gt)if(Kt.call(Gt,n)&&Kt.call(e,n)){const e=Gt[n];console.warn(`[react-markdown] Warning: please ${e.to?`use \`${e.to}\` instead of`:"remove"} \`${n}\` (see <${Yt}#${e.id}> for more info)`),delete Gt[n]}const n=U().use(En).use(e.remarkPlugins||[]).use(Jn,{...e.remarkRehypeOptions,allowDangerousHtml:!0}).use(e.rehypePlugins||[]).use(Ut,e),t=new A;"string"==typeof e.children?t.value=e.children:void 0!==e.children&&null!==e.children&&console.warn(`[react-markdown] Warning: please pass a string as \`children\` (not: \`${e.children}\`)`);const r=n.runSync(n.parse(t),t);if("root"!==r.type)throw new TypeError("Expected a `root` node");let o=l.createElement(l.Fragment,{},Ht({options:e,schema:Ft,listDepth:0},r));return e.className&&(o=l.createElement("div",{className:e.className},o)),o}Xt.propTypes={children:et.string,className:et.string,allowElement:et.func,allowedElements:et.arrayOf(et.string),disallowedElements:et.arrayOf(et.string),unwrapDisallowed:et.bool,remarkPlugins:et.arrayOf(et.oneOfType([et.object,et.func,et.arrayOf(et.oneOfType([et.bool,et.string,et.object,et.func,et.arrayOf(et.any)]))])),rehypePlugins:et.arrayOf(et.oneOfType([et.object,et.func,et.arrayOf(et.oneOfType([et.bool,et.string,et.object,et.func,et.arrayOf(et.any)]))])),sourcePos:et.bool,rawSourcePos:et.bool,skipHtml:et.bool,includeElementIndex:et.bool,transformLinkUri:et.oneOfType([et.func,et.bool]),linkTarget:et.oneOfType([et.func,et.string]),transformImageUri:et.func,components:et.object}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
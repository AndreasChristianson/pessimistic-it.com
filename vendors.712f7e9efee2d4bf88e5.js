/*! For license information please see vendors.712f7e9efee2d4bf88e5.js.LICENSE.txt */
(self.webpackChunkpessimistic_it_com=self.webpackChunkpessimistic_it_com||[]).push([[96],{7491:(e,n,t)=>{"use strict";t.d(n,{A:()=>$});var r=t(1354),o=t.n(r),l=t(6314),a=t.n(l),i=t(4417),u=t.n(i),s=new URL(t(6138),t.b),c=new URL(t(3262),t.b),f=new URL(t(1012),t.b),d=new URL(t(653),t.b),p=new URL(t(5123),t.b),h=new URL(t(5970),t.b),m=new URL(t(2567),t.b),g=new URL(t(4653),t.b),y=new URL(t(1939),t.b),v=new URL(t(2793),t.b),b=new URL(t(5573),t.b),w=new URL(t(4748),t.b),k=new URL(t(5218),t.b),A=new URL(t(3259),t.b),x=new URL(t(5318),t.b),C=new URL(t(3340),t.b),S=a()(o()),E=u()(s),F=u()(c),B=u()(f),U=u()(d),P=u()(p),_=u()(h),T=u()(m),I=u()(g),O=u()(y),L=u()(v),D=u()(b),z=u()(w),N=u()(k),R=u()(A),M=u()(x),j=u()(C);S.push([e.id,`/* open-sans-cyrillic-ext-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${E}) format('woff2'), url(${F}) format('woff');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* open-sans-cyrillic-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${B}) format('woff2'), url(${F}) format('woff');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* open-sans-greek-ext-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${U}) format('woff2'), url(${F}) format('woff');\n  unicode-range: U+1F00-1FFF;\n}\n/* open-sans-greek-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${P}) format('woff2'), url(${F}) format('woff');\n  unicode-range: U+0370-03FF;\n}\n/* open-sans-vietnamese-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${_}) format('woff2'), url(${F}) format('woff');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* open-sans-latin-ext-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${T}) format('woff2'), url(${F}) format('woff');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* open-sans-latin-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${I}) format('woff2'), url(${F}) format('woff');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n/* open-sans-cyrillic-ext-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${O}) format('woff2'), url(${L}) format('woff');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* open-sans-cyrillic-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${D}) format('woff2'), url(${L}) format('woff');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* open-sans-greek-ext-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${z}) format('woff2'), url(${L}) format('woff');\n  unicode-range: U+1F00-1FFF;\n}\n/* open-sans-greek-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${N}) format('woff2'), url(${L}) format('woff');\n  unicode-range: U+0370-03FF;\n}\n/* open-sans-vietnamese-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${R}) format('woff2'), url(${L}) format('woff');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* open-sans-latin-ext-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${M}) format('woff2'), url(${L}) format('woff');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* open-sans-latin-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(${j}) format('woff2'), url(${L}) format('woff');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n`,"",{version:3,sources:["webpack://./node_modules/fontsource-open-sans/400.css"],names:[],mappings:"AAAA,qCAAqC;AACrC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAwI;EACxI,sFAAsF;AACxF;AACA,iCAAiC;AACjC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAoI;EACpI,4DAA4D;AAC9D;AACA,kCAAkC;AAClC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAqI;EACrI,0BAA0B;AAC5B;AACA,8BAA8B;AAC9B;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAiI;EACjI,0BAA0B;AAC5B;AACA,mCAAmC;AACnC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAsI;EACtI,gHAAgH;AAClH;AACA,kCAAkC;AAClC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAqI;EACrI,mHAAmH;AACrH;AACA,8BAA8B;AAC9B;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAiI;EACjI,yKAAyK;AAC3K;AACA,qCAAqC;AACrC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAwI;EACxI,sFAAsF;AACxF;AACA,iCAAiC;AACjC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAoI;EACpI,4DAA4D;AAC9D;AACA,kCAAkC;AAClC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAqI;EACrI,0BAA0B;AAC5B;AACA,8BAA8B;AAC9B;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAiI;EACjI,0BAA0B;AAC5B;AACA,mCAAmC;AACnC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAsI;EACtI,gHAAgH;AAClH;AACA,kCAAkC;AAClC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAqI;EACrI,mHAAmH;AACrH;AACA,8BAA8B;AAC9B;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAiI;EACjI,yKAAyK;AAC3K",sourcesContent:["/* open-sans-cyrillic-ext-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-cyrillic-ext-400-italic.woff2') format('woff2'), url('./files/open-sans-all-400-italic.woff') format('woff');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* open-sans-cyrillic-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-cyrillic-400-italic.woff2') format('woff2'), url('./files/open-sans-all-400-italic.woff') format('woff');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* open-sans-greek-ext-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-greek-ext-400-italic.woff2') format('woff2'), url('./files/open-sans-all-400-italic.woff') format('woff');\n  unicode-range: U+1F00-1FFF;\n}\n/* open-sans-greek-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-greek-400-italic.woff2') format('woff2'), url('./files/open-sans-all-400-italic.woff') format('woff');\n  unicode-range: U+0370-03FF;\n}\n/* open-sans-vietnamese-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-vietnamese-400-italic.woff2') format('woff2'), url('./files/open-sans-all-400-italic.woff') format('woff');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* open-sans-latin-ext-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-latin-ext-400-italic.woff2') format('woff2'), url('./files/open-sans-all-400-italic.woff') format('woff');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* open-sans-latin-400-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-latin-400-italic.woff2') format('woff2'), url('./files/open-sans-all-400-italic.woff') format('woff');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n/* open-sans-cyrillic-ext-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-cyrillic-ext-400-normal.woff2') format('woff2'), url('./files/open-sans-all-400-normal.woff') format('woff');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* open-sans-cyrillic-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-cyrillic-400-normal.woff2') format('woff2'), url('./files/open-sans-all-400-normal.woff') format('woff');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* open-sans-greek-ext-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-greek-ext-400-normal.woff2') format('woff2'), url('./files/open-sans-all-400-normal.woff') format('woff');\n  unicode-range: U+1F00-1FFF;\n}\n/* open-sans-greek-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-greek-400-normal.woff2') format('woff2'), url('./files/open-sans-all-400-normal.woff') format('woff');\n  unicode-range: U+0370-03FF;\n}\n/* open-sans-vietnamese-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-vietnamese-400-normal.woff2') format('woff2'), url('./files/open-sans-all-400-normal.woff') format('woff');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* open-sans-latin-ext-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-latin-ext-400-normal.woff2') format('woff2'), url('./files/open-sans-all-400-normal.woff') format('woff');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* open-sans-latin-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-latin-400-normal.woff2') format('woff2'), url('./files/open-sans-all-400-normal.woff') format('woff');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n"],sourceRoot:""}]);const $=S},9288:(e,n,t)=>{"use strict";t.d(n,{A:()=>$});var r=t(1354),o=t.n(r),l=t(6314),a=t.n(l),i=t(4417),u=t.n(i),s=new URL(t(5879),t.b),c=new URL(t(7137),t.b),f=new URL(t(4365),t.b),d=new URL(t(3412),t.b),p=new URL(t(1494),t.b),h=new URL(t(255),t.b),m=new URL(t(8906),t.b),g=new URL(t(7652),t.b),y=new URL(t(7830),t.b),v=new URL(t(9814),t.b),b=new URL(t(3052),t.b),w=new URL(t(6437),t.b),k=new URL(t(4863),t.b),A=new URL(t(8222),t.b),x=new URL(t(6099),t.b),C=new URL(t(5861),t.b),S=a()(o()),E=u()(s),F=u()(c),B=u()(f),U=u()(d),P=u()(p),_=u()(h),T=u()(m),I=u()(g),O=u()(y),L=u()(v),D=u()(b),z=u()(w),N=u()(k),R=u()(A),M=u()(x),j=u()(C);S.push([e.id,`/* open-sans-cyrillic-ext-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${E}) format('woff2'), url(${F}) format('woff');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* open-sans-cyrillic-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${B}) format('woff2'), url(${F}) format('woff');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* open-sans-greek-ext-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${U}) format('woff2'), url(${F}) format('woff');\n  unicode-range: U+1F00-1FFF;\n}\n/* open-sans-greek-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${P}) format('woff2'), url(${F}) format('woff');\n  unicode-range: U+0370-03FF;\n}\n/* open-sans-vietnamese-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${_}) format('woff2'), url(${F}) format('woff');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* open-sans-latin-ext-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${T}) format('woff2'), url(${F}) format('woff');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* open-sans-latin-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${I}) format('woff2'), url(${F}) format('woff');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n/* open-sans-cyrillic-ext-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${O}) format('woff2'), url(${L}) format('woff');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* open-sans-cyrillic-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${D}) format('woff2'), url(${L}) format('woff');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* open-sans-greek-ext-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${z}) format('woff2'), url(${L}) format('woff');\n  unicode-range: U+1F00-1FFF;\n}\n/* open-sans-greek-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${N}) format('woff2'), url(${L}) format('woff');\n  unicode-range: U+0370-03FF;\n}\n/* open-sans-vietnamese-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${R}) format('woff2'), url(${L}) format('woff');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* open-sans-latin-ext-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${M}) format('woff2'), url(${L}) format('woff');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* open-sans-latin-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(${j}) format('woff2'), url(${L}) format('woff');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n`,"",{version:3,sources:["webpack://./node_modules/fontsource-open-sans/700.css"],names:[],mappings:"AAAA,qCAAqC;AACrC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAwI;EACxI,sFAAsF;AACxF;AACA,iCAAiC;AACjC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAoI;EACpI,4DAA4D;AAC9D;AACA,kCAAkC;AAClC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAqI;EACrI,0BAA0B;AAC5B;AACA,8BAA8B;AAC9B;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAiI;EACjI,0BAA0B;AAC5B;AACA,mCAAmC;AACnC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAsI;EACtI,gHAAgH;AAClH;AACA,kCAAkC;AAClC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAqI;EACrI,mHAAmH;AACrH;AACA,8BAA8B;AAC9B;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAiI;EACjI,yKAAyK;AAC3K;AACA,qCAAqC;AACrC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,oHAAwI;EACxI,sFAAsF;AACxF;AACA,iCAAiC;AACjC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAoI;EACpI,4DAA4D;AAC9D;AACA,kCAAkC;AAClC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAqI;EACrI,0BAA0B;AAC5B;AACA,8BAA8B;AAC9B;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAiI;EACjI,0BAA0B;AAC5B;AACA,mCAAmC;AACnC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAsI;EACtI,gHAAgH;AAClH;AACA,kCAAkC;AAClC;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAqI;EACrI,mHAAmH;AACrH;AACA,8BAA8B;AAC9B;EACE,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,qHAAiI;EACjI,yKAAyK;AAC3K",sourcesContent:["/* open-sans-cyrillic-ext-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-cyrillic-ext-700-italic.woff2') format('woff2'), url('./files/open-sans-all-700-italic.woff') format('woff');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* open-sans-cyrillic-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-cyrillic-700-italic.woff2') format('woff2'), url('./files/open-sans-all-700-italic.woff') format('woff');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* open-sans-greek-ext-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-greek-ext-700-italic.woff2') format('woff2'), url('./files/open-sans-all-700-italic.woff') format('woff');\n  unicode-range: U+1F00-1FFF;\n}\n/* open-sans-greek-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-greek-700-italic.woff2') format('woff2'), url('./files/open-sans-all-700-italic.woff') format('woff');\n  unicode-range: U+0370-03FF;\n}\n/* open-sans-vietnamese-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-vietnamese-700-italic.woff2') format('woff2'), url('./files/open-sans-all-700-italic.woff') format('woff');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* open-sans-latin-ext-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-latin-ext-700-italic.woff2') format('woff2'), url('./files/open-sans-all-700-italic.woff') format('woff');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* open-sans-latin-700-italic*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: italic;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-latin-700-italic.woff2') format('woff2'), url('./files/open-sans-all-700-italic.woff') format('woff');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n/* open-sans-cyrillic-ext-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-cyrillic-ext-700-normal.woff2') format('woff2'), url('./files/open-sans-all-700-normal.woff') format('woff');\n  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n/* open-sans-cyrillic-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-cyrillic-700-normal.woff2') format('woff2'), url('./files/open-sans-all-700-normal.woff') format('woff');\n  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;\n}\n/* open-sans-greek-ext-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-greek-ext-700-normal.woff2') format('woff2'), url('./files/open-sans-all-700-normal.woff') format('woff');\n  unicode-range: U+1F00-1FFF;\n}\n/* open-sans-greek-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-greek-700-normal.woff2') format('woff2'), url('./files/open-sans-all-700-normal.woff') format('woff');\n  unicode-range: U+0370-03FF;\n}\n/* open-sans-vietnamese-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-vietnamese-700-normal.woff2') format('woff2'), url('./files/open-sans-all-700-normal.woff') format('woff');\n  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n}\n/* open-sans-latin-ext-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-latin-ext-700-normal.woff2') format('woff2'), url('./files/open-sans-all-700-normal.woff') format('woff');\n  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* open-sans-latin-700-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url('./files/open-sans-latin-700-normal.woff2') format('woff2'), url('./files/open-sans-all-700-normal.woff') format('woff');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n"],sourceRoot:""}]);const $=S},6314:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,l){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var i=0;i<this.length;i++){var u=this[i][0];null!=u&&(a[u]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&a[c[0]]||(void 0!==l&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=l),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),n.push(c))}},n}},4417:e=>{"use strict";e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},1354:e=>{"use strict";e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),l="/*# ".concat(o," */");return[n].concat([l]).join("\n")}return[n].join("\n")}},2849:e=>{"use strict";var n=Object.prototype.hasOwnProperty,t=Object.prototype.toString,r=Object.defineProperty,o=Object.getOwnPropertyDescriptor,l=function(e){return"function"==typeof Array.isArray?Array.isArray(e):"[object Array]"===t.call(e)},a=function(e){if(!e||"[object Object]"!==t.call(e))return!1;var r,o=n.call(e,"constructor"),l=e.constructor&&e.constructor.prototype&&n.call(e.constructor.prototype,"isPrototypeOf");if(e.constructor&&!o&&!l)return!1;for(r in e);return void 0===r||n.call(e,r)},i=function(e,n){r&&"__proto__"===n.name?r(e,n.name,{enumerable:!0,configurable:!0,value:n.newValue,writable:!0}):e[n.name]=n.newValue},u=function(e,t){if("__proto__"===t){if(!n.call(e,t))return;if(o)return o(e,t).value}return e[t]};e.exports=function e(){var n,t,r,o,s,c,f=arguments[0],d=1,p=arguments.length,h=!1;for("boolean"==typeof f&&(h=f,f=arguments[1]||{},d=2),(null==f||"object"!=typeof f&&"function"!=typeof f)&&(f={});d<p;++d)if(null!=(n=arguments[d]))for(t in n)r=u(f,t),f!==(o=u(n,t))&&(h&&o&&(a(o)||(s=l(o)))?(s?(s=!1,c=r&&l(r)?r:[]):c=r&&a(r)?r:{},i(f,{name:t,newValue:e(h,c,o)})):void 0!==o&&i(f,{name:t,newValue:o}));return f}},9788:e=>{var n=/\/\*[^*]*\*+([^/*][^*]*\*+)*\//g,t=/\n/g,r=/^\s*/,o=/^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/,l=/^:\s*/,a=/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/,i=/^[;\s]*/,u=/^\s+|\s+$/g,s="";function c(e){return e?e.replace(u,s):s}e.exports=function(e,u){if("string"!=typeof e)throw new TypeError("First argument must be a string");if(!e)return[];u=u||{};var f=1,d=1;function p(e){var n=e.match(t);n&&(f+=n.length);var r=e.lastIndexOf("\n");d=~r?e.length-r:d+e.length}function h(){var e={line:f,column:d};return function(n){return n.position=new m(e),b(),n}}function m(e){this.start=e,this.end={line:f,column:d},this.source=u.source}m.prototype.content=e;var g=[];function y(n){var t=new Error(u.source+":"+f+":"+d+": "+n);if(t.reason=n,t.filename=u.source,t.line=f,t.column=d,t.source=e,!u.silent)throw t;g.push(t)}function v(n){var t=n.exec(e);if(t){var r=t[0];return p(r),e=e.slice(r.length),t}}function b(){v(r)}function w(e){var n;for(e=e||[];n=k();)!1!==n&&e.push(n);return e}function k(){var n=h();if("/"==e.charAt(0)&&"*"==e.charAt(1)){for(var t=2;s!=e.charAt(t)&&("*"!=e.charAt(t)||"/"!=e.charAt(t+1));)++t;if(t+=2,s===e.charAt(t-1))return y("End of comment missing");var r=e.slice(2,t-2);return d+=2,p(r),e=e.slice(t),d+=2,n({type:"comment",comment:r})}}function A(){var e=h(),t=v(o);if(t){if(k(),!v(l))return y("property missing ':'");var r=v(a),u=e({type:"declaration",property:c(t[0].replace(n,s)),value:r?c(r[0].replace(n,s)):s});return v(i),u}}return b(),function(){var e,n=[];for(w(n);e=A();)!1!==e&&(n.push(e),w(n));return n}()}},7206:e=>{e.exports=function(e){return null!=e&&null!=e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}},5606:e=>{var n,t,r=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function l(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{t="function"==typeof clearTimeout?clearTimeout:l}catch(e){t=l}}();var i,u=[],s=!1,c=-1;function f(){s&&i&&(s=!1,i.length?u=i.concat(u):c=-1,u.length&&d())}function d(){if(!s){var e=a(f);s=!0;for(var n=u.length;n;){for(i=u,u=[];++c<n;)i&&i[c].run();c=-1,n=u.length}i=null,s=!1,function(e){if(t===clearTimeout)return clearTimeout(e);if((t===l||!t)&&clearTimeout)return t=clearTimeout,clearTimeout(e);try{return t(e)}catch(n){try{return t.call(null,e)}catch(n){return t.call(this,e)}}}(e)}}function p(e,n){this.fun=e,this.array=n}function h(){}r.nextTick=function(e){var n=new Array(arguments.length-1);if(arguments.length>1)for(var t=1;t<arguments.length;t++)n[t-1]=arguments[t];u.push(new p(e,n)),1!==u.length||s||a(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=h,r.addListener=h,r.once=h,r.off=h,r.removeListener=h,r.removeAllListeners=h,r.emit=h,r.prependListener=h,r.prependOnceListener=h,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},2694:(e,n,t)=>{"use strict";var r=t(6925);function o(){}function l(){}l.resetWarningCache=o,e.exports=function(){function e(e,n,t,o,l,a){if(a!==r){var i=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw i.name="Invariant Violation",i}}function n(){return e}e.isRequired=e;var t={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:n,element:e,elementType:e,instanceOf:n,node:e,objectOf:n,oneOf:n,oneOfType:n,shape:n,exact:n,checkPropTypes:l,resetWarningCache:o};return t.PropTypes=t,t}},5556:(e,n,t)=>{e.exports=t(2694)()},6925:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},2551:(e,n,t)=>{"use strict";var r=t(6540),o=t(9982);function l(e){for(var n="https://reactjs.org/docs/error-decoder.html?invariant="+e,t=1;t<arguments.length;t++)n+="&args[]="+encodeURIComponent(arguments[t]);return"Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var a=new Set,i={};function u(e,n){s(e,n),s(e+"Capture",n)}function s(e,n){for(i[e]=n,e=0;e<n.length;e++)a.add(n[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,n,t,r,o,l,a){this.acceptsBooleans=2===n||3===n||4===n,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=t,this.propertyName=e,this.type=n,this.sanitizeURL=l,this.removeEmptyString=a}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var n=e[0];g[n]=new m(n,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function v(e){return e[1].toUpperCase()}function b(e,n,t,r){var o=g.hasOwnProperty(n)?g[n]:null;(null!==o?0!==o.type:r||!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&(function(e,n,t,r){if(null==n||function(e,n,t,r){if(null!==t&&0===t.type)return!1;switch(typeof n){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==t?!t.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,n,t,r))return!0;if(r)return!1;if(null!==t)switch(t.type){case 3:return!n;case 4:return!1===n;case 5:return isNaN(n);case 6:return isNaN(n)||1>n}return!1}(n,t,o,r)&&(t=null),r||null===o?function(e){return!!f.call(h,e)||!f.call(p,e)&&(d.test(e)?h[e]=!0:(p[e]=!0,!1))}(n)&&(null===t?e.removeAttribute(n):e.setAttribute(n,""+t)):o.mustUseProperty?e[o.propertyName]=null===t?3!==o.type&&"":t:(n=o.attributeName,r=o.attributeNamespace,null===t?e.removeAttribute(n):(t=3===(o=o.type)||4===o&&!0===t?"":""+t,r?e.setAttributeNS(r,n,t):e.setAttribute(n,t))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var n=e.replace(y,v);g[n]=new m(n,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var n=e.replace(y,v);g[n]=new m(n,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var n=e.replace(y,v);g[n]=new m(n,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,k=Symbol.for("react.element"),A=Symbol.for("react.portal"),x=Symbol.for("react.fragment"),C=Symbol.for("react.strict_mode"),S=Symbol.for("react.profiler"),E=Symbol.for("react.provider"),F=Symbol.for("react.context"),B=Symbol.for("react.forward_ref"),U=Symbol.for("react.suspense"),P=Symbol.for("react.suspense_list"),_=Symbol.for("react.memo"),T=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var I=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var O=Symbol.iterator;function L(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=O&&e[O]||e["@@iterator"])?e:null}var D,z=Object.assign;function N(e){if(void 0===D)try{throw Error()}catch(e){var n=e.stack.trim().match(/\n( *(at )?)/);D=n&&n[1]||""}return"\n"+D+e}var R=!1;function M(e,n){if(!e||R)return"";R=!0;var t=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(n)if(n=function(){throw Error()},Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(n){if(n&&r&&"string"==typeof n.stack){for(var o=n.stack.split("\n"),l=r.stack.split("\n"),a=o.length-1,i=l.length-1;1<=a&&0<=i&&o[a]!==l[i];)i--;for(;1<=a&&0<=i;a--,i--)if(o[a]!==l[i]){if(1!==a||1!==i)do{if(a--,0>--i||o[a]!==l[i]){var u="\n"+o[a].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=a&&0<=i);break}}}finally{R=!1,Error.prepareStackTrace=t}return(e=e?e.displayName||e.name:"")?N(e):""}function j(e){switch(e.tag){case 5:return N(e.type);case 16:return N("Lazy");case 13:return N("Suspense");case 19:return N("SuspenseList");case 0:case 2:case 15:return M(e.type,!1);case 11:return M(e.type.render,!1);case 1:return M(e.type,!0);default:return""}}function $(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case x:return"Fragment";case A:return"Portal";case S:return"Profiler";case C:return"StrictMode";case U:return"Suspense";case P:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case F:return(e.displayName||"Context")+".Consumer";case E:return(e._context.displayName||"Context")+".Provider";case B:var n=e.render;return(e=e.displayName)||(e=""!==(e=n.displayName||n.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case _:return null!==(n=e.displayName||null)?n:$(e.type)||"Memo";case T:n=e._payload,e=e._init;try{return $(e(n))}catch(e){}}return null}function H(e){var n=e.type;switch(e.tag){case 24:return"Cache";case 9:return(n.displayName||"Context")+".Consumer";case 10:return(n._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=n.render).displayName||e.name||"",n.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return n;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return $(n);case 8:return n===C?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof n)return n.displayName||n.name||null;if("string"==typeof n)return n}return null}function V(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function q(e){var n=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===n||"radio"===n)}function W(e){e._valueTracker||(e._valueTracker=function(e){var n=q(e)?"checked":"value",t=Object.getOwnPropertyDescriptor(e.constructor.prototype,n),r=""+e[n];if(!e.hasOwnProperty(n)&&void 0!==t&&"function"==typeof t.get&&"function"==typeof t.set){var o=t.get,l=t.set;return Object.defineProperty(e,n,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,l.call(this,e)}}),Object.defineProperty(e,n,{enumerable:t.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[n]}}}}(e))}function Q(e){if(!e)return!1;var n=e._valueTracker;if(!n)return!0;var t=n.getValue(),r="";return e&&(r=q(e)?e.checked?"true":"false":e.value),(e=r)!==t&&(n.setValue(e),!0)}function K(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(n){return e.body}}function Y(e,n){var t=n.checked;return z({},n,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=t?t:e._wrapperState.initialChecked})}function G(e,n){var t=null==n.defaultValue?"":n.defaultValue,r=null!=n.checked?n.checked:n.defaultChecked;t=V(null!=n.value?n.value:t),e._wrapperState={initialChecked:r,initialValue:t,controlled:"checkbox"===n.type||"radio"===n.type?null!=n.checked:null!=n.value}}function X(e,n){null!=(n=n.checked)&&b(e,"checked",n,!1)}function Z(e,n){X(e,n);var t=V(n.value),r=n.type;if(null!=t)"number"===r?(0===t&&""===e.value||e.value!=t)&&(e.value=""+t):e.value!==""+t&&(e.value=""+t);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");n.hasOwnProperty("value")?ee(e,n.type,t):n.hasOwnProperty("defaultValue")&&ee(e,n.type,V(n.defaultValue)),null==n.checked&&null!=n.defaultChecked&&(e.defaultChecked=!!n.defaultChecked)}function J(e,n,t){if(n.hasOwnProperty("value")||n.hasOwnProperty("defaultValue")){var r=n.type;if(!("submit"!==r&&"reset"!==r||void 0!==n.value&&null!==n.value))return;n=""+e._wrapperState.initialValue,t||n===e.value||(e.value=n),e.defaultValue=n}""!==(t=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==t&&(e.name=t)}function ee(e,n,t){"number"===n&&K(e.ownerDocument)===e||(null==t?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+t&&(e.defaultValue=""+t))}var ne=Array.isArray;function te(e,n,t,r){if(e=e.options,n){n={};for(var o=0;o<t.length;o++)n["$"+t[o]]=!0;for(t=0;t<e.length;t++)o=n.hasOwnProperty("$"+e[t].value),e[t].selected!==o&&(e[t].selected=o),o&&r&&(e[t].defaultSelected=!0)}else{for(t=""+V(t),n=null,o=0;o<e.length;o++){if(e[o].value===t)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==n||e[o].disabled||(n=e[o])}null!==n&&(n.selected=!0)}}function re(e,n){if(null!=n.dangerouslySetInnerHTML)throw Error(l(91));return z({},n,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,n){var t=n.value;if(null==t){if(t=n.children,n=n.defaultValue,null!=t){if(null!=n)throw Error(l(92));if(ne(t)){if(1<t.length)throw Error(l(93));t=t[0]}n=t}null==n&&(n=""),t=n}e._wrapperState={initialValue:V(t)}}function le(e,n){var t=V(n.value),r=V(n.defaultValue);null!=t&&((t=""+t)!==e.value&&(e.value=t),null==n.defaultValue&&e.defaultValue!==t&&(e.defaultValue=t)),null!=r&&(e.defaultValue=""+r)}function ae(e){var n=e.textContent;n===e._wrapperState.initialValue&&""!==n&&null!==n&&(e.value=n)}function ie(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,n){return null==e||"http://www.w3.org/1999/xhtml"===e?ie(n):"http://www.w3.org/2000/svg"===e&&"foreignObject"===n?"http://www.w3.org/1999/xhtml":e}var se,ce,fe=(ce=function(e,n){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=n;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+n.valueOf().toString()+"</svg>",n=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;n.firstChild;)e.appendChild(n.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,n,t,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,n)}))}:ce);function de(e,n){if(n){var t=e.firstChild;if(t&&t===e.lastChild&&3===t.nodeType)return void(t.nodeValue=n)}e.textContent=n}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,n,t){return null==n||"boolean"==typeof n||""===n?"":t||"number"!=typeof n||0===n||pe.hasOwnProperty(e)&&pe[e]?(""+n).trim():n+"px"}function ge(e,n){for(var t in e=e.style,n)if(n.hasOwnProperty(t)){var r=0===t.indexOf("--"),o=me(t,n[t],r);"float"===t&&(t="cssFloat"),r?e.setProperty(t,o):e[t]=o}}Object.keys(pe).forEach((function(e){he.forEach((function(n){n=n+e.charAt(0).toUpperCase()+e.substring(1),pe[n]=pe[e]}))}));var ye=z({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ve(e,n){if(n){if(ye[e]&&(null!=n.children||null!=n.dangerouslySetInnerHTML))throw Error(l(137,e));if(null!=n.dangerouslySetInnerHTML){if(null!=n.children)throw Error(l(60));if("object"!=typeof n.dangerouslySetInnerHTML||!("__html"in n.dangerouslySetInnerHTML))throw Error(l(61))}if(null!=n.style&&"object"!=typeof n.style)throw Error(l(62))}}function be(e,n){if(-1===e.indexOf("-"))return"string"==typeof n.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function ke(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ae=null,xe=null,Ce=null;function Se(e){if(e=wo(e)){if("function"!=typeof Ae)throw Error(l(280));var n=e.stateNode;n&&(n=Ao(n),Ae(e.stateNode,e.type,n))}}function Ee(e){xe?Ce?Ce.push(e):Ce=[e]:xe=e}function Fe(){if(xe){var e=xe,n=Ce;if(Ce=xe=null,Se(e),n)for(e=0;e<n.length;e++)Se(n[e])}}function Be(e,n){return e(n)}function Ue(){}var Pe=!1;function _e(e,n,t){if(Pe)return e(n,t);Pe=!0;try{return Be(e,n,t)}finally{Pe=!1,(null!==xe||null!==Ce)&&(Ue(),Fe())}}function Te(e,n){var t=e.stateNode;if(null===t)return null;var r=Ao(t);if(null===r)return null;t=r[n];e:switch(n){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(t&&"function"!=typeof t)throw Error(l(231,n,typeof t));return t}var Ie=!1;if(c)try{var Oe={};Object.defineProperty(Oe,"passive",{get:function(){Ie=!0}}),window.addEventListener("test",Oe,Oe),window.removeEventListener("test",Oe,Oe)}catch(ce){Ie=!1}function Le(e,n,t,r,o,l,a,i,u){var s=Array.prototype.slice.call(arguments,3);try{n.apply(t,s)}catch(e){this.onError(e)}}var De=!1,ze=null,Ne=!1,Re=null,Me={onError:function(e){De=!0,ze=e}};function je(e,n,t,r,o,l,a,i,u){De=!1,ze=null,Le.apply(Me,arguments)}function $e(e){var n=e,t=e;if(e.alternate)for(;n.return;)n=n.return;else{e=n;do{!!(4098&(n=e).flags)&&(t=n.return),e=n.return}while(e)}return 3===n.tag?t:null}function He(e){if(13===e.tag){var n=e.memoizedState;if(null===n&&null!==(e=e.alternate)&&(n=e.memoizedState),null!==n)return n.dehydrated}return null}function Ve(e){if($e(e)!==e)throw Error(l(188))}function qe(e){return null!==(e=function(e){var n=e.alternate;if(!n){if(null===(n=$e(e)))throw Error(l(188));return n!==e?null:e}for(var t=e,r=n;;){var o=t.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){t=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===t)return Ve(o),e;if(a===r)return Ve(o),n;a=a.sibling}throw Error(l(188))}if(t.return!==r.return)t=o,r=a;else{for(var i=!1,u=o.child;u;){if(u===t){i=!0,t=o,r=a;break}if(u===r){i=!0,r=o,t=a;break}u=u.sibling}if(!i){for(u=a.child;u;){if(u===t){i=!0,t=a,r=o;break}if(u===r){i=!0,r=a,t=o;break}u=u.sibling}if(!i)throw Error(l(189))}}if(t.alternate!==r)throw Error(l(190))}if(3!==t.tag)throw Error(l(188));return t.stateNode.current===t?e:n}(e))?We(e):null}function We(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var n=We(e);if(null!==n)return n;e=e.sibling}return null}var Qe=o.unstable_scheduleCallback,Ke=o.unstable_cancelCallback,Ye=o.unstable_shouldYield,Ge=o.unstable_requestPaint,Xe=o.unstable_now,Ze=o.unstable_getCurrentPriorityLevel,Je=o.unstable_ImmediatePriority,en=o.unstable_UserBlockingPriority,nn=o.unstable_NormalPriority,tn=o.unstable_LowPriority,rn=o.unstable_IdlePriority,on=null,ln=null,an=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(un(e)/sn|0)|0},un=Math.log,sn=Math.LN2,cn=64,fn=4194304;function dn(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function pn(e,n){var t=e.pendingLanes;if(0===t)return 0;var r=0,o=e.suspendedLanes,l=e.pingedLanes,a=268435455&t;if(0!==a){var i=a&~o;0!==i?r=dn(i):0!=(l&=a)&&(r=dn(l))}else 0!=(a=t&~o)?r=dn(a):0!==l&&(r=dn(l));if(0===r)return 0;if(0!==n&&n!==r&&!(n&o)&&((o=r&-r)>=(l=n&-n)||16===o&&4194240&l))return n;if(4&r&&(r|=16&t),0!==(n=e.entangledLanes))for(e=e.entanglements,n&=r;0<n;)o=1<<(t=31-an(n)),r|=e[t],n&=~o;return r}function hn(e,n){switch(e){case 1:case 2:case 4:return n+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return n+5e3;default:return-1}}function mn(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function gn(){var e=cn;return!(4194240&(cn<<=1))&&(cn=64),e}function yn(e){for(var n=[],t=0;31>t;t++)n.push(e);return n}function vn(e,n,t){e.pendingLanes|=n,536870912!==n&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[n=31-an(n)]=t}function bn(e,n){var t=e.entangledLanes|=n;for(e=e.entanglements;t;){var r=31-an(t),o=1<<r;o&n|e[r]&n&&(e[r]|=n),t&=~o}}var wn=0;function kn(e){return 1<(e&=-e)?4<e?268435455&e?16:536870912:4:1}var An,xn,Cn,Sn,En,Fn=!1,Bn=[],Un=null,Pn=null,_n=null,Tn=new Map,In=new Map,On=[],Ln="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Dn(e,n){switch(e){case"focusin":case"focusout":Un=null;break;case"dragenter":case"dragleave":Pn=null;break;case"mouseover":case"mouseout":_n=null;break;case"pointerover":case"pointerout":Tn.delete(n.pointerId);break;case"gotpointercapture":case"lostpointercapture":In.delete(n.pointerId)}}function zn(e,n,t,r,o,l){return null===e||e.nativeEvent!==l?(e={blockedOn:n,domEventName:t,eventSystemFlags:r,nativeEvent:l,targetContainers:[o]},null!==n&&null!==(n=wo(n))&&xn(n),e):(e.eventSystemFlags|=r,n=e.targetContainers,null!==o&&-1===n.indexOf(o)&&n.push(o),e)}function Nn(e){var n=bo(e.target);if(null!==n){var t=$e(n);if(null!==t)if(13===(n=t.tag)){if(null!==(n=He(t)))return e.blockedOn=n,void En(e.priority,(function(){Cn(t)}))}else if(3===n&&t.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===t.tag?t.stateNode.containerInfo:null)}e.blockedOn=null}function Rn(e){if(null!==e.blockedOn)return!1;for(var n=e.targetContainers;0<n.length;){var t=Gn(e.domEventName,e.eventSystemFlags,n[0],e.nativeEvent);if(null!==t)return null!==(n=wo(t))&&xn(n),e.blockedOn=t,!1;var r=new(t=e.nativeEvent).constructor(t.type,t);we=r,t.target.dispatchEvent(r),we=null,n.shift()}return!0}function Mn(e,n,t){Rn(e)&&t.delete(n)}function jn(){Fn=!1,null!==Un&&Rn(Un)&&(Un=null),null!==Pn&&Rn(Pn)&&(Pn=null),null!==_n&&Rn(_n)&&(_n=null),Tn.forEach(Mn),In.forEach(Mn)}function $n(e,n){e.blockedOn===n&&(e.blockedOn=null,Fn||(Fn=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,jn)))}function Hn(e){function n(n){return $n(n,e)}if(0<Bn.length){$n(Bn[0],e);for(var t=1;t<Bn.length;t++){var r=Bn[t];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Un&&$n(Un,e),null!==Pn&&$n(Pn,e),null!==_n&&$n(_n,e),Tn.forEach(n),In.forEach(n),t=0;t<On.length;t++)(r=On[t]).blockedOn===e&&(r.blockedOn=null);for(;0<On.length&&null===(t=On[0]).blockedOn;)Nn(t),null===t.blockedOn&&On.shift()}var Vn=w.ReactCurrentBatchConfig,qn=!0;function Wn(e,n,t,r){var o=wn,l=Vn.transition;Vn.transition=null;try{wn=1,Kn(e,n,t,r)}finally{wn=o,Vn.transition=l}}function Qn(e,n,t,r){var o=wn,l=Vn.transition;Vn.transition=null;try{wn=4,Kn(e,n,t,r)}finally{wn=o,Vn.transition=l}}function Kn(e,n,t,r){if(qn){var o=Gn(e,n,t,r);if(null===o)Vr(e,n,r,Yn,t),Dn(e,r);else if(function(e,n,t,r,o){switch(n){case"focusin":return Un=zn(Un,e,n,t,r,o),!0;case"dragenter":return Pn=zn(Pn,e,n,t,r,o),!0;case"mouseover":return _n=zn(_n,e,n,t,r,o),!0;case"pointerover":var l=o.pointerId;return Tn.set(l,zn(Tn.get(l)||null,e,n,t,r,o)),!0;case"gotpointercapture":return l=o.pointerId,In.set(l,zn(In.get(l)||null,e,n,t,r,o)),!0}return!1}(o,e,n,t,r))r.stopPropagation();else if(Dn(e,r),4&n&&-1<Ln.indexOf(e)){for(;null!==o;){var l=wo(o);if(null!==l&&An(l),null===(l=Gn(e,n,t,r))&&Vr(e,n,r,Yn,t),l===o)break;o=l}null!==o&&r.stopPropagation()}else Vr(e,n,r,null,t)}}var Yn=null;function Gn(e,n,t,r){if(Yn=null,null!==(e=bo(e=ke(r))))if(null===(n=$e(e)))e=null;else if(13===(t=n.tag)){if(null!==(e=He(n)))return e;e=null}else if(3===t){if(n.stateNode.current.memoizedState.isDehydrated)return 3===n.tag?n.stateNode.containerInfo:null;e=null}else n!==e&&(e=null);return Yn=e,null}function Xn(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ze()){case Je:return 1;case en:return 4;case nn:case tn:return 16;case rn:return 536870912;default:return 16}default:return 16}}var Zn=null,Jn=null,et=null;function nt(){if(et)return et;var e,n,t=Jn,r=t.length,o="value"in Zn?Zn.value:Zn.textContent,l=o.length;for(e=0;e<r&&t[e]===o[e];e++);var a=r-e;for(n=1;n<=a&&t[r-n]===o[l-n];n++);return et=o.slice(e,1<n?1-n:void 0)}function tt(e){var n=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===n&&(e=13):e=n,10===e&&(e=13),32<=e||13===e?e:0}function rt(){return!0}function ot(){return!1}function lt(e){function n(n,t,r,o,l){for(var a in this._reactName=n,this._targetInst=r,this.type=t,this.nativeEvent=o,this.target=l,this.currentTarget=null,e)e.hasOwnProperty(a)&&(n=e[a],this[a]=n?n(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?rt:ot,this.isPropagationStopped=ot,this}return z(n.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=rt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=rt)},persist:function(){},isPersistent:rt}),n}var at,it,ut,st={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},ct=lt(st),ft=z({},st,{view:0,detail:0}),dt=lt(ft),pt=z({},ft,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:St,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ut&&(ut&&"mousemove"===e.type?(at=e.screenX-ut.screenX,it=e.screenY-ut.screenY):it=at=0,ut=e),at)},movementY:function(e){return"movementY"in e?e.movementY:it}}),ht=lt(pt),mt=lt(z({},pt,{dataTransfer:0})),gt=lt(z({},ft,{relatedTarget:0})),yt=lt(z({},st,{animationName:0,elapsedTime:0,pseudoElement:0})),vt=z({},st,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bt=lt(vt),wt=lt(z({},st,{data:0})),kt={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},At={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},xt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Ct(e){var n=this.nativeEvent;return n.getModifierState?n.getModifierState(e):!!(e=xt[e])&&!!n[e]}function St(){return Ct}var Et=z({},ft,{key:function(e){if(e.key){var n=kt[e.key]||e.key;if("Unidentified"!==n)return n}return"keypress"===e.type?13===(e=tt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?At[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:St,charCode:function(e){return"keypress"===e.type?tt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Ft=lt(Et),Bt=lt(z({},pt,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Ut=lt(z({},ft,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:St})),Pt=lt(z({},st,{propertyName:0,elapsedTime:0,pseudoElement:0})),_t=z({},pt,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Tt=lt(_t),It=[9,13,27,32],Ot=c&&"CompositionEvent"in window,Lt=null;c&&"documentMode"in document&&(Lt=document.documentMode);var Dt=c&&"TextEvent"in window&&!Lt,zt=c&&(!Ot||Lt&&8<Lt&&11>=Lt),Nt=String.fromCharCode(32),Rt=!1;function Mt(e,n){switch(e){case"keyup":return-1!==It.indexOf(n.keyCode);case"keydown":return 229!==n.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function jt(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var $t=!1,Ht={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vt(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===n?!!Ht[e.type]:"textarea"===n}function qt(e,n,t,r){Ee(r),0<(n=Wr(n,"onChange")).length&&(t=new ct("onChange","change",null,t,r),e.push({event:t,listeners:n}))}var Wt=null,Qt=null;function Kt(e){Nr(e,0)}function Yt(e){if(Q(ko(e)))return e}function Gt(e,n){if("change"===e)return n}var Xt=!1;if(c){var Zt;if(c){var Jt="oninput"in document;if(!Jt){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jt="function"==typeof er.oninput}Zt=Jt}else Zt=!1;Xt=Zt&&(!document.documentMode||9<document.documentMode)}function nr(){Wt&&(Wt.detachEvent("onpropertychange",tr),Qt=Wt=null)}function tr(e){if("value"===e.propertyName&&Yt(Qt)){var n=[];qt(n,Qt,e,ke(e)),_e(Kt,n)}}function rr(e,n,t){"focusin"===e?(nr(),Qt=t,(Wt=n).attachEvent("onpropertychange",tr)):"focusout"===e&&nr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Yt(Qt)}function lr(e,n){if("click"===e)return Yt(n)}function ar(e,n){if("input"===e||"change"===e)return Yt(n)}var ir="function"==typeof Object.is?Object.is:function(e,n){return e===n&&(0!==e||1/e==1/n)||e!=e&&n!=n};function ur(e,n){if(ir(e,n))return!0;if("object"!=typeof e||null===e||"object"!=typeof n||null===n)return!1;var t=Object.keys(e),r=Object.keys(n);if(t.length!==r.length)return!1;for(r=0;r<t.length;r++){var o=t[r];if(!f.call(n,o)||!ir(e[o],n[o]))return!1}return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,n){var t,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(t=e+r.textContent.length,e<=n&&t>=n)return{node:r,offset:n-e};e=t}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function fr(e,n){return!(!e||!n)&&(e===n||(!e||3!==e.nodeType)&&(n&&3===n.nodeType?fr(e,n.parentNode):"contains"in e?e.contains(n):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(n))))}function dr(){for(var e=window,n=K();n instanceof e.HTMLIFrameElement;){try{var t="string"==typeof n.contentWindow.location.href}catch(e){t=!1}if(!t)break;n=K((e=n.contentWindow).document)}return n}function pr(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return n&&("input"===n&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===n||"true"===e.contentEditable)}function hr(e){var n=dr(),t=e.focusedElem,r=e.selectionRange;if(n!==t&&t&&t.ownerDocument&&fr(t.ownerDocument.documentElement,t)){if(null!==r&&pr(t))if(n=r.start,void 0===(e=r.end)&&(e=n),"selectionStart"in t)t.selectionStart=n,t.selectionEnd=Math.min(e,t.value.length);else if((e=(n=t.ownerDocument||document)&&n.defaultView||window).getSelection){e=e.getSelection();var o=t.textContent.length,l=Math.min(r.start,o);r=void 0===r.end?l:Math.min(r.end,o),!e.extend&&l>r&&(o=r,r=l,l=o),o=cr(t,l);var a=cr(t,r);o&&a&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((n=n.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),l>r?(e.addRange(n),e.extend(a.node,a.offset)):(n.setEnd(a.node,a.offset),e.addRange(n)))}for(n=[],e=t;e=e.parentNode;)1===e.nodeType&&n.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof t.focus&&t.focus(),t=0;t<n.length;t++)(e=n[t]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=c&&"documentMode"in document&&11>=document.documentMode,gr=null,yr=null,vr=null,br=!1;function wr(e,n,t){var r=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;br||null==gr||gr!==K(r)||(r="selectionStart"in(r=gr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&ur(vr,r)||(vr=r,0<(r=Wr(yr,"onSelect")).length&&(n=new ct("onSelect","select",null,n,t),e.push({event:n,listeners:r}),n.target=gr)))}function kr(e,n){var t={};return t[e.toLowerCase()]=n.toLowerCase(),t["Webkit"+e]="webkit"+n,t["Moz"+e]="moz"+n,t}var Ar={animationend:kr("Animation","AnimationEnd"),animationiteration:kr("Animation","AnimationIteration"),animationstart:kr("Animation","AnimationStart"),transitionend:kr("Transition","TransitionEnd")},xr={},Cr={};function Sr(e){if(xr[e])return xr[e];if(!Ar[e])return e;var n,t=Ar[e];for(n in t)if(t.hasOwnProperty(n)&&n in Cr)return xr[e]=t[n];return e}c&&(Cr=document.createElement("div").style,"AnimationEvent"in window||(delete Ar.animationend.animation,delete Ar.animationiteration.animation,delete Ar.animationstart.animation),"TransitionEvent"in window||delete Ar.transitionend.transition);var Er=Sr("animationend"),Fr=Sr("animationiteration"),Br=Sr("animationstart"),Ur=Sr("transitionend"),Pr=new Map,_r="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Tr(e,n){Pr.set(e,n),u(n,[e])}for(var Ir=0;Ir<_r.length;Ir++){var Or=_r[Ir];Tr(Or.toLowerCase(),"on"+(Or[0].toUpperCase()+Or.slice(1)))}Tr(Er,"onAnimationEnd"),Tr(Fr,"onAnimationIteration"),Tr(Br,"onAnimationStart"),Tr("dblclick","onDoubleClick"),Tr("focusin","onFocus"),Tr("focusout","onBlur"),Tr(Ur,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Lr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Dr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Lr));function zr(e,n,t){var r=e.type||"unknown-event";e.currentTarget=t,function(e,n,t,r,o,a,i,u,s){if(je.apply(this,arguments),De){if(!De)throw Error(l(198));var c=ze;De=!1,ze=null,Ne||(Ne=!0,Re=c)}}(r,n,void 0,e),e.currentTarget=null}function Nr(e,n){n=!!(4&n);for(var t=0;t<e.length;t++){var r=e[t],o=r.event;r=r.listeners;e:{var l=void 0;if(n)for(var a=r.length-1;0<=a;a--){var i=r[a],u=i.instance,s=i.currentTarget;if(i=i.listener,u!==l&&o.isPropagationStopped())break e;zr(o,i,s),l=u}else for(a=0;a<r.length;a++){if(u=(i=r[a]).instance,s=i.currentTarget,i=i.listener,u!==l&&o.isPropagationStopped())break e;zr(o,i,s),l=u}}}if(Ne)throw e=Re,Ne=!1,Re=null,e}function Rr(e,n){var t=n[go];void 0===t&&(t=n[go]=new Set);var r=e+"__bubble";t.has(r)||(Hr(n,e,2,!1),t.add(r))}function Mr(e,n,t){var r=0;n&&(r|=4),Hr(t,e,r,n)}var jr="_reactListening"+Math.random().toString(36).slice(2);function $r(e){if(!e[jr]){e[jr]=!0,a.forEach((function(n){"selectionchange"!==n&&(Dr.has(n)||Mr(n,!1,e),Mr(n,!0,e))}));var n=9===e.nodeType?e:e.ownerDocument;null===n||n[jr]||(n[jr]=!0,Mr("selectionchange",!1,n))}}function Hr(e,n,t,r){switch(Xn(n)){case 1:var o=Wn;break;case 4:o=Qn;break;default:o=Kn}t=o.bind(null,n,t,e),o=void 0,!Ie||"touchstart"!==n&&"touchmove"!==n&&"wheel"!==n||(o=!0),r?void 0!==o?e.addEventListener(n,t,{capture:!0,passive:o}):e.addEventListener(n,t,!0):void 0!==o?e.addEventListener(n,t,{passive:o}):e.addEventListener(n,t,!1)}function Vr(e,n,t,r,o){var l=r;if(!(1&n||2&n||null===r))e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var i=r.stateNode.containerInfo;if(i===o||8===i.nodeType&&i.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var u=a.tag;if((3===u||4===u)&&((u=a.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;a=a.return}for(;null!==i;){if(null===(a=bo(i)))return;if(5===(u=a.tag)||6===u){r=l=a;continue e}i=i.parentNode}}r=r.return}_e((function(){var r=l,o=ke(t),a=[];e:{var i=Pr.get(e);if(void 0!==i){var u=ct,s=e;switch(e){case"keypress":if(0===tt(t))break e;case"keydown":case"keyup":u=Ft;break;case"focusin":s="focus",u=gt;break;case"focusout":s="blur",u=gt;break;case"beforeblur":case"afterblur":u=gt;break;case"click":if(2===t.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=ht;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=mt;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Ut;break;case Er:case Fr:case Br:u=yt;break;case Ur:u=Pt;break;case"scroll":u=dt;break;case"wheel":u=Tt;break;case"copy":case"cut":case"paste":u=bt;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Bt}var c=!!(4&n),f=!c&&"scroll"===e,d=c?null!==i?i+"Capture":null:i;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=Te(h,d))&&c.push(qr(h,m,p))),f)break;h=h.return}0<c.length&&(i=new u(i,s,null,t,o),a.push({event:i,listeners:c}))}}if(!(7&n)){if(u="mouseout"===e||"pointerout"===e,(!(i="mouseover"===e||"pointerover"===e)||t===we||!(s=t.relatedTarget||t.fromElement)||!bo(s)&&!s[mo])&&(u||i)&&(i=o.window===o?o:(i=o.ownerDocument)?i.defaultView||i.parentWindow:window,u?(u=r,null!==(s=(s=t.relatedTarget||t.toElement)?bo(s):null)&&(s!==(f=$e(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=ht,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Bt,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?i:ko(u),p=null==s?i:ko(s),(i=new c(m,h+"leave",u,t,o)).target=f,i.relatedTarget=p,m=null,bo(o)===r&&((c=new c(d,h+"enter",s,t,o)).target=p,c.relatedTarget=f,m=c),f=m,u&&s)e:{for(d=s,h=0,p=c=u;p;p=Qr(p))h++;for(p=0,m=d;m;m=Qr(m))p++;for(;0<h-p;)c=Qr(c),h--;for(;0<p-h;)d=Qr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Qr(c),d=Qr(d)}c=null}else c=null;null!==u&&Kr(a,i,u,c,!1),null!==s&&null!==f&&Kr(a,f,s,c,!0)}if("select"===(u=(i=r?ko(r):window).nodeName&&i.nodeName.toLowerCase())||"input"===u&&"file"===i.type)var g=Gt;else if(Vt(i))if(Xt)g=ar;else{g=or;var y=rr}else(u=i.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(g=lr);switch(g&&(g=g(e,r))?qt(a,g,t,o):(y&&y(e,i,r),"focusout"===e&&(y=i._wrapperState)&&y.controlled&&"number"===i.type&&ee(i,"number",i.value)),y=r?ko(r):window,e){case"focusin":(Vt(y)||"true"===y.contentEditable)&&(gr=y,yr=r,vr=null);break;case"focusout":vr=yr=gr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,wr(a,t,o);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":wr(a,t,o)}var v;if(Ot)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else $t?Mt(e,t)&&(b="onCompositionEnd"):"keydown"===e&&229===t.keyCode&&(b="onCompositionStart");b&&(zt&&"ko"!==t.locale&&($t||"onCompositionStart"!==b?"onCompositionEnd"===b&&$t&&(v=nt()):(Jn="value"in(Zn=o)?Zn.value:Zn.textContent,$t=!0)),0<(y=Wr(r,b)).length&&(b=new wt(b,e,null,t,o),a.push({event:b,listeners:y}),(v||null!==(v=jt(t)))&&(b.data=v))),(v=Dt?function(e,n){switch(e){case"compositionend":return jt(n);case"keypress":return 32!==n.which?null:(Rt=!0,Nt);case"textInput":return(e=n.data)===Nt&&Rt?null:e;default:return null}}(e,t):function(e,n){if($t)return"compositionend"===e||!Ot&&Mt(e,n)?(e=nt(),et=Jn=Zn=null,$t=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(n.ctrlKey||n.altKey||n.metaKey)||n.ctrlKey&&n.altKey){if(n.char&&1<n.char.length)return n.char;if(n.which)return String.fromCharCode(n.which)}return null;case"compositionend":return zt&&"ko"!==n.locale?null:n.data}}(e,t))&&0<(r=Wr(r,"onBeforeInput")).length&&(o=new wt("onBeforeInput","beforeinput",null,t,o),a.push({event:o,listeners:r}),o.data=v)}Nr(a,n)}))}function qr(e,n,t){return{instance:e,listener:n,currentTarget:t}}function Wr(e,n){for(var t=n+"Capture",r=[];null!==e;){var o=e,l=o.stateNode;5===o.tag&&null!==l&&(o=l,null!=(l=Te(e,t))&&r.unshift(qr(e,l,o)),null!=(l=Te(e,n))&&r.push(qr(e,l,o))),e=e.return}return r}function Qr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Kr(e,n,t,r,o){for(var l=n._reactName,a=[];null!==t&&t!==r;){var i=t,u=i.alternate,s=i.stateNode;if(null!==u&&u===r)break;5===i.tag&&null!==s&&(i=s,o?null!=(u=Te(t,l))&&a.unshift(qr(t,u,i)):o||null!=(u=Te(t,l))&&a.push(qr(t,u,i))),t=t.return}0!==a.length&&e.push({event:n,listeners:a})}var Yr=/\r\n?/g,Gr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(Yr,"\n").replace(Gr,"")}function Zr(e,n,t){if(n=Xr(n),Xr(e)!==n&&t)throw Error(l(425))}function Jr(){}var eo=null,no=null;function to(e,n){return"textarea"===e||"noscript"===e||"string"==typeof n.children||"number"==typeof n.children||"object"==typeof n.dangerouslySetInnerHTML&&null!==n.dangerouslySetInnerHTML&&null!=n.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,lo="function"==typeof Promise?Promise:void 0,ao="function"==typeof queueMicrotask?queueMicrotask:void 0!==lo?function(e){return lo.resolve(null).then(e).catch(io)}:ro;function io(e){setTimeout((function(){throw e}))}function uo(e,n){var t=n,r=0;do{var o=t.nextSibling;if(e.removeChild(t),o&&8===o.nodeType)if("/$"===(t=o.data)){if(0===r)return e.removeChild(o),void Hn(n);r--}else"$"!==t&&"$?"!==t&&"$!"!==t||r++;t=o}while(t);Hn(n)}function so(e){for(;null!=e;e=e.nextSibling){var n=e.nodeType;if(1===n||3===n)break;if(8===n){if("$"===(n=e.data)||"$!"===n||"$?"===n)break;if("/$"===n)return null}}return e}function co(e){e=e.previousSibling;for(var n=0;e;){if(8===e.nodeType){var t=e.data;if("$"===t||"$!"===t||"$?"===t){if(0===n)return e;n--}else"/$"===t&&n++}e=e.previousSibling}return null}var fo=Math.random().toString(36).slice(2),po="__reactFiber$"+fo,ho="__reactProps$"+fo,mo="__reactContainer$"+fo,go="__reactEvents$"+fo,yo="__reactListeners$"+fo,vo="__reactHandles$"+fo;function bo(e){var n=e[po];if(n)return n;for(var t=e.parentNode;t;){if(n=t[mo]||t[po]){if(t=n.alternate,null!==n.child||null!==t&&null!==t.child)for(e=co(e);null!==e;){if(t=e[po])return t;e=co(e)}return n}t=(e=t).parentNode}return null}function wo(e){return!(e=e[po]||e[mo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ko(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(l(33))}function Ao(e){return e[ho]||null}var xo=[],Co=-1;function So(e){return{current:e}}function Eo(e){0>Co||(e.current=xo[Co],xo[Co]=null,Co--)}function Fo(e,n){Co++,xo[Co]=e.current,e.current=n}var Bo={},Uo=So(Bo),Po=So(!1),_o=Bo;function To(e,n){var t=e.type.contextTypes;if(!t)return Bo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===n)return r.__reactInternalMemoizedMaskedChildContext;var o,l={};for(o in t)l[o]=n[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=n,e.__reactInternalMemoizedMaskedChildContext=l),l}function Io(e){return null!=e.childContextTypes}function Oo(){Eo(Po),Eo(Uo)}function Lo(e,n,t){if(Uo.current!==Bo)throw Error(l(168));Fo(Uo,n),Fo(Po,t)}function Do(e,n,t){var r=e.stateNode;if(n=n.childContextTypes,"function"!=typeof r.getChildContext)return t;for(var o in r=r.getChildContext())if(!(o in n))throw Error(l(108,H(e)||"Unknown",o));return z({},t,r)}function zo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Bo,_o=Uo.current,Fo(Uo,e),Fo(Po,Po.current),!0}function No(e,n,t){var r=e.stateNode;if(!r)throw Error(l(169));t?(e=Do(e,n,_o),r.__reactInternalMemoizedMergedChildContext=e,Eo(Po),Eo(Uo),Fo(Uo,e)):Eo(Po),Fo(Po,t)}var Ro=null,Mo=!1,jo=!1;function $o(e){null===Ro?Ro=[e]:Ro.push(e)}function Ho(){if(!jo&&null!==Ro){jo=!0;var e=0,n=wn;try{var t=Ro;for(wn=1;e<t.length;e++){var r=t[e];do{r=r(!0)}while(null!==r)}Ro=null,Mo=!1}catch(n){throw null!==Ro&&(Ro=Ro.slice(e+1)),Qe(Je,Ho),n}finally{wn=n,jo=!1}}return null}var Vo=[],qo=0,Wo=null,Qo=0,Ko=[],Yo=0,Go=null,Xo=1,Zo="";function Jo(e,n){Vo[qo++]=Qo,Vo[qo++]=Wo,Wo=e,Qo=n}function el(e,n,t){Ko[Yo++]=Xo,Ko[Yo++]=Zo,Ko[Yo++]=Go,Go=e;var r=Xo;e=Zo;var o=32-an(r)-1;r&=~(1<<o),t+=1;var l=32-an(n)+o;if(30<l){var a=o-o%5;l=(r&(1<<a)-1).toString(32),r>>=a,o-=a,Xo=1<<32-an(n)+o|t<<o|r,Zo=l+e}else Xo=1<<l|t<<o|r,Zo=e}function nl(e){null!==e.return&&(Jo(e,1),el(e,1,0))}function tl(e){for(;e===Wo;)Wo=Vo[--qo],Vo[qo]=null,Qo=Vo[--qo],Vo[qo]=null;for(;e===Go;)Go=Ko[--Yo],Ko[Yo]=null,Zo=Ko[--Yo],Ko[Yo]=null,Xo=Ko[--Yo],Ko[Yo]=null}var rl=null,ol=null,ll=!1,al=null;function il(e,n){var t=Ts(5,null,null,0);t.elementType="DELETED",t.stateNode=n,t.return=e,null===(n=e.deletions)?(e.deletions=[t],e.flags|=16):n.push(t)}function ul(e,n){switch(e.tag){case 5:var t=e.type;return null!==(n=1!==n.nodeType||t.toLowerCase()!==n.nodeName.toLowerCase()?null:n)&&(e.stateNode=n,rl=e,ol=so(n.firstChild),!0);case 6:return null!==(n=""===e.pendingProps||3!==n.nodeType?null:n)&&(e.stateNode=n,rl=e,ol=null,!0);case 13:return null!==(n=8!==n.nodeType?null:n)&&(t=null!==Go?{id:Xo,overflow:Zo}:null,e.memoizedState={dehydrated:n,treeContext:t,retryLane:1073741824},(t=Ts(18,null,null,0)).stateNode=n,t.return=e,e.child=t,rl=e,ol=null,!0);default:return!1}}function sl(e){return!(!(1&e.mode)||128&e.flags)}function cl(e){if(ll){var n=ol;if(n){var t=n;if(!ul(e,n)){if(sl(e))throw Error(l(418));n=so(t.nextSibling);var r=rl;n&&ul(e,n)?il(r,t):(e.flags=-4097&e.flags|2,ll=!1,rl=e)}}else{if(sl(e))throw Error(l(418));e.flags=-4097&e.flags|2,ll=!1,rl=e}}}function fl(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;rl=e}function dl(e){if(e!==rl)return!1;if(!ll)return fl(e),ll=!0,!1;var n;if((n=3!==e.tag)&&!(n=5!==e.tag)&&(n="head"!==(n=e.type)&&"body"!==n&&!to(e.type,e.memoizedProps)),n&&(n=ol)){if(sl(e))throw pl(),Error(l(418));for(;n;)il(e,n),n=so(n.nextSibling)}if(fl(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(l(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType){var t=e.data;if("/$"===t){if(0===n){ol=so(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++}e=e.nextSibling}ol=null}}else ol=rl?so(e.stateNode.nextSibling):null;return!0}function pl(){for(var e=ol;e;)e=so(e.nextSibling)}function hl(){ol=rl=null,ll=!1}function ml(e){null===al?al=[e]:al.push(e)}var gl=w.ReactCurrentBatchConfig;function yl(e,n){if(e&&e.defaultProps){for(var t in n=z({},n),e=e.defaultProps)void 0===n[t]&&(n[t]=e[t]);return n}return n}var vl=So(null),bl=null,wl=null,kl=null;function Al(){kl=wl=bl=null}function xl(e){var n=vl.current;Eo(vl),e._currentValue=n}function Cl(e,n,t){for(;null!==e;){var r=e.alternate;if((e.childLanes&n)!==n?(e.childLanes|=n,null!==r&&(r.childLanes|=n)):null!==r&&(r.childLanes&n)!==n&&(r.childLanes|=n),e===t)break;e=e.return}}function Sl(e,n){bl=e,kl=wl=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(!!(e.lanes&n)&&(wi=!0),e.firstContext=null)}function El(e){var n=e._currentValue;if(kl!==e)if(e={context:e,memoizedValue:n,next:null},null===wl){if(null===bl)throw Error(l(308));wl=e,bl.dependencies={lanes:0,firstContext:e}}else wl=wl.next=e;return n}var Fl=null;function Bl(e){null===Fl?Fl=[e]:Fl.push(e)}function Ul(e,n,t,r){var o=n.interleaved;return null===o?(t.next=t,Bl(n)):(t.next=o.next,o.next=t),n.interleaved=t,Pl(e,r)}function Pl(e,n){e.lanes|=n;var t=e.alternate;for(null!==t&&(t.lanes|=n),t=e,e=e.return;null!==e;)e.childLanes|=n,null!==(t=e.alternate)&&(t.childLanes|=n),t=e,e=e.return;return 3===t.tag?t.stateNode:null}var _l=!1;function Tl(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Il(e,n){e=e.updateQueue,n.updateQueue===e&&(n.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Ol(e,n){return{eventTime:e,lane:n,tag:0,payload:null,callback:null,next:null}}function Ll(e,n,t){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&Uu){var o=r.pending;return null===o?n.next=n:(n.next=o.next,o.next=n),r.pending=n,Pl(e,t)}return null===(o=r.interleaved)?(n.next=n,Bl(r)):(n.next=o.next,o.next=n),r.interleaved=n,Pl(e,t)}function Dl(e,n,t){if(null!==(n=n.updateQueue)&&(n=n.shared,4194240&t)){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,bn(e,t)}}function zl(e,n){var t=e.updateQueue,r=e.alternate;if(null!==r&&t===(r=r.updateQueue)){var o=null,l=null;if(null!==(t=t.firstBaseUpdate)){do{var a={eventTime:t.eventTime,lane:t.lane,tag:t.tag,payload:t.payload,callback:t.callback,next:null};null===l?o=l=a:l=l.next=a,t=t.next}while(null!==t);null===l?o=l=n:l=l.next=n}else o=l=n;return t={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:l,shared:r.shared,effects:r.effects},void(e.updateQueue=t)}null===(e=t.lastBaseUpdate)?t.firstBaseUpdate=n:e.next=n,t.lastBaseUpdate=n}function Nl(e,n,t,r){var o=e.updateQueue;_l=!1;var l=o.firstBaseUpdate,a=o.lastBaseUpdate,i=o.shared.pending;if(null!==i){o.shared.pending=null;var u=i,s=u.next;u.next=null,null===a?l=s:a.next=s,a=u;var c=e.alternate;null!==c&&(i=(c=c.updateQueue).lastBaseUpdate)!==a&&(null===i?c.firstBaseUpdate=s:i.next=s,c.lastBaseUpdate=u)}if(null!==l){var f=o.baseState;for(a=0,c=s=u=null,i=l;;){var d=i.lane,p=i.eventTime;if((r&d)===d){null!==c&&(c=c.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,m=i;switch(d=n,p=t,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=m.payload)?h.call(p,f,d):h))break e;f=z({},f,d);break e;case 2:_l=!0}}null!==i.callback&&0!==i.lane&&(e.flags|=64,null===(d=o.effects)?o.effects=[i]:d.push(i))}else p={eventTime:p,lane:d,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===c?(s=c=p,u=f):c=c.next=p,a|=d;if(null===(i=i.next)){if(null===(i=o.shared.pending))break;i=(d=i).next,d.next=null,o.lastBaseUpdate=d,o.shared.pending=null}}if(null===c&&(u=f),o.baseState=u,o.firstBaseUpdate=s,o.lastBaseUpdate=c,null!==(n=o.shared.interleaved)){o=n;do{a|=o.lane,o=o.next}while(o!==n)}else null===l&&(o.shared.lanes=0);zu|=a,e.lanes=a,e.memoizedState=f}}function Rl(e,n,t){if(e=n.effects,n.effects=null,null!==e)for(n=0;n<e.length;n++){var r=e[n],o=r.callback;if(null!==o){if(r.callback=null,r=t,"function"!=typeof o)throw Error(l(191,o));o.call(r)}}}var Ml=(new r.Component).refs;function jl(e,n,t,r){t=null==(t=t(r,n=e.memoizedState))?n:z({},n,t),e.memoizedState=t,0===e.lanes&&(e.updateQueue.baseState=t)}var $l={isMounted:function(e){return!!(e=e._reactInternals)&&$e(e)===e},enqueueSetState:function(e,n,t){e=e._reactInternals;var r=ns(),o=ts(e),l=Ol(r,o);l.payload=n,null!=t&&(l.callback=t),null!==(n=Ll(e,l,o))&&(rs(n,e,o,r),Dl(n,e,o))},enqueueReplaceState:function(e,n,t){e=e._reactInternals;var r=ns(),o=ts(e),l=Ol(r,o);l.tag=1,l.payload=n,null!=t&&(l.callback=t),null!==(n=Ll(e,l,o))&&(rs(n,e,o,r),Dl(n,e,o))},enqueueForceUpdate:function(e,n){e=e._reactInternals;var t=ns(),r=ts(e),o=Ol(t,r);o.tag=2,null!=n&&(o.callback=n),null!==(n=Ll(e,o,r))&&(rs(n,e,r,t),Dl(n,e,r))}};function Hl(e,n,t,r,o,l,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,l,a):!(n.prototype&&n.prototype.isPureReactComponent&&ur(t,r)&&ur(o,l))}function Vl(e,n,t){var r=!1,o=Bo,l=n.contextType;return"object"==typeof l&&null!==l?l=El(l):(o=Io(n)?_o:Uo.current,l=(r=null!=(r=n.contextTypes))?To(e,o):Bo),n=new n(t,l),e.memoizedState=null!==n.state&&void 0!==n.state?n.state:null,n.updater=$l,e.stateNode=n,n._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=l),n}function ql(e,n,t,r){e=n.state,"function"==typeof n.componentWillReceiveProps&&n.componentWillReceiveProps(t,r),"function"==typeof n.UNSAFE_componentWillReceiveProps&&n.UNSAFE_componentWillReceiveProps(t,r),n.state!==e&&$l.enqueueReplaceState(n,n.state,null)}function Wl(e,n,t,r){var o=e.stateNode;o.props=t,o.state=e.memoizedState,o.refs=Ml,Tl(e);var l=n.contextType;"object"==typeof l&&null!==l?o.context=El(l):(l=Io(n)?_o:Uo.current,o.context=To(e,l)),o.state=e.memoizedState,"function"==typeof(l=n.getDerivedStateFromProps)&&(jl(e,n,l,t),o.state=e.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(n=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),n!==o.state&&$l.enqueueReplaceState(o,o.state,null),Nl(e,t,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function Ql(e,n,t){if(null!==(e=t.ref)&&"function"!=typeof e&&"object"!=typeof e){if(t._owner){if(t=t._owner){if(1!==t.tag)throw Error(l(309));var r=t.stateNode}if(!r)throw Error(l(147,e));var o=r,a=""+e;return null!==n&&null!==n.ref&&"function"==typeof n.ref&&n.ref._stringRef===a?n.ref:(n=function(e){var n=o.refs;n===Ml&&(n=o.refs={}),null===e?delete n[a]:n[a]=e},n._stringRef=a,n)}if("string"!=typeof e)throw Error(l(284));if(!t._owner)throw Error(l(290,e))}return e}function Kl(e,n){throw e=Object.prototype.toString.call(n),Error(l(31,"[object Object]"===e?"object with keys {"+Object.keys(n).join(", ")+"}":e))}function Yl(e){return(0,e._init)(e._payload)}function Gl(e){function n(n,t){if(e){var r=n.deletions;null===r?(n.deletions=[t],n.flags|=16):r.push(t)}}function t(t,r){if(!e)return null;for(;null!==r;)n(t,r),r=r.sibling;return null}function r(e,n){for(e=new Map;null!==n;)null!==n.key?e.set(n.key,n):e.set(n.index,n),n=n.sibling;return e}function o(e,n){return(e=Os(e,n)).index=0,e.sibling=null,e}function a(n,t,r){return n.index=r,e?null!==(r=n.alternate)?(r=r.index)<t?(n.flags|=2,t):r:(n.flags|=2,t):(n.flags|=1048576,t)}function i(n){return e&&null===n.alternate&&(n.flags|=2),n}function u(e,n,t,r){return null===n||6!==n.tag?((n=Ns(t,e.mode,r)).return=e,n):((n=o(n,t)).return=e,n)}function s(e,n,t,r){var l=t.type;return l===x?f(e,n,t.props.children,r,t.key):null!==n&&(n.elementType===l||"object"==typeof l&&null!==l&&l.$$typeof===T&&Yl(l)===n.type)?((r=o(n,t.props)).ref=Ql(e,n,t),r.return=e,r):((r=Ls(t.type,t.key,t.props,null,e.mode,r)).ref=Ql(e,n,t),r.return=e,r)}function c(e,n,t,r){return null===n||4!==n.tag||n.stateNode.containerInfo!==t.containerInfo||n.stateNode.implementation!==t.implementation?((n=Rs(t,e.mode,r)).return=e,n):((n=o(n,t.children||[])).return=e,n)}function f(e,n,t,r,l){return null===n||7!==n.tag?((n=Ds(t,e.mode,r,l)).return=e,n):((n=o(n,t)).return=e,n)}function d(e,n,t){if("string"==typeof n&&""!==n||"number"==typeof n)return(n=Ns(""+n,e.mode,t)).return=e,n;if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return(t=Ls(n.type,n.key,n.props,null,e.mode,t)).ref=Ql(e,null,n),t.return=e,t;case A:return(n=Rs(n,e.mode,t)).return=e,n;case T:return d(e,(0,n._init)(n._payload),t)}if(ne(n)||L(n))return(n=Ds(n,e.mode,t,null)).return=e,n;Kl(e,n)}return null}function p(e,n,t,r){var o=null!==n?n.key:null;if("string"==typeof t&&""!==t||"number"==typeof t)return null!==o?null:u(e,n,""+t,r);if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return t.key===o?s(e,n,t,r):null;case A:return t.key===o?c(e,n,t,r):null;case T:return p(e,n,(o=t._init)(t._payload),r)}if(ne(t)||L(t))return null!==o?null:f(e,n,t,r,null);Kl(e,t)}return null}function h(e,n,t,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return u(n,e=e.get(t)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case k:return s(n,e=e.get(null===r.key?t:r.key)||null,r,o);case A:return c(n,e=e.get(null===r.key?t:r.key)||null,r,o);case T:return h(e,n,t,(0,r._init)(r._payload),o)}if(ne(r)||L(r))return f(n,e=e.get(t)||null,r,o,null);Kl(n,r)}return null}function m(o,l,i,u){for(var s=null,c=null,f=l,m=l=0,g=null;null!==f&&m<i.length;m++){f.index>m?(g=f,f=null):g=f.sibling;var y=p(o,f,i[m],u);if(null===y){null===f&&(f=g);break}e&&f&&null===y.alternate&&n(o,f),l=a(y,l,m),null===c?s=y:c.sibling=y,c=y,f=g}if(m===i.length)return t(o,f),ll&&Jo(o,m),s;if(null===f){for(;m<i.length;m++)null!==(f=d(o,i[m],u))&&(l=a(f,l,m),null===c?s=f:c.sibling=f,c=f);return ll&&Jo(o,m),s}for(f=r(o,f);m<i.length;m++)null!==(g=h(f,o,m,i[m],u))&&(e&&null!==g.alternate&&f.delete(null===g.key?m:g.key),l=a(g,l,m),null===c?s=g:c.sibling=g,c=g);return e&&f.forEach((function(e){return n(o,e)})),ll&&Jo(o,m),s}function g(o,i,u,s){var c=L(u);if("function"!=typeof c)throw Error(l(150));if(null==(u=c.call(u)))throw Error(l(151));for(var f=c=null,m=i,g=i=0,y=null,v=u.next();null!==m&&!v.done;g++,v=u.next()){m.index>g?(y=m,m=null):y=m.sibling;var b=p(o,m,v.value,s);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&n(o,m),i=a(b,i,g),null===f?c=b:f.sibling=b,f=b,m=y}if(v.done)return t(o,m),ll&&Jo(o,g),c;if(null===m){for(;!v.done;g++,v=u.next())null!==(v=d(o,v.value,s))&&(i=a(v,i,g),null===f?c=v:f.sibling=v,f=v);return ll&&Jo(o,g),c}for(m=r(o,m);!v.done;g++,v=u.next())null!==(v=h(m,o,g,v.value,s))&&(e&&null!==v.alternate&&m.delete(null===v.key?g:v.key),i=a(v,i,g),null===f?c=v:f.sibling=v,f=v);return e&&m.forEach((function(e){return n(o,e)})),ll&&Jo(o,g),c}return function e(r,l,a,u){if("object"==typeof a&&null!==a&&a.type===x&&null===a.key&&(a=a.props.children),"object"==typeof a&&null!==a){switch(a.$$typeof){case k:e:{for(var s=a.key,c=l;null!==c;){if(c.key===s){if((s=a.type)===x){if(7===c.tag){t(r,c.sibling),(l=o(c,a.props.children)).return=r,r=l;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===T&&Yl(s)===c.type){t(r,c.sibling),(l=o(c,a.props)).ref=Ql(r,c,a),l.return=r,r=l;break e}t(r,c);break}n(r,c),c=c.sibling}a.type===x?((l=Ds(a.props.children,r.mode,u,a.key)).return=r,r=l):((u=Ls(a.type,a.key,a.props,null,r.mode,u)).ref=Ql(r,l,a),u.return=r,r=u)}return i(r);case A:e:{for(c=a.key;null!==l;){if(l.key===c){if(4===l.tag&&l.stateNode.containerInfo===a.containerInfo&&l.stateNode.implementation===a.implementation){t(r,l.sibling),(l=o(l,a.children||[])).return=r,r=l;break e}t(r,l);break}n(r,l),l=l.sibling}(l=Rs(a,r.mode,u)).return=r,r=l}return i(r);case T:return e(r,l,(c=a._init)(a._payload),u)}if(ne(a))return m(r,l,a,u);if(L(a))return g(r,l,a,u);Kl(r,a)}return"string"==typeof a&&""!==a||"number"==typeof a?(a=""+a,null!==l&&6===l.tag?(t(r,l.sibling),(l=o(l,a)).return=r,r=l):(t(r,l),(l=Ns(a,r.mode,u)).return=r,r=l),i(r)):t(r,l)}}var Xl=Gl(!0),Zl=Gl(!1),Jl={},ea=So(Jl),na=So(Jl),ta=So(Jl);function ra(e){if(e===Jl)throw Error(l(174));return e}function oa(e,n){switch(Fo(ta,n),Fo(na,e),Fo(ea,Jl),e=n.nodeType){case 9:case 11:n=(n=n.documentElement)?n.namespaceURI:ue(null,"");break;default:n=ue(n=(e=8===e?n.parentNode:n).namespaceURI||null,e=e.tagName)}Eo(ea),Fo(ea,n)}function la(){Eo(ea),Eo(na),Eo(ta)}function aa(e){ra(ta.current);var n=ra(ea.current),t=ue(n,e.type);n!==t&&(Fo(na,e),Fo(ea,t))}function ia(e){na.current===e&&(Eo(ea),Eo(na))}var ua=So(0);function sa(e){for(var n=e;null!==n;){if(13===n.tag){var t=n.memoizedState;if(null!==t&&(null===(t=t.dehydrated)||"$?"===t.data||"$!"===t.data))return n}else if(19===n.tag&&void 0!==n.memoizedProps.revealOrder){if(128&n.flags)return n}else if(null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}return null}var ca=[];function fa(){for(var e=0;e<ca.length;e++)ca[e]._workInProgressVersionPrimary=null;ca.length=0}var da=w.ReactCurrentDispatcher,pa=w.ReactCurrentBatchConfig,ha=0,ma=null,ga=null,ya=null,va=!1,ba=!1,wa=0,ka=0;function Aa(){throw Error(l(321))}function xa(e,n){if(null===n)return!1;for(var t=0;t<n.length&&t<e.length;t++)if(!ir(e[t],n[t]))return!1;return!0}function Ca(e,n,t,r,o,a){if(ha=a,ma=n,n.memoizedState=null,n.updateQueue=null,n.lanes=0,da.current=null===e||null===e.memoizedState?ii:ui,e=t(r,o),ba){a=0;do{if(ba=!1,wa=0,25<=a)throw Error(l(301));a+=1,ya=ga=null,n.updateQueue=null,da.current=si,e=t(r,o)}while(ba)}if(da.current=ai,n=null!==ga&&null!==ga.next,ha=0,ya=ga=ma=null,va=!1,n)throw Error(l(300));return e}function Sa(){var e=0!==wa;return wa=0,e}function Ea(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ya?ma.memoizedState=ya=e:ya=ya.next=e,ya}function Fa(){if(null===ga){var e=ma.alternate;e=null!==e?e.memoizedState:null}else e=ga.next;var n=null===ya?ma.memoizedState:ya.next;if(null!==n)ya=n,ga=e;else{if(null===e)throw Error(l(310));e={memoizedState:(ga=e).memoizedState,baseState:ga.baseState,baseQueue:ga.baseQueue,queue:ga.queue,next:null},null===ya?ma.memoizedState=ya=e:ya=ya.next=e}return ya}function Ba(e,n){return"function"==typeof n?n(e):n}function Ua(e){var n=Fa(),t=n.queue;if(null===t)throw Error(l(311));t.lastRenderedReducer=e;var r=ga,o=r.baseQueue,a=t.pending;if(null!==a){if(null!==o){var i=o.next;o.next=a.next,a.next=i}r.baseQueue=o=a,t.pending=null}if(null!==o){a=o.next,r=r.baseState;var u=i=null,s=null,c=a;do{var f=c.lane;if((ha&f)===f)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var d={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(u=s=d,i=r):s=s.next=d,ma.lanes|=f,zu|=f}c=c.next}while(null!==c&&c!==a);null===s?i=r:s.next=u,ir(r,n.memoizedState)||(wi=!0),n.memoizedState=r,n.baseState=i,n.baseQueue=s,t.lastRenderedState=r}if(null!==(e=t.interleaved)){o=e;do{a=o.lane,ma.lanes|=a,zu|=a,o=o.next}while(o!==e)}else null===o&&(t.lanes=0);return[n.memoizedState,t.dispatch]}function Pa(e){var n=Fa(),t=n.queue;if(null===t)throw Error(l(311));t.lastRenderedReducer=e;var r=t.dispatch,o=t.pending,a=n.memoizedState;if(null!==o){t.pending=null;var i=o=o.next;do{a=e(a,i.action),i=i.next}while(i!==o);ir(a,n.memoizedState)||(wi=!0),n.memoizedState=a,null===n.baseQueue&&(n.baseState=a),t.lastRenderedState=a}return[a,r]}function _a(){}function Ta(e,n){var t=ma,r=Fa(),o=n(),a=!ir(r.memoizedState,o);if(a&&(r.memoizedState=o,wi=!0),r=r.queue,Va(La.bind(null,t,r,e),[e]),r.getSnapshot!==n||a||null!==ya&&1&ya.memoizedState.tag){if(t.flags|=2048,Ra(9,Oa.bind(null,t,r,o,n),void 0,null),null===Pu)throw Error(l(349));30&ha||Ia(t,n,o)}return o}function Ia(e,n,t){e.flags|=16384,e={getSnapshot:n,value:t},null===(n=ma.updateQueue)?(n={lastEffect:null,stores:null},ma.updateQueue=n,n.stores=[e]):null===(t=n.stores)?n.stores=[e]:t.push(e)}function Oa(e,n,t,r){n.value=t,n.getSnapshot=r,Da(n)&&za(e)}function La(e,n,t){return t((function(){Da(n)&&za(e)}))}function Da(e){var n=e.getSnapshot;e=e.value;try{var t=n();return!ir(e,t)}catch(e){return!0}}function za(e){var n=Pl(e,1);null!==n&&rs(n,e,1,-1)}function Na(e){var n=Ea();return"function"==typeof e&&(e=e()),n.memoizedState=n.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ba,lastRenderedState:e},n.queue=e,e=e.dispatch=ti.bind(null,ma,e),[n.memoizedState,e]}function Ra(e,n,t,r){return e={tag:e,create:n,destroy:t,deps:r,next:null},null===(n=ma.updateQueue)?(n={lastEffect:null,stores:null},ma.updateQueue=n,n.lastEffect=e.next=e):null===(t=n.lastEffect)?n.lastEffect=e.next=e:(r=t.next,t.next=e,e.next=r,n.lastEffect=e),e}function Ma(){return Fa().memoizedState}function ja(e,n,t,r){var o=Ea();ma.flags|=e,o.memoizedState=Ra(1|n,t,void 0,void 0===r?null:r)}function $a(e,n,t,r){var o=Fa();r=void 0===r?null:r;var l=void 0;if(null!==ga){var a=ga.memoizedState;if(l=a.destroy,null!==r&&xa(r,a.deps))return void(o.memoizedState=Ra(n,t,l,r))}ma.flags|=e,o.memoizedState=Ra(1|n,t,l,r)}function Ha(e,n){return ja(8390656,8,e,n)}function Va(e,n){return $a(2048,8,e,n)}function qa(e,n){return $a(4,2,e,n)}function Wa(e,n){return $a(4,4,e,n)}function Qa(e,n){return"function"==typeof n?(e=e(),n(e),function(){n(null)}):null!=n?(e=e(),n.current=e,function(){n.current=null}):void 0}function Ka(e,n,t){return t=null!=t?t.concat([e]):null,$a(4,4,Qa.bind(null,n,e),t)}function Ya(){}function Ga(e,n){var t=Fa();n=void 0===n?null:n;var r=t.memoizedState;return null!==r&&null!==n&&xa(n,r[1])?r[0]:(t.memoizedState=[e,n],e)}function Xa(e,n){var t=Fa();n=void 0===n?null:n;var r=t.memoizedState;return null!==r&&null!==n&&xa(n,r[1])?r[0]:(e=e(),t.memoizedState=[e,n],e)}function Za(e,n,t){return 21&ha?(ir(t,n)||(t=gn(),ma.lanes|=t,zu|=t,e.baseState=!0),n):(e.baseState&&(e.baseState=!1,wi=!0),e.memoizedState=t)}function Ja(e,n){var t=wn;wn=0!==t&&4>t?t:4,e(!0);var r=pa.transition;pa.transition={};try{e(!1),n()}finally{wn=t,pa.transition=r}}function ei(){return Fa().memoizedState}function ni(e,n,t){var r=ts(e);t={lane:r,action:t,hasEagerState:!1,eagerState:null,next:null},ri(e)?oi(n,t):null!==(t=Ul(e,n,t,r))&&(rs(t,e,r,ns()),li(t,n,r))}function ti(e,n,t){var r=ts(e),o={lane:r,action:t,hasEagerState:!1,eagerState:null,next:null};if(ri(e))oi(n,o);else{var l=e.alternate;if(0===e.lanes&&(null===l||0===l.lanes)&&null!==(l=n.lastRenderedReducer))try{var a=n.lastRenderedState,i=l(a,t);if(o.hasEagerState=!0,o.eagerState=i,ir(i,a)){var u=n.interleaved;return null===u?(o.next=o,Bl(n)):(o.next=u.next,u.next=o),void(n.interleaved=o)}}catch(e){}null!==(t=Ul(e,n,o,r))&&(rs(t,e,r,o=ns()),li(t,n,r))}}function ri(e){var n=e.alternate;return e===ma||null!==n&&n===ma}function oi(e,n){ba=va=!0;var t=e.pending;null===t?n.next=n:(n.next=t.next,t.next=n),e.pending=n}function li(e,n,t){if(4194240&t){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,bn(e,t)}}var ai={readContext:El,useCallback:Aa,useContext:Aa,useEffect:Aa,useImperativeHandle:Aa,useInsertionEffect:Aa,useLayoutEffect:Aa,useMemo:Aa,useReducer:Aa,useRef:Aa,useState:Aa,useDebugValue:Aa,useDeferredValue:Aa,useTransition:Aa,useMutableSource:Aa,useSyncExternalStore:Aa,useId:Aa,unstable_isNewReconciler:!1},ii={readContext:El,useCallback:function(e,n){return Ea().memoizedState=[e,void 0===n?null:n],e},useContext:El,useEffect:Ha,useImperativeHandle:function(e,n,t){return t=null!=t?t.concat([e]):null,ja(4194308,4,Qa.bind(null,n,e),t)},useLayoutEffect:function(e,n){return ja(4194308,4,e,n)},useInsertionEffect:function(e,n){return ja(4,2,e,n)},useMemo:function(e,n){var t=Ea();return n=void 0===n?null:n,e=e(),t.memoizedState=[e,n],e},useReducer:function(e,n,t){var r=Ea();return n=void 0!==t?t(n):n,r.memoizedState=r.baseState=n,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:n},r.queue=e,e=e.dispatch=ni.bind(null,ma,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Ea().memoizedState=e},useState:Na,useDebugValue:Ya,useDeferredValue:function(e){return Ea().memoizedState=e},useTransition:function(){var e=Na(!1),n=e[0];return e=Ja.bind(null,e[1]),Ea().memoizedState=e,[n,e]},useMutableSource:function(){},useSyncExternalStore:function(e,n,t){var r=ma,o=Ea();if(ll){if(void 0===t)throw Error(l(407));t=t()}else{if(t=n(),null===Pu)throw Error(l(349));30&ha||Ia(r,n,t)}o.memoizedState=t;var a={value:t,getSnapshot:n};return o.queue=a,Ha(La.bind(null,r,a,e),[e]),r.flags|=2048,Ra(9,Oa.bind(null,r,a,t,n),void 0,null),t},useId:function(){var e=Ea(),n=Pu.identifierPrefix;if(ll){var t=Zo;n=":"+n+"R"+(t=(Xo&~(1<<32-an(Xo)-1)).toString(32)+t),0<(t=wa++)&&(n+="H"+t.toString(32)),n+=":"}else n=":"+n+"r"+(t=ka++).toString(32)+":";return e.memoizedState=n},unstable_isNewReconciler:!1},ui={readContext:El,useCallback:Ga,useContext:El,useEffect:Va,useImperativeHandle:Ka,useInsertionEffect:qa,useLayoutEffect:Wa,useMemo:Xa,useReducer:Ua,useRef:Ma,useState:function(){return Ua(Ba)},useDebugValue:Ya,useDeferredValue:function(e){return Za(Fa(),ga.memoizedState,e)},useTransition:function(){return[Ua(Ba)[0],Fa().memoizedState]},useMutableSource:_a,useSyncExternalStore:Ta,useId:ei,unstable_isNewReconciler:!1},si={readContext:El,useCallback:Ga,useContext:El,useEffect:Va,useImperativeHandle:Ka,useInsertionEffect:qa,useLayoutEffect:Wa,useMemo:Xa,useReducer:Pa,useRef:Ma,useState:function(){return Pa(Ba)},useDebugValue:Ya,useDeferredValue:function(e){var n=Fa();return null===ga?n.memoizedState=e:Za(n,ga.memoizedState,e)},useTransition:function(){return[Pa(Ba)[0],Fa().memoizedState]},useMutableSource:_a,useSyncExternalStore:Ta,useId:ei,unstable_isNewReconciler:!1};function ci(e,n){try{var t="",r=n;do{t+=j(r),r=r.return}while(r);var o=t}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:n,stack:o,digest:null}}function fi(e,n,t){return{value:e,source:null,stack:null!=t?t:null,digest:null!=n?n:null}}function di(e,n){try{console.error(n.value)}catch(e){setTimeout((function(){throw e}))}}var pi="function"==typeof WeakMap?WeakMap:Map;function hi(e,n,t){(t=Ol(-1,t)).tag=3,t.payload={element:null};var r=n.value;return t.callback=function(){qu||(qu=!0,Wu=r),di(0,n)},t}function mi(e,n,t){(t=Ol(-1,t)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=n.value;t.payload=function(){return r(o)},t.callback=function(){di(0,n)}}var l=e.stateNode;return null!==l&&"function"==typeof l.componentDidCatch&&(t.callback=function(){di(0,n),"function"!=typeof r&&(null===Qu?Qu=new Set([this]):Qu.add(this));var e=n.stack;this.componentDidCatch(n.value,{componentStack:null!==e?e:""})}),t}function gi(e,n,t){var r=e.pingCache;if(null===r){r=e.pingCache=new pi;var o=new Set;r.set(n,o)}else void 0===(o=r.get(n))&&(o=new Set,r.set(n,o));o.has(t)||(o.add(t),e=Es.bind(null,e,n,t),n.then(e,e))}function yi(e){do{var n;if((n=13===e.tag)&&(n=null===(n=e.memoizedState)||null!==n.dehydrated),n)return e;e=e.return}while(null!==e);return null}function vi(e,n,t,r,o){return 1&e.mode?(e.flags|=65536,e.lanes=o,e):(e===n?e.flags|=65536:(e.flags|=128,t.flags|=131072,t.flags&=-52805,1===t.tag&&(null===t.alternate?t.tag=17:((n=Ol(-1,1)).tag=2,Ll(t,n,1))),t.lanes|=1),e)}var bi=w.ReactCurrentOwner,wi=!1;function ki(e,n,t,r){n.child=null===e?Zl(n,null,t,r):Xl(n,e.child,t,r)}function Ai(e,n,t,r,o){t=t.render;var l=n.ref;return Sl(n,o),r=Ca(e,n,t,r,l,o),t=Sa(),null===e||wi?(ll&&t&&nl(n),n.flags|=1,ki(e,n,r,o),n.child):(n.updateQueue=e.updateQueue,n.flags&=-2053,e.lanes&=~o,qi(e,n,o))}function xi(e,n,t,r,o){if(null===e){var l=t.type;return"function"!=typeof l||Is(l)||void 0!==l.defaultProps||null!==t.compare||void 0!==t.defaultProps?((e=Ls(t.type,null,r,n,n.mode,o)).ref=n.ref,e.return=n,n.child=e):(n.tag=15,n.type=l,Ci(e,n,l,r,o))}if(l=e.child,!(e.lanes&o)){var a=l.memoizedProps;if((t=null!==(t=t.compare)?t:ur)(a,r)&&e.ref===n.ref)return qi(e,n,o)}return n.flags|=1,(e=Os(l,r)).ref=n.ref,e.return=n,n.child=e}function Ci(e,n,t,r,o){if(null!==e){var l=e.memoizedProps;if(ur(l,r)&&e.ref===n.ref){if(wi=!1,n.pendingProps=r=l,!(e.lanes&o))return n.lanes=e.lanes,qi(e,n,o);131072&e.flags&&(wi=!0)}}return Fi(e,n,t,r,o)}function Si(e,n,t){var r=n.pendingProps,o=r.children,l=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(1&n.mode){if(!(1073741824&t))return e=null!==l?l.baseLanes|t:t,n.lanes=n.childLanes=1073741824,n.memoizedState={baseLanes:e,cachePool:null,transitions:null},n.updateQueue=null,Fo(Ou,Iu),Iu|=e,null;n.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==l?l.baseLanes:t,Fo(Ou,Iu),Iu|=r}else n.memoizedState={baseLanes:0,cachePool:null,transitions:null},Fo(Ou,Iu),Iu|=t;else null!==l?(r=l.baseLanes|t,n.memoizedState=null):r=t,Fo(Ou,Iu),Iu|=r;return ki(e,n,o,t),n.child}function Ei(e,n){var t=n.ref;(null===e&&null!==t||null!==e&&e.ref!==t)&&(n.flags|=512,n.flags|=2097152)}function Fi(e,n,t,r,o){var l=Io(t)?_o:Uo.current;return l=To(n,l),Sl(n,o),t=Ca(e,n,t,r,l,o),r=Sa(),null===e||wi?(ll&&r&&nl(n),n.flags|=1,ki(e,n,t,o),n.child):(n.updateQueue=e.updateQueue,n.flags&=-2053,e.lanes&=~o,qi(e,n,o))}function Bi(e,n,t,r,o){if(Io(t)){var l=!0;zo(n)}else l=!1;if(Sl(n,o),null===n.stateNode)Vi(e,n),Vl(n,t,r),Wl(n,t,r,o),r=!0;else if(null===e){var a=n.stateNode,i=n.memoizedProps;a.props=i;var u=a.context,s=t.contextType;s="object"==typeof s&&null!==s?El(s):To(n,s=Io(t)?_o:Uo.current);var c=t.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(i!==r||u!==s)&&ql(n,a,r,s),_l=!1;var d=n.memoizedState;a.state=d,Nl(n,r,a,o),u=n.memoizedState,i!==r||d!==u||Po.current||_l?("function"==typeof c&&(jl(n,t,c,r),u=n.memoizedState),(i=_l||Hl(n,t,i,r,d,u,s))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(n.flags|=4194308)):("function"==typeof a.componentDidMount&&(n.flags|=4194308),n.memoizedProps=r,n.memoizedState=u),a.props=r,a.state=u,a.context=s,r=i):("function"==typeof a.componentDidMount&&(n.flags|=4194308),r=!1)}else{a=n.stateNode,Il(e,n),i=n.memoizedProps,s=n.type===n.elementType?i:yl(n.type,i),a.props=s,f=n.pendingProps,d=a.context,u="object"==typeof(u=t.contextType)&&null!==u?El(u):To(n,u=Io(t)?_o:Uo.current);var p=t.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(i!==f||d!==u)&&ql(n,a,r,u),_l=!1,d=n.memoizedState,a.state=d,Nl(n,r,a,o);var h=n.memoizedState;i!==f||d!==h||Po.current||_l?("function"==typeof p&&(jl(n,t,p,r),h=n.memoizedState),(s=_l||Hl(n,t,s,r,d,h,u)||!1)?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,u),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof a.componentDidUpdate&&(n.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(n.flags|=1024)):("function"!=typeof a.componentDidUpdate||i===e.memoizedProps&&d===e.memoizedState||(n.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||i===e.memoizedProps&&d===e.memoizedState||(n.flags|=1024),n.memoizedProps=r,n.memoizedState=h),a.props=r,a.state=h,a.context=u,r=s):("function"!=typeof a.componentDidUpdate||i===e.memoizedProps&&d===e.memoizedState||(n.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||i===e.memoizedProps&&d===e.memoizedState||(n.flags|=1024),r=!1)}return Ui(e,n,t,r,l,o)}function Ui(e,n,t,r,o,l){Ei(e,n);var a=!!(128&n.flags);if(!r&&!a)return o&&No(n,t,!1),qi(e,n,l);r=n.stateNode,bi.current=n;var i=a&&"function"!=typeof t.getDerivedStateFromError?null:r.render();return n.flags|=1,null!==e&&a?(n.child=Xl(n,e.child,null,l),n.child=Xl(n,null,i,l)):ki(e,n,i,l),n.memoizedState=r.state,o&&No(n,t,!0),n.child}function Pi(e){var n=e.stateNode;n.pendingContext?Lo(0,n.pendingContext,n.pendingContext!==n.context):n.context&&Lo(0,n.context,!1),oa(e,n.containerInfo)}function _i(e,n,t,r,o){return hl(),ml(o),n.flags|=256,ki(e,n,t,r),n.child}var Ti,Ii,Oi,Li,Di={dehydrated:null,treeContext:null,retryLane:0};function zi(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ni(e,n,t){var r,o=n.pendingProps,a=ua.current,i=!1,u=!!(128&n.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&!!(2&a)),r?(i=!0,n.flags&=-129):null!==e&&null===e.memoizedState||(a|=1),Fo(ua,1&a),null===e)return cl(n),null!==(e=n.memoizedState)&&null!==(e=e.dehydrated)?(1&n.mode?"$!"===e.data?n.lanes=8:n.lanes=1073741824:n.lanes=1,null):(u=o.children,e=o.fallback,i?(o=n.mode,i=n.child,u={mode:"hidden",children:u},1&o||null===i?i=zs(u,o,0,null):(i.childLanes=0,i.pendingProps=u),e=Ds(e,o,t,null),i.return=n,e.return=n,i.sibling=e,n.child=i,n.child.memoizedState=zi(t),n.memoizedState=Di,e):Ri(n,u));if(null!==(a=e.memoizedState)&&null!==(r=a.dehydrated))return function(e,n,t,r,o,a,i){if(t)return 256&n.flags?(n.flags&=-257,Mi(e,n,i,r=fi(Error(l(422))))):null!==n.memoizedState?(n.child=e.child,n.flags|=128,null):(a=r.fallback,o=n.mode,r=zs({mode:"visible",children:r.children},o,0,null),(a=Ds(a,o,i,null)).flags|=2,r.return=n,a.return=n,r.sibling=a,n.child=r,1&n.mode&&Xl(n,e.child,null,i),n.child.memoizedState=zi(i),n.memoizedState=Di,a);if(!(1&n.mode))return Mi(e,n,i,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var u=r.dgst;return r=u,Mi(e,n,i,r=fi(a=Error(l(419)),r,void 0))}if(u=!!(i&e.childLanes),wi||u){if(null!==(r=Pu)){switch(i&-i){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=o&(r.suspendedLanes|i)?0:o)&&o!==a.retryLane&&(a.retryLane=o,Pl(e,o),rs(r,e,o,-1))}return gs(),Mi(e,n,i,r=fi(Error(l(421))))}return"$?"===o.data?(n.flags|=128,n.child=e.child,n=Bs.bind(null,e),o._reactRetry=n,null):(e=a.treeContext,ol=so(o.nextSibling),rl=n,ll=!0,al=null,null!==e&&(Ko[Yo++]=Xo,Ko[Yo++]=Zo,Ko[Yo++]=Go,Xo=e.id,Zo=e.overflow,Go=n),(n=Ri(n,r.children)).flags|=4096,n)}(e,n,u,o,r,a,t);if(i){i=o.fallback,u=n.mode,r=(a=e.child).sibling;var s={mode:"hidden",children:o.children};return 1&u||n.child===a?(o=Os(a,s)).subtreeFlags=14680064&a.subtreeFlags:((o=n.child).childLanes=0,o.pendingProps=s,n.deletions=null),null!==r?i=Os(r,i):(i=Ds(i,u,t,null)).flags|=2,i.return=n,o.return=n,o.sibling=i,n.child=o,o=i,i=n.child,u=null===(u=e.child.memoizedState)?zi(t):{baseLanes:u.baseLanes|t,cachePool:null,transitions:u.transitions},i.memoizedState=u,i.childLanes=e.childLanes&~t,n.memoizedState=Di,o}return e=(i=e.child).sibling,o=Os(i,{mode:"visible",children:o.children}),!(1&n.mode)&&(o.lanes=t),o.return=n,o.sibling=null,null!==e&&(null===(t=n.deletions)?(n.deletions=[e],n.flags|=16):t.push(e)),n.child=o,n.memoizedState=null,o}function Ri(e,n){return(n=zs({mode:"visible",children:n},e.mode,0,null)).return=e,e.child=n}function Mi(e,n,t,r){return null!==r&&ml(r),Xl(n,e.child,null,t),(e=Ri(n,n.pendingProps.children)).flags|=2,n.memoizedState=null,e}function ji(e,n,t){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n),Cl(e.return,n,t)}function $i(e,n,t,r,o){var l=e.memoizedState;null===l?e.memoizedState={isBackwards:n,rendering:null,renderingStartTime:0,last:r,tail:t,tailMode:o}:(l.isBackwards=n,l.rendering=null,l.renderingStartTime=0,l.last=r,l.tail=t,l.tailMode=o)}function Hi(e,n,t){var r=n.pendingProps,o=r.revealOrder,l=r.tail;if(ki(e,n,r.children,t),2&(r=ua.current))r=1&r|2,n.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=n.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&ji(e,t,n);else if(19===e.tag)ji(e,t,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Fo(ua,r),1&n.mode)switch(o){case"forwards":for(t=n.child,o=null;null!==t;)null!==(e=t.alternate)&&null===sa(e)&&(o=t),t=t.sibling;null===(t=o)?(o=n.child,n.child=null):(o=t.sibling,t.sibling=null),$i(n,!1,o,t,l);break;case"backwards":for(t=null,o=n.child,n.child=null;null!==o;){if(null!==(e=o.alternate)&&null===sa(e)){n.child=o;break}e=o.sibling,o.sibling=t,t=o,o=e}$i(n,!0,t,null,l);break;case"together":$i(n,!1,null,null,void 0);break;default:n.memoizedState=null}else n.memoizedState=null;return n.child}function Vi(e,n){!(1&n.mode)&&null!==e&&(e.alternate=null,n.alternate=null,n.flags|=2)}function qi(e,n,t){if(null!==e&&(n.dependencies=e.dependencies),zu|=n.lanes,!(t&n.childLanes))return null;if(null!==e&&n.child!==e.child)throw Error(l(153));if(null!==n.child){for(t=Os(e=n.child,e.pendingProps),n.child=t,t.return=n;null!==e.sibling;)e=e.sibling,(t=t.sibling=Os(e,e.pendingProps)).return=n;t.sibling=null}return n.child}function Wi(e,n){if(!ll)switch(e.tailMode){case"hidden":n=e.tail;for(var t=null;null!==n;)null!==n.alternate&&(t=n),n=n.sibling;null===t?e.tail=null:t.sibling=null;break;case"collapsed":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?n||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Qi(e){var n=null!==e.alternate&&e.alternate.child===e.child,t=0,r=0;if(n)for(var o=e.child;null!==o;)t|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)t|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=t,n}function Ki(e,n,t){var r=n.pendingProps;switch(tl(n),n.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Qi(n),null;case 1:case 17:return Io(n.type)&&Oo(),Qi(n),null;case 3:return r=n.stateNode,la(),Eo(Po),Eo(Uo),fa(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(dl(n)?n.flags|=4:null===e||e.memoizedState.isDehydrated&&!(256&n.flags)||(n.flags|=1024,null!==al&&(is(al),al=null))),Ii(e,n),Qi(n),null;case 5:ia(n);var o=ra(ta.current);if(t=n.type,null!==e&&null!=n.stateNode)Oi(e,n,t,r,o),e.ref!==n.ref&&(n.flags|=512,n.flags|=2097152);else{if(!r){if(null===n.stateNode)throw Error(l(166));return Qi(n),null}if(e=ra(ea.current),dl(n)){r=n.stateNode,t=n.type;var a=n.memoizedProps;switch(r[po]=n,r[ho]=a,e=!!(1&n.mode),t){case"dialog":Rr("cancel",r),Rr("close",r);break;case"iframe":case"object":case"embed":Rr("load",r);break;case"video":case"audio":for(o=0;o<Lr.length;o++)Rr(Lr[o],r);break;case"source":Rr("error",r);break;case"img":case"image":case"link":Rr("error",r),Rr("load",r);break;case"details":Rr("toggle",r);break;case"input":G(r,a),Rr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!a.multiple},Rr("invalid",r);break;case"textarea":oe(r,a),Rr("invalid",r)}for(var u in ve(t,a),o=null,a)if(a.hasOwnProperty(u)){var s=a[u];"children"===u?"string"==typeof s?r.textContent!==s&&(!0!==a.suppressHydrationWarning&&Zr(r.textContent,s,e),o=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(!0!==a.suppressHydrationWarning&&Zr(r.textContent,s,e),o=["children",""+s]):i.hasOwnProperty(u)&&null!=s&&"onScroll"===u&&Rr("scroll",r)}switch(t){case"input":W(r),J(r,a,!0);break;case"textarea":W(r),ae(r);break;case"select":case"option":break;default:"function"==typeof a.onClick&&(r.onclick=Jr)}r=o,n.updateQueue=r,null!==r&&(n.flags|=4)}else{u=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=ie(t)),"http://www.w3.org/1999/xhtml"===e?"script"===t?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(t,{is:r.is}):(e=u.createElement(t),"select"===t&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,t),e[po]=n,e[ho]=r,Ti(e,n,!1,!1),n.stateNode=e;e:{switch(u=be(t,r),t){case"dialog":Rr("cancel",e),Rr("close",e),o=r;break;case"iframe":case"object":case"embed":Rr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Lr.length;o++)Rr(Lr[o],e);o=r;break;case"source":Rr("error",e),o=r;break;case"img":case"image":case"link":Rr("error",e),Rr("load",e),o=r;break;case"details":Rr("toggle",e),o=r;break;case"input":G(e,r),o=Y(e,r),Rr("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=z({},r,{value:void 0}),Rr("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),Rr("invalid",e)}for(a in ve(t,o),s=o)if(s.hasOwnProperty(a)){var c=s[a];"style"===a?ge(e,c):"dangerouslySetInnerHTML"===a?null!=(c=c?c.__html:void 0)&&fe(e,c):"children"===a?"string"==typeof c?("textarea"!==t||""!==c)&&de(e,c):"number"==typeof c&&de(e,""+c):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(i.hasOwnProperty(a)?null!=c&&"onScroll"===a&&Rr("scroll",e):null!=c&&b(e,a,c,u))}switch(t){case"input":W(e),J(e,r,!1);break;case"textarea":W(e),ae(e);break;case"option":null!=r.value&&e.setAttribute("value",""+V(r.value));break;case"select":e.multiple=!!r.multiple,null!=(a=r.value)?te(e,!!r.multiple,a,!1):null!=r.defaultValue&&te(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Jr)}switch(t){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(n.flags|=4)}null!==n.ref&&(n.flags|=512,n.flags|=2097152)}return Qi(n),null;case 6:if(e&&null!=n.stateNode)Li(e,n,e.memoizedProps,r);else{if("string"!=typeof r&&null===n.stateNode)throw Error(l(166));if(t=ra(ta.current),ra(ea.current),dl(n)){if(r=n.stateNode,t=n.memoizedProps,r[po]=n,(a=r.nodeValue!==t)&&null!==(e=rl))switch(e.tag){case 3:Zr(r.nodeValue,t,!!(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Zr(r.nodeValue,t,!!(1&e.mode))}a&&(n.flags|=4)}else(r=(9===t.nodeType?t:t.ownerDocument).createTextNode(r))[po]=n,n.stateNode=r}return Qi(n),null;case 13:if(Eo(ua),r=n.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ll&&null!==ol&&1&n.mode&&!(128&n.flags))pl(),hl(),n.flags|=98560,a=!1;else if(a=dl(n),null!==r&&null!==r.dehydrated){if(null===e){if(!a)throw Error(l(318));if(!(a=null!==(a=n.memoizedState)?a.dehydrated:null))throw Error(l(317));a[po]=n}else hl(),!(128&n.flags)&&(n.memoizedState=null),n.flags|=4;Qi(n),a=!1}else null!==al&&(is(al),al=null),a=!0;if(!a)return 65536&n.flags?n:null}return 128&n.flags?(n.lanes=t,n):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(n.child.flags|=8192,1&n.mode&&(null===e||1&ua.current?0===Lu&&(Lu=3):gs())),null!==n.updateQueue&&(n.flags|=4),Qi(n),null);case 4:return la(),Ii(e,n),null===e&&$r(n.stateNode.containerInfo),Qi(n),null;case 10:return xl(n.type._context),Qi(n),null;case 19:if(Eo(ua),null===(a=n.memoizedState))return Qi(n),null;if(r=!!(128&n.flags),null===(u=a.rendering))if(r)Wi(a,!1);else{if(0!==Lu||null!==e&&128&e.flags)for(e=n.child;null!==e;){if(null!==(u=sa(e))){for(n.flags|=128,Wi(a,!1),null!==(r=u.updateQueue)&&(n.updateQueue=r,n.flags|=4),n.subtreeFlags=0,r=t,t=n.child;null!==t;)e=r,(a=t).flags&=14680066,null===(u=a.alternate)?(a.childLanes=0,a.lanes=e,a.child=null,a.subtreeFlags=0,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null,a.stateNode=null):(a.childLanes=u.childLanes,a.lanes=u.lanes,a.child=u.child,a.subtreeFlags=0,a.deletions=null,a.memoizedProps=u.memoizedProps,a.memoizedState=u.memoizedState,a.updateQueue=u.updateQueue,a.type=u.type,e=u.dependencies,a.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),t=t.sibling;return Fo(ua,1&ua.current|2),n.child}e=e.sibling}null!==a.tail&&Xe()>Hu&&(n.flags|=128,r=!0,Wi(a,!1),n.lanes=4194304)}else{if(!r)if(null!==(e=sa(u))){if(n.flags|=128,r=!0,null!==(t=e.updateQueue)&&(n.updateQueue=t,n.flags|=4),Wi(a,!0),null===a.tail&&"hidden"===a.tailMode&&!u.alternate&&!ll)return Qi(n),null}else 2*Xe()-a.renderingStartTime>Hu&&1073741824!==t&&(n.flags|=128,r=!0,Wi(a,!1),n.lanes=4194304);a.isBackwards?(u.sibling=n.child,n.child=u):(null!==(t=a.last)?t.sibling=u:n.child=u,a.last=u)}return null!==a.tail?(n=a.tail,a.rendering=n,a.tail=n.sibling,a.renderingStartTime=Xe(),n.sibling=null,t=ua.current,Fo(ua,r?1&t|2:1&t),n):(Qi(n),null);case 22:case 23:return ds(),r=null!==n.memoizedState,null!==e&&null!==e.memoizedState!==r&&(n.flags|=8192),r&&1&n.mode?!!(1073741824&Iu)&&(Qi(n),6&n.subtreeFlags&&(n.flags|=8192)):Qi(n),null;case 24:case 25:return null}throw Error(l(156,n.tag))}function Yi(e,n){switch(tl(n),n.tag){case 1:return Io(n.type)&&Oo(),65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 3:return la(),Eo(Po),Eo(Uo),fa(),65536&(e=n.flags)&&!(128&e)?(n.flags=-65537&e|128,n):null;case 5:return ia(n),null;case 13:if(Eo(ua),null!==(e=n.memoizedState)&&null!==e.dehydrated){if(null===n.alternate)throw Error(l(340));hl()}return 65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 19:return Eo(ua),null;case 4:return la(),null;case 10:return xl(n.type._context),null;case 22:case 23:return ds(),null;default:return null}}Ti=function(e,n){for(var t=n.child;null!==t;){if(5===t.tag||6===t.tag)e.appendChild(t.stateNode);else if(4!==t.tag&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===n)break;for(;null===t.sibling;){if(null===t.return||t.return===n)return;t=t.return}t.sibling.return=t.return,t=t.sibling}},Ii=function(){},Oi=function(e,n,t,r){var o=e.memoizedProps;if(o!==r){e=n.stateNode,ra(ea.current);var l,a=null;switch(t){case"input":o=Y(e,o),r=Y(e,r),a=[];break;case"select":o=z({},o,{value:void 0}),r=z({},r,{value:void 0}),a=[];break;case"textarea":o=re(e,o),r=re(e,r),a=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(c in ve(t,r),t=null,o)if(!r.hasOwnProperty(c)&&o.hasOwnProperty(c)&&null!=o[c])if("style"===c){var u=o[c];for(l in u)u.hasOwnProperty(l)&&(t||(t={}),t[l]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(i.hasOwnProperty(c)?a||(a=[]):(a=a||[]).push(c,null));for(c in r){var s=r[c];if(u=null!=o?o[c]:void 0,r.hasOwnProperty(c)&&s!==u&&(null!=s||null!=u))if("style"===c)if(u){for(l in u)!u.hasOwnProperty(l)||s&&s.hasOwnProperty(l)||(t||(t={}),t[l]="");for(l in s)s.hasOwnProperty(l)&&u[l]!==s[l]&&(t||(t={}),t[l]=s[l])}else t||(a||(a=[]),a.push(c,t)),t=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,u=u?u.__html:void 0,null!=s&&u!==s&&(a=a||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(a=a||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(i.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&Rr("scroll",e),a||u===s||(a=[])):(a=a||[]).push(c,s))}t&&(a=a||[]).push("style",t);var c=a;(n.updateQueue=c)&&(n.flags|=4)}},Li=function(e,n,t,r){t!==r&&(n.flags|=4)};var Gi=!1,Xi=!1,Zi="function"==typeof WeakSet?WeakSet:Set,Ji=null;function eu(e,n){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Ss(e,n,t)}else t.current=null}function nu(e,n,t){try{t()}catch(t){Ss(e,n,t)}}var tu=!1;function ru(e,n,t){var r=n.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var l=o.destroy;o.destroy=void 0,void 0!==l&&nu(n,t,l)}o=o.next}while(o!==r)}}function ou(e,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var t=n=n.next;do{if((t.tag&e)===e){var r=t.create;t.destroy=r()}t=t.next}while(t!==n)}}function lu(e){var n=e.ref;if(null!==n){var t=e.stateNode;e.tag,e=t,"function"==typeof n?n(e):n.current=e}}function au(e){var n=e.alternate;null!==n&&(e.alternate=null,au(n)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(n=e.stateNode)&&(delete n[po],delete n[ho],delete n[go],delete n[yo],delete n[vo]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function iu(e){return 5===e.tag||3===e.tag||4===e.tag}function uu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||iu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function su(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?8===t.nodeType?t.parentNode.insertBefore(e,n):t.insertBefore(e,n):(8===t.nodeType?(n=t.parentNode).insertBefore(e,t):(n=t).appendChild(e),null!=(t=t._reactRootContainer)||null!==n.onclick||(n.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(su(e,n,t),e=e.sibling;null!==e;)su(e,n,t),e=e.sibling}function cu(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?t.insertBefore(e,n):t.appendChild(e);else if(4!==r&&null!==(e=e.child))for(cu(e,n,t),e=e.sibling;null!==e;)cu(e,n,t),e=e.sibling}var fu=null,du=!1;function pu(e,n,t){for(t=t.child;null!==t;)hu(e,n,t),t=t.sibling}function hu(e,n,t){if(ln&&"function"==typeof ln.onCommitFiberUnmount)try{ln.onCommitFiberUnmount(on,t)}catch(e){}switch(t.tag){case 5:Xi||eu(t,n);case 6:var r=fu,o=du;fu=null,pu(e,n,t),du=o,null!==(fu=r)&&(du?(e=fu,t=t.stateNode,8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)):fu.removeChild(t.stateNode));break;case 18:null!==fu&&(du?(e=fu,t=t.stateNode,8===e.nodeType?uo(e.parentNode,t):1===e.nodeType&&uo(e,t),Hn(e)):uo(fu,t.stateNode));break;case 4:r=fu,o=du,fu=t.stateNode.containerInfo,du=!0,pu(e,n,t),fu=r,du=o;break;case 0:case 11:case 14:case 15:if(!Xi&&null!==(r=t.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var l=o,a=l.destroy;l=l.tag,void 0!==a&&(2&l||4&l)&&nu(t,n,a),o=o.next}while(o!==r)}pu(e,n,t);break;case 1:if(!Xi&&(eu(t,n),"function"==typeof(r=t.stateNode).componentWillUnmount))try{r.props=t.memoizedProps,r.state=t.memoizedState,r.componentWillUnmount()}catch(e){Ss(t,n,e)}pu(e,n,t);break;case 21:pu(e,n,t);break;case 22:1&t.mode?(Xi=(r=Xi)||null!==t.memoizedState,pu(e,n,t),Xi=r):pu(e,n,t);break;default:pu(e,n,t)}}function mu(e){var n=e.updateQueue;if(null!==n){e.updateQueue=null;var t=e.stateNode;null===t&&(t=e.stateNode=new Zi),n.forEach((function(n){var r=Us.bind(null,e,n);t.has(n)||(t.add(n),n.then(r,r))}))}}function gu(e,n){var t=n.deletions;if(null!==t)for(var r=0;r<t.length;r++){var o=t[r];try{var a=e,i=n,u=i;e:for(;null!==u;){switch(u.tag){case 5:fu=u.stateNode,du=!1;break e;case 3:case 4:fu=u.stateNode.containerInfo,du=!0;break e}u=u.return}if(null===fu)throw Error(l(160));hu(a,i,o),fu=null,du=!1;var s=o.alternate;null!==s&&(s.return=null),o.return=null}catch(e){Ss(o,n,e)}}if(12854&n.subtreeFlags)for(n=n.child;null!==n;)yu(n,e),n=n.sibling}function yu(e,n){var t=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(gu(n,e),vu(e),4&r){try{ru(3,e,e.return),ou(3,e)}catch(n){Ss(e,e.return,n)}try{ru(5,e,e.return)}catch(n){Ss(e,e.return,n)}}break;case 1:gu(n,e),vu(e),512&r&&null!==t&&eu(t,t.return);break;case 5:if(gu(n,e),vu(e),512&r&&null!==t&&eu(t,t.return),32&e.flags){var o=e.stateNode;try{de(o,"")}catch(n){Ss(e,e.return,n)}}if(4&r&&null!=(o=e.stateNode)){var a=e.memoizedProps,i=null!==t?t.memoizedProps:a,u=e.type,s=e.updateQueue;if(e.updateQueue=null,null!==s)try{"input"===u&&"radio"===a.type&&null!=a.name&&X(o,a),be(u,i);var c=be(u,a);for(i=0;i<s.length;i+=2){var f=s[i],d=s[i+1];"style"===f?ge(o,d):"dangerouslySetInnerHTML"===f?fe(o,d):"children"===f?de(o,d):b(o,f,d,c)}switch(u){case"input":Z(o,a);break;case"textarea":le(o,a);break;case"select":var p=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!a.multiple;var h=a.value;null!=h?te(o,!!a.multiple,h,!1):p!==!!a.multiple&&(null!=a.defaultValue?te(o,!!a.multiple,a.defaultValue,!0):te(o,!!a.multiple,a.multiple?[]:"",!1))}o[ho]=a}catch(n){Ss(e,e.return,n)}}break;case 6:if(gu(n,e),vu(e),4&r){if(null===e.stateNode)throw Error(l(162));o=e.stateNode,a=e.memoizedProps;try{o.nodeValue=a}catch(n){Ss(e,e.return,n)}}break;case 3:if(gu(n,e),vu(e),4&r&&null!==t&&t.memoizedState.isDehydrated)try{Hn(n.containerInfo)}catch(n){Ss(e,e.return,n)}break;case 4:default:gu(n,e),vu(e);break;case 13:gu(n,e),vu(e),8192&(o=e.child).flags&&(a=null!==o.memoizedState,o.stateNode.isHidden=a,!a||null!==o.alternate&&null!==o.alternate.memoizedState||($u=Xe())),4&r&&mu(e);break;case 22:if(f=null!==t&&null!==t.memoizedState,1&e.mode?(Xi=(c=Xi)||f,gu(n,e),Xi=c):gu(n,e),vu(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!f&&1&e.mode)for(Ji=e,f=e.child;null!==f;){for(d=Ji=f;null!==Ji;){switch(h=(p=Ji).child,p.tag){case 0:case 11:case 14:case 15:ru(4,p,p.return);break;case 1:eu(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,t=p.return;try{n=r,m.props=n.memoizedProps,m.state=n.memoizedState,m.componentWillUnmount()}catch(e){Ss(r,t,e)}}break;case 5:eu(p,p.return);break;case 22:if(null!==p.memoizedState){Au(d);continue}}null!==h?(h.return=p,Ji=h):Au(d)}f=f.sibling}e:for(f=null,d=e;;){if(5===d.tag){if(null===f){f=d;try{o=d.stateNode,c?"function"==typeof(a=o.style).setProperty?a.setProperty("display","none","important"):a.display="none":(u=d.stateNode,i=null!=(s=d.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null,u.style.display=me("display",i))}catch(n){Ss(e,e.return,n)}}}else if(6===d.tag){if(null===f)try{d.stateNode.nodeValue=c?"":d.memoizedProps}catch(n){Ss(e,e.return,n)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;f===d&&(f=null),d=d.return}f===d&&(f=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:gu(n,e),vu(e),4&r&&mu(e);case 21:}}function vu(e){var n=e.flags;if(2&n){try{e:{for(var t=e.return;null!==t;){if(iu(t)){var r=t;break e}t=t.return}throw Error(l(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(de(o,""),r.flags&=-33),cu(e,uu(e),o);break;case 3:case 4:var a=r.stateNode.containerInfo;su(e,uu(e),a);break;default:throw Error(l(161))}}catch(n){Ss(e,e.return,n)}e.flags&=-3}4096&n&&(e.flags&=-4097)}function bu(e,n,t){Ji=e,wu(e,n,t)}function wu(e,n,t){for(var r=!!(1&e.mode);null!==Ji;){var o=Ji,l=o.child;if(22===o.tag&&r){var a=null!==o.memoizedState||Gi;if(!a){var i=o.alternate,u=null!==i&&null!==i.memoizedState||Xi;i=Gi;var s=Xi;if(Gi=a,(Xi=u)&&!s)for(Ji=o;null!==Ji;)u=(a=Ji).child,22===a.tag&&null!==a.memoizedState?xu(o):null!==u?(u.return=a,Ji=u):xu(o);for(;null!==l;)Ji=l,wu(l,n,t),l=l.sibling;Ji=o,Gi=i,Xi=s}ku(e)}else 8772&o.subtreeFlags&&null!==l?(l.return=o,Ji=l):ku(e)}}function ku(e){for(;null!==Ji;){var n=Ji;if(8772&n.flags){var t=n.alternate;try{if(8772&n.flags)switch(n.tag){case 0:case 11:case 15:Xi||ou(5,n);break;case 1:var r=n.stateNode;if(4&n.flags&&!Xi)if(null===t)r.componentDidMount();else{var o=n.elementType===n.type?t.memoizedProps:yl(n.type,t.memoizedProps);r.componentDidUpdate(o,t.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var a=n.updateQueue;null!==a&&Rl(n,a,r);break;case 3:var i=n.updateQueue;if(null!==i){if(t=null,null!==n.child)switch(n.child.tag){case 5:case 1:t=n.child.stateNode}Rl(n,i,t)}break;case 5:var u=n.stateNode;if(null===t&&4&n.flags){t=u;var s=n.memoizedProps;switch(n.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&t.focus();break;case"img":s.src&&(t.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===n.memoizedState){var c=n.alternate;if(null!==c){var f=c.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&Hn(d)}}}break;default:throw Error(l(163))}Xi||512&n.flags&&lu(n)}catch(e){Ss(n,n.return,e)}}if(n===e){Ji=null;break}if(null!==(t=n.sibling)){t.return=n.return,Ji=t;break}Ji=n.return}}function Au(e){for(;null!==Ji;){var n=Ji;if(n===e){Ji=null;break}var t=n.sibling;if(null!==t){t.return=n.return,Ji=t;break}Ji=n.return}}function xu(e){for(;null!==Ji;){var n=Ji;try{switch(n.tag){case 0:case 11:case 15:var t=n.return;try{ou(4,n)}catch(e){Ss(n,t,e)}break;case 1:var r=n.stateNode;if("function"==typeof r.componentDidMount){var o=n.return;try{r.componentDidMount()}catch(e){Ss(n,o,e)}}var l=n.return;try{lu(n)}catch(e){Ss(n,l,e)}break;case 5:var a=n.return;try{lu(n)}catch(e){Ss(n,a,e)}}}catch(e){Ss(n,n.return,e)}if(n===e){Ji=null;break}var i=n.sibling;if(null!==i){i.return=n.return,Ji=i;break}Ji=n.return}}var Cu,Su=Math.ceil,Eu=w.ReactCurrentDispatcher,Fu=w.ReactCurrentOwner,Bu=w.ReactCurrentBatchConfig,Uu=0,Pu=null,_u=null,Tu=0,Iu=0,Ou=So(0),Lu=0,Du=null,zu=0,Nu=0,Ru=0,Mu=null,ju=null,$u=0,Hu=1/0,Vu=null,qu=!1,Wu=null,Qu=null,Ku=!1,Yu=null,Gu=0,Xu=0,Zu=null,Ju=-1,es=0;function ns(){return 6&Uu?Xe():-1!==Ju?Ju:Ju=Xe()}function ts(e){return 1&e.mode?2&Uu&&0!==Tu?Tu&-Tu:null!==gl.transition?(0===es&&(es=gn()),es):0!==(e=wn)?e:e=void 0===(e=window.event)?16:Xn(e.type):1}function rs(e,n,t,r){if(50<Xu)throw Xu=0,Zu=null,Error(l(185));vn(e,t,r),2&Uu&&e===Pu||(e===Pu&&(!(2&Uu)&&(Nu|=t),4===Lu&&us(e,Tu)),os(e,r),1===t&&0===Uu&&!(1&n.mode)&&(Hu=Xe()+500,Mo&&Ho()))}function os(e,n){var t=e.callbackNode;!function(e,n){for(var t=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,l=e.pendingLanes;0<l;){var a=31-an(l),i=1<<a,u=o[a];-1===u?i&t&&!(i&r)||(o[a]=hn(i,n)):u<=n&&(e.expiredLanes|=i),l&=~i}}(e,n);var r=pn(e,e===Pu?Tu:0);if(0===r)null!==t&&Ke(t),e.callbackNode=null,e.callbackPriority=0;else if(n=r&-r,e.callbackPriority!==n){if(null!=t&&Ke(t),1===n)0===e.tag?function(e){Mo=!0,$o(e)}(ss.bind(null,e)):$o(ss.bind(null,e)),ao((function(){!(6&Uu)&&Ho()})),t=null;else{switch(kn(r)){case 1:t=Je;break;case 4:t=en;break;case 16:default:t=nn;break;case 536870912:t=rn}t=Ps(t,ls.bind(null,e))}e.callbackPriority=n,e.callbackNode=t}}function ls(e,n){if(Ju=-1,es=0,6&Uu)throw Error(l(327));var t=e.callbackNode;if(xs()&&e.callbackNode!==t)return null;var r=pn(e,e===Pu?Tu:0);if(0===r)return null;if(30&r||r&e.expiredLanes||n)n=ys(e,r);else{n=r;var o=Uu;Uu|=2;var a=ms();for(Pu===e&&Tu===n||(Vu=null,Hu=Xe()+500,ps(e,n));;)try{bs();break}catch(n){hs(e,n)}Al(),Eu.current=a,Uu=o,null!==_u?n=0:(Pu=null,Tu=0,n=Lu)}if(0!==n){if(2===n&&0!==(o=mn(e))&&(r=o,n=as(e,o)),1===n)throw t=Du,ps(e,0),us(e,r),os(e,Xe()),t;if(6===n)us(e,r);else{if(o=e.current.alternate,!(30&r||function(e){for(var n=e;;){if(16384&n.flags){var t=n.updateQueue;if(null!==t&&null!==(t=t.stores))for(var r=0;r<t.length;r++){var o=t[r],l=o.getSnapshot;o=o.value;try{if(!ir(l(),o))return!1}catch(e){return!1}}}if(t=n.child,16384&n.subtreeFlags&&null!==t)t.return=n,n=t;else{if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return!0;n=n.return}n.sibling.return=n.return,n=n.sibling}}return!0}(o)||(n=ys(e,r),2===n&&(a=mn(e),0!==a&&(r=a,n=as(e,a))),1!==n)))throw t=Du,ps(e,0),us(e,r),os(e,Xe()),t;switch(e.finishedWork=o,e.finishedLanes=r,n){case 0:case 1:throw Error(l(345));case 2:case 5:As(e,ju,Vu);break;case 3:if(us(e,r),(130023424&r)===r&&10<(n=$u+500-Xe())){if(0!==pn(e,0))break;if(((o=e.suspendedLanes)&r)!==r){ns(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(As.bind(null,e,ju,Vu),n);break}As(e,ju,Vu);break;case 4:if(us(e,r),(4194240&r)===r)break;for(n=e.eventTimes,o=-1;0<r;){var i=31-an(r);a=1<<i,(i=n[i])>o&&(o=i),r&=~a}if(r=o,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Su(r/1960))-r)){e.timeoutHandle=ro(As.bind(null,e,ju,Vu),r);break}As(e,ju,Vu);break;default:throw Error(l(329))}}}return os(e,Xe()),e.callbackNode===t?ls.bind(null,e):null}function as(e,n){var t=Mu;return e.current.memoizedState.isDehydrated&&(ps(e,n).flags|=256),2!==(e=ys(e,n))&&(n=ju,ju=t,null!==n&&is(n)),e}function is(e){null===ju?ju=e:ju.push.apply(ju,e)}function us(e,n){for(n&=~Ru,n&=~Nu,e.suspendedLanes|=n,e.pingedLanes&=~n,e=e.expirationTimes;0<n;){var t=31-an(n),r=1<<t;e[t]=-1,n&=~r}}function ss(e){if(6&Uu)throw Error(l(327));xs();var n=pn(e,0);if(!(1&n))return os(e,Xe()),null;var t=ys(e,n);if(0!==e.tag&&2===t){var r=mn(e);0!==r&&(n=r,t=as(e,r))}if(1===t)throw t=Du,ps(e,0),us(e,n),os(e,Xe()),t;if(6===t)throw Error(l(345));return e.finishedWork=e.current.alternate,e.finishedLanes=n,As(e,ju,Vu),os(e,Xe()),null}function cs(e,n){var t=Uu;Uu|=1;try{return e(n)}finally{0===(Uu=t)&&(Hu=Xe()+500,Mo&&Ho())}}function fs(e){null!==Yu&&0===Yu.tag&&!(6&Uu)&&xs();var n=Uu;Uu|=1;var t=Bu.transition,r=wn;try{if(Bu.transition=null,wn=1,e)return e()}finally{wn=r,Bu.transition=t,!(6&(Uu=n))&&Ho()}}function ds(){Iu=Ou.current,Eo(Ou)}function ps(e,n){e.finishedWork=null,e.finishedLanes=0;var t=e.timeoutHandle;if(-1!==t&&(e.timeoutHandle=-1,oo(t)),null!==_u)for(t=_u.return;null!==t;){var r=t;switch(tl(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Oo();break;case 3:la(),Eo(Po),Eo(Uo),fa();break;case 5:ia(r);break;case 4:la();break;case 13:case 19:Eo(ua);break;case 10:xl(r.type._context);break;case 22:case 23:ds()}t=t.return}if(Pu=e,_u=e=Os(e.current,null),Tu=Iu=n,Lu=0,Du=null,Ru=Nu=zu=0,ju=Mu=null,null!==Fl){for(n=0;n<Fl.length;n++)if(null!==(r=(t=Fl[n]).interleaved)){t.interleaved=null;var o=r.next,l=t.pending;if(null!==l){var a=l.next;l.next=o,r.next=a}t.pending=r}Fl=null}return e}function hs(e,n){for(;;){var t=_u;try{if(Al(),da.current=ai,va){for(var r=ma.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}va=!1}if(ha=0,ya=ga=ma=null,ba=!1,wa=0,Fu.current=null,null===t||null===t.return){Lu=1,Du=n,_u=null;break}e:{var a=e,i=t.return,u=t,s=n;if(n=Tu,u.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,f=u,d=f.tag;if(!(1&f.mode||0!==d&&11!==d&&15!==d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=yi(i);if(null!==h){h.flags&=-257,vi(h,i,u,0,n),1&h.mode&&gi(a,c,n),s=c;var m=(n=h).updateQueue;if(null===m){var g=new Set;g.add(s),n.updateQueue=g}else m.add(s);break e}if(!(1&n)){gi(a,c,n),gs();break e}s=Error(l(426))}else if(ll&&1&u.mode){var y=yi(i);if(null!==y){!(65536&y.flags)&&(y.flags|=256),vi(y,i,u,0,n),ml(ci(s,u));break e}}a=s=ci(s,u),4!==Lu&&(Lu=2),null===Mu?Mu=[a]:Mu.push(a),a=i;do{switch(a.tag){case 3:a.flags|=65536,n&=-n,a.lanes|=n,zl(a,hi(0,s,n));break e;case 1:u=s;var v=a.type,b=a.stateNode;if(!(128&a.flags||"function"!=typeof v.getDerivedStateFromError&&(null===b||"function"!=typeof b.componentDidCatch||null!==Qu&&Qu.has(b)))){a.flags|=65536,n&=-n,a.lanes|=n,zl(a,mi(a,u,n));break e}}a=a.return}while(null!==a)}ks(t)}catch(e){n=e,_u===t&&null!==t&&(_u=t=t.return);continue}break}}function ms(){var e=Eu.current;return Eu.current=ai,null===e?ai:e}function gs(){0!==Lu&&3!==Lu&&2!==Lu||(Lu=4),null===Pu||!(268435455&zu)&&!(268435455&Nu)||us(Pu,Tu)}function ys(e,n){var t=Uu;Uu|=2;var r=ms();for(Pu===e&&Tu===n||(Vu=null,ps(e,n));;)try{vs();break}catch(n){hs(e,n)}if(Al(),Uu=t,Eu.current=r,null!==_u)throw Error(l(261));return Pu=null,Tu=0,Lu}function vs(){for(;null!==_u;)ws(_u)}function bs(){for(;null!==_u&&!Ye();)ws(_u)}function ws(e){var n=Cu(e.alternate,e,Iu);e.memoizedProps=e.pendingProps,null===n?ks(e):_u=n,Fu.current=null}function ks(e){var n=e;do{var t=n.alternate;if(e=n.return,32768&n.flags){if(null!==(t=Yi(t,n)))return t.flags&=32767,void(_u=t);if(null===e)return Lu=6,void(_u=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}else if(null!==(t=Ki(t,n,Iu)))return void(_u=t);if(null!==(n=n.sibling))return void(_u=n);_u=n=e}while(null!==n);0===Lu&&(Lu=5)}function As(e,n,t){var r=wn,o=Bu.transition;try{Bu.transition=null,wn=1,function(e,n,t,r){do{xs()}while(null!==Yu);if(6&Uu)throw Error(l(327));t=e.finishedWork;var o=e.finishedLanes;if(null===t)return null;if(e.finishedWork=null,e.finishedLanes=0,t===e.current)throw Error(l(177));e.callbackNode=null,e.callbackPriority=0;var a=t.lanes|t.childLanes;if(function(e,n){var t=e.pendingLanes&~n;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=n,e.mutableReadLanes&=n,e.entangledLanes&=n,n=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<t;){var o=31-an(t),l=1<<o;n[o]=0,r[o]=-1,e[o]=-1,t&=~l}}(e,a),e===Pu&&(_u=Pu=null,Tu=0),!(2064&t.subtreeFlags)&&!(2064&t.flags)||Ku||(Ku=!0,Ps(nn,(function(){return xs(),null}))),a=!!(15990&t.flags),15990&t.subtreeFlags||a){a=Bu.transition,Bu.transition=null;var i=wn;wn=1;var u=Uu;Uu|=4,Fu.current=null,function(e,n){if(eo=qn,pr(e=dr())){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(t=(t=e.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(r&&0!==r.rangeCount){t=r.anchorNode;var o=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{t.nodeType,a.nodeType}catch(e){t=null;break e}var i=0,u=-1,s=-1,c=0,f=0,d=e,p=null;n:for(;;){for(var h;d!==t||0!==o&&3!==d.nodeType||(u=i+o),d!==a||0!==r&&3!==d.nodeType||(s=i+r),3===d.nodeType&&(i+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break n;if(p===t&&++c===o&&(u=i),p===a&&++f===r&&(s=i),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}t=-1===u||-1===s?null:{start:u,end:s}}else t=null}t=t||{start:0,end:0}}else t=null;for(no={focusedElem:e,selectionRange:t},qn=!1,Ji=n;null!==Ji;)if(e=(n=Ji).child,1028&n.subtreeFlags&&null!==e)e.return=n,Ji=e;else for(;null!==Ji;){n=Ji;try{var m=n.alternate;if(1024&n.flags)switch(n.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var g=m.memoizedProps,y=m.memoizedState,v=n.stateNode,b=v.getSnapshotBeforeUpdate(n.elementType===n.type?g:yl(n.type,g),y);v.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=n.stateNode.containerInfo;1===w.nodeType?w.textContent="":9===w.nodeType&&w.documentElement&&w.removeChild(w.documentElement);break;default:throw Error(l(163))}}catch(e){Ss(n,n.return,e)}if(null!==(e=n.sibling)){e.return=n.return,Ji=e;break}Ji=n.return}m=tu,tu=!1}(e,t),yu(t,e),hr(no),qn=!!eo,no=eo=null,e.current=t,bu(t,e,o),Ge(),Uu=u,wn=i,Bu.transition=a}else e.current=t;if(Ku&&(Ku=!1,Yu=e,Gu=o),0===(a=e.pendingLanes)&&(Qu=null),function(e){if(ln&&"function"==typeof ln.onCommitFiberRoot)try{ln.onCommitFiberRoot(on,e,void 0,!(128&~e.current.flags))}catch(e){}}(t.stateNode),os(e,Xe()),null!==n)for(r=e.onRecoverableError,t=0;t<n.length;t++)r((o=n[t]).value,{componentStack:o.stack,digest:o.digest});if(qu)throw qu=!1,e=Wu,Wu=null,e;!!(1&Gu)&&0!==e.tag&&xs(),1&(a=e.pendingLanes)?e===Zu?Xu++:(Xu=0,Zu=e):Xu=0,Ho()}(e,n,t,r)}finally{Bu.transition=o,wn=r}return null}function xs(){if(null!==Yu){var e=kn(Gu),n=Bu.transition,t=wn;try{if(Bu.transition=null,wn=16>e?16:e,null===Yu)var r=!1;else{if(e=Yu,Yu=null,Gu=0,6&Uu)throw Error(l(331));var o=Uu;for(Uu|=4,Ji=e.current;null!==Ji;){var a=Ji,i=a.child;if(16&Ji.flags){var u=a.deletions;if(null!==u){for(var s=0;s<u.length;s++){var c=u[s];for(Ji=c;null!==Ji;){var f=Ji;switch(f.tag){case 0:case 11:case 15:ru(8,f,a)}var d=f.child;if(null!==d)d.return=f,Ji=d;else for(;null!==Ji;){var p=(f=Ji).sibling,h=f.return;if(au(f),f===c){Ji=null;break}if(null!==p){p.return=h,Ji=p;break}Ji=h}}}var m=a.alternate;if(null!==m){var g=m.child;if(null!==g){m.child=null;do{var y=g.sibling;g.sibling=null,g=y}while(null!==g)}}Ji=a}}if(2064&a.subtreeFlags&&null!==i)i.return=a,Ji=i;else e:for(;null!==Ji;){if(2048&(a=Ji).flags)switch(a.tag){case 0:case 11:case 15:ru(9,a,a.return)}var v=a.sibling;if(null!==v){v.return=a.return,Ji=v;break e}Ji=a.return}}var b=e.current;for(Ji=b;null!==Ji;){var w=(i=Ji).child;if(2064&i.subtreeFlags&&null!==w)w.return=i,Ji=w;else e:for(i=b;null!==Ji;){if(2048&(u=Ji).flags)try{switch(u.tag){case 0:case 11:case 15:ou(9,u)}}catch(e){Ss(u,u.return,e)}if(u===i){Ji=null;break e}var k=u.sibling;if(null!==k){k.return=u.return,Ji=k;break e}Ji=u.return}}if(Uu=o,Ho(),ln&&"function"==typeof ln.onPostCommitFiberRoot)try{ln.onPostCommitFiberRoot(on,e)}catch(e){}r=!0}return r}finally{wn=t,Bu.transition=n}}return!1}function Cs(e,n,t){e=Ll(e,n=hi(0,n=ci(t,n),1),1),n=ns(),null!==e&&(vn(e,1,n),os(e,n))}function Ss(e,n,t){if(3===e.tag)Cs(e,e,t);else for(;null!==n;){if(3===n.tag){Cs(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Qu||!Qu.has(r))){n=Ll(n,e=mi(n,e=ci(t,e),1),1),e=ns(),null!==n&&(vn(n,1,e),os(n,e));break}}n=n.return}}function Es(e,n,t){var r=e.pingCache;null!==r&&r.delete(n),n=ns(),e.pingedLanes|=e.suspendedLanes&t,Pu===e&&(Tu&t)===t&&(4===Lu||3===Lu&&(130023424&Tu)===Tu&&500>Xe()-$u?ps(e,0):Ru|=t),os(e,n)}function Fs(e,n){0===n&&(1&e.mode?(n=fn,!(130023424&(fn<<=1))&&(fn=4194304)):n=1);var t=ns();null!==(e=Pl(e,n))&&(vn(e,n,t),os(e,t))}function Bs(e){var n=e.memoizedState,t=0;null!==n&&(t=n.retryLane),Fs(e,t)}function Us(e,n){var t=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(t=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(l(314))}null!==r&&r.delete(n),Fs(e,t)}function Ps(e,n){return Qe(e,n)}function _s(e,n,t,r){this.tag=e,this.key=t,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=n,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ts(e,n,t,r){return new _s(e,n,t,r)}function Is(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Os(e,n){var t=e.alternate;return null===t?((t=Ts(e.tag,n,e.key,e.mode)).elementType=e.elementType,t.type=e.type,t.stateNode=e.stateNode,t.alternate=e,e.alternate=t):(t.pendingProps=n,t.type=e.type,t.flags=0,t.subtreeFlags=0,t.deletions=null),t.flags=14680064&e.flags,t.childLanes=e.childLanes,t.lanes=e.lanes,t.child=e.child,t.memoizedProps=e.memoizedProps,t.memoizedState=e.memoizedState,t.updateQueue=e.updateQueue,n=e.dependencies,t.dependencies=null===n?null:{lanes:n.lanes,firstContext:n.firstContext},t.sibling=e.sibling,t.index=e.index,t.ref=e.ref,t}function Ls(e,n,t,r,o,a){var i=2;if(r=e,"function"==typeof e)Is(e)&&(i=1);else if("string"==typeof e)i=5;else e:switch(e){case x:return Ds(t.children,o,a,n);case C:i=8,o|=8;break;case S:return(e=Ts(12,t,n,2|o)).elementType=S,e.lanes=a,e;case U:return(e=Ts(13,t,n,o)).elementType=U,e.lanes=a,e;case P:return(e=Ts(19,t,n,o)).elementType=P,e.lanes=a,e;case I:return zs(t,o,a,n);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case E:i=10;break e;case F:i=9;break e;case B:i=11;break e;case _:i=14;break e;case T:i=16,r=null;break e}throw Error(l(130,null==e?e:typeof e,""))}return(n=Ts(i,t,n,o)).elementType=e,n.type=r,n.lanes=a,n}function Ds(e,n,t,r){return(e=Ts(7,e,r,n)).lanes=t,e}function zs(e,n,t,r){return(e=Ts(22,e,r,n)).elementType=I,e.lanes=t,e.stateNode={isHidden:!1},e}function Ns(e,n,t){return(e=Ts(6,e,null,n)).lanes=t,e}function Rs(e,n,t){return(n=Ts(4,null!==e.children?e.children:[],e.key,n)).lanes=t,n.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},n}function Ms(e,n,t,r,o){this.tag=n,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=yn(0),this.expirationTimes=yn(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=yn(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function js(e,n,t,r,o,l,a,i,u){return e=new Ms(e,n,t,i,u),1===n?(n=1,!0===l&&(n|=8)):n=0,l=Ts(3,null,null,n),e.current=l,l.stateNode=e,l.memoizedState={element:r,isDehydrated:t,cache:null,transitions:null,pendingSuspenseBoundaries:null},Tl(l),e}function $s(e){if(!e)return Bo;e:{if($e(e=e._reactInternals)!==e||1!==e.tag)throw Error(l(170));var n=e;do{switch(n.tag){case 3:n=n.stateNode.context;break e;case 1:if(Io(n.type)){n=n.stateNode.__reactInternalMemoizedMergedChildContext;break e}}n=n.return}while(null!==n);throw Error(l(171))}if(1===e.tag){var t=e.type;if(Io(t))return Do(e,t,n)}return n}function Hs(e,n,t,r,o,l,a,i,u){return(e=js(t,r,!0,e,0,l,0,i,u)).context=$s(null),t=e.current,(l=Ol(r=ns(),o=ts(t))).callback=null!=n?n:null,Ll(t,l,o),e.current.lanes=o,vn(e,o,r),os(e,r),e}function Vs(e,n,t,r){var o=n.current,l=ns(),a=ts(o);return t=$s(t),null===n.context?n.context=t:n.pendingContext=t,(n=Ol(l,a)).payload={element:e},null!==(r=void 0===r?null:r)&&(n.callback=r),null!==(e=Ll(o,n,a))&&(rs(e,o,a,l),Dl(e,o,a)),a}function qs(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Ws(e,n){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var t=e.retryLane;e.retryLane=0!==t&&t<n?t:n}}function Qs(e,n){Ws(e,n),(e=e.alternate)&&Ws(e,n)}Cu=function(e,n,t){if(null!==e)if(e.memoizedProps!==n.pendingProps||Po.current)wi=!0;else{if(!(e.lanes&t||128&n.flags))return wi=!1,function(e,n,t){switch(n.tag){case 3:Pi(n),hl();break;case 5:aa(n);break;case 1:Io(n.type)&&zo(n);break;case 4:oa(n,n.stateNode.containerInfo);break;case 10:var r=n.type._context,o=n.memoizedProps.value;Fo(vl,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=n.memoizedState))return null!==r.dehydrated?(Fo(ua,1&ua.current),n.flags|=128,null):t&n.child.childLanes?Ni(e,n,t):(Fo(ua,1&ua.current),null!==(e=qi(e,n,t))?e.sibling:null);Fo(ua,1&ua.current);break;case 19:if(r=!!(t&n.childLanes),128&e.flags){if(r)return Hi(e,n,t);n.flags|=128}if(null!==(o=n.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),Fo(ua,ua.current),r)break;return null;case 22:case 23:return n.lanes=0,Si(e,n,t)}return qi(e,n,t)}(e,n,t);wi=!!(131072&e.flags)}else wi=!1,ll&&1048576&n.flags&&el(n,Qo,n.index);switch(n.lanes=0,n.tag){case 2:var r=n.type;Vi(e,n),e=n.pendingProps;var o=To(n,Uo.current);Sl(n,t),o=Ca(null,n,r,e,o,t);var a=Sa();return n.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(n.tag=1,n.memoizedState=null,n.updateQueue=null,Io(r)?(a=!0,zo(n)):a=!1,n.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,Tl(n),o.updater=$l,n.stateNode=o,o._reactInternals=n,Wl(n,r,e,t),n=Ui(null,n,r,!0,a,t)):(n.tag=0,ll&&a&&nl(n),ki(null,n,o,t),n=n.child),n;case 16:r=n.elementType;e:{switch(Vi(e,n),e=n.pendingProps,r=(o=r._init)(r._payload),n.type=r,o=n.tag=function(e){if("function"==typeof e)return Is(e)?1:0;if(null!=e){if((e=e.$$typeof)===B)return 11;if(e===_)return 14}return 2}(r),e=yl(r,e),o){case 0:n=Fi(null,n,r,e,t);break e;case 1:n=Bi(null,n,r,e,t);break e;case 11:n=Ai(null,n,r,e,t);break e;case 14:n=xi(null,n,r,yl(r.type,e),t);break e}throw Error(l(306,r,""))}return n;case 0:return r=n.type,o=n.pendingProps,Fi(e,n,r,o=n.elementType===r?o:yl(r,o),t);case 1:return r=n.type,o=n.pendingProps,Bi(e,n,r,o=n.elementType===r?o:yl(r,o),t);case 3:e:{if(Pi(n),null===e)throw Error(l(387));r=n.pendingProps,o=(a=n.memoizedState).element,Il(e,n),Nl(n,r,null,t);var i=n.memoizedState;if(r=i.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:i.cache,pendingSuspenseBoundaries:i.pendingSuspenseBoundaries,transitions:i.transitions},n.updateQueue.baseState=a,n.memoizedState=a,256&n.flags){n=_i(e,n,r,t,o=ci(Error(l(423)),n));break e}if(r!==o){n=_i(e,n,r,t,o=ci(Error(l(424)),n));break e}for(ol=so(n.stateNode.containerInfo.firstChild),rl=n,ll=!0,al=null,t=Zl(n,null,r,t),n.child=t;t;)t.flags=-3&t.flags|4096,t=t.sibling}else{if(hl(),r===o){n=qi(e,n,t);break e}ki(e,n,r,t)}n=n.child}return n;case 5:return aa(n),null===e&&cl(n),r=n.type,o=n.pendingProps,a=null!==e?e.memoizedProps:null,i=o.children,to(r,o)?i=null:null!==a&&to(r,a)&&(n.flags|=32),Ei(e,n),ki(e,n,i,t),n.child;case 6:return null===e&&cl(n),null;case 13:return Ni(e,n,t);case 4:return oa(n,n.stateNode.containerInfo),r=n.pendingProps,null===e?n.child=Xl(n,null,r,t):ki(e,n,r,t),n.child;case 11:return r=n.type,o=n.pendingProps,Ai(e,n,r,o=n.elementType===r?o:yl(r,o),t);case 7:return ki(e,n,n.pendingProps,t),n.child;case 8:case 12:return ki(e,n,n.pendingProps.children,t),n.child;case 10:e:{if(r=n.type._context,o=n.pendingProps,a=n.memoizedProps,i=o.value,Fo(vl,r._currentValue),r._currentValue=i,null!==a)if(ir(a.value,i)){if(a.children===o.children&&!Po.current){n=qi(e,n,t);break e}}else for(null!==(a=n.child)&&(a.return=n);null!==a;){var u=a.dependencies;if(null!==u){i=a.child;for(var s=u.firstContext;null!==s;){if(s.context===r){if(1===a.tag){(s=Ol(-1,t&-t)).tag=2;var c=a.updateQueue;if(null!==c){var f=(c=c.shared).pending;null===f?s.next=s:(s.next=f.next,f.next=s),c.pending=s}}a.lanes|=t,null!==(s=a.alternate)&&(s.lanes|=t),Cl(a.return,t,n),u.lanes|=t;break}s=s.next}}else if(10===a.tag)i=a.type===n.type?null:a.child;else if(18===a.tag){if(null===(i=a.return))throw Error(l(341));i.lanes|=t,null!==(u=i.alternate)&&(u.lanes|=t),Cl(i,t,n),i=a.sibling}else i=a.child;if(null!==i)i.return=a;else for(i=a;null!==i;){if(i===n){i=null;break}if(null!==(a=i.sibling)){a.return=i.return,i=a;break}i=i.return}a=i}ki(e,n,o.children,t),n=n.child}return n;case 9:return o=n.type,r=n.pendingProps.children,Sl(n,t),r=r(o=El(o)),n.flags|=1,ki(e,n,r,t),n.child;case 14:return o=yl(r=n.type,n.pendingProps),xi(e,n,r,o=yl(r.type,o),t);case 15:return Ci(e,n,n.type,n.pendingProps,t);case 17:return r=n.type,o=n.pendingProps,o=n.elementType===r?o:yl(r,o),Vi(e,n),n.tag=1,Io(r)?(e=!0,zo(n)):e=!1,Sl(n,t),Vl(n,r,o),Wl(n,r,o,t),Ui(null,n,r,!0,e,t);case 19:return Hi(e,n,t);case 22:return Si(e,n,t)}throw Error(l(156,n.tag))};var Ks="function"==typeof reportError?reportError:function(e){console.error(e)};function Ys(e){this._internalRoot=e}function Gs(e){this._internalRoot=e}function Xs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Zs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Js(){}function ec(e,n,t,r,o){var l=t._reactRootContainer;if(l){var a=l;if("function"==typeof o){var i=o;o=function(){var e=qs(a);i.call(e)}}Vs(n,a,e,o)}else a=function(e,n,t,r,o){if(o){if("function"==typeof r){var l=r;r=function(){var e=qs(a);l.call(e)}}var a=Hs(n,r,e,0,null,!1,0,"",Js);return e._reactRootContainer=a,e[mo]=a.current,$r(8===e.nodeType?e.parentNode:e),fs(),a}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var i=r;r=function(){var e=qs(u);i.call(e)}}var u=js(e,0,!1,null,0,!1,0,"",Js);return e._reactRootContainer=u,e[mo]=u.current,$r(8===e.nodeType?e.parentNode:e),fs((function(){Vs(n,u,t,r)})),u}(t,n,e,o,r);return qs(a)}Gs.prototype.render=Ys.prototype.render=function(e){var n=this._internalRoot;if(null===n)throw Error(l(409));Vs(e,n,null,null)},Gs.prototype.unmount=Ys.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var n=e.containerInfo;fs((function(){Vs(null,e,null,null)})),n[mo]=null}},Gs.prototype.unstable_scheduleHydration=function(e){if(e){var n=Sn();e={blockedOn:null,target:e,priority:n};for(var t=0;t<On.length&&0!==n&&n<On[t].priority;t++);On.splice(t,0,e),0===t&&Nn(e)}},An=function(e){switch(e.tag){case 3:var n=e.stateNode;if(n.current.memoizedState.isDehydrated){var t=dn(n.pendingLanes);0!==t&&(bn(n,1|t),os(n,Xe()),!(6&Uu)&&(Hu=Xe()+500,Ho()))}break;case 13:fs((function(){var n=Pl(e,1);if(null!==n){var t=ns();rs(n,e,1,t)}})),Qs(e,1)}},xn=function(e){if(13===e.tag){var n=Pl(e,134217728);null!==n&&rs(n,e,134217728,ns()),Qs(e,134217728)}},Cn=function(e){if(13===e.tag){var n=ts(e),t=Pl(e,n);null!==t&&rs(t,e,n,ns()),Qs(e,n)}},Sn=function(){return wn},En=function(e,n){var t=wn;try{return wn=e,n()}finally{wn=t}},Ae=function(e,n,t){switch(n){case"input":if(Z(e,t),n=t.name,"radio"===t.type&&null!=n){for(t=e;t.parentNode;)t=t.parentNode;for(t=t.querySelectorAll("input[name="+JSON.stringify(""+n)+'][type="radio"]'),n=0;n<t.length;n++){var r=t[n];if(r!==e&&r.form===e.form){var o=Ao(r);if(!o)throw Error(l(90));Q(r),Z(r,o)}}}break;case"textarea":le(e,t);break;case"select":null!=(n=t.value)&&te(e,!!t.multiple,n,!1)}},Be=cs,Ue=fs;var nc={usingClientEntryPoint:!1,Events:[wo,ko,Ao,Ee,Fe,cs]},tc={findFiberByHostInstance:bo,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rc={bundleType:tc.bundleType,version:tc.version,rendererPackageName:tc.rendererPackageName,rendererConfig:tc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=qe(e))?null:e.stateNode},findFiberByHostInstance:tc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var oc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!oc.isDisabled&&oc.supportsFiber)try{on=oc.inject(rc),ln=oc}catch(ce){}}n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=nc,n.createPortal=function(e,n){var t=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xs(n))throw Error(l(200));return function(e,n,t){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:A,key:null==r?null:""+r,children:e,containerInfo:n,implementation:t}}(e,n,null,t)},n.createRoot=function(e,n){if(!Xs(e))throw Error(l(299));var t=!1,r="",o=Ks;return null!=n&&(!0===n.unstable_strictMode&&(t=!0),void 0!==n.identifierPrefix&&(r=n.identifierPrefix),void 0!==n.onRecoverableError&&(o=n.onRecoverableError)),n=js(e,1,!1,null,0,t,0,r,o),e[mo]=n.current,$r(8===e.nodeType?e.parentNode:e),new Ys(n)},n.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var n=e._reactInternals;if(void 0===n){if("function"==typeof e.render)throw Error(l(188));throw e=Object.keys(e).join(","),Error(l(268,e))}return null===(e=qe(n))?null:e.stateNode},n.flushSync=function(e){return fs(e)},n.hydrate=function(e,n,t){if(!Zs(n))throw Error(l(200));return ec(null,e,n,!0,t)},n.hydrateRoot=function(e,n,t){if(!Xs(e))throw Error(l(405));var r=null!=t&&t.hydratedSources||null,o=!1,a="",i=Ks;if(null!=t&&(!0===t.unstable_strictMode&&(o=!0),void 0!==t.identifierPrefix&&(a=t.identifierPrefix),void 0!==t.onRecoverableError&&(i=t.onRecoverableError)),n=Hs(n,null,e,1,null!=t?t:null,o,0,a,i),e[mo]=n.current,$r(e),r)for(e=0;e<r.length;e++)o=(o=(t=r[e])._getVersion)(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o);return new Gs(n)},n.render=function(e,n,t){if(!Zs(n))throw Error(l(200));return ec(null,e,n,!1,t)},n.unmountComponentAtNode=function(e){if(!Zs(e))throw Error(l(40));return!!e._reactRootContainer&&(fs((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[mo]=null}))})),!0)},n.unstable_batchedUpdates=cs,n.unstable_renderSubtreeIntoContainer=function(e,n,t,r){if(!Zs(t))throw Error(l(200));if(null==e||void 0===e._reactInternals)throw Error(l(38));return ec(e,n,t,!1,r)},n.version="18.2.0-next-9e3b772b8-20220608"},961:(e,n,t)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=t(2551)},976:(e,n)=>{"use strict";var t,r=Symbol.for("react.element"),o=Symbol.for("react.portal"),l=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),u=Symbol.for("react.provider"),s=Symbol.for("react.context"),c=Symbol.for("react.server_context"),f=Symbol.for("react.forward_ref"),d=Symbol.for("react.suspense"),p=Symbol.for("react.suspense_list"),h=Symbol.for("react.memo"),m=Symbol.for("react.lazy"),g=Symbol.for("react.offscreen");function y(e){if("object"==typeof e&&null!==e){var n=e.$$typeof;switch(n){case r:switch(e=e.type){case l:case i:case a:case d:case p:return e;default:switch(e=e&&e.$$typeof){case c:case s:case f:case m:case h:case u:return e;default:return n}}case o:return n}}}t=Symbol.for("react.module.reference"),n.ContextConsumer=s,n.ContextProvider=u,n.Element=r,n.ForwardRef=f,n.Fragment=l,n.Lazy=m,n.Memo=h,n.Portal=o,n.Profiler=i,n.StrictMode=a,n.Suspense=d,n.SuspenseList=p,n.isAsyncMode=function(){return!1},n.isConcurrentMode=function(){return!1},n.isContextConsumer=function(e){return y(e)===s},n.isContextProvider=function(e){return y(e)===u},n.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},n.isForwardRef=function(e){return y(e)===f},n.isFragment=function(e){return y(e)===l},n.isLazy=function(e){return y(e)===m},n.isMemo=function(e){return y(e)===h},n.isPortal=function(e){return y(e)===o},n.isProfiler=function(e){return y(e)===i},n.isStrictMode=function(e){return y(e)===a},n.isSuspense=function(e){return y(e)===d},n.isSuspenseList=function(e){return y(e)===p},n.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===l||e===i||e===a||e===d||e===p||e===g||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===h||e.$$typeof===u||e.$$typeof===s||e.$$typeof===f||e.$$typeof===t||void 0!==e.getModuleId)},n.typeOf=y},8316:(e,n,t)=>{"use strict";e.exports=t(976)},5287:(e,n)=>{"use strict";var t=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),l=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),i=Symbol.for("react.provider"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,g={};function y(e,n,t){this.props=e,this.context=n,this.refs=g,this.updater=t||h}function v(){}function b(e,n,t){this.props=e,this.context=n,this.refs=g,this.updater=t||h}y.prototype.isReactComponent={},y.prototype.setState=function(e,n){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,n,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=y.prototype;var w=b.prototype=new v;w.constructor=b,m(w,y.prototype),w.isPureReactComponent=!0;var k=Array.isArray,A=Object.prototype.hasOwnProperty,x={current:null},C={key:!0,ref:!0,__self:!0,__source:!0};function S(e,n,r){var o,l={},a=null,i=null;if(null!=n)for(o in void 0!==n.ref&&(i=n.ref),void 0!==n.key&&(a=""+n.key),n)A.call(n,o)&&!C.hasOwnProperty(o)&&(l[o]=n[o]);var u=arguments.length-2;if(1===u)l.children=r;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];l.children=s}if(e&&e.defaultProps)for(o in u=e.defaultProps)void 0===l[o]&&(l[o]=u[o]);return{$$typeof:t,type:e,key:a,ref:i,props:l,_owner:x.current}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===t}var F=/\/+/g;function B(e,n){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var n={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return n[e]}))}(""+e.key):n.toString(36)}function U(e,n,o,l,a){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var u=!1;if(null===e)u=!0;else switch(i){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case t:case r:u=!0}}if(u)return a=a(u=e),e=""===l?"."+B(u,0):l,k(a)?(o="",null!=e&&(o=e.replace(F,"$&/")+"/"),U(a,n,o,"",(function(e){return e}))):null!=a&&(E(a)&&(a=function(e,n){return{$$typeof:t,type:e.type,key:n,ref:e.ref,props:e.props,_owner:e._owner}}(a,o+(!a.key||u&&u.key===a.key?"":(""+a.key).replace(F,"$&/")+"/")+e)),n.push(a)),1;if(u=0,l=""===l?".":l+":",k(e))for(var s=0;s<e.length;s++){var c=l+B(i=e[s],s);u+=U(i,n,o,c,a)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(i=e.next()).done;)u+=U(i=i.value,n,o,c=l+B(i,s++),a);else if("object"===i)throw n=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n)+"). If you meant to render a collection of children, use an array instead.");return u}function P(e,n,t){if(null==e)return e;var r=[],o=0;return U(e,r,"","",(function(e){return n.call(t,e,o++)})),r}function _(e){if(-1===e._status){var n=e._result;(n=n()).then((function(n){0!==e._status&&-1!==e._status||(e._status=1,e._result=n)}),(function(n){0!==e._status&&-1!==e._status||(e._status=2,e._result=n)})),-1===e._status&&(e._status=0,e._result=n)}if(1===e._status)return e._result.default;throw e._result}var T={current:null},I={transition:null},O={ReactCurrentDispatcher:T,ReactCurrentBatchConfig:I,ReactCurrentOwner:x};n.Children={map:P,forEach:function(e,n,t){P(e,(function(){n.apply(this,arguments)}),t)},count:function(e){var n=0;return P(e,(function(){n++})),n},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},n.Component=y,n.Fragment=o,n.Profiler=a,n.PureComponent=b,n.StrictMode=l,n.Suspense=c,n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=O,n.cloneElement=function(e,n,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=m({},e.props),l=e.key,a=e.ref,i=e._owner;if(null!=n){if(void 0!==n.ref&&(a=n.ref,i=x.current),void 0!==n.key&&(l=""+n.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(s in n)A.call(n,s)&&!C.hasOwnProperty(s)&&(o[s]=void 0===n[s]&&void 0!==u?u[s]:n[s])}var s=arguments.length-2;if(1===s)o.children=r;else if(1<s){u=Array(s);for(var c=0;c<s;c++)u[c]=arguments[c+2];o.children=u}return{$$typeof:t,type:e.type,key:l,ref:a,props:o,_owner:i}},n.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},n.createElement=S,n.createFactory=function(e){var n=S.bind(null,e);return n.type=e,n},n.createRef=function(){return{current:null}},n.forwardRef=function(e){return{$$typeof:s,render:e}},n.isValidElement=E,n.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:_}},n.memo=function(e,n){return{$$typeof:f,type:e,compare:void 0===n?null:n}},n.startTransition=function(e){var n=I.transition;I.transition={};try{e()}finally{I.transition=n}},n.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},n.useCallback=function(e,n){return T.current.useCallback(e,n)},n.useContext=function(e){return T.current.useContext(e)},n.useDebugValue=function(){},n.useDeferredValue=function(e){return T.current.useDeferredValue(e)},n.useEffect=function(e,n){return T.current.useEffect(e,n)},n.useId=function(){return T.current.useId()},n.useImperativeHandle=function(e,n,t){return T.current.useImperativeHandle(e,n,t)},n.useInsertionEffect=function(e,n){return T.current.useInsertionEffect(e,n)},n.useLayoutEffect=function(e,n){return T.current.useLayoutEffect(e,n)},n.useMemo=function(e,n){return T.current.useMemo(e,n)},n.useReducer=function(e,n,t){return T.current.useReducer(e,n,t)},n.useRef=function(e){return T.current.useRef(e)},n.useState=function(e){return T.current.useState(e)},n.useSyncExternalStore=function(e,n,t){return T.current.useSyncExternalStore(e,n,t)},n.useTransition=function(){return T.current.useTransition()},n.version="18.2.0"},6540:(e,n,t)=>{"use strict";e.exports=t(5287)},7463:(e,n)=>{"use strict";function t(e,n){var t=e.length;e.push(n);e:for(;0<t;){var r=t-1>>>1,o=e[r];if(!(0<l(o,n)))break e;e[r]=n,e[t]=o,t=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var n=e[0],t=e.pop();if(t!==n){e[0]=t;e:for(var r=0,o=e.length,a=o>>>1;r<a;){var i=2*(r+1)-1,u=e[i],s=i+1,c=e[s];if(0>l(u,t))s<o&&0>l(c,u)?(e[r]=c,e[s]=t,r=s):(e[r]=u,e[i]=t,r=i);else{if(!(s<o&&0>l(c,t)))break e;e[r]=c,e[s]=t,r=s}}}return n}function l(e,n){var t=e.sortIndex-n.sortIndex;return 0!==t?t:e.id-n.id}if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;n.unstable_now=function(){return a.now()}}else{var i=Date,u=i.now();n.unstable_now=function(){return i.now()-u}}var s=[],c=[],f=1,d=null,p=3,h=!1,m=!1,g=!1,y="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var n=r(c);null!==n;){if(null===n.callback)o(c);else{if(!(n.startTime<=e))break;o(c),n.sortIndex=n.expirationTime,t(s,n)}n=r(c)}}function k(e){if(g=!1,w(e),!m)if(null!==r(s))m=!0,I(A);else{var n=r(c);null!==n&&O(k,n.startTime-e)}}function A(e,t){m=!1,g&&(g=!1,v(E),E=-1),h=!0;var l=p;try{for(w(t),d=r(s);null!==d&&(!(d.expirationTime>t)||e&&!U());){var a=d.callback;if("function"==typeof a){d.callback=null,p=d.priorityLevel;var i=a(d.expirationTime<=t);t=n.unstable_now(),"function"==typeof i?d.callback=i:d===r(s)&&o(s),w(t)}else o(s);d=r(s)}if(null!==d)var u=!0;else{var f=r(c);null!==f&&O(k,f.startTime-t),u=!1}return u}finally{d=null,p=l,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var x,C=!1,S=null,E=-1,F=5,B=-1;function U(){return!(n.unstable_now()-B<F)}function P(){if(null!==S){var e=n.unstable_now();B=e;var t=!0;try{t=S(!0,e)}finally{t?x():(C=!1,S=null)}}else C=!1}if("function"==typeof b)x=function(){b(P)};else if("undefined"!=typeof MessageChannel){var _=new MessageChannel,T=_.port2;_.port1.onmessage=P,x=function(){T.postMessage(null)}}else x=function(){y(P,0)};function I(e){S=e,C||(C=!0,x())}function O(e,t){E=y((function(){e(n.unstable_now())}),t)}n.unstable_IdlePriority=5,n.unstable_ImmediatePriority=1,n.unstable_LowPriority=4,n.unstable_NormalPriority=3,n.unstable_Profiling=null,n.unstable_UserBlockingPriority=2,n.unstable_cancelCallback=function(e){e.callback=null},n.unstable_continueExecution=function(){m||h||(m=!0,I(A))},n.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):F=0<e?Math.floor(1e3/e):5},n.unstable_getCurrentPriorityLevel=function(){return p},n.unstable_getFirstCallbackNode=function(){return r(s)},n.unstable_next=function(e){switch(p){case 1:case 2:case 3:var n=3;break;default:n=p}var t=p;p=n;try{return e()}finally{p=t}},n.unstable_pauseExecution=function(){},n.unstable_requestPaint=function(){},n.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var t=p;p=e;try{return n()}finally{p=t}},n.unstable_scheduleCallback=function(e,o,l){var a=n.unstable_now();switch(l="object"==typeof l&&null!==l&&"number"==typeof(l=l.delay)&&0<l?a+l:a,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return e={id:f++,callback:o,priorityLevel:e,startTime:l,expirationTime:i=l+i,sortIndex:-1},l>a?(e.sortIndex=l,t(c,e),null===r(s)&&e===r(c)&&(g?(v(E),E=-1):g=!0,O(k,l-a))):(e.sortIndex=i,t(s,e),m||h||(m=!0,I(A))),e},n.unstable_shouldYield=U,n.unstable_wrapCallback=function(e){var n=p;return function(){var t=p;p=n;try{return e.apply(this,arguments)}finally{p=t}}}},9982:(e,n,t)=>{"use strict";e.exports=t(7463)},2833:e=>{e.exports=function(e,n,t,r){var o=t?t.call(r,e,n):void 0;if(void 0!==o)return!!o;if(e===n)return!0;if("object"!=typeof e||!e||"object"!=typeof n||!n)return!1;var l=Object.keys(e),a=Object.keys(n);if(l.length!==a.length)return!1;for(var i=Object.prototype.hasOwnProperty.bind(n),u=0;u<l.length;u++){var s=l[u];if(!i(s))return!1;var c=e[s],f=n[s];if(!1===(o=t?t.call(r,c,f,s):void 0)||void 0===o&&c!==f)return!1}return!0}},748:(e,n,t)=>{"use strict";var r=t(5072),o=t.n(r),l=t(7825),a=t.n(l),i=t(7659),u=t.n(i),s=t(5056),c=t.n(s),f=t(540),d=t.n(f),p=t(1113),h=t.n(p),m=t(7491),g={};g.styleTagTransform=h(),g.setAttributes=c(),g.insert=u().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d(),o()(m.A,g),m.A&&m.A.locals&&m.A.locals},2647:(e,n,t)=>{"use strict";var r=t(5072),o=t.n(r),l=t(7825),a=t.n(l),i=t(7659),u=t.n(i),s=t(5056),c=t.n(s),f=t(540),d=t.n(f),p=t(1113),h=t.n(p),m=t(9288),g={};g.styleTagTransform=h(),g.setAttributes=c(),g.insert=u().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d(),o()(m.A,g),m.A&&m.A.locals&&m.A.locals},5072:e=>{"use strict";var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var l={},a=[],i=0;i<e.length;i++){var u=e[i],s=r.base?u[0]+r.base:u[0],c=l[s]||0,f="".concat(s," ").concat(c);l[s]=c+1;var d=t(f),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==d)n[d].references++,n[d].updater(p);else{var h=o(p,r);r.byIndex=i,n.splice(i,0,{identifier:f,updater:h,references:1})}a.push(f)}return a}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var l=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<l.length;a++){var i=t(l[a]);n[i].references--}for(var u=r(e,o),s=0;s<l.length;s++){var c=t(l[s]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}l=u}}},7659:e=>{"use strict";var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:e=>{"use strict";e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},5056:(e,n,t)=>{"use strict";e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},7825:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var l=t.sourceMap;l&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(l))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},1113:e=>{"use strict";e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},9108:(e,n,t)=>{var r=t(9788);function o(e,n){var t,o=null;if(!e||"string"!=typeof e)return o;for(var l,a,i=r(e),u="function"==typeof n,s=0,c=i.length;s<c;s++)l=(t=i[s]).property,a=t.value,u?n(l,a,t):a&&(o||(o={}),o[l]=a);return o}e.exports=o,e.exports.default=o},7581:(e,n,t)=>{"use strict";t.d(n,{DU:()=>Vn,Ay:()=>$n});var r=function(){return r=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var o in n=arguments[t])Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o]);return e},r.apply(this,arguments)};function o(e,n,t){if(t||2===arguments.length)for(var r,o=0,l=n.length;o<l;o++)!r&&o in n||(r||(r=Array.prototype.slice.call(n,0,o)),r[o]=n[o]);return e.concat(r||Array.prototype.slice.call(n))}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var l=t(6540),a=t(2833),i=t.n(a),u="-ms-",s="-moz-",c="-webkit-",f="comm",d="rule",p="decl",h="@import",m="@keyframes",g="@layer",y=Math.abs,v=String.fromCharCode,b=Object.assign;function w(e){return e.trim()}function k(e,n){return(e=n.exec(e))?e[0]:e}function A(e,n,t){return e.replace(n,t)}function x(e,n){return e.indexOf(n)}function C(e,n){return 0|e.charCodeAt(n)}function S(e,n,t){return e.slice(n,t)}function E(e){return e.length}function F(e){return e.length}function B(e,n){return n.push(e),e}function U(e,n){return e.filter((function(e){return!k(e,n)}))}var P=1,_=1,T=0,I=0,O=0,L="";function D(e,n,t,r,o,l,a,i){return{value:e,root:n,parent:t,type:r,props:o,children:l,line:P,column:_,length:a,return:"",siblings:i}}function z(e,n){return b(D("",null,null,"",null,null,0,e.siblings),e,{length:-e.length},n)}function N(e){for(;e.root;)e=z(e.root,{children:[e]});B(e,e.siblings)}function R(){return O=I>0?C(L,--I):0,_--,10===O&&(_=1,P--),O}function M(){return O=I<T?C(L,I++):0,_++,10===O&&(_=1,P++),O}function j(){return C(L,I)}function $(){return I}function H(e,n){return S(L,e,n)}function V(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function q(e){return w(H(I-1,K(91===e?e+2:40===e?e+1:e)))}function W(e){for(;(O=j())&&O<33;)M();return V(e)>2||V(O)>3?"":" "}function Q(e,n){for(;--n&&M()&&!(O<48||O>102||O>57&&O<65||O>70&&O<97););return H(e,$()+(n<6&&32==j()&&32==M()))}function K(e){for(;M();)switch(O){case e:return I;case 34:case 39:34!==e&&39!==e&&K(O);break;case 40:41===e&&K(e);break;case 92:M()}return I}function Y(e,n){for(;M()&&e+O!==57&&(e+O!==84||47!==j()););return"/*"+H(n,I-1)+"*"+v(47===e?e:M())}function G(e){for(;!V(j());)M();return H(e,I)}function X(e,n){for(var t="",r=0;r<e.length;r++)t+=n(e[r],r,e,n)||"";return t}function Z(e,n,t,r){switch(e.type){case g:if(e.children.length)break;case h:case p:return e.return=e.return||e.value;case f:return"";case m:return e.return=e.value+"{"+X(e.children,r)+"}";case d:if(!E(e.value=e.props.join(",")))return""}return E(t=X(e.children,r))?e.return=e.value+"{"+t+"}":""}function J(e,n,t){switch(function(e,n){return 45^C(e,0)?(((n<<2^C(e,0))<<2^C(e,1))<<2^C(e,2))<<2^C(e,3):0}(e,n)){case 5103:return c+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return c+e+e;case 4789:return s+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return c+e+s+e+u+e+e;case 5936:switch(C(e,n+11)){case 114:return c+e+u+A(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return c+e+u+A(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return c+e+u+A(e,/[svh]\w+-[tblr]{2}/,"lr")+e}case 6828:case 4268:case 2903:return c+e+u+e+e;case 6165:return c+e+u+"flex-"+e+e;case 5187:return c+e+A(e,/(\w+).+(:[^]+)/,c+"box-$1$2"+u+"flex-$1$2")+e;case 5443:return c+e+u+"flex-item-"+A(e,/flex-|-self/g,"")+(k(e,/flex-|baseline/)?"":u+"grid-row-"+A(e,/flex-|-self/g,""))+e;case 4675:return c+e+u+"flex-line-pack"+A(e,/align-content|flex-|-self/g,"")+e;case 5548:return c+e+u+A(e,"shrink","negative")+e;case 5292:return c+e+u+A(e,"basis","preferred-size")+e;case 6060:return c+"box-"+A(e,"-grow","")+c+e+u+A(e,"grow","positive")+e;case 4554:return c+A(e,/([^-])(transform)/g,"$1"+c+"$2")+e;case 6187:return A(A(A(e,/(zoom-|grab)/,c+"$1"),/(image-set)/,c+"$1"),e,"")+e;case 5495:case 3959:return A(e,/(image-set\([^]*)/,c+"$1$`$1");case 4968:return A(A(e,/(.+:)(flex-)?(.*)/,c+"box-pack:$3"+u+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+c+e+e;case 4200:if(!k(e,/flex-|baseline/))return u+"grid-column-align"+S(e,n)+e;break;case 2592:case 3360:return u+A(e,"template-","")+e;case 4384:case 3616:return t&&t.some((function(e,t){return n=t,k(e.props,/grid-\w+-end/)}))?~x(e+(t=t[n].value),"span")?e:u+A(e,"-start","")+e+u+"grid-row-span:"+(~x(t,"span")?k(t,/\d+/):+k(t,/\d+/)-+k(e,/\d+/))+";":u+A(e,"-start","")+e;case 4896:case 4128:return t&&t.some((function(e){return k(e.props,/grid-\w+-start/)}))?e:u+A(A(e,"-end","-span"),"span ","")+e;case 4095:case 3583:case 4068:case 2532:return A(e,/(.+)-inline(.+)/,c+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(E(e)-1-n>6)switch(C(e,n+1)){case 109:if(45!==C(e,n+4))break;case 102:return A(e,/(.+:)(.+)-([^]+)/,"$1"+c+"$2-$3$1"+s+(108==C(e,n+3)?"$3":"$2-$3"))+e;case 115:return~x(e,"stretch")?J(A(e,"stretch","fill-available"),n,t)+e:e}break;case 5152:case 5920:return A(e,/(.+?):(\d+)(\s*\/\s*(span)?\s*(\d+))?(.*)/,(function(n,t,r,o,l,a,i){return u+t+":"+r+i+(o?u+t+"-span:"+(l?a:+a-+r)+i:"")+e}));case 4949:if(121===C(e,n+6))return A(e,":",":"+c)+e;break;case 6444:switch(C(e,45===C(e,14)?18:11)){case 120:return A(e,/(.+:)([^;\s!]+)(;|(\s+)?!.+)?/,"$1"+c+(45===C(e,14)?"inline-":"")+"box$3$1"+c+"$2$3$1"+u+"$2box$3")+e;case 100:return A(e,":",":"+u)+e}break;case 5719:case 2647:case 2135:case 3927:case 2391:return A(e,"scroll-","scroll-snap-")+e}return e}function ee(e,n,t,r){if(e.length>-1&&!e.return)switch(e.type){case p:return void(e.return=J(e.value,e.length,t));case m:return X([z(e,{value:A(e.value,"@","@"+c)})],r);case d:if(e.length)return function(e,n){return e.map(n).join("")}(t=e.props,(function(n){switch(k(n,r=/(::plac\w+|:read-\w+)/)){case":read-only":case":read-write":N(z(e,{props:[A(n,/:(read-\w+)/,":"+s+"$1")]})),N(z(e,{props:[n]})),b(e,{props:U(t,r)});break;case"::placeholder":N(z(e,{props:[A(n,/:(plac\w+)/,":"+c+"input-$1")]})),N(z(e,{props:[A(n,/:(plac\w+)/,":"+s+"$1")]})),N(z(e,{props:[A(n,/:(plac\w+)/,u+"input-$1")]})),N(z(e,{props:[n]})),b(e,{props:U(t,r)})}return""}))}}function ne(e){return function(e){return L="",e}(te("",null,null,null,[""],e=function(e){return P=_=1,T=E(L=e),I=0,[]}(e),0,[0],e))}function te(e,n,t,r,o,l,a,i,u){for(var s=0,c=0,f=a,d=0,p=0,h=0,m=1,g=1,y=1,b=0,w="",k=o,S=l,F=r,U=w;g;)switch(h=b,b=M()){case 40:if(108!=h&&58==C(U,f-1)){-1!=x(U+=A(q(b),"&","&\f"),"&\f")&&(y=-1);break}case 34:case 39:case 91:U+=q(b);break;case 9:case 10:case 13:case 32:U+=W(h);break;case 92:U+=Q($()-1,7);continue;case 47:switch(j()){case 42:case 47:B(oe(Y(M(),$()),n,t,u),u);break;default:U+="/"}break;case 123*m:i[s++]=E(U)*y;case 125*m:case 59:case 0:switch(b){case 0:case 125:g=0;case 59+c:-1==y&&(U=A(U,/\f/g,"")),p>0&&E(U)-f&&B(p>32?le(U+";",r,t,f-1,u):le(A(U," ","")+";",r,t,f-2,u),u);break;case 59:U+=";";default:if(B(F=re(U,n,t,s,c,o,i,w,k=[],S=[],f,l),l),123===b)if(0===c)te(U,n,F,F,k,l,f,i,S);else switch(99===d&&110===C(U,3)?100:d){case 100:case 108:case 109:case 115:te(e,F,F,r&&B(re(e,F,F,0,0,o,i,w,o,k=[],f,S),S),o,S,f,i,r?k:S);break;default:te(U,F,F,F,[""],S,0,i,S)}}s=c=p=0,m=y=1,w=U="",f=a;break;case 58:f=1+E(U),p=h;default:if(m<1)if(123==b)--m;else if(125==b&&0==m++&&125==R())continue;switch(U+=v(b),b*m){case 38:y=c>0?1:(U+="\f",-1);break;case 44:i[s++]=(E(U)-1)*y,y=1;break;case 64:45===j()&&(U+=q(M())),d=j(),c=f=E(w=U+=G($())),b++;break;case 45:45===h&&2==E(U)&&(m=0)}}return l}function re(e,n,t,r,o,l,a,i,u,s,c,f){for(var p=o-1,h=0===o?l:[""],m=F(h),g=0,v=0,b=0;g<r;++g)for(var k=0,x=S(e,p+1,p=y(v=a[g])),C=e;k<m;++k)(C=w(v>0?h[k]+" "+x:A(x,/&\f/g,h[k])))&&(u[b++]=C);return D(e,n,t,0===o?d:i,u,s,c,f)}function oe(e,n,t,r){return D(e,n,t,f,v(O),S(e,2,-2),0,r)}function le(e,n,t,r,o){return D(e,n,t,p,S(e,0,r),S(e,r+1,-1),r,o)}var ae={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},ie=t(5606),ue=void 0!==ie&&void 0!==ie.env&&(ie.env.REACT_APP_SC_ATTR||ie.env.SC_ATTR)||"data-styled",se="undefined"!=typeof window&&"HTMLElement"in window,ce=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:void 0!==ie&&void 0!==ie.env&&void 0!==ie.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==ie.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==ie.env.REACT_APP_SC_DISABLE_SPEEDY&&ie.env.REACT_APP_SC_DISABLE_SPEEDY:void 0!==ie&&void 0!==ie.env&&void 0!==ie.env.SC_DISABLE_SPEEDY&&""!==ie.env.SC_DISABLE_SPEEDY&&"false"!==ie.env.SC_DISABLE_SPEEDY&&ie.env.SC_DISABLE_SPEEDY),fe={},de=(new Set,Object.freeze([])),pe=Object.freeze({});function he(e,n,t){return void 0===t&&(t=pe),e.theme!==t.theme&&e.theme||n||t.theme}var me=new Set(["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","use","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"]),ge=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,ye=/(^-|-$)/g;function ve(e){return e.replace(ge,"-").replace(ye,"")}var be=/(a)(d)/gi,we=function(e){return String.fromCharCode(e+(e>25?39:97))};function ke(e){var n,t="";for(n=Math.abs(e);n>52;n=n/52|0)t=we(n%52)+t;return(we(n%52)+t).replace(be,"$1-$2")}var Ae,xe=function(e,n){for(var t=n.length;t;)e=33*e^n.charCodeAt(--t);return e},Ce=function(e){return xe(5381,e)};function Se(e){return ke(Ce(e)>>>0)}function Ee(e){return"string"==typeof e&&!0}var Fe="function"==typeof Symbol&&Symbol.for,Be=Fe?Symbol.for("react.memo"):60115,Ue=Fe?Symbol.for("react.forward_ref"):60112,Pe={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},_e={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},Te={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},Ie=((Ae={})[Ue]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},Ae[Be]=Te,Ae);function Oe(e){return("type"in(n=e)&&n.type.$$typeof)===Be?Te:"$$typeof"in e?Ie[e.$$typeof]:Pe;var n}var Le=Object.defineProperty,De=Object.getOwnPropertyNames,ze=Object.getOwnPropertySymbols,Ne=Object.getOwnPropertyDescriptor,Re=Object.getPrototypeOf,Me=Object.prototype;function je(e,n,t){if("string"!=typeof n){if(Me){var r=Re(n);r&&r!==Me&&je(e,r,t)}var o=De(n);ze&&(o=o.concat(ze(n)));for(var l=Oe(e),a=Oe(n),i=0;i<o.length;++i){var u=o[i];if(!(u in _e||t&&t[u]||a&&u in a||l&&u in l)){var s=Ne(n,u);try{Le(e,u,s)}catch(e){}}}}return e}function $e(e){return"function"==typeof e}function He(e){return"object"==typeof e&&"styledComponentId"in e}function Ve(e,n){return e&&n?"".concat(e," ").concat(n):e||n||""}function qe(e,n){if(0===e.length)return"";for(var t=e[0],r=1;r<e.length;r++)t+=n?n+e[r]:e[r];return t}function We(e){return null!==e&&"object"==typeof e&&e.constructor.name===Object.name&&!("props"in e&&e.$$typeof)}function Qe(e,n,t){if(void 0===t&&(t=!1),!t&&!We(e)&&!Array.isArray(e))return n;if(Array.isArray(n))for(var r=0;r<n.length;r++)e[r]=Qe(e[r],n[r]);else if(We(n))for(var r in n)e[r]=Qe(e[r],n[r]);return e}function Ke(e,n){Object.defineProperty(e,"toString",{value:n})}function Ye(e){for(var n=[],t=1;t<arguments.length;t++)n[t-1]=arguments[t];return new Error("An error occurred. See https://github.com/styled-components/styled-components/blob/main/packages/styled-components/src/utils/errors.md#".concat(e," for more information.").concat(n.length>0?" Args: ".concat(n.join(", ")):""))}var Ge=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}return e.prototype.indexOfGroup=function(e){for(var n=0,t=0;t<e;t++)n+=this.groupSizes[t];return n},e.prototype.insertRules=function(e,n){if(e>=this.groupSizes.length){for(var t=this.groupSizes,r=t.length,o=r;e>=o;)if((o<<=1)<0)throw Ye(16,"".concat(e));this.groupSizes=new Uint32Array(o),this.groupSizes.set(t),this.length=o;for(var l=r;l<o;l++)this.groupSizes[l]=0}for(var a=this.indexOfGroup(e+1),i=(l=0,n.length);l<i;l++)this.tag.insertRule(a,n[l])&&(this.groupSizes[e]++,a++)},e.prototype.clearGroup=function(e){if(e<this.length){var n=this.groupSizes[e],t=this.indexOfGroup(e),r=t+n;this.groupSizes[e]=0;for(var o=t;o<r;o++)this.tag.deleteRule(t)}},e.prototype.getGroup=function(e){var n="";if(e>=this.length||0===this.groupSizes[e])return n;for(var t=this.groupSizes[e],r=this.indexOfGroup(e),o=r+t,l=r;l<o;l++)n+="".concat(this.tag.getRule(l)).concat("/*!sc*/\n");return n},e}(),Xe=new Map,Ze=new Map,Je=1,en=function(e){if(Xe.has(e))return Xe.get(e);for(;Ze.has(Je);)Je++;var n=Je++;return Xe.set(e,n),Ze.set(n,e),n},nn=function(e,n){Xe.set(e,n),Ze.set(n,e)},tn="style[".concat(ue,"][").concat("data-styled-version",'="').concat("6.0.7",'"]'),rn=new RegExp("^".concat(ue,'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)')),on=function(e,n,t){for(var r,o=t.split(","),l=0,a=o.length;l<a;l++)(r=o[l])&&e.registerName(n,r)},ln=function(e,n){for(var t,r=(null!==(t=n.textContent)&&void 0!==t?t:"").split("/*!sc*/\n"),o=[],l=0,a=r.length;l<a;l++){var i=r[l].trim();if(i){var u=i.match(rn);if(u){var s=0|parseInt(u[1],10),c=u[2];0!==s&&(nn(c,s),on(e,c,u[3]),e.getTag().insertRules(s,o)),o.length=0}else o.push(i)}}};function an(){return t.nc}var un=function(e){var n=document.head,t=e||n,r=document.createElement("style"),o=function(e){var n=Array.from(e.querySelectorAll("style[".concat(ue,"]")));return n[n.length-1]}(t),l=void 0!==o?o.nextSibling:null;r.setAttribute(ue,"active"),r.setAttribute("data-styled-version","6.0.7");var a=an();return a&&r.setAttribute("nonce",a),t.insertBefore(r,l),r},sn=function(){function e(e){this.element=un(e),this.element.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var n=document.styleSheets,t=0,r=n.length;t<r;t++){var o=n[t];if(o.ownerNode===e)return o}throw Ye(17)}(this.element),this.length=0}return e.prototype.insertRule=function(e,n){try{return this.sheet.insertRule(n,e),this.length++,!0}catch(e){return!1}},e.prototype.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},e.prototype.getRule=function(e){var n=this.sheet.cssRules[e];return n&&n.cssText?n.cssText:""},e}(),cn=function(){function e(e){this.element=un(e),this.nodes=this.element.childNodes,this.length=0}return e.prototype.insertRule=function(e,n){if(e<=this.length&&e>=0){var t=document.createTextNode(n);return this.element.insertBefore(t,this.nodes[e]||null),this.length++,!0}return!1},e.prototype.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},e.prototype.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),fn=function(){function e(e){this.rules=[],this.length=0}return e.prototype.insertRule=function(e,n){return e<=this.length&&(this.rules.splice(e,0,n),this.length++,!0)},e.prototype.deleteRule=function(e){this.rules.splice(e,1),this.length--},e.prototype.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),dn=se,pn={isServer:!se,useCSSOMInjection:!ce},hn=function(){function e(e,n,t){void 0===e&&(e=pe),void 0===n&&(n={});var o=this;this.options=r(r({},pn),e),this.gs=n,this.names=new Map(t),this.server=!!e.isServer,!this.server&&se&&dn&&(dn=!1,function(e){for(var n=document.querySelectorAll(tn),t=0,r=n.length;t<r;t++){var o=n[t];o&&"active"!==o.getAttribute(ue)&&(ln(e,o),o.parentNode&&o.parentNode.removeChild(o))}}(this)),Ke(this,(function(){return function(e){for(var n=e.getTag(),t=n.length,r="",o=function(t){var o=function(e){return Ze.get(e)}(t);if(void 0===o)return"continue";var l=e.names.get(o),a=n.getGroup(t);if(void 0===l||0===a.length)return"continue";var i="".concat(ue,".g").concat(t,'[id="').concat(o,'"]'),u="";void 0!==l&&l.forEach((function(e){e.length>0&&(u+="".concat(e,","))})),r+="".concat(a).concat(i,'{content:"').concat(u,'"}').concat("/*!sc*/\n")},l=0;l<t;l++)o(l);return r}(o)}))}return e.registerId=function(e){return en(e)},e.prototype.reconstructWithOptions=function(n,t){return void 0===t&&(t=!0),new e(r(r({},this.options),n),this.gs,t&&this.names||void 0)},e.prototype.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},e.prototype.getTag=function(){return this.tag||(this.tag=(e=function(e){var n=e.useCSSOMInjection,t=e.target;return e.isServer?new fn(t):n?new sn(t):new cn(t)}(this.options),new Ge(e)));var e},e.prototype.hasNameForId=function(e,n){return this.names.has(e)&&this.names.get(e).has(n)},e.prototype.registerName=function(e,n){if(en(e),this.names.has(e))this.names.get(e).add(n);else{var t=new Set;t.add(n),this.names.set(e,t)}},e.prototype.insertRules=function(e,n,t){this.registerName(e,n),this.getTag().insertRules(en(e),t)},e.prototype.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},e.prototype.clearRules=function(e){this.getTag().clearGroup(en(e)),this.clearNames(e)},e.prototype.clearTag=function(){this.tag=void 0},e}(),mn=/&/g,gn=/^\s*\/\/.*$/gm;function yn(e,n){return e.map((function(e){return"rule"===e.type&&(e.value="".concat(n," ").concat(e.value),e.value=e.value.replaceAll(",",",".concat(n," ")),e.props=e.props.map((function(e){return"".concat(n," ").concat(e)}))),Array.isArray(e.children)&&"@keyframes"!==e.type&&(e.children=yn(e.children,n)),e}))}function vn(e){var n,t,r,o=void 0===e?pe:e,l=o.options,a=void 0===l?pe:l,i=o.plugins,u=void 0===i?de:i,s=function(e,r,o){return o===t||o.startsWith(t)&&o.endsWith(t)&&o.replaceAll(t,"").length>0?".".concat(n):e},c=u.slice();c.push((function(e){e.type===d&&e.value.includes("&")&&(e.props[0]=e.props[0].replace(mn,t).replace(r,s))})),a.prefix&&c.push(ee),c.push(Z);var f=function(e,o,l,i){void 0===o&&(o=""),void 0===l&&(l=""),void 0===i&&(i="&"),n=i,t=o,r=new RegExp("\\".concat(t,"\\b"),"g");var u=e.replace(gn,""),s=ne(l||o?"".concat(l," ").concat(o," { ").concat(u," }"):u);a.namespace&&(s=yn(s,a.namespace));var f,d,p,h=[];return X(s,(f=c.concat((p=function(e){return h.push(e)},function(e){e.root||(e=e.return)&&p(e)})),d=F(f),function(e,n,t,r){for(var o="",l=0;l<d;l++)o+=f[l](e,n,t,r)||"";return o})),h};return f.hash=u.length?u.reduce((function(e,n){return n.name||Ye(15),xe(e,n.name)}),5381).toString():"",f}var bn=new hn,wn=vn(),kn=l.createContext({shouldForwardProp:void 0,styleSheet:bn,stylis:wn}),An=(kn.Consumer,l.createContext(void 0));function xn(){return(0,l.useContext)(kn)}function Cn(e){var n=(0,l.useState)(e.stylisPlugins),t=n[0],r=n[1],o=xn().styleSheet,a=(0,l.useMemo)((function(){var n=o;return e.sheet?n=e.sheet:e.target&&(n=n.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(n=n.reconstructWithOptions({useCSSOMInjection:!1})),n}),[e.disableCSSOMInjection,e.sheet,e.target,o]),u=(0,l.useMemo)((function(){return vn({options:{namespace:e.namespace,prefix:e.enableVendorPrefixes},plugins:t})}),[e.enableVendorPrefixes,e.namespace,t]);return(0,l.useEffect)((function(){i()(t,e.stylisPlugins)||r(e.stylisPlugins)}),[e.stylisPlugins]),l.createElement(kn.Provider,{value:{shouldForwardProp:e.shouldForwardProp,styleSheet:a,stylis:u}},l.createElement(An.Provider,{value:u},e.children))}var Sn=function(){function e(e,n){var t=this;this.inject=function(e,n){void 0===n&&(n=wn);var r=t.name+n.hash;e.hasNameForId(t.id,r)||e.insertRules(t.id,r,n(t.rules,r,"@keyframes"))},this.name=e,this.id="sc-keyframes-".concat(e),this.rules=n,Ke(this,(function(){throw Ye(12,String(t.name))}))}return e.prototype.getName=function(e){return void 0===e&&(e=wn),this.name+e.hash},e}(),En=function(e){return e>="A"&&e<="Z"};function Fn(e){for(var n="",t=0;t<e.length;t++){var r=e[t];if(1===t&&"-"===r&&"-"===e[0])return e;En(r)?n+="-"+r.toLowerCase():n+=r}return n.startsWith("ms-")?"-"+n:n}var Bn=function(e){return null==e||!1===e||""===e},Un=function(e){var n,t,r=[];for(var l in e){var a=e[l];e.hasOwnProperty(l)&&!Bn(a)&&(Array.isArray(a)&&a.isCss||$e(a)?r.push("".concat(Fn(l),":"),a,";"):We(a)?r.push.apply(r,o(o(["".concat(l," {")],Un(a),!1),["}"],!1)):r.push("".concat(Fn(l),": ").concat((n=l,null==(t=a)||"boolean"==typeof t||""===t?"":"number"!=typeof t||0===t||n in ae||n.startsWith("--")?String(t).trim():"".concat(t,"px")),";")))}return r};function Pn(e,n,t,r){return Bn(e)?[]:He(e)?[".".concat(e.styledComponentId)]:$e(e)?!$e(o=e)||o.prototype&&o.prototype.isReactComponent||!n?[e]:Pn(e(n),n,t,r):e instanceof Sn?t?(e.inject(t,r),[e.getName(r)]):[e]:We(e)?Un(e):Array.isArray(e)?Array.prototype.concat.apply(de,e.map((function(e){return Pn(e,n,t,r)}))):[e.toString()];var o}function _n(e){for(var n=0;n<e.length;n+=1){var t=e[n];if($e(t)&&!He(t))return!1}return!0}var Tn=Ce("6.0.7"),In=function(){function e(e,n,t){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===t||t.isStatic)&&_n(e),this.componentId=n,this.baseHash=xe(Tn,n),this.baseStyle=t,hn.registerId(n)}return e.prototype.generateAndInjectStyles=function(e,n,t){var r=this.baseStyle?this.baseStyle.generateAndInjectStyles(e,n,t):"";if(this.isStatic&&!t.hash)if(this.staticRulesId&&n.hasNameForId(this.componentId,this.staticRulesId))r=Ve(r,this.staticRulesId);else{var o=qe(Pn(this.rules,e,n,t)),l=ke(xe(this.baseHash,o)>>>0);if(!n.hasNameForId(this.componentId,l)){var a=t(o,".".concat(l),void 0,this.componentId);n.insertRules(this.componentId,l,a)}r=Ve(r,l),this.staticRulesId=l}else{for(var i=xe(this.baseHash,t.hash),u="",s=0;s<this.rules.length;s++){var c=this.rules[s];if("string"==typeof c)u+=c;else if(c){var f=qe(Pn(c,e,n,t));i=xe(i,f),u+=f}}if(u){var d=ke(i>>>0);n.hasNameForId(this.componentId,d)||n.insertRules(this.componentId,d,t(u,".".concat(d),void 0,this.componentId)),r=Ve(r,d)}}return r},e}(),On=l.createContext(void 0);On.Consumer;var Ln={};function Dn(e,n,t){var o=He(e),a=e,i=!Ee(e),u=n.attrs,s=void 0===u?de:u,c=n.componentId,f=void 0===c?function(e,n){var t="string"!=typeof e?"sc":ve(e);Ln[t]=(Ln[t]||0)+1;var r="".concat(t,"-").concat(Se("6.0.7"+t+Ln[t]));return n?"".concat(n,"-").concat(r):r}(n.displayName,n.parentComponentId):c,d=(void 0===n.displayName&&function(e){Ee(e)?"styled.".concat(e):"Styled(".concat(function(e){return e.displayName||e.name||"Component"}(e),")")}(e),n.displayName&&n.componentId?"".concat(ve(n.displayName),"-").concat(n.componentId):n.componentId||f),p=o&&a.attrs?a.attrs.concat(s).filter(Boolean):s,h=n.shouldForwardProp;if(o&&a.shouldForwardProp){var m=a.shouldForwardProp;if(n.shouldForwardProp){var g=n.shouldForwardProp;h=function(e,n){return m(e,n)&&g(e,n)}}else h=m}var y=new In(t,d,o?a.componentStyle:void 0),v=l.forwardRef((function(e,n){return function(e,n,t){var o=e.attrs,a=e.componentStyle,i=e.defaultProps,u=e.foldedComponentIds,s=e.styledComponentId,c=e.target,f=l.useContext(On),d=xn(),p=e.shouldForwardProp||d.shouldForwardProp,h=function(e,n,t){for(var o,l=r(r({},n),{className:void 0,theme:t}),a=0;a<e.length;a+=1){var i=$e(o=e[a])?o(l):o;for(var u in i)l[u]="className"===u?Ve(l[u],i[u]):"style"===u?r(r({},l[u]),i[u]):i[u]}return n.className&&(l.className=Ve(l.className,n.className)),l}(o,n,he(n,f,i)||pe),m=h.as||c,g={};for(var y in h)void 0===h[y]||"$"===y[0]||"as"===y||"theme"===y||("forwardedAs"===y?g.as=h.forwardedAs:p&&!p(y,m)||(g[y]=h[y]));var v=function(e,n){var t=xn();return e.generateAndInjectStyles(n,t.styleSheet,t.stylis)}(a,h),b=Ve(u,s);return v&&(b+=" "+v),h.className&&(b+=" "+h.className),g[Ee(m)&&!me.has(m)?"class":"className"]=b,g.ref=t,(0,l.createElement)(m,g)}(v,e,n)}));return v.attrs=p,v.componentStyle=y,v.shouldForwardProp=h,v.foldedComponentIds=o?Ve(a.foldedComponentIds,a.styledComponentId):"",v.styledComponentId=d,v.target=o?a.target:e,Object.defineProperty(v,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(e){this._foldedDefaultProps=o?function(e){for(var n=[],t=1;t<arguments.length;t++)n[t-1]=arguments[t];for(var r=0,o=n;r<o.length;r++)Qe(e,o[r],!0);return e}({},a.defaultProps,e):e}}),Ke(v,(function(){return".".concat(v.styledComponentId)})),i&&je(v,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0}),v}function zn(e,n){for(var t=[e[0]],r=0,o=n.length;r<o;r+=1)t.push(n[r],e[r+1]);return t}new Set;var Nn=function(e){return Object.assign(e,{isCss:!0})};function Rn(e){for(var n=[],t=1;t<arguments.length;t++)n[t-1]=arguments[t];if($e(e)||We(e))return Nn(Pn(zn(de,o([e],n,!0))));var r=e;return 0===n.length&&1===r.length&&"string"==typeof r[0]?Pn(r):Nn(Pn(zn(r,n)))}function Mn(e,n,t){if(void 0===t&&(t=pe),!n)throw Ye(1,n);var l=function(r){for(var l=[],a=1;a<arguments.length;a++)l[a-1]=arguments[a];return e(n,t,Rn.apply(void 0,o([r],l,!1)))};return l.attrs=function(o){return Mn(e,n,r(r({},t),{attrs:Array.prototype.concat(t.attrs,o).filter(Boolean)}))},l.withConfig=function(o){return Mn(e,n,r(r({},t),o))},l}var jn=function(e){return Mn(Dn,e)},$n=jn;me.forEach((function(e){$n[e]=jn(e)}));var Hn=function(){function e(e,n){this.rules=e,this.componentId=n,this.isStatic=_n(e),hn.registerId(this.componentId+1)}return e.prototype.createStyles=function(e,n,t,r){var o=r(qe(Pn(this.rules,n,t,r)),""),l=this.componentId+e;t.insertRules(l,l,o)},e.prototype.removeStyles=function(e,n){n.clearRules(this.componentId+e)},e.prototype.renderStyles=function(e,n,t,r){e>2&&hn.registerId(this.componentId+e),this.removeStyles(e,t),this.createStyles(e,n,t,r)},e}();function Vn(e){for(var n=[],t=1;t<arguments.length;t++)n[t-1]=arguments[t];var a=Rn.apply(void 0,o([e],n,!1)),i="sc-global-".concat(Se(JSON.stringify(a))),u=new Hn(a,i),s=function(e){var n=xn(),t=l.useContext(On),r=l.useRef(n.styleSheet.allocateGSInstance(i)).current;return n.styleSheet.server&&c(r,e,n.styleSheet,t,n.stylis),l.useLayoutEffect((function(){if(!n.styleSheet.server)return c(r,e,n.styleSheet,t,n.stylis),function(){return u.removeStyles(r,n.styleSheet)}}),[r,e,n.styleSheet,t,n.stylis]),null};function c(e,n,t,o,l){if(u.isStatic)u.renderStyles(e,fe,t,l);else{var a=r(r({},n),{theme:he(n,o,s.defaultProps)});u.renderStyles(e,a,t,l)}}return l.memo(s)}(function(){function e(){var e=this;this._emitSheetCSS=function(){var n=e.instance.toString(),t=an(),r=qe([t&&'nonce="'.concat(t,'"'),"".concat(ue,'="true"'),"".concat("data-styled-version",'="').concat("6.0.7",'"')].filter(Boolean)," ");return"<style ".concat(r,">").concat(n,"</style>")},this.getStyleTags=function(){if(e.sealed)throw Ye(2);return e._emitSheetCSS()},this.getStyleElement=function(){var n;if(e.sealed)throw Ye(2);var t=((n={})[ue]="",n["data-styled-version"]="6.0.7",n.dangerouslySetInnerHTML={__html:e.instance.toString()},n),o=an();return o&&(t.nonce=o),[l.createElement("style",r({},t,{key:"sc-0-0"}))]},this.seal=function(){e.sealed=!0},this.instance=new hn({isServer:!0}),this.sealed=!1}e.prototype.collectStyles=function(e){if(this.sealed)throw Ye(2);return l.createElement(Cn,{sheet:this.instance},e)},e.prototype.interleaveWithNodeStream=function(e){throw Ye(3)}})(),"__sc-".concat(ue,"__")},3262:(e,n,t)=>{"use strict";e.exports=t.p+"b2f7fa8bb26a2699b579.woff"},2793:(e,n,t)=>{"use strict";e.exports=t.p+"4f2cda059485c5f324fa.woff"},7137:(e,n,t)=>{"use strict";e.exports=t.p+"d2f757dd50016882086f.woff"},9814:(e,n,t)=>{"use strict";e.exports=t.p+"56a3dea428762836a958.woff"},1012:(e,n,t)=>{"use strict";e.exports=t.p+"4db1bf0c1f6d5f32f320.woff2"},5573:(e,n,t)=>{"use strict";e.exports=t.p+"b3501f3f1fa72bcb728a.woff2"},4365:(e,n,t)=>{"use strict";e.exports=t.p+"6ab1e89d0317d8c309cf.woff2"},3052:(e,n,t)=>{"use strict";e.exports=t.p+"d09ca2b77e933d5c6582.woff2"},6138:(e,n,t)=>{"use strict";e.exports=t.p+"07b851eaa771083aa412.woff2"},1939:(e,n,t)=>{"use strict";e.exports=t.p+"ea48f4ff22a3d336ebb0.woff2"},5879:(e,n,t)=>{"use strict";e.exports=t.p+"1f9b868798d3a62c002f.woff2"},7830:(e,n,t)=>{"use strict";e.exports=t.p+"7ab4304a4f29ec9dc89c.woff2"},5123:(e,n,t)=>{"use strict";e.exports=t.p+"df10eb39af19eaf363ee.woff2"},5218:(e,n,t)=>{"use strict";e.exports=t.p+"3efbf9f403ae2d6791f1.woff2"},1494:(e,n,t)=>{"use strict";e.exports=t.p+"4d586f42acbc9e933a80.woff2"},4863:(e,n,t)=>{"use strict";e.exports=t.p+"f8a27a6de63d2728adc4.woff2"},653:(e,n,t)=>{"use strict";e.exports=t.p+"c9f3696e45388e46f544.woff2"},4748:(e,n,t)=>{"use strict";e.exports=t.p+"18af2512ed41dc94e197.woff2"},3412:(e,n,t)=>{"use strict";e.exports=t.p+"036a954126763c1dac55.woff2"},6437:(e,n,t)=>{"use strict";e.exports=t.p+"6644a09ac3084b55fcc2.woff2"},4653:(e,n,t)=>{"use strict";e.exports=t.p+"bb915319f59c02c348a6.woff2"},3340:(e,n,t)=>{"use strict";e.exports=t.p+"f57a62e9efddf6ace18b.woff2"},7652:(e,n,t)=>{"use strict";e.exports=t.p+"2a0783bd1c6c1469558b.woff2"},5861:(e,n,t)=>{"use strict";e.exports=t.p+"92425c623934facef057.woff2"},2567:(e,n,t)=>{"use strict";e.exports=t.p+"9b5f4ef6bec817044bca.woff2"},5318:(e,n,t)=>{"use strict";e.exports=t.p+"e21fda72f7303338832c.woff2"},8906:(e,n,t)=>{"use strict";e.exports=t.p+"f49a91d60ad49ded7427.woff2"},6099:(e,n,t)=>{"use strict";e.exports=t.p+"3e3826616c156f9d249f.woff2"},5970:(e,n,t)=>{"use strict";e.exports=t.p+"deef4f2bcf876c281b29.woff2"},3259:(e,n,t)=>{"use strict";e.exports=t.p+"5ec64a942bafa79974d2.woff2"},255:(e,n,t)=>{"use strict";e.exports=t.p+"3a3a54b62ca9291563a7.woff2"},8222:(e,n,t)=>{"use strict";e.exports=t.p+"122371a2c0cfc6530047.woff2"},8864:(e,n,t)=>{"use strict";t.d(n,{$:()=>Zt});var r={};t.r(r),t.d(r,{attentionMarkers:()=>gn,contentInitial:()=>cn,disable:()=>yn,document:()=>sn,flow:()=>dn,flowInitial:()=>fn,insideSpan:()=>mn,string:()=>pn,text:()=>hn});var o={};t.r(o),t.d(o,{boolean:()=>it,booleanish:()=>ut,commaOrSpaceSeparated:()=>pt,commaSeparated:()=>dt,number:()=>ct,overloadedBoolean:()=>st,spaceSeparated:()=>ft});var l=t(6540),a=t(7206),i={}.hasOwnProperty;function u(e){return e&&"object"==typeof e?i.call(e,"position")||i.call(e,"type")?c(e.position):i.call(e,"start")||i.call(e,"end")?c(e):i.call(e,"line")||i.call(e,"column")?s(e):"":""}function s(e){return f(e&&e.line)+":"+f(e&&e.column)}function c(e){return s(e&&e.start)+"-"+s(e&&e.end)}function f(e){return e&&"number"==typeof e?e:1}class d extends Error{constructor(e,n,t){var r,o=[null,null],l={start:{line:null,column:null},end:{line:null,column:null}};super(),"string"==typeof n&&(t=n,n=null),"string"==typeof t&&(-1===(r=t.indexOf(":"))?o[1]=t:(o[0]=t.slice(0,r),o[1]=t.slice(r+1))),n&&("type"in n||"position"in n?n.position&&(l=n.position):"start"in n||"end"in n?l=n:("line"in n||"column"in n)&&(l.start=n)),this.name=u(n)||"1:1",this.message="object"==typeof e?e.message:e,this.stack="object"==typeof e?e.stack:"",this.reason=this.message,this.line=l.start.line,this.column=l.start.column,this.source=o[0],this.ruleId=o[1],this.position=l,this.file,this.fatal,this.url,this.note}}d.prototype.file="",d.prototype.name="",d.prototype.reason="",d.prototype.message="",d.prototype.stack="",d.prototype.fatal=null,d.prototype.column=null,d.prototype.line=null,d.prototype.source=null,d.prototype.ruleId=null,d.prototype.position=null;const p=function(e,n){if(void 0!==n&&"string"!=typeof n)throw new TypeError('"ext" argument must be a string');v(e);let t,r=0,o=-1,l=e.length;if(void 0===n||0===n.length||n.length>e.length){for(;l--;)if(47===e.charCodeAt(l)){if(t){r=l+1;break}}else o<0&&(t=!0,o=l+1);return o<0?"":e.slice(r,o)}if(n===e)return"";let a=-1,i=n.length-1;for(;l--;)if(47===e.charCodeAt(l)){if(t){r=l+1;break}}else a<0&&(t=!0,a=l+1),i>-1&&(e.charCodeAt(l)===n.charCodeAt(i--)?i<0&&(o=l):(i=-1,o=a));return r===o?o=a:o<0&&(o=e.length),e.slice(r,o)},h=function(e){if(v(e),0===e.length)return".";let n,t=-1,r=e.length;for(;--r;)if(47===e.charCodeAt(r)){if(n){t=r;break}}else n||(n=!0);return t<0?47===e.charCodeAt(0)?"/":".":1===t&&47===e.charCodeAt(0)?"//":e.slice(0,t)},m=function(e){v(e);let n,t=e.length,r=-1,o=0,l=-1,a=0;for(;t--;){const i=e.charCodeAt(t);if(47!==i)r<0&&(n=!0,r=t+1),46===i?l<0?l=t:1!==a&&(a=1):l>-1&&(a=-1);else if(n){o=t+1;break}}return l<0||r<0||0===a||1===a&&l===r-1&&l===o+1?"":e.slice(l,r)},g=function(...e){let n,t=-1;for(;++t<e.length;)v(e[t]),e[t]&&(n=void 0===n?e[t]:n+"/"+e[t]);return void 0===n?".":function(e){v(e);const n=47===e.charCodeAt(0);let t=function(e,n){let t,r,o="",l=0,a=-1,i=0,u=-1;for(;++u<=e.length;){if(u<e.length)t=e.charCodeAt(u);else{if(47===t)break;t=47}if(47===t){if(a===u-1||1===i);else if(a!==u-1&&2===i){if(o.length<2||2!==l||46!==o.charCodeAt(o.length-1)||46!==o.charCodeAt(o.length-2))if(o.length>2){if(r=o.lastIndexOf("/"),r!==o.length-1){r<0?(o="",l=0):(o=o.slice(0,r),l=o.length-1-o.lastIndexOf("/")),a=u,i=0;continue}}else if(o.length>0){o="",l=0,a=u,i=0;continue}n&&(o=o.length>0?o+"/..":"..",l=2)}else o.length>0?o+="/"+e.slice(a+1,u):o=e.slice(a+1,u),l=u-a-1;a=u,i=0}else 46===t&&i>-1?i++:i=-1}return o}(e,!n);return 0!==t.length||n||(t="."),t.length>0&&47===e.charCodeAt(e.length-1)&&(t+="/"),n?"/"+t:t}(n)},y="/";function v(e){if("string"!=typeof e)throw new TypeError("Path must be a string. Received "+JSON.stringify(e))}const b=function(){return"/"};function w(e){return null!==e&&"object"==typeof e&&e.href&&e.origin}const k=["history","path","basename","stem","extname","dirname"];class A{constructor(e){let n;n=e?"string"==typeof e||a(e)?{value:e}:w(e)?{path:e}:e:{},this.data={},this.messages=[],this.history=[],this.cwd=b(),this.value,this.stored,this.result,this.map;let t,r=-1;for(;++r<k.length;){const e=k[r];e in n&&void 0!==n[e]&&(this[e]="history"===e?[...n[e]]:n[e])}for(t in n)k.includes(t)||(this[t]=n[t])}get path(){return this.history[this.history.length-1]}set path(e){w(e)&&(e=function(e){if("string"==typeof e)e=new URL(e);else if(!w(e)){const n=new TypeError('The "path" argument must be of type string or an instance of URL. Received `'+e+"`");throw n.code="ERR_INVALID_ARG_TYPE",n}if("file:"!==e.protocol){const e=new TypeError("The URL must be of scheme file");throw e.code="ERR_INVALID_URL_SCHEME",e}return function(e){if(""!==e.hostname){const e=new TypeError('File URL host must be "localhost" or empty on darwin');throw e.code="ERR_INVALID_FILE_URL_HOST",e}const n=e.pathname;let t=-1;for(;++t<n.length;)if(37===n.charCodeAt(t)&&50===n.charCodeAt(t+1)){const e=n.charCodeAt(t+2);if(70===e||102===e){const e=new TypeError("File URL path must not include encoded / characters");throw e.code="ERR_INVALID_FILE_URL_PATH",e}}return decodeURIComponent(n)}(e)}(e)),C(e,"path"),this.path!==e&&this.history.push(e)}get dirname(){return"string"==typeof this.path?h(this.path):void 0}set dirname(e){S(this.basename,"dirname"),this.path=g(e||"",this.basename)}get basename(){return"string"==typeof this.path?p(this.path):void 0}set basename(e){C(e,"basename"),x(e,"basename"),this.path=g(this.dirname||"",e)}get extname(){return"string"==typeof this.path?m(this.path):void 0}set extname(e){if(x(e,"extname"),S(this.dirname,"extname"),e){if(46!==e.charCodeAt(0))throw new Error("`extname` must start with `.`");if(e.includes(".",1))throw new Error("`extname` cannot contain multiple dots")}this.path=g(this.dirname,this.stem+(e||""))}get stem(){return"string"==typeof this.path?p(this.path,this.extname):void 0}set stem(e){C(e,"stem"),x(e,"stem"),this.path=g(this.dirname||"",e+(this.extname||""))}toString(e){return(this.value||"").toString(e)}message(e,n,t){const r=new d(e,n,t);return this.path&&(r.name=this.path+":"+r.name,r.file=this.path),r.fatal=!1,this.messages.push(r),r}info(e,n,t){const r=this.message(e,n,t);return r.fatal=null,r}fail(e,n,t){const r=this.message(e,n,t);throw r.fatal=!0,r}}function x(e,n){if(e&&e.includes(y))throw new Error("`"+n+"` cannot be a path: did not expect `"+y+"`")}function C(e,n){if(!e)throw new Error("`"+n+"` cannot be empty")}function S(e,n){if(!e)throw new Error("Setting `"+n+"` requires `path` to be set too")}function E(e){if(e)throw e}var F=t(2849);function B(e){if("[object Object]"!==Object.prototype.toString.call(e))return!1;const n=Object.getPrototypeOf(e);return null===n||n===Object.prototype}const U=function e(){const n=function(){const e=[],n={run:function(...n){let t=-1;const r=n.pop();if("function"!=typeof r)throw new TypeError("Expected function as last argument, not "+r);!function o(l,...a){const i=e[++t];let u=-1;if(l)r(l);else{for(;++u<n.length;)null!==a[u]&&void 0!==a[u]||(a[u]=n[u]);n=a,i?function(e,n){let t;return function(...n){const l=e.length>n.length;let a;l&&n.push(r);try{a=e(...n)}catch(e){if(l&&t)throw e;return r(e)}l||(a instanceof Promise?a.then(o,r):a instanceof Error?r(a):o(a))};function r(e,...r){t||(t=!0,n(e,...r))}function o(e){r(null,e)}}(i,o)(...a):r(null,...a)}}(null,...n)},use:function(t){if("function"!=typeof t)throw new TypeError("Expected `middelware` to be a function, not "+t);return e.push(t),n}};return n}(),t=[];let r,o={},l=-1;return i.data=function(e,n){return"string"==typeof e?2===arguments.length?(O("data",r),o[e]=n,i):P.call(o,e)&&o[e]||null:e?(O("data",r),o=e,i):o},i.Parser=void 0,i.Compiler=void 0,i.freeze=function(){if(r)return i;for(;++l<t.length;){const[e,...r]=t[l];if(!1===r[0])continue;!0===r[0]&&(r[1]=void 0);const o=e.call(i,...r);"function"==typeof o&&n.use(o)}return r=!0,l=Number.POSITIVE_INFINITY,i},i.attachers=t,i.use=function(e,...n){let l;if(O("use",r),null==e);else if("function"==typeof e)c(e,...n);else{if("object"!=typeof e)throw new TypeError("Expected usable value, not `"+e+"`");Array.isArray(e)?s(e):u(e)}return l&&(o.settings=Object.assign(o.settings||{},l)),i;function a(e){if("function"==typeof e)c(e);else{if("object"!=typeof e)throw new TypeError("Expected usable value, not `"+e+"`");if(Array.isArray(e)){const[n,...t]=e;c(n,...t)}else u(e)}}function u(e){s(e.plugins),e.settings&&(l=Object.assign(l||{},e.settings))}function s(e){let n=-1;if(null==e);else{if(!Array.isArray(e))throw new TypeError("Expected a list of plugins, not `"+e+"`");for(;++n<e.length;)a(e[n])}}function c(e,n){let r,o=-1;for(;++o<t.length;)if(t[o][0]===e){r=t[o];break}r?(B(r[1])&&B(n)&&(n=F(!0,r[1],n)),r[1]=n):t.push([...arguments])}},i.parse=function(e){i.freeze();const n=z(e),t=i.Parser;return T("parse",t),_(t,"parse")?new t(String(n),n).parse():t(String(n),n)},i.stringify=function(e,n){i.freeze();const t=z(n),r=i.Compiler;return I("stringify",r),L(e),_(r,"compile")?new r(e,t).compile():r(e,t)},i.run=function(e,t,r){if(L(e),i.freeze(),r||"function"!=typeof t||(r=t,t=void 0),!r)return new Promise(o);function o(o,l){n.run(e,z(t),(function(n,t,a){t=t||e,n?l(n):o?o(t):r(null,t,a)}))}o(null,r)},i.runSync=function(e,n){let t,r;return i.run(e,n,(function(e,n){E(e),t=n,r=!0})),D("runSync","run",r),t},i.process=function(e,n){if(i.freeze(),T("process",i.Parser),I("process",i.Compiler),!n)return new Promise(t);function t(t,r){const o=z(e);function l(e,o){e||!o?r(e):t?t(o):n(null,o)}i.run(i.parse(o),o,((e,n,t)=>{if(!e&&n&&t){const o=i.stringify(n,t);null==o||("string"==typeof(r=o)||a(r)?t.value=o:t.result=o),l(e,t)}else l(e);var r}))}t(null,n)},i.processSync=function(e){let n;i.freeze(),T("processSync",i.Parser),I("processSync",i.Compiler);const t=z(e);return i.process(t,(function(e){n=!0,E(e)})),D("processSync","process",n),t},i;function i(){const n=e();let r=-1;for(;++r<t.length;)n.use(...t[r]);return n.data(F(!0,{},o)),n}}().freeze(),P={}.hasOwnProperty;function _(e,n){return"function"==typeof e&&e.prototype&&(function(e){let n;for(n in e)if(P.call(e,n))return!0;return!1}(e.prototype)||n in e.prototype)}function T(e,n){if("function"!=typeof n)throw new TypeError("Cannot `"+e+"` without `Parser`")}function I(e,n){if("function"!=typeof n)throw new TypeError("Cannot `"+e+"` without `Compiler`")}function O(e,n){if(n)throw new Error("Cannot call `"+e+"` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.")}function L(e){if(!B(e)||"string"!=typeof e.type)throw new TypeError("Expected node, got `"+e+"`")}function D(e,n,t){if(!t)throw new Error("`"+e+"` finished async. Use `"+n+"` instead")}function z(e){return function(e){return Boolean(e&&"object"==typeof e&&"message"in e&&"messages"in e)}(e)?e:new A(e)}function N(e,n){return e&&"object"==typeof e&&(e.value||(n?e.alt:"")||"children"in e&&R(e.children,n)||Array.isArray(e)&&R(e,n))||""}function R(e,n){for(var t=[],r=-1;++r<e.length;)t[r]=N(e[r],n);return t.join("")}function M(e,n,t,r){const o=e.length;let l,a=0;if(n=n<0?-n>o?0:o+n:n>o?o:n,t=t>0?t:0,r.length<1e4)l=Array.from(r),l.unshift(n,t),[].splice.apply(e,l);else for(t&&[].splice.apply(e,[n,t]);a<r.length;)l=r.slice(a,a+1e4),l.unshift(n,0),[].splice.apply(e,l),a+=1e4,n+=1e4}function j(e,n){return e.length>0?(M(e,e.length,0,n),e):n}const $={}.hasOwnProperty;function H(e,n){let t;for(t in n){const r=($.call(e,t)?e[t]:void 0)||(e[t]={}),o=n[t];let l;for(l in o){$.call(r,l)||(r[l]=[]);const e=o[l];V(r[l],Array.isArray(e)?e:e?[e]:[])}}}function V(e,n){let t=-1;const r=[];for(;++t<n.length;)("after"===n[t].add?e:r).push(n[t]);M(e,0,0,r)}const q=re(/[A-Za-z]/),W=re(/\d/),Q=re(/[\dA-Fa-f]/),K=re(/[\dA-Za-z]/),Y=re(/[!-/:-@[-`{-~]/),G=re(/[#-'*+\--9=?A-Z^-~]/);function X(e){return null!==e&&(e<32||127===e)}function Z(e){return null!==e&&(e<0||32===e)}function J(e){return null!==e&&e<-2}function ee(e){return-2===e||-1===e||32===e}const ne=re(/\s/),te=re(/[!-/:-@[-`{-~\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/);function re(e){return function(n){return null!==n&&e.test(String.fromCharCode(n))}}function oe(e,n,t,r){const o=r?r-1:Number.POSITIVE_INFINITY;let l=0;return function(r){return ee(r)?(e.enter(t),a(r)):n(r)};function a(r){return ee(r)&&l++<o?(e.consume(r),a):(e.exit(t),n(r))}}const le={tokenize:function(e){const n=e.attempt(this.parser.constructs.contentInitial,(function(t){if(null!==t)return e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),oe(e,n,"linePrefix");e.consume(t)}),(function(n){return e.enter("paragraph"),r(n)}));let t;return n;function r(n){const r=e.enter("chunkText",{contentType:"text",previous:t});return t&&(t.next=r),t=r,o(n)}function o(n){return null===n?(e.exit("chunkText"),e.exit("paragraph"),void e.consume(n)):J(n)?(e.consume(n),e.exit("chunkText"),r):(e.consume(n),o)}}},ae={tokenize:function(e){const n=this,t=[];let r,o,l,a=0;return i;function i(r){if(a<t.length){const o=t[a];return n.containerState=o[1],e.attempt(o[0].continuation,u,s)(r)}return s(r)}function u(e){if(a++,n.containerState._closeFlow){n.containerState._closeFlow=void 0,r&&v();const t=n.events.length;let o,l=t;for(;l--;)if("exit"===n.events[l][0]&&"chunkFlow"===n.events[l][1].type){o=n.events[l][1].end;break}y(a);let i=t;for(;i<n.events.length;)n.events[i][1].end=Object.assign({},o),i++;return M(n.events,l+1,0,n.events.slice(t)),n.events.length=i,s(e)}return i(e)}function s(o){if(a===t.length){if(!r)return d(o);if(r.currentConstruct&&r.currentConstruct.concrete)return h(o);n.interrupt=Boolean(r.currentConstruct)}return n.containerState={},e.check(ie,c,f)(o)}function c(e){return r&&v(),y(a),d(e)}function f(e){return n.parser.lazy[n.now().line]=a!==t.length,l=n.now().offset,h(e)}function d(t){return n.containerState={},e.attempt(ie,p,h)(t)}function p(e){return a++,t.push([n.currentConstruct,n.containerState]),d(e)}function h(t){return null===t?(r&&v(),y(0),void e.consume(t)):(r=r||n.parser.flow(n.now()),e.enter("chunkFlow",{contentType:"flow",previous:o,_tokenizer:r}),m(t))}function m(t){return null===t?(g(e.exit("chunkFlow"),!0),y(0),void e.consume(t)):J(t)?(e.consume(t),g(e.exit("chunkFlow")),a=0,n.interrupt=void 0,i):(e.consume(t),m)}function g(e,t){const i=n.sliceStream(e);if(t&&i.push(null),e.previous=o,o&&(o.next=e),o=e,r.defineSkip(e.start),r.write(i),n.parser.lazy[e.start.line]){let e=r.events.length;for(;e--;)if(r.events[e][1].start.offset<l&&(!r.events[e][1].end||r.events[e][1].end.offset>l))return;const t=n.events.length;let o,i,u=t;for(;u--;)if("exit"===n.events[u][0]&&"chunkFlow"===n.events[u][1].type){if(o){i=n.events[u][1].end;break}o=!0}for(y(a),e=t;e<n.events.length;)n.events[e][1].end=Object.assign({},i),e++;M(n.events,u+1,0,n.events.slice(t)),n.events.length=e}}function y(r){let o=t.length;for(;o-- >r;){const r=t[o];n.containerState=r[1],r[0].exit.call(n,e)}t.length=r}function v(){r.write([null]),o=void 0,r=void 0,n.containerState._closeFlow=void 0}}},ie={tokenize:function(e,n,t){return oe(e,e.attempt(this.parser.constructs.document,n,t),"linePrefix",this.parser.constructs.disable.null.includes("codeIndented")?void 0:4)}},ue={tokenize:function(e,n,t){return oe(e,(function(e){return null===e||J(e)?n(e):t(e)}),"linePrefix")},partial:!0};function se(e){const n={};let t,r,o,l,a,i,u,s=-1;for(;++s<e.length;){for(;s in n;)s=n[s];if(t=e[s],s&&"chunkFlow"===t[1].type&&"listItemPrefix"===e[s-1][1].type&&(i=t[1]._tokenizer.events,o=0,o<i.length&&"lineEndingBlank"===i[o][1].type&&(o+=2),o<i.length&&"content"===i[o][1].type))for(;++o<i.length&&"content"!==i[o][1].type;)"chunkText"===i[o][1].type&&(i[o][1]._isInFirstContentOfListItem=!0,o++);if("enter"===t[0])t[1].contentType&&(Object.assign(n,ce(e,s)),s=n[s],u=!0);else if(t[1]._container){for(o=s,r=void 0;o--&&(l=e[o],"lineEnding"===l[1].type||"lineEndingBlank"===l[1].type);)"enter"===l[0]&&(r&&(e[r][1].type="lineEndingBlank"),l[1].type="lineEnding",r=o);r&&(t[1].end=Object.assign({},e[r][1].start),a=e.slice(r,s),a.unshift(t),M(e,r,s-r+1,a))}}return!u}function ce(e,n){const t=e[n][1],r=e[n][2];let o=n-1;const l=[],a=t._tokenizer||r.parser[t.contentType](t.start),i=a.events,u=[],s={};let c,f,d=-1,p=t,h=0,m=0;const g=[m];for(;p;){for(;e[++o][1]!==p;);l.push(o),p._tokenizer||(c=r.sliceStream(p),p.next||c.push(null),f&&a.defineSkip(p.start),p._isInFirstContentOfListItem&&(a._gfmTasklistFirstContentOfListItem=!0),a.write(c),p._isInFirstContentOfListItem&&(a._gfmTasklistFirstContentOfListItem=void 0)),f=p,p=p.next}for(p=t;++d<i.length;)"exit"===i[d][0]&&"enter"===i[d-1][0]&&i[d][1].type===i[d-1][1].type&&i[d][1].start.line!==i[d][1].end.line&&(m=d+1,g.push(m),p._tokenizer=void 0,p.previous=void 0,p=p.next);for(a.events=[],p?(p._tokenizer=void 0,p.previous=void 0):g.pop(),d=g.length;d--;){const n=i.slice(g[d],g[d+1]),t=l.pop();u.unshift([t,t+n.length-1]),M(e,t,2,n)}for(d=-1;++d<u.length;)s[h+u[d][0]]=h+u[d][1],h+=u[d][1]-u[d][0]-1;return s}const fe={tokenize:function(e,n){let t;return function(n){return e.enter("content"),t=e.enter("chunkContent",{contentType:"content"}),r(n)};function r(n){return null===n?o(n):J(n)?e.check(de,l,o)(n):(e.consume(n),r)}function o(t){return e.exit("chunkContent"),e.exit("content"),n(t)}function l(n){return e.consume(n),e.exit("chunkContent"),t.next=e.enter("chunkContent",{contentType:"content",previous:t}),t=t.next,r}},resolve:function(e){return se(e),e}},de={tokenize:function(e,n,t){const r=this;return function(n){return e.exit("chunkContent"),e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),oe(e,o,"linePrefix")};function o(o){if(null===o||J(o))return t(o);const l=r.events[r.events.length-1];return!r.parser.constructs.disable.null.includes("codeIndented")&&l&&"linePrefix"===l[1].type&&l[2].sliceSerialize(l[1],!0).length>=4?n(o):e.interrupt(r.parser.constructs.flow,t,n)(o)}},partial:!0},pe={tokenize:function(e){const n=this,t=e.attempt(ue,(function(r){if(null!==r)return e.enter("lineEndingBlank"),e.consume(r),e.exit("lineEndingBlank"),n.currentConstruct=void 0,t;e.consume(r)}),e.attempt(this.parser.constructs.flowInitial,r,oe(e,e.attempt(this.parser.constructs.flow,r,e.attempt(fe,r)),"linePrefix")));return t;function r(r){if(null!==r)return e.enter("lineEnding"),e.consume(r),e.exit("lineEnding"),n.currentConstruct=void 0,t;e.consume(r)}}},he={resolveAll:ve()},me=ye("string"),ge=ye("text");function ye(e){return{tokenize:function(n){const t=this,r=this.parser.constructs[e],o=n.attempt(r,l,a);return l;function l(e){return u(e)?o(e):a(e)}function a(e){if(null!==e)return n.enter("data"),n.consume(e),i;n.consume(e)}function i(e){return u(e)?(n.exit("data"),o(e)):(n.consume(e),i)}function u(e){if(null===e)return!0;const n=r[e];let o=-1;if(n)for(;++o<n.length;){const e=n[o];if(!e.previous||e.previous.call(t,t.previous))return!0}return!1}},resolveAll:ve("text"===e?be:void 0)}}function ve(e){return function(n,t){let r,o=-1;for(;++o<=n.length;)void 0===r?n[o]&&"data"===n[o][1].type&&(r=o,o++):n[o]&&"data"===n[o][1].type||(o!==r+2&&(n[r][1].end=n[o-1][1].end,n.splice(r+2,o-r-2),o=r+2),r=void 0);return e?e(n,t):n}}function be(e,n){let t=-1;for(;++t<=e.length;)if((t===e.length||"lineEnding"===e[t][1].type)&&"data"===e[t-1][1].type){const r=e[t-1][1],o=n.sliceStream(r);let l,a=o.length,i=-1,u=0;for(;a--;){const e=o[a];if("string"==typeof e){for(i=e.length;32===e.charCodeAt(i-1);)u++,i--;if(i)break;i=-1}else if(-2===e)l=!0,u++;else if(-1!==e){a++;break}}if(u){const o={type:t===e.length||l||u<2?"lineSuffix":"hardBreakTrailing",start:{line:r.end.line,column:r.end.column-u,offset:r.end.offset-u,_index:r.start._index+a,_bufferIndex:a?i:r.start._bufferIndex+i},end:Object.assign({},r.end)};r.end=Object.assign({},o.start),r.start.offset===r.end.offset?Object.assign(r,o):(e.splice(t,0,["enter",o,n],["exit",o,n]),t+=2)}t++}return e}function we(e,n,t){const r=[];let o=-1;for(;++o<e.length;){const l=e[o].resolveAll;l&&!r.includes(l)&&(n=l(n,t),r.push(l))}return n}function ke(e,n,t){let r=Object.assign(t?Object.assign({},t):{line:1,column:1,offset:0},{_index:0,_bufferIndex:-1});const o={},l=[];let a=[],i=[],u=!0;const s={consume:function(e){J(e)?(r.line++,r.column=1,r.offset+=-3===e?2:1,b()):-1!==e&&(r.column++,r.offset++),r._bufferIndex<0?r._index++:(r._bufferIndex++,r._bufferIndex===a[r._index].length&&(r._bufferIndex=-1,r._index++)),c.previous=e,u=!0},enter:function(e,n){const t=n||{};return t.type=e,t.start=h(),c.events.push(["enter",t,c]),i.push(t),t},exit:function(e){const n=i.pop();return n.end=h(),c.events.push(["exit",n,c]),n},attempt:y((function(e,n){v(e,n.from)})),check:y(g),interrupt:y(g,{interrupt:!0})},c={previous:null,code:null,containerState:{},events:[],parser:e,sliceStream:p,sliceSerialize:function(e,n){return function(e,n){let t=-1;const r=[];let o;for(;++t<e.length;){const l=e[t];let a;if("string"==typeof l)a=l;else switch(l){case-5:a="\r";break;case-4:a="\n";break;case-3:a="\r\n";break;case-2:a=n?" ":"\t";break;case-1:if(!n&&o)continue;a=" ";break;default:a=String.fromCharCode(l)}o=-2===l,r.push(a)}return r.join("")}(p(e),n)},now:h,defineSkip:function(e){o[e.line]=e.column,b()},write:function(e){return a=j(a,e),function(){let e;for(;r._index<a.length;){const n=a[r._index];if("string"==typeof n)for(e=r._index,r._bufferIndex<0&&(r._bufferIndex=0);r._index===e&&r._bufferIndex<n.length;)m(n.charCodeAt(r._bufferIndex));else m(n)}}(),null!==a[a.length-1]?[]:(v(n,0),c.events=we(l,c.events,c),c.events)}};let f,d=n.tokenize.call(c,s);return n.resolveAll&&l.push(n),c;function p(e){return function(e,n){const t=n.start._index,r=n.start._bufferIndex,o=n.end._index,l=n.end._bufferIndex;let a;return t===o?a=[e[t].slice(r,l)]:(a=e.slice(t,o),r>-1&&(a[0]=a[0].slice(r)),l>0&&a.push(e[o].slice(0,l))),a}(a,e)}function h(){return Object.assign({},r)}function m(e){u=void 0,f=e,d=d(e)}function g(e,n){n.restore()}function y(e,n){return function(t,o,l){let a,f,d,p;return Array.isArray(t)?g(t):"tokenize"in t?g([t]):(m=t,function(e){const n=null!==e&&m[e],t=null!==e&&m.null;return g([...Array.isArray(n)?n:n?[n]:[],...Array.isArray(t)?t:t?[t]:[]])(e)});var m;function g(e){return a=e,f=0,0===e.length?l:y(e[f])}function y(e){return function(t){return p=function(){const e=h(),n=c.previous,t=c.currentConstruct,o=c.events.length,l=Array.from(i);return{restore:function(){r=e,c.previous=n,c.currentConstruct=t,c.events.length=o,i=l,b()},from:o}}(),d=e,e.partial||(c.currentConstruct=e),e.name&&c.parser.constructs.disable.null.includes(e.name)?w():e.tokenize.call(n?Object.assign(Object.create(c),n):c,s,v,w)(t)}}function v(n){return u=!0,e(d,p),o}function w(e){return u=!0,p.restore(),++f<a.length?y(a[f]):l}}}function v(e,n){e.resolveAll&&!l.includes(e)&&l.push(e),e.resolve&&M(c.events,n,c.events.length-n,e.resolve(c.events.slice(n),c)),e.resolveTo&&(c.events=e.resolveTo(c.events,c))}function b(){r.line in o&&r.column<2&&(r.column=o[r.line],r.offset+=o[r.line]-1)}}const Ae={name:"thematicBreak",tokenize:function(e,n,t){let r,o=0;return function(n){return e.enter("thematicBreak"),r=n,l(n)};function l(i){return i===r?(e.enter("thematicBreakSequence"),a(i)):ee(i)?oe(e,l,"whitespace")(i):o<3||null!==i&&!J(i)?t(i):(e.exit("thematicBreak"),n(i))}function a(n){return n===r?(e.consume(n),o++,a):(e.exit("thematicBreakSequence"),l(n))}}},xe={name:"list",tokenize:function(e,n,t){const r=this,o=r.events[r.events.length-1];let l=o&&"linePrefix"===o[1].type?o[2].sliceSerialize(o[1],!0).length:0,a=0;return function(n){const o=r.containerState.type||(42===n||43===n||45===n?"listUnordered":"listOrdered");if("listUnordered"===o?!r.containerState.marker||n===r.containerState.marker:W(n)){if(r.containerState.type||(r.containerState.type=o,e.enter(o,{_container:!0})),"listUnordered"===o)return e.enter("listItemPrefix"),42===n||45===n?e.check(Ae,t,u)(n):u(n);if(!r.interrupt||49===n)return e.enter("listItemPrefix"),e.enter("listItemValue"),i(n)}return t(n)};function i(n){return W(n)&&++a<10?(e.consume(n),i):(!r.interrupt||a<2)&&(r.containerState.marker?n===r.containerState.marker:41===n||46===n)?(e.exit("listItemValue"),u(n)):t(n)}function u(n){return e.enter("listItemMarker"),e.consume(n),e.exit("listItemMarker"),r.containerState.marker=r.containerState.marker||n,e.check(ue,r.interrupt?t:s,e.attempt(Ce,f,c))}function s(e){return r.containerState.initialBlankLine=!0,l++,f(e)}function c(n){return ee(n)?(e.enter("listItemPrefixWhitespace"),e.consume(n),e.exit("listItemPrefixWhitespace"),f):t(n)}function f(t){return r.containerState.size=l+r.sliceSerialize(e.exit("listItemPrefix"),!0).length,n(t)}},continuation:{tokenize:function(e,n,t){const r=this;return r.containerState._closeFlow=void 0,e.check(ue,(function(t){return r.containerState.furtherBlankLines=r.containerState.furtherBlankLines||r.containerState.initialBlankLine,oe(e,n,"listItemIndent",r.containerState.size+1)(t)}),(function(t){return r.containerState.furtherBlankLines||!ee(t)?(r.containerState.furtherBlankLines=void 0,r.containerState.initialBlankLine=void 0,o(t)):(r.containerState.furtherBlankLines=void 0,r.containerState.initialBlankLine=void 0,e.attempt(Se,n,o)(t))}));function o(o){return r.containerState._closeFlow=!0,r.interrupt=void 0,oe(e,e.attempt(xe,n,t),"linePrefix",r.parser.constructs.disable.null.includes("codeIndented")?void 0:4)(o)}}},exit:function(e){e.exit(this.containerState.type)}},Ce={tokenize:function(e,n,t){const r=this;return oe(e,(function(e){const o=r.events[r.events.length-1];return!ee(e)&&o&&"listItemPrefixWhitespace"===o[1].type?n(e):t(e)}),"listItemPrefixWhitespace",r.parser.constructs.disable.null.includes("codeIndented")?void 0:5)},partial:!0},Se={tokenize:function(e,n,t){const r=this;return oe(e,(function(e){const o=r.events[r.events.length-1];return o&&"listItemIndent"===o[1].type&&o[2].sliceSerialize(o[1],!0).length===r.containerState.size?n(e):t(e)}),"listItemIndent",r.containerState.size+1)},partial:!0},Ee={name:"blockQuote",tokenize:function(e,n,t){const r=this;return function(n){if(62===n){const t=r.containerState;return t.open||(e.enter("blockQuote",{_container:!0}),t.open=!0),e.enter("blockQuotePrefix"),e.enter("blockQuoteMarker"),e.consume(n),e.exit("blockQuoteMarker"),o}return t(n)};function o(t){return ee(t)?(e.enter("blockQuotePrefixWhitespace"),e.consume(t),e.exit("blockQuotePrefixWhitespace"),e.exit("blockQuotePrefix"),n):(e.exit("blockQuotePrefix"),n(t))}},continuation:{tokenize:function(e,n,t){return oe(e,e.attempt(Ee,n,t),"linePrefix",this.parser.constructs.disable.null.includes("codeIndented")?void 0:4)}},exit:function(e){e.exit("blockQuote")}};function Fe(e,n,t,r,o,l,a,i,u){const s=u||Number.POSITIVE_INFINITY;let c=0;return function(n){return 60===n?(e.enter(r),e.enter(o),e.enter(l),e.consume(n),e.exit(l),f):null===n||41===n||X(n)?t(n):(e.enter(r),e.enter(a),e.enter(i),e.enter("chunkString",{contentType:"string"}),h(n))};function f(t){return 62===t?(e.enter(l),e.consume(t),e.exit(l),e.exit(o),e.exit(r),n):(e.enter(i),e.enter("chunkString",{contentType:"string"}),d(t))}function d(n){return 62===n?(e.exit("chunkString"),e.exit(i),f(n)):null===n||60===n||J(n)?t(n):(e.consume(n),92===n?p:d)}function p(n){return 60===n||62===n||92===n?(e.consume(n),d):d(n)}function h(o){return 40===o?++c>s?t(o):(e.consume(o),h):41===o?c--?(e.consume(o),h):(e.exit("chunkString"),e.exit(i),e.exit(a),e.exit(r),n(o)):null===o||Z(o)?c?t(o):(e.exit("chunkString"),e.exit(i),e.exit(a),e.exit(r),n(o)):X(o)?t(o):(e.consume(o),92===o?m:h)}function m(n){return 40===n||41===n||92===n?(e.consume(n),h):h(n)}}function Be(e,n,t,r,o,l){const a=this;let i,u=0;return function(n){return e.enter(r),e.enter(o),e.consume(n),e.exit(o),e.enter(l),s};function s(f){return null===f||91===f||93===f&&!i||94===f&&!u&&"_hiddenFootnoteSupport"in a.parser.constructs||u>999?t(f):93===f?(e.exit(l),e.enter(o),e.consume(f),e.exit(o),e.exit(r),n):J(f)?(e.enter("lineEnding"),e.consume(f),e.exit("lineEnding"),s):(e.enter("chunkString",{contentType:"string"}),c(f))}function c(n){return null===n||91===n||93===n||J(n)||u++>999?(e.exit("chunkString"),s(n)):(e.consume(n),i=i||!ee(n),92===n?f:c)}function f(n){return 91===n||92===n||93===n?(e.consume(n),u++,c):c(n)}}function Ue(e,n,t,r,o,l){let a;return function(n){return e.enter(r),e.enter(o),e.consume(n),e.exit(o),a=40===n?41:n,i};function i(t){return t===a?(e.enter(o),e.consume(t),e.exit(o),e.exit(r),n):(e.enter(l),u(t))}function u(n){return n===a?(e.exit(l),i(a)):null===n?t(n):J(n)?(e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),oe(e,u,"linePrefix")):(e.enter("chunkString",{contentType:"string"}),s(n))}function s(n){return n===a||null===n||J(n)?(e.exit("chunkString"),u(n)):(e.consume(n),92===n?c:s)}function c(n){return n===a||92===n?(e.consume(n),s):s(n)}}function Pe(e,n){let t;return function r(o){return J(o)?(e.enter("lineEnding"),e.consume(o),e.exit("lineEnding"),t=!0,r):ee(o)?oe(e,r,t?"linePrefix":"lineSuffix")(o):n(o)}}function _e(e){return e.replace(/[\t\n\r ]+/g," ").replace(/^ | $/g,"").toLowerCase().toUpperCase()}const Te={name:"definition",tokenize:function(e,n,t){const r=this;let o;return function(n){return e.enter("definition"),Be.call(r,e,l,t,"definitionLabel","definitionLabelMarker","definitionLabelString")(n)};function l(n){return o=_e(r.sliceSerialize(r.events[r.events.length-1][1]).slice(1,-1)),58===n?(e.enter("definitionMarker"),e.consume(n),e.exit("definitionMarker"),Pe(e,Fe(e,e.attempt(Ie,oe(e,a,"whitespace"),oe(e,a,"whitespace")),t,"definitionDestination","definitionDestinationLiteral","definitionDestinationLiteralMarker","definitionDestinationRaw","definitionDestinationString"))):t(n)}function a(l){return null===l||J(l)?(e.exit("definition"),r.parser.defined.includes(o)||r.parser.defined.push(o),n(l)):t(l)}}},Ie={tokenize:function(e,n,t){return function(n){return Z(n)?Pe(e,r)(n):t(n)};function r(n){return 34===n||39===n||40===n?Ue(e,oe(e,o,"whitespace"),t,"definitionTitle","definitionTitleMarker","definitionTitleString")(n):t(n)}function o(e){return null===e||J(e)?n(e):t(e)}},partial:!0},Oe={name:"codeIndented",tokenize:function(e,n,t){const r=this;return function(n){return e.enter("codeIndented"),oe(e,o,"linePrefix",5)(n)};function o(e){const n=r.events[r.events.length-1];return n&&"linePrefix"===n[1].type&&n[2].sliceSerialize(n[1],!0).length>=4?l(e):t(e)}function l(n){return null===n?i(n):J(n)?e.attempt(Le,l,i)(n):(e.enter("codeFlowValue"),a(n))}function a(n){return null===n||J(n)?(e.exit("codeFlowValue"),l(n)):(e.consume(n),a)}function i(t){return e.exit("codeIndented"),n(t)}}},Le={tokenize:function(e,n,t){const r=this;return o;function o(n){return r.parser.lazy[r.now().line]?t(n):J(n)?(e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),o):oe(e,l,"linePrefix",5)(n)}function l(e){const l=r.events[r.events.length-1];return l&&"linePrefix"===l[1].type&&l[2].sliceSerialize(l[1],!0).length>=4?n(e):J(e)?o(e):t(e)}},partial:!0},De={name:"headingAtx",tokenize:function(e,n,t){const r=this;let o=0;return function(n){return e.enter("atxHeading"),e.enter("atxHeadingSequence"),l(n)};function l(i){return 35===i&&o++<6?(e.consume(i),l):null===i||Z(i)?(e.exit("atxHeadingSequence"),r.interrupt?n(i):a(i)):t(i)}function a(t){return 35===t?(e.enter("atxHeadingSequence"),i(t)):null===t||J(t)?(e.exit("atxHeading"),n(t)):ee(t)?oe(e,a,"whitespace")(t):(e.enter("atxHeadingText"),u(t))}function i(n){return 35===n?(e.consume(n),i):(e.exit("atxHeadingSequence"),a(n))}function u(n){return null===n||35===n||Z(n)?(e.exit("atxHeadingText"),a(n)):(e.consume(n),u)}},resolve:function(e,n){let t,r,o=e.length-2,l=3;return"whitespace"===e[l][1].type&&(l+=2),o-2>l&&"whitespace"===e[o][1].type&&(o-=2),"atxHeadingSequence"===e[o][1].type&&(l===o-1||o-4>l&&"whitespace"===e[o-2][1].type)&&(o-=l+1===o?2:4),o>l&&(t={type:"atxHeadingText",start:e[l][1].start,end:e[o][1].end},r={type:"chunkText",start:e[l][1].start,end:e[o][1].end,contentType:"text"},M(e,l,o-l+1,[["enter",t,n],["enter",r,n],["exit",r,n],["exit",t,n]])),e}},ze={name:"setextUnderline",tokenize:function(e,n,t){const r=this;let o,l,a=r.events.length;for(;a--;)if("lineEnding"!==r.events[a][1].type&&"linePrefix"!==r.events[a][1].type&&"content"!==r.events[a][1].type){l="paragraph"===r.events[a][1].type;break}return function(n){return r.parser.lazy[r.now().line]||!r.interrupt&&!l?t(n):(e.enter("setextHeadingLine"),e.enter("setextHeadingLineSequence"),o=n,i(n))};function i(n){return n===o?(e.consume(n),i):(e.exit("setextHeadingLineSequence"),oe(e,u,"lineSuffix")(n))}function u(r){return null===r||J(r)?(e.exit("setextHeadingLine"),n(r)):t(r)}},resolveTo:function(e,n){let t,r,o,l=e.length;for(;l--;)if("enter"===e[l][0]){if("content"===e[l][1].type){t=l;break}"paragraph"===e[l][1].type&&(r=l)}else"content"===e[l][1].type&&e.splice(l,1),o||"definition"!==e[l][1].type||(o=l);const a={type:"setextHeading",start:Object.assign({},e[r][1].start),end:Object.assign({},e[e.length-1][1].end)};return e[r][1].type="setextHeadingText",o?(e.splice(r,0,["enter",a,n]),e.splice(o+1,0,["exit",e[t][1],n]),e[t][1].end=Object.assign({},e[o][1].end)):e[t][1]=a,e.push(["exit",a,n]),e}},Ne=["address","article","aside","base","basefont","blockquote","body","caption","center","col","colgroup","dd","details","dialog","dir","div","dl","dt","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hr","html","iframe","legend","li","link","main","menu","menuitem","nav","noframes","ol","optgroup","option","p","param","section","source","summary","table","tbody","td","tfoot","th","thead","title","tr","track","ul"],Re=["pre","script","style","textarea"],Me={name:"htmlFlow",tokenize:function(e,n,t){const r=this;let o,l,a,i,u;return function(n){return e.enter("htmlFlow"),e.enter("htmlFlowData"),e.consume(n),s};function s(i){return 33===i?(e.consume(i),c):47===i?(e.consume(i),p):63===i?(e.consume(i),o=3,r.interrupt?n:O):q(i)?(e.consume(i),a=String.fromCharCode(i),l=!0,h):t(i)}function c(l){return 45===l?(e.consume(l),o=2,f):91===l?(e.consume(l),o=5,a="CDATA[",i=0,d):q(l)?(e.consume(l),o=4,r.interrupt?n:O):t(l)}function f(o){return 45===o?(e.consume(o),r.interrupt?n:O):t(o)}function d(o){return o===a.charCodeAt(i++)?(e.consume(o),i===a.length?r.interrupt?n:E:d):t(o)}function p(n){return q(n)?(e.consume(n),a=String.fromCharCode(n),h):t(n)}function h(i){return null===i||47===i||62===i||Z(i)?47!==i&&l&&Re.includes(a.toLowerCase())?(o=1,r.interrupt?n(i):E(i)):Ne.includes(a.toLowerCase())?(o=6,47===i?(e.consume(i),m):r.interrupt?n(i):E(i)):(o=7,r.interrupt&&!r.parser.lazy[r.now().line]?t(i):l?y(i):g(i)):45===i||K(i)?(e.consume(i),a+=String.fromCharCode(i),h):t(i)}function m(o){return 62===o?(e.consume(o),r.interrupt?n:E):t(o)}function g(n){return ee(n)?(e.consume(n),g):C(n)}function y(n){return 47===n?(e.consume(n),C):58===n||95===n||q(n)?(e.consume(n),v):ee(n)?(e.consume(n),y):C(n)}function v(n){return 45===n||46===n||58===n||95===n||K(n)?(e.consume(n),v):b(n)}function b(n){return 61===n?(e.consume(n),w):ee(n)?(e.consume(n),b):y(n)}function w(n){return null===n||60===n||61===n||62===n||96===n?t(n):34===n||39===n?(e.consume(n),u=n,k):ee(n)?(e.consume(n),w):(u=null,A(n))}function k(n){return null===n||J(n)?t(n):n===u?(e.consume(n),x):(e.consume(n),k)}function A(n){return null===n||34===n||39===n||60===n||61===n||62===n||96===n||Z(n)?b(n):(e.consume(n),A)}function x(e){return 47===e||62===e||ee(e)?y(e):t(e)}function C(n){return 62===n?(e.consume(n),S):t(n)}function S(n){return ee(n)?(e.consume(n),S):null===n||J(n)?E(n):t(n)}function E(n){return 45===n&&2===o?(e.consume(n),P):60===n&&1===o?(e.consume(n),_):62===n&&4===o?(e.consume(n),L):63===n&&3===o?(e.consume(n),O):93===n&&5===o?(e.consume(n),I):!J(n)||6!==o&&7!==o?null===n||J(n)?F(n):(e.consume(n),E):e.check(je,L,F)(n)}function F(n){return e.exit("htmlFlowData"),B(n)}function B(n){return null===n?D(n):J(n)?e.attempt({tokenize:U,partial:!0},B,D)(n):(e.enter("htmlFlowData"),E(n))}function U(e,n,t){return function(n){return e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),o};function o(e){return r.parser.lazy[r.now().line]?t(e):n(e)}}function P(n){return 45===n?(e.consume(n),O):E(n)}function _(n){return 47===n?(e.consume(n),a="",T):E(n)}function T(n){return 62===n&&Re.includes(a.toLowerCase())?(e.consume(n),L):q(n)&&a.length<8?(e.consume(n),a+=String.fromCharCode(n),T):E(n)}function I(n){return 93===n?(e.consume(n),O):E(n)}function O(n){return 62===n?(e.consume(n),L):E(n)}function L(n){return null===n||J(n)?(e.exit("htmlFlowData"),D(n)):(e.consume(n),L)}function D(t){return e.exit("htmlFlow"),n(t)}},resolveTo:function(e){let n=e.length;for(;n--&&("enter"!==e[n][0]||"htmlFlow"!==e[n][1].type););return n>1&&"linePrefix"===e[n-2][1].type&&(e[n][1].start=e[n-2][1].start,e[n+1][1].start=e[n-2][1].start,e.splice(n-2,2)),e},concrete:!0},je={tokenize:function(e,n,t){return function(r){return e.exit("htmlFlowData"),e.enter("lineEndingBlank"),e.consume(r),e.exit("lineEndingBlank"),e.attempt(ue,n,t)}},partial:!0},$e={name:"codeFenced",tokenize:function(e,n,t){const r=this,o={tokenize:function(e,n,t){let r=0;return oe(e,(function(n){return e.enter("codeFencedFence"),e.enter("codeFencedFenceSequence"),o(n)}),"linePrefix",this.parser.constructs.disable.null.includes("codeIndented")?void 0:4);function o(n){return n===u?(e.consume(n),r++,o):r<s?t(n):(e.exit("codeFencedFenceSequence"),oe(e,l,"whitespace")(n))}function l(r){return null===r||J(r)?(e.exit("codeFencedFence"),n(r)):t(r)}},partial:!0},l={tokenize:function(e,n,t){const r=this;return function(n){return e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),o};function o(e){return r.parser.lazy[r.now().line]?t(e):n(e)}},partial:!0},a=this.events[this.events.length-1],i=a&&"linePrefix"===a[1].type?a[2].sliceSerialize(a[1],!0).length:0;let u,s=0;return function(n){return e.enter("codeFenced"),e.enter("codeFencedFence"),e.enter("codeFencedFenceSequence"),u=n,c(n)};function c(n){return n===u?(e.consume(n),s++,c):(e.exit("codeFencedFenceSequence"),s<3?t(n):oe(e,f,"whitespace")(n))}function f(n){return null===n||J(n)?m(n):(e.enter("codeFencedFenceInfo"),e.enter("chunkString",{contentType:"string"}),d(n))}function d(n){return null===n||Z(n)?(e.exit("chunkString"),e.exit("codeFencedFenceInfo"),oe(e,p,"whitespace")(n)):96===n&&n===u?t(n):(e.consume(n),d)}function p(n){return null===n||J(n)?m(n):(e.enter("codeFencedFenceMeta"),e.enter("chunkString",{contentType:"string"}),h(n))}function h(n){return null===n||J(n)?(e.exit("chunkString"),e.exit("codeFencedFenceMeta"),m(n)):96===n&&n===u?t(n):(e.consume(n),h)}function m(t){return e.exit("codeFencedFence"),r.interrupt?n(t):g(t)}function g(n){return null===n?v(n):J(n)?e.attempt(l,e.attempt(o,v,i?oe(e,g,"linePrefix",i+1):g),v)(n):(e.enter("codeFlowValue"),y(n))}function y(n){return null===n||J(n)?(e.exit("codeFlowValue"),g(n)):(e.consume(n),y)}function v(t){return e.exit("codeFenced"),n(t)}},concrete:!0};var He,Ve=59;function qe(e){var n,t="&"+e+";";return(He=He||document.createElement("i")).innerHTML=t,((n=He.textContent).charCodeAt(n.length-1)!==Ve||"semi"===e)&&n!==t&&n}const We={name:"characterReference",tokenize:function(e,n,t){const r=this;let o,l,a=0;return function(n){return e.enter("characterReference"),e.enter("characterReferenceMarker"),e.consume(n),e.exit("characterReferenceMarker"),i};function i(n){return 35===n?(e.enter("characterReferenceMarkerNumeric"),e.consume(n),e.exit("characterReferenceMarkerNumeric"),u):(e.enter("characterReferenceValue"),o=31,l=K,s(n))}function u(n){return 88===n||120===n?(e.enter("characterReferenceMarkerHexadecimal"),e.consume(n),e.exit("characterReferenceMarkerHexadecimal"),e.enter("characterReferenceValue"),o=6,l=Q,s):(e.enter("characterReferenceValue"),o=7,l=W,s(n))}function s(i){let u;return 59===i&&a?(u=e.exit("characterReferenceValue"),l!==K||qe(r.sliceSerialize(u))?(e.enter("characterReferenceMarker"),e.consume(i),e.exit("characterReferenceMarker"),e.exit("characterReference"),n):t(i)):l(i)&&a++<o?(e.consume(i),s):t(i)}}},Qe={name:"characterEscape",tokenize:function(e,n,t){return function(n){return e.enter("characterEscape"),e.enter("escapeMarker"),e.consume(n),e.exit("escapeMarker"),r};function r(r){return Y(r)?(e.enter("characterEscapeValue"),e.consume(r),e.exit("characterEscapeValue"),e.exit("characterEscape"),n):t(r)}}},Ke={name:"lineEnding",tokenize:function(e,n){return function(t){return e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),oe(e,n,"linePrefix")}}},Ye={name:"labelEnd",tokenize:function(e,n,t){const r=this;let o,l,a=r.events.length;for(;a--;)if(("labelImage"===r.events[a][1].type||"labelLink"===r.events[a][1].type)&&!r.events[a][1]._balanced){o=r.events[a][1];break}return function(n){return o?o._inactive?u(n):(l=r.parser.defined.includes(_e(r.sliceSerialize({start:o.end,end:r.now()}))),e.enter("labelEnd"),e.enter("labelMarker"),e.consume(n),e.exit("labelMarker"),e.exit("labelEnd"),i):t(n)};function i(t){return 40===t?e.attempt(Ge,n,l?n:u)(t):91===t?e.attempt(Xe,n,l?e.attempt(Ze,n,u):u)(t):l?n(t):u(t)}function u(e){return o._balanced=!0,t(e)}},resolveTo:function(e,n){let t,r,o,l,a=e.length,i=0;for(;a--;)if(t=e[a][1],r){if("link"===t.type||"labelLink"===t.type&&t._inactive)break;"enter"===e[a][0]&&"labelLink"===t.type&&(t._inactive=!0)}else if(o){if("enter"===e[a][0]&&("labelImage"===t.type||"labelLink"===t.type)&&!t._balanced&&(r=a,"labelLink"!==t.type)){i=2;break}}else"labelEnd"===t.type&&(o=a);const u={type:"labelLink"===e[r][1].type?"link":"image",start:Object.assign({},e[r][1].start),end:Object.assign({},e[e.length-1][1].end)},s={type:"label",start:Object.assign({},e[r][1].start),end:Object.assign({},e[o][1].end)},c={type:"labelText",start:Object.assign({},e[r+i+2][1].end),end:Object.assign({},e[o-2][1].start)};return l=[["enter",u,n],["enter",s,n]],l=j(l,e.slice(r+1,r+i+3)),l=j(l,[["enter",c,n]]),l=j(l,we(n.parser.constructs.insideSpan.null,e.slice(r+i+4,o-3),n)),l=j(l,[["exit",c,n],e[o-2],e[o-1],["exit",s,n]]),l=j(l,e.slice(o+1)),l=j(l,[["exit",u,n]]),M(e,r,e.length,l),e},resolveAll:function(e){let n,t=-1;for(;++t<e.length;)n=e[t][1],"labelImage"!==n.type&&"labelLink"!==n.type&&"labelEnd"!==n.type||(e.splice(t+1,"labelImage"===n.type?4:2),n.type="data",t++);return e}},Ge={tokenize:function(e,n,t){return function(n){return e.enter("resource"),e.enter("resourceMarker"),e.consume(n),e.exit("resourceMarker"),Pe(e,r)};function r(n){return 41===n?a(n):Fe(e,o,t,"resourceDestination","resourceDestinationLiteral","resourceDestinationLiteralMarker","resourceDestinationRaw","resourceDestinationString",3)(n)}function o(n){return Z(n)?Pe(e,l)(n):a(n)}function l(n){return 34===n||39===n||40===n?Ue(e,Pe(e,a),t,"resourceTitle","resourceTitleMarker","resourceTitleString")(n):a(n)}function a(r){return 41===r?(e.enter("resourceMarker"),e.consume(r),e.exit("resourceMarker"),e.exit("resource"),n):t(r)}}},Xe={tokenize:function(e,n,t){const r=this;return function(n){return Be.call(r,e,o,t,"reference","referenceMarker","referenceString")(n)};function o(e){return r.parser.defined.includes(_e(r.sliceSerialize(r.events[r.events.length-1][1]).slice(1,-1)))?n(e):t(e)}}},Ze={tokenize:function(e,n,t){return function(n){return e.enter("reference"),e.enter("referenceMarker"),e.consume(n),e.exit("referenceMarker"),r};function r(r){return 93===r?(e.enter("referenceMarker"),e.consume(r),e.exit("referenceMarker"),e.exit("reference"),n):t(r)}}},Je={name:"labelStartImage",tokenize:function(e,n,t){const r=this;return function(n){return e.enter("labelImage"),e.enter("labelImageMarker"),e.consume(n),e.exit("labelImageMarker"),o};function o(n){return 91===n?(e.enter("labelMarker"),e.consume(n),e.exit("labelMarker"),e.exit("labelImage"),l):t(n)}function l(e){return 94===e&&"_hiddenFootnoteSupport"in r.parser.constructs?t(e):n(e)}},resolveAll:Ye.resolveAll};function en(e){return null===e||Z(e)||ne(e)?1:te(e)?2:void 0}const nn={name:"attention",tokenize:function(e,n){const t=this.parser.constructs.attentionMarkers.null,r=this.previous,o=en(r);let l;return function(n){return e.enter("attentionSequence"),l=n,a(n)};function a(i){if(i===l)return e.consume(i),a;const u=e.exit("attentionSequence"),s=en(i),c=!s||2===s&&o||t.includes(i),f=!o||2===o&&s||t.includes(r);return u._open=Boolean(42===l?c:c&&(o||!f)),u._close=Boolean(42===l?f:f&&(s||!c)),n(i)}},resolveAll:function(e,n){let t,r,o,l,a,i,u,s,c=-1;for(;++c<e.length;)if("enter"===e[c][0]&&"attentionSequence"===e[c][1].type&&e[c][1]._close)for(t=c;t--;)if("exit"===e[t][0]&&"attentionSequence"===e[t][1].type&&e[t][1]._open&&n.sliceSerialize(e[t][1]).charCodeAt(0)===n.sliceSerialize(e[c][1]).charCodeAt(0)){if((e[t][1]._close||e[c][1]._open)&&(e[c][1].end.offset-e[c][1].start.offset)%3&&!((e[t][1].end.offset-e[t][1].start.offset+e[c][1].end.offset-e[c][1].start.offset)%3))continue;i=e[t][1].end.offset-e[t][1].start.offset>1&&e[c][1].end.offset-e[c][1].start.offset>1?2:1;const f=Object.assign({},e[t][1].end),d=Object.assign({},e[c][1].start);tn(f,-i),tn(d,i),l={type:i>1?"strongSequence":"emphasisSequence",start:f,end:Object.assign({},e[t][1].end)},a={type:i>1?"strongSequence":"emphasisSequence",start:Object.assign({},e[c][1].start),end:d},o={type:i>1?"strongText":"emphasisText",start:Object.assign({},e[t][1].end),end:Object.assign({},e[c][1].start)},r={type:i>1?"strong":"emphasis",start:Object.assign({},l.start),end:Object.assign({},a.end)},e[t][1].end=Object.assign({},l.start),e[c][1].start=Object.assign({},a.end),u=[],e[t][1].end.offset-e[t][1].start.offset&&(u=j(u,[["enter",e[t][1],n],["exit",e[t][1],n]])),u=j(u,[["enter",r,n],["enter",l,n],["exit",l,n],["enter",o,n]]),u=j(u,we(n.parser.constructs.insideSpan.null,e.slice(t+1,c),n)),u=j(u,[["exit",o,n],["enter",a,n],["exit",a,n],["exit",r,n]]),e[c][1].end.offset-e[c][1].start.offset?(s=2,u=j(u,[["enter",e[c][1],n],["exit",e[c][1],n]])):s=0,M(e,t-1,c-t+3,u),c=t+u.length-s-2;break}for(c=-1;++c<e.length;)"attentionSequence"===e[c][1].type&&(e[c][1].type="data");return e}};function tn(e,n){e.column+=n,e.offset+=n,e._bufferIndex+=n}const rn={name:"autolink",tokenize:function(e,n,t){let r=1;return function(n){return e.enter("autolink"),e.enter("autolinkMarker"),e.consume(n),e.exit("autolinkMarker"),e.enter("autolinkProtocol"),o};function o(n){return q(n)?(e.consume(n),l):G(n)?u(n):t(n)}function l(e){return 43===e||45===e||46===e||K(e)?a(e):u(e)}function a(n){return 58===n?(e.consume(n),i):(43===n||45===n||46===n||K(n))&&r++<32?(e.consume(n),a):u(n)}function i(n){return 62===n?(e.exit("autolinkProtocol"),d(n)):null===n||32===n||60===n||X(n)?t(n):(e.consume(n),i)}function u(n){return 64===n?(e.consume(n),r=0,s):G(n)?(e.consume(n),u):t(n)}function s(e){return K(e)?c(e):t(e)}function c(n){return 46===n?(e.consume(n),r=0,s):62===n?(e.exit("autolinkProtocol").type="autolinkEmail",d(n)):f(n)}function f(n){return(45===n||K(n))&&r++<63?(e.consume(n),45===n?f:c):t(n)}function d(t){return e.enter("autolinkMarker"),e.consume(t),e.exit("autolinkMarker"),e.exit("autolink"),n}}},on={name:"htmlText",tokenize:function(e,n,t){const r=this;let o,l,a,i;return function(n){return e.enter("htmlText"),e.enter("htmlTextData"),e.consume(n),u};function u(n){return 33===n?(e.consume(n),s):47===n?(e.consume(n),A):63===n?(e.consume(n),w):q(n)?(e.consume(n),S):t(n)}function s(n){return 45===n?(e.consume(n),c):91===n?(e.consume(n),l="CDATA[",a=0,m):q(n)?(e.consume(n),b):t(n)}function c(n){return 45===n?(e.consume(n),f):t(n)}function f(n){return null===n||62===n?t(n):45===n?(e.consume(n),d):p(n)}function d(e){return null===e||62===e?t(e):p(e)}function p(n){return null===n?t(n):45===n?(e.consume(n),h):J(n)?(i=p,I(n)):(e.consume(n),p)}function h(n){return 45===n?(e.consume(n),L):p(n)}function m(n){return n===l.charCodeAt(a++)?(e.consume(n),a===l.length?g:m):t(n)}function g(n){return null===n?t(n):93===n?(e.consume(n),y):J(n)?(i=g,I(n)):(e.consume(n),g)}function y(n){return 93===n?(e.consume(n),v):g(n)}function v(n){return 62===n?L(n):93===n?(e.consume(n),v):g(n)}function b(n){return null===n||62===n?L(n):J(n)?(i=b,I(n)):(e.consume(n),b)}function w(n){return null===n?t(n):63===n?(e.consume(n),k):J(n)?(i=w,I(n)):(e.consume(n),w)}function k(e){return 62===e?L(e):w(e)}function A(n){return q(n)?(e.consume(n),x):t(n)}function x(n){return 45===n||K(n)?(e.consume(n),x):C(n)}function C(n){return J(n)?(i=C,I(n)):ee(n)?(e.consume(n),C):L(n)}function S(n){return 45===n||K(n)?(e.consume(n),S):47===n||62===n||Z(n)?E(n):t(n)}function E(n){return 47===n?(e.consume(n),L):58===n||95===n||q(n)?(e.consume(n),F):J(n)?(i=E,I(n)):ee(n)?(e.consume(n),E):L(n)}function F(n){return 45===n||46===n||58===n||95===n||K(n)?(e.consume(n),F):B(n)}function B(n){return 61===n?(e.consume(n),U):J(n)?(i=B,I(n)):ee(n)?(e.consume(n),B):E(n)}function U(n){return null===n||60===n||61===n||62===n||96===n?t(n):34===n||39===n?(e.consume(n),o=n,P):J(n)?(i=U,I(n)):ee(n)?(e.consume(n),U):(e.consume(n),o=void 0,T)}function P(n){return n===o?(e.consume(n),_):null===n?t(n):J(n)?(i=P,I(n)):(e.consume(n),P)}function _(e){return 62===e||47===e||Z(e)?E(e):t(e)}function T(n){return null===n||34===n||39===n||60===n||61===n||96===n?t(n):62===n||Z(n)?E(n):(e.consume(n),T)}function I(n){return e.exit("htmlTextData"),e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),oe(e,O,"linePrefix",r.parser.constructs.disable.null.includes("codeIndented")?void 0:4)}function O(n){return e.enter("htmlTextData"),i(n)}function L(r){return 62===r?(e.consume(r),e.exit("htmlTextData"),e.exit("htmlText"),n):t(r)}}},ln={name:"labelStartLink",tokenize:function(e,n,t){const r=this;return function(n){return e.enter("labelLink"),e.enter("labelMarker"),e.consume(n),e.exit("labelMarker"),e.exit("labelLink"),o};function o(e){return 94===e&&"_hiddenFootnoteSupport"in r.parser.constructs?t(e):n(e)}},resolveAll:Ye.resolveAll},an={name:"hardBreakEscape",tokenize:function(e,n,t){return function(n){return e.enter("hardBreakEscape"),e.enter("escapeMarker"),e.consume(n),r};function r(r){return J(r)?(e.exit("escapeMarker"),e.exit("hardBreakEscape"),n(r)):t(r)}}},un={name:"codeText",tokenize:function(e,n,t){let r,o,l=0;return function(n){return e.enter("codeText"),e.enter("codeTextSequence"),a(n)};function a(n){return 96===n?(e.consume(n),l++,a):(e.exit("codeTextSequence"),i(n))}function i(n){return null===n?t(n):96===n?(o=e.enter("codeTextSequence"),r=0,s(n)):32===n?(e.enter("space"),e.consume(n),e.exit("space"),i):J(n)?(e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),i):(e.enter("codeTextData"),u(n))}function u(n){return null===n||32===n||96===n||J(n)?(e.exit("codeTextData"),i(n)):(e.consume(n),u)}function s(t){return 96===t?(e.consume(t),r++,s):r===l?(e.exit("codeTextSequence"),e.exit("codeText"),n(t)):(o.type="codeTextData",u(t))}},resolve:function(e){let n,t,r=e.length-4,o=3;if(!("lineEnding"!==e[o][1].type&&"space"!==e[o][1].type||"lineEnding"!==e[r][1].type&&"space"!==e[r][1].type))for(n=o;++n<r;)if("codeTextData"===e[n][1].type){e[o][1].type="codeTextPadding",e[r][1].type="codeTextPadding",o+=2,r-=2;break}for(n=o-1,r++;++n<=r;)void 0===t?n!==r&&"lineEnding"!==e[n][1].type&&(t=n):n!==r&&"lineEnding"!==e[n][1].type||(e[t][1].type="codeTextData",n!==t+2&&(e[t][1].end=e[n-1][1].end,e.splice(t+2,n-t-2),r-=n-t-2,n=t+2),t=void 0);return e},previous:function(e){return 96!==e||"characterEscape"===this.events[this.events.length-1][1].type}},sn={42:xe,43:xe,45:xe,48:xe,49:xe,50:xe,51:xe,52:xe,53:xe,54:xe,55:xe,56:xe,57:xe,62:Ee},cn={91:Te},fn={[-2]:Oe,[-1]:Oe,32:Oe},dn={35:De,42:Ae,45:[ze,Ae],60:Me,61:ze,95:Ae,96:$e,126:$e},pn={38:We,92:Qe},hn={[-5]:Ke,[-4]:Ke,[-3]:Ke,33:Je,38:We,42:nn,60:[rn,on],91:ln,92:[an,Qe],93:Ye,95:nn,96:un},mn={null:[nn,he]},gn={null:[42,95]},yn={null:[]};const vn=/[\0\t\n\r]/g;function bn(e,n){const t=Number.parseInt(e,n);return t<9||11===t||t>13&&t<32||t>126&&t<160||t>55295&&t<57344||t>64975&&t<65008||!(65535&~t)||65534==(65535&t)||t>1114111?"�":String.fromCharCode(t)}const wn=/\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;function kn(e,n,t){if(n)return n;if(35===t.charCodeAt(0)){const e=t.charCodeAt(1),n=120===e||88===e;return bn(t.slice(n?2:1),n?16:10)}return qe(t)||e}const An={}.hasOwnProperty,xn=function(e,n,t){return"string"!=typeof n&&(t=n,n=void 0),function(e={}){const n=Cn({transforms:[],canContainEols:["emphasis","fragment","heading","paragraph","strong"],enter:{autolink:i(A),autolinkProtocol:h,autolinkEmail:h,atxHeading:i(b),blockQuote:i((function(){return{type:"blockquote",children:[]}})),characterEscape:h,characterReference:h,codeFenced:i(v),codeFencedFenceInfo:s,codeFencedFenceMeta:s,codeIndented:i(v,s),codeText:i((function(){return{type:"inlineCode",value:""}}),s),codeTextData:h,data:h,codeFlowValue:h,definition:i((function(){return{type:"definition",identifier:"",label:null,title:null,url:""}})),definitionDestinationString:s,definitionLabelString:s,definitionTitleString:s,emphasis:i((function(){return{type:"emphasis",children:[]}})),hardBreakEscape:i(w),hardBreakTrailing:i(w),htmlFlow:i(k,s),htmlFlowData:h,htmlText:i(k,s),htmlTextData:h,image:i((function(){return{type:"image",title:null,url:"",alt:null}})),label:s,link:i(A),listItem:i((function(e){return{type:"listItem",spread:e._spread,checked:null,children:[]}})),listItemValue:function(e){l("expectingFirstListItemValue")&&(this.stack[this.stack.length-2].start=Number.parseInt(this.sliceSerialize(e),10),o("expectingFirstListItemValue"))},listOrdered:i(x,(function(){o("expectingFirstListItemValue",!0)})),listUnordered:i(x),paragraph:i((function(){return{type:"paragraph",children:[]}})),reference:function(){o("referenceType","collapsed")},referenceString:s,resourceDestinationString:s,resourceTitleString:s,setextHeading:i(b),strong:i((function(){return{type:"strong",children:[]}})),thematicBreak:i((function(){return{type:"thematicBreak"}}))},exit:{atxHeading:f(),atxHeadingSequence:function(e){const n=this.stack[this.stack.length-1];if(!n.depth){const t=this.sliceSerialize(e).length;n.depth=t}},autolink:f(),autolinkEmail:function(e){m.call(this,e),this.stack[this.stack.length-1].url="mailto:"+this.sliceSerialize(e)},autolinkProtocol:function(e){m.call(this,e),this.stack[this.stack.length-1].url=this.sliceSerialize(e)},blockQuote:f(),characterEscapeValue:m,characterReferenceMarkerHexadecimal:y,characterReferenceMarkerNumeric:y,characterReferenceValue:function(e){const n=this.sliceSerialize(e),t=l("characterReferenceType");let r;t?(r=bn(n,"characterReferenceMarkerNumeric"===t?10:16),o("characterReferenceType")):r=qe(n);const i=this.stack.pop();i.value+=r,i.position.end=a(e.end)},codeFenced:f((function(){const e=this.resume();this.stack[this.stack.length-1].value=e.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g,""),o("flowCodeInside")})),codeFencedFence:function(){l("flowCodeInside")||(this.buffer(),o("flowCodeInside",!0))},codeFencedFenceInfo:function(){const e=this.resume();this.stack[this.stack.length-1].lang=e},codeFencedFenceMeta:function(){const e=this.resume();this.stack[this.stack.length-1].meta=e},codeFlowValue:m,codeIndented:f((function(){const e=this.resume();this.stack[this.stack.length-1].value=e.replace(/(\r?\n|\r)$/g,"")})),codeText:f((function(){const e=this.resume();this.stack[this.stack.length-1].value=e})),codeTextData:m,data:m,definition:f(),definitionDestinationString:function(){const e=this.resume();this.stack[this.stack.length-1].url=e},definitionLabelString:function(e){const n=this.resume(),t=this.stack[this.stack.length-1];t.label=n,t.identifier=_e(this.sliceSerialize(e)).toLowerCase()},definitionTitleString:function(){const e=this.resume();this.stack[this.stack.length-1].title=e},emphasis:f(),hardBreakEscape:f(g),hardBreakTrailing:f(g),htmlFlow:f((function(){const e=this.resume();this.stack[this.stack.length-1].value=e})),htmlFlowData:m,htmlText:f((function(){const e=this.resume();this.stack[this.stack.length-1].value=e})),htmlTextData:m,image:f((function(){const e=this.stack[this.stack.length-1];l("inReference")?(e.type+="Reference",e.referenceType=l("referenceType")||"shortcut",delete e.url,delete e.title):(delete e.identifier,delete e.label),o("referenceType")})),label:function(){const e=this.stack[this.stack.length-1],n=this.resume(),t=this.stack[this.stack.length-1];o("inReference",!0),"link"===t.type?t.children=e.children:t.alt=n},labelText:function(e){const n=this.stack[this.stack.length-2],t=this.sliceSerialize(e);n.label=function(e){return e.replace(wn,kn)}(t),n.identifier=_e(t).toLowerCase()},lineEnding:function(e){const t=this.stack[this.stack.length-1];if(l("atHardBreak"))return t.children[t.children.length-1].position.end=a(e.end),void o("atHardBreak");!l("setextHeadingSlurpLineEnding")&&n.canContainEols.includes(t.type)&&(h.call(this,e),m.call(this,e))},link:f((function(){const e=this.stack[this.stack.length-1];l("inReference")?(e.type+="Reference",e.referenceType=l("referenceType")||"shortcut",delete e.url,delete e.title):(delete e.identifier,delete e.label),o("referenceType")})),listItem:f(),listOrdered:f(),listUnordered:f(),paragraph:f(),referenceString:function(e){const n=this.resume(),t=this.stack[this.stack.length-1];t.label=n,t.identifier=_e(this.sliceSerialize(e)).toLowerCase(),o("referenceType","full")},resourceDestinationString:function(){const e=this.resume();this.stack[this.stack.length-1].url=e},resourceTitleString:function(){const e=this.resume();this.stack[this.stack.length-1].title=e},resource:function(){o("inReference")},setextHeading:f((function(){o("setextHeadingSlurpLineEnding")})),setextHeadingLineSequence:function(e){this.stack[this.stack.length-1].depth=61===this.sliceSerialize(e).charCodeAt(0)?1:2},setextHeadingText:function(){o("setextHeadingSlurpLineEnding",!0)},strong:f(),thematicBreak:f()}},e.mdastExtensions||[]),t={};return function(e){let t={type:"root",children:[]};const i=[],f=[],h={stack:[t],tokenStack:i,config:n,enter:c,exit:d,buffer:s,resume:p,setData:o,getData:l};let m=-1;for(;++m<e.length;)"listOrdered"!==e[m][1].type&&"listUnordered"!==e[m][1].type||("enter"===e[m][0]?f.push(m):m=r(e,f.pop(),m));for(m=-1;++m<e.length;){const t=n[e[m][0]];An.call(t,e[m][1].type)&&t[e[m][1].type].call(Object.assign({sliceSerialize:e[m][2].sliceSerialize},h),e[m][1])}if(i.length>0)throw new Error("Cannot close document, a token (`"+i[i.length-1].type+"`, "+u({start:i[i.length-1].start,end:i[i.length-1].end})+") is still open");for(t.position={start:a(e.length>0?e[0][1].start:{line:1,column:1,offset:0}),end:a(e.length>0?e[e.length-2][1].end:{line:1,column:1,offset:0})},m=-1;++m<n.transforms.length;)t=n.transforms[m](t)||t;return t};function r(e,n,t){let r,o,l,a,i=n-1,u=-1,s=!1;for(;++i<=t;){const n=e[i];if("listUnordered"===n[1].type||"listOrdered"===n[1].type||"blockQuote"===n[1].type?("enter"===n[0]?u++:u--,a=void 0):"lineEndingBlank"===n[1].type?"enter"===n[0]&&(!r||a||u||l||(l=i),a=void 0):"linePrefix"===n[1].type||"listItemValue"===n[1].type||"listItemMarker"===n[1].type||"listItemPrefix"===n[1].type||"listItemPrefixWhitespace"===n[1].type||(a=void 0),!u&&"enter"===n[0]&&"listItemPrefix"===n[1].type||-1===u&&"exit"===n[0]&&("listUnordered"===n[1].type||"listOrdered"===n[1].type)){if(r){let a=i;for(o=void 0;a--;){const n=e[a];if("lineEnding"===n[1].type||"lineEndingBlank"===n[1].type){if("exit"===n[0])continue;o&&(e[o][1].type="lineEndingBlank",s=!0),n[1].type="lineEnding",o=a}else if("linePrefix"!==n[1].type&&"blockQuotePrefix"!==n[1].type&&"blockQuotePrefixWhitespace"!==n[1].type&&"blockQuoteMarker"!==n[1].type&&"listItemIndent"!==n[1].type)break}l&&(!o||l<o)&&(r._spread=!0),r.end=Object.assign({},o?e[o][1].start:n[1].end),e.splice(o||i,0,["exit",r,n[2]]),i++,t++}"listItemPrefix"===n[1].type&&(r={type:"listItem",_spread:!1,start:Object.assign({},n[1].start)},e.splice(i,0,["enter",r,n[2]]),i++,t++,l=void 0,a=!0)}}return e[n][1]._spread=s,t}function o(e,n){t[e]=n}function l(e){return t[e]}function a(e){return{line:e.line,column:e.column,offset:e.offset}}function i(e,n){return function(t){c.call(this,e(t),t),n&&n.call(this,t)}}function s(){this.stack.push({type:"fragment",children:[]})}function c(e,n){return this.stack[this.stack.length-1].children.push(e),this.stack.push(e),this.tokenStack.push(n),e.position={start:a(n.start)},e}function f(e){return function(n){e&&e.call(this,n),d.call(this,n)}}function d(e){const n=this.stack.pop(),t=this.tokenStack.pop();if(!t)throw new Error("Cannot close `"+e.type+"` ("+u({start:e.start,end:e.end})+"): it’s not open");if(t.type!==e.type)throw new Error("Cannot close `"+e.type+"` ("+u({start:e.start,end:e.end})+"): a different token (`"+t.type+"`, "+u({start:t.start,end:t.end})+") is open");return n.position.end=a(e.end),n}function p(){return function(e){var{includeImageAlt:n=!0}={};return N(e,n)}(this.stack.pop())}function h(e){const n=this.stack[this.stack.length-1];let t=n.children[n.children.length-1];t&&"text"===t.type||(t={type:"text",value:""},t.position={start:a(e.start)},n.children.push(t)),this.stack.push(t)}function m(e){const n=this.stack.pop();n.value+=this.sliceSerialize(e),n.position.end=a(e.end)}function g(){o("atHardBreak",!0)}function y(e){o("characterReferenceType",e.type)}function v(){return{type:"code",lang:null,meta:null,value:""}}function b(){return{type:"heading",depth:void 0,children:[]}}function w(){return{type:"break"}}function k(){return{type:"html",value:""}}function A(){return{type:"link",title:null,url:"",children:[]}}function x(e){return{type:"list",ordered:"listOrdered"===e.type,start:null,spread:e._spread,children:[]}}}(t)(function(e){for(;!se(e););return e}(function(e={}){const n=function(e){const n={};let t=-1;for(;++t<e.length;)H(n,e[t]);return n}([r].concat(e.extensions||[])),t={defined:[],lazy:{},constructs:n,content:o(le),document:o(ae),flow:o(pe),string:o(me),text:o(ge)};return t;function o(e){return function(n){return ke(t,e,n)}}}(t).document().write(function(){let e,n=1,t="",r=!0;return function(o,l,a){const i=[];let u,s,c,f,d;for(o=t+o.toString(l),c=0,t="",r&&(65279===o.charCodeAt(0)&&c++,r=void 0);c<o.length;){if(vn.lastIndex=c,u=vn.exec(o),f=u&&void 0!==u.index?u.index:o.length,d=o.charCodeAt(f),!u){t=o.slice(c);break}if(10===d&&c===f&&e)i.push(-3),e=void 0;else switch(e&&(i.push(-5),e=void 0),c<f&&(i.push(o.slice(c,f)),n+=f-c),d){case 0:i.push(65533),n++;break;case 9:for(s=4*Math.ceil(n/4),i.push(-2);n++<s;)i.push(-1);break;case 10:i.push(-4),n=1;break;default:e=!0,n=1}c=f+1}return a&&(e&&i.push(-5),t&&i.push(t),i.push(null)),i}}()(e,n,!0))))};function Cn(e,n){let t=-1;for(;++t<n.length;){const r=n[t];Array.isArray(r)?Cn(e,r):Sn(e,r)}return e}function Sn(e,n){let t;for(t in n)if(An.call(n,t)){const r="canContainEols"===t||"transforms"===t,o=(An.call(e,t)?e[t]:void 0)||(e[t]=r?[]:{}),l=n[t];l&&(r?e[t]=[...o,...l]:Object.assign(o,l))}}const En=function(e){Object.assign(this,{Parser:n=>{const t=this.data("settings");return xn(n,Object.assign({},t,e,{extensions:this.data("micromarkExtensions")||[],mdastExtensions:this.data("fromMarkdownExtensions")||[]}))}})};function Fn(e){const n=[];let t=-1,r=0,o=0;for(;++t<e.length;){const l=e.charCodeAt(t);let a="";if(37===l&&K(e.charCodeAt(t+1))&&K(e.charCodeAt(t+2)))o=2;else if(l<128)/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(l))||(a=String.fromCharCode(l));else if(l>55295&&l<57344){const n=e.charCodeAt(t+1);l<56320&&n>56319&&n<57344?(a=String.fromCharCode(l,n),o=1):a="�"}else a=String.fromCharCode(l);a&&(n.push(e.slice(r,t),encodeURIComponent(a)),r=t+o+1,a=""),o&&(t+=o,o=0)}return n.join("")+e.slice(r)}const Bn=function(e){if(null==e)return Pn;if("string"==typeof e)return n=e,Un((function(e){return e&&e.type===n}));var n;if("object"==typeof e)return Array.isArray(e)?function(e){const n=[];let t=-1;for(;++t<e.length;)n[t]=Bn(e[t]);return Un((function(...e){let t=-1;for(;++t<n.length;)if(n[t].call(this,...e))return!0;return!1}))}(e):function(e){return Un((function(n){let t;for(t in e)if(n[t]!==e[t])return!1;return!0}))}(e);if("function"==typeof e)return Un(e);throw new Error("Expected function, string, or object as test")};function Un(e){return function(n,...t){return Boolean(n&&"object"==typeof n&&"type"in n&&Boolean(e.call(this,n,...t)))}}function Pn(){return!0}const _n=!1,Tn=function(e,n,t,r){"function"==typeof n&&"function"!=typeof t&&(r=t,t=n,n=null),function(e,n,t,r){"function"==typeof n&&"function"!=typeof t&&(r=t,t=n,n=null);const o=Bn(n),l=r?-1:1;!function e(a,i,u){const s=a&&"object"==typeof a?a:{};if("string"==typeof s.type){const e="string"==typeof s.tagName?s.tagName:"string"==typeof s.name?s.name:void 0;Object.defineProperty(c,"name",{value:"node ("+a.type+(e?"<"+e+">":"")+")"})}return c;function c(){let s,c,f,d=[];if((!n||o(a,i,u[u.length-1]||null))&&(d=function(e){return Array.isArray(e)?e:"number"==typeof e?[!0,e]:[e]}(t(a,u)),d[0]===_n))return d;if(a.children&&"skip"!==d[0])for(c=(r?a.children.length:-1)+l,f=u.concat(a);c>-1&&c<a.children.length;){if(s=e(a.children[c],c,f)(),s[0]===_n)return s;c="number"==typeof s[1]?s[1]:c+l}return d}}(e,void 0,[])()}(e,n,(function(e,n){const r=n[n.length-1];return t(e,r?r.children.indexOf(e):null,r)}),r)},In=Ln("start"),On=Ln("end");function Ln(e){return function(n){const t=n&&n.position&&n.position[e]||{};return{line:t.line||null,column:t.column||null,offset:t.offset>-1?t.offset:null}}}const Dn={}.hasOwnProperty;function zn(e){return String(e||"").toUpperCase()}function Nn(e,n){const t=String(n.identifier).toUpperCase(),r=Fn(t.toLowerCase()),o=e.footnoteOrder.indexOf(t);let l;-1===o?(e.footnoteOrder.push(t),e.footnoteCounts[t]=1,l=e.footnoteOrder.length):(e.footnoteCounts[t]++,l=o+1);const a=e.footnoteCounts[t],i={type:"element",tagName:"a",properties:{href:"#"+e.clobberPrefix+"fn-"+r,id:e.clobberPrefix+"fnref-"+r+(a>1?"-"+a:""),dataFootnoteRef:!0,ariaDescribedBy:["footnote-label"]},children:[{type:"text",value:String(l)}]};e.patch(n,i);const u={type:"element",tagName:"sup",properties:{},children:[i]};return e.patch(n,u),e.applyData(n,u)}function Rn(e,n){const t=n.referenceType;let r="]";if("collapsed"===t?r+="[]":"full"===t&&(r+="["+(n.label||n.identifier)+"]"),"imageReference"===n.type)return{type:"text",value:"!["+n.alt+r};const o=e.all(n),l=o[0];l&&"text"===l.type?l.value="["+l.value:o.unshift({type:"text",value:"["});const a=o[o.length-1];return a&&"text"===a.type?a.value+=r:o.push({type:"text",value:r}),o}function Mn(e){const n=e.spread;return null==n?e.children.length>1:n}const jn=9,$n=32;function Hn(e){const n=String(e),t=/\r?\n|\r/g;let r=t.exec(n),o=0;const l=[];for(;r;)l.push(Vn(n.slice(o,r.index),o>0,!0),r[0]),o=r.index+r[0].length,r=t.exec(n);return l.push(Vn(n.slice(o),o>0,!1)),l.join("")}function Vn(e,n,t){let r=0,o=e.length;if(n){let n=e.codePointAt(r);for(;n===jn||n===$n;)r++,n=e.codePointAt(r)}if(t){let n=e.codePointAt(o-1);for(;n===jn||n===$n;)o--,n=e.codePointAt(o-1)}return o>r?e.slice(r,o):""}const qn={blockquote:function(e,n){const t={type:"element",tagName:"blockquote",properties:{},children:e.wrap(e.all(n),!0)};return e.patch(n,t),e.applyData(n,t)},break:function(e,n){const t={type:"element",tagName:"br",properties:{},children:[]};return e.patch(n,t),[e.applyData(n,t),{type:"text",value:"\n"}]},code:function(e,n){const t=n.value?n.value+"\n":"",r=n.lang?n.lang.match(/^[^ \t]+(?=[ \t]|$)/):null,o={};r&&(o.className=["language-"+r]);let l={type:"element",tagName:"code",properties:o,children:[{type:"text",value:t}]};return n.meta&&(l.data={meta:n.meta}),e.patch(n,l),l=e.applyData(n,l),l={type:"element",tagName:"pre",properties:{},children:[l]},e.patch(n,l),l},delete:function(e,n){const t={type:"element",tagName:"del",properties:{},children:e.all(n)};return e.patch(n,t),e.applyData(n,t)},emphasis:function(e,n){const t={type:"element",tagName:"em",properties:{},children:e.all(n)};return e.patch(n,t),e.applyData(n,t)},footnoteReference:Nn,footnote:function(e,n){const t=e.footnoteById;let r=1;for(;r in t;)r++;const o=String(r);return t[o]={type:"footnoteDefinition",identifier:o,children:[{type:"paragraph",children:n.children}],position:n.position},Nn(e,{type:"footnoteReference",identifier:o,position:n.position})},heading:function(e,n){const t={type:"element",tagName:"h"+n.depth,properties:{},children:e.all(n)};return e.patch(n,t),e.applyData(n,t)},html:function(e,n){if(e.dangerous){const t={type:"raw",value:n.value};return e.patch(n,t),e.applyData(n,t)}return null},imageReference:function(e,n){const t=e.definition(n.identifier);if(!t)return Rn(e,n);const r={src:Fn(t.url||""),alt:n.alt};null!==t.title&&void 0!==t.title&&(r.title=t.title);const o={type:"element",tagName:"img",properties:r,children:[]};return e.patch(n,o),e.applyData(n,o)},image:function(e,n){const t={src:Fn(n.url)};null!==n.alt&&void 0!==n.alt&&(t.alt=n.alt),null!==n.title&&void 0!==n.title&&(t.title=n.title);const r={type:"element",tagName:"img",properties:t,children:[]};return e.patch(n,r),e.applyData(n,r)},inlineCode:function(e,n){const t={type:"text",value:n.value.replace(/\r?\n|\r/g," ")};e.patch(n,t);const r={type:"element",tagName:"code",properties:{},children:[t]};return e.patch(n,r),e.applyData(n,r)},linkReference:function(e,n){const t=e.definition(n.identifier);if(!t)return Rn(e,n);const r={href:Fn(t.url||"")};null!==t.title&&void 0!==t.title&&(r.title=t.title);const o={type:"element",tagName:"a",properties:r,children:e.all(n)};return e.patch(n,o),e.applyData(n,o)},link:function(e,n){const t={href:Fn(n.url)};null!==n.title&&void 0!==n.title&&(t.title=n.title);const r={type:"element",tagName:"a",properties:t,children:e.all(n)};return e.patch(n,r),e.applyData(n,r)},listItem:function(e,n,t){const r=e.all(n),o=t?function(e){let n=!1;if("list"===e.type){n=e.spread||!1;const t=e.children;let r=-1;for(;!n&&++r<t.length;)n=Mn(t[r])}return n}(t):Mn(n),l={},a=[];if("boolean"==typeof n.checked){const e=r[0];let t;e&&"element"===e.type&&"p"===e.tagName?t=e:(t={type:"element",tagName:"p",properties:{},children:[]},r.unshift(t)),t.children.length>0&&t.children.unshift({type:"text",value:" "}),t.children.unshift({type:"element",tagName:"input",properties:{type:"checkbox",checked:n.checked,disabled:!0},children:[]}),l.className=["task-list-item"]}let i=-1;for(;++i<r.length;){const e=r[i];(o||0!==i||"element"!==e.type||"p"!==e.tagName)&&a.push({type:"text",value:"\n"}),"element"!==e.type||"p"!==e.tagName||o?a.push(e):a.push(...e.children)}const u=r[r.length-1];u&&(o||"element"!==u.type||"p"!==u.tagName)&&a.push({type:"text",value:"\n"});const s={type:"element",tagName:"li",properties:l,children:a};return e.patch(n,s),e.applyData(n,s)},list:function(e,n){const t={},r=e.all(n);let o=-1;for("number"==typeof n.start&&1!==n.start&&(t.start=n.start);++o<r.length;){const e=r[o];if("element"===e.type&&"li"===e.tagName&&e.properties&&Array.isArray(e.properties.className)&&e.properties.className.includes("task-list-item")){t.className=["contains-task-list"];break}}const l={type:"element",tagName:n.ordered?"ol":"ul",properties:t,children:e.wrap(r,!0)};return e.patch(n,l),e.applyData(n,l)},paragraph:function(e,n){const t={type:"element",tagName:"p",properties:{},children:e.all(n)};return e.patch(n,t),e.applyData(n,t)},root:function(e,n){const t={type:"root",children:e.wrap(e.all(n))};return e.patch(n,t),e.applyData(n,t)},strong:function(e,n){const t={type:"element",tagName:"strong",properties:{},children:e.all(n)};return e.patch(n,t),e.applyData(n,t)},table:function(e,n){const t=e.all(n),r=t.shift(),o=[];if(r){const t={type:"element",tagName:"thead",properties:{},children:e.wrap([r],!0)};e.patch(n.children[0],t),o.push(t)}if(t.length>0){const r={type:"element",tagName:"tbody",properties:{},children:e.wrap(t,!0)},l=In(n.children[1]),a=On(n.children[n.children.length-1]);l.line&&a.line&&(r.position={start:l,end:a}),o.push(r)}const l={type:"element",tagName:"table",properties:{},children:e.wrap(o,!0)};return e.patch(n,l),e.applyData(n,l)},tableCell:function(e,n){const t={type:"element",tagName:"td",properties:{},children:e.all(n)};return e.patch(n,t),e.applyData(n,t)},tableRow:function(e,n,t){const r=t?t.children:void 0,o=0===(r?r.indexOf(n):1)?"th":"td",l=t&&"table"===t.type?t.align:void 0,a=l?l.length:n.children.length;let i=-1;const u=[];for(;++i<a;){const t=n.children[i],r={},a=l?l[i]:void 0;a&&(r.align=a);let s={type:"element",tagName:o,properties:r,children:[]};t&&(s.children=e.all(t),e.patch(t,s),s=e.applyData(n,s)),u.push(s)}const s={type:"element",tagName:"tr",properties:{},children:e.wrap(u,!0)};return e.patch(n,s),e.applyData(n,s)},text:function(e,n){const t={type:"text",value:Hn(String(n.value))};return e.patch(n,t),e.applyData(n,t)},thematicBreak:function(e,n){const t={type:"element",tagName:"hr",properties:{},children:[]};return e.patch(n,t),e.applyData(n,t)},toml:Wn,yaml:Wn,definition:Wn,footnoteDefinition:Wn};function Wn(){return null}const Qn={}.hasOwnProperty;function Kn(e,n){var t;e.position&&(n.position={start:In(t=e),end:On(t)})}function Yn(e,n){let t=n;if(e&&e.data){const n=e.data.hName,r=e.data.hChildren,o=e.data.hProperties;"string"==typeof n&&("element"===t.type?t.tagName=n:t={type:"element",tagName:n,properties:{},children:[]}),"element"===t.type&&o&&(t.properties={...t.properties,...o}),"children"in t&&t.children&&null!=r&&(t.children=r)}return t}function Gn(e,n,t){const r=n&&n.type;if(!r)throw new Error("Expected node, got `"+n+"`");return Qn.call(e.handlers,r)?e.handlers[r](e,n,t):e.passThrough&&e.passThrough.includes(r)?"children"in n?{...n,children:Xn(e,n)}:n:e.unknownHandler?e.unknownHandler(e,n,t):function(e,n){const t=n.data||{},r=!("value"in n)||Qn.call(t,"hProperties")||Qn.call(t,"hChildren")?{type:"element",tagName:"div",properties:{},children:Xn(e,n)}:{type:"text",value:n.value};return e.patch(n,r),e.applyData(n,r)}(e,n)}function Xn(e,n){const t=[];if("children"in n){const r=n.children;let o=-1;for(;++o<r.length;){const l=Gn(e,r[o],n);if(l){if(o&&"break"===r[o-1].type&&(Array.isArray(l)||"text"!==l.type||(l.value=l.value.replace(/^\s+/,"")),!Array.isArray(l)&&"element"===l.type)){const e=l.children[0];e&&"text"===e.type&&(e.value=e.value.replace(/^\s+/,""))}Array.isArray(l)?t.push(...l):t.push(l)}}}return t}function Zn(e,n){const t=[];let r=-1;for(n&&t.push({type:"text",value:"\n"});++r<e.length;)r&&t.push({type:"text",value:"\n"}),t.push(e[r]);return n&&e.length>0&&t.push({type:"text",value:"\n"}),t}function Jn(e,n){const t=function(e,n){const t=n||{},r=t.allowDangerousHtml||!1,o={};return a.dangerous=r,a.clobberPrefix=void 0===t.clobberPrefix||null===t.clobberPrefix?"user-content-":t.clobberPrefix,a.footnoteLabel=t.footnoteLabel||"Footnotes",a.footnoteLabelTagName=t.footnoteLabelTagName||"h2",a.footnoteLabelProperties=t.footnoteLabelProperties||{className:["sr-only"]},a.footnoteBackLabel=t.footnoteBackLabel||"Back to content",a.unknownHandler=t.unknownHandler,a.passThrough=t.passThrough,a.handlers={...qn,...t.handlers},a.definition=function(e){const n=Object.create(null);if(!e||!e.type)throw new Error("mdast-util-definitions expected node");return Tn(e,"definition",(e=>{const t=zn(e.identifier);t&&!Dn.call(n,t)&&(n[t]=e)})),function(e){const t=zn(e);return t&&Dn.call(n,t)?n[t]:null}}(e),a.footnoteById=o,a.footnoteOrder=[],a.footnoteCounts={},a.patch=Kn,a.applyData=Yn,a.one=function(e,n){return Gn(a,e,n)},a.all=function(e){return Xn(a,e)},a.wrap=Zn,a.augment=l,Tn(e,"footnoteDefinition",(e=>{const n=String(e.identifier).toUpperCase();Qn.call(o,n)||(o[n]=e)})),a;function l(e,n){if(e&&"data"in e&&e.data){const t=e.data;t.hName&&("element"!==n.type&&(n={type:"element",tagName:"",properties:{},children:[]}),n.tagName=t.hName),"element"===n.type&&t.hProperties&&(n.properties={...n.properties,...t.hProperties}),"children"in n&&n.children&&t.hChildren&&(n.children=t.hChildren)}if(e){const r="type"in e?e:{position:e};(t=r)&&t.position&&t.position.start&&t.position.start.line&&t.position.start.column&&t.position.end&&t.position.end.line&&t.position.end.column&&(n.position={start:In(r),end:On(r)})}var t;return n}function a(e,n,t,r){return Array.isArray(t)&&(r=t,t={}),l(e,{type:"element",tagName:n,properties:t||{},children:r||[]})}}(e,n),r=t.one(e,null),o=function(e){const n=[];let t=-1;for(;++t<e.footnoteOrder.length;){const r=e.footnoteById[e.footnoteOrder[t]];if(!r)continue;const o=e.all(r),l=String(r.identifier).toUpperCase(),a=Fn(l.toLowerCase());let i=0;const u=[];for(;++i<=e.footnoteCounts[l];){const n={type:"element",tagName:"a",properties:{href:"#"+e.clobberPrefix+"fnref-"+a+(i>1?"-"+i:""),dataFootnoteBackref:!0,className:["data-footnote-backref"],ariaLabel:e.footnoteBackLabel},children:[{type:"text",value:"↩"}]};i>1&&n.children.push({type:"element",tagName:"sup",children:[{type:"text",value:String(i)}]}),u.length>0&&u.push({type:"text",value:" "}),u.push(n)}const s=o[o.length-1];if(s&&"element"===s.type&&"p"===s.tagName){const e=s.children[s.children.length-1];e&&"text"===e.type?e.value+=" ":s.children.push({type:"text",value:" "}),s.children.push(...u)}else o.push(...u);const c={type:"element",tagName:"li",properties:{id:e.clobberPrefix+"fn-"+a},children:e.wrap(o,!0)};e.patch(r,c),n.push(c)}if(0!==n.length)return{type:"element",tagName:"section",properties:{dataFootnotes:!0,className:["footnotes"]},children:[{type:"element",tagName:e.footnoteLabelTagName,properties:{...JSON.parse(JSON.stringify(e.footnoteLabelProperties)),id:"footnote-label"},children:[{type:"text",value:e.footnoteLabel}]},{type:"text",value:"\n"},{type:"element",tagName:"ol",properties:{},children:e.wrap(n,!0)},{type:"text",value:"\n"}]}}(t);return o&&r.children.push({type:"text",value:"\n"},o),Array.isArray(r)?{type:"root",children:r}:r}const et=function(e,n){return e&&"run"in e?function(e,n){return(t,r,o)=>{e.run(Jn(t,n),r,(e=>{o(e)}))}}(e,n):function(e){return n=>Jn(n,e)}(e||n)};var nt=t(5556);class tt{constructor(e,n,t){this.property=e,this.normal=n,t&&(this.space=t)}}function rt(e,n){for(var t={},r={},o=-1;++o<e.length;)Object.assign(t,e[o].property),Object.assign(r,e[o].normal);return new tt(t,r,n)}function ot(e){return e.toLowerCase()}tt.prototype.property={},tt.prototype.normal={},tt.prototype.space=null;class lt{constructor(e,n){this.property=e,this.attribute=n}}lt.prototype.space=null,lt.prototype.attribute=null,lt.prototype.property=null,lt.prototype.boolean=!1,lt.prototype.booleanish=!1,lt.prototype.overloadedBoolean=!1,lt.prototype.number=!1,lt.prototype.commaSeparated=!1,lt.prototype.spaceSeparated=!1,lt.prototype.commaOrSpaceSeparated=!1,lt.prototype.mustUseProperty=!1,lt.prototype.defined=!1;var at=0,it=ht(),ut=ht(),st=ht(),ct=ht(),ft=ht(),dt=ht(),pt=ht();function ht(){return 2**++at}var mt=Object.keys(o);class gt extends lt{constructor(e,n,t,r){var l=-1;for(super(e,n),yt(this,"space",r);++l<mt.length;)yt(this,mt[l],(t&o[mt[l]])===o[mt[l]])}}function yt(e,n,t){t&&(e[n]=t)}gt.prototype.defined=!0;var vt={}.hasOwnProperty;function bt(e){var n,t,r={},o={};for(n in e.properties)vt.call(e.properties,n)&&(t=new gt(n,e.transform(e.attributes,n),e.properties[n],e.space),e.mustUseProperty&&e.mustUseProperty.includes(n)&&(t.mustUseProperty=!0),r[n]=t,o[ot(n)]=n,o[ot(t.attribute)]=n);return new tt(r,o,e.space)}var wt=bt({space:"xlink",transform:function(e,n){return"xlink:"+n.slice(5).toLowerCase()},properties:{xLinkActuate:null,xLinkArcRole:null,xLinkHref:null,xLinkRole:null,xLinkShow:null,xLinkTitle:null,xLinkType:null}}),kt=bt({space:"xml",transform:function(e,n){return"xml:"+n.slice(3).toLowerCase()},properties:{xmlLang:null,xmlBase:null,xmlSpace:null}});function At(e,n){return n in e?e[n]:n}function xt(e,n){return At(e,n.toLowerCase())}var Ct=bt({space:"xmlns",attributes:{xmlnsxlink:"xmlns:xlink"},transform:xt,properties:{xmlns:null,xmlnsXLink:null}}),St=bt({transform:function(e,n){return"role"===n?n:"aria-"+n.slice(4).toLowerCase()},properties:{ariaActiveDescendant:null,ariaAtomic:ut,ariaAutoComplete:null,ariaBusy:ut,ariaChecked:ut,ariaColCount:ct,ariaColIndex:ct,ariaColSpan:ct,ariaControls:ft,ariaCurrent:null,ariaDescribedBy:ft,ariaDetails:null,ariaDisabled:ut,ariaDropEffect:ft,ariaErrorMessage:null,ariaExpanded:ut,ariaFlowTo:ft,ariaGrabbed:ut,ariaHasPopup:null,ariaHidden:ut,ariaInvalid:null,ariaKeyShortcuts:null,ariaLabel:null,ariaLabelledBy:ft,ariaLevel:ct,ariaLive:null,ariaModal:ut,ariaMultiLine:ut,ariaMultiSelectable:ut,ariaOrientation:null,ariaOwns:ft,ariaPlaceholder:null,ariaPosInSet:ct,ariaPressed:ut,ariaReadOnly:ut,ariaRelevant:null,ariaRequired:ut,ariaRoleDescription:ft,ariaRowCount:ct,ariaRowIndex:ct,ariaRowSpan:ct,ariaSelected:ut,ariaSetSize:ct,ariaSort:null,ariaValueMax:ct,ariaValueMin:ct,ariaValueNow:ct,ariaValueText:null,role:null}}),Et=bt({space:"html",attributes:{acceptcharset:"accept-charset",classname:"class",htmlfor:"for",httpequiv:"http-equiv"},transform:xt,mustUseProperty:["checked","multiple","muted","selected"],properties:{abbr:null,accept:dt,acceptCharset:ft,accessKey:ft,action:null,allow:null,allowFullScreen:it,allowPaymentRequest:it,allowUserMedia:it,alt:null,as:null,async:it,autoCapitalize:null,autoComplete:ft,autoFocus:it,autoPlay:it,capture:it,charSet:null,checked:it,cite:null,className:ft,cols:ct,colSpan:null,content:null,contentEditable:ut,controls:it,controlsList:ft,coords:ct|dt,crossOrigin:null,data:null,dateTime:null,decoding:null,default:it,defer:it,dir:null,dirName:null,disabled:it,download:st,draggable:ut,encType:null,enterKeyHint:null,form:null,formAction:null,formEncType:null,formMethod:null,formNoValidate:it,formTarget:null,headers:ft,height:ct,hidden:it,high:ct,href:null,hrefLang:null,htmlFor:ft,httpEquiv:ft,id:null,imageSizes:null,imageSrcSet:dt,inputMode:null,integrity:null,is:null,isMap:it,itemId:null,itemProp:ft,itemRef:ft,itemScope:it,itemType:ft,kind:null,label:null,lang:null,language:null,list:null,loading:null,loop:it,low:ct,manifest:null,max:null,maxLength:ct,media:null,method:null,min:null,minLength:ct,multiple:it,muted:it,name:null,nonce:null,noModule:it,noValidate:it,onAbort:null,onAfterPrint:null,onAuxClick:null,onBeforePrint:null,onBeforeUnload:null,onBlur:null,onCancel:null,onCanPlay:null,onCanPlayThrough:null,onChange:null,onClick:null,onClose:null,onContextMenu:null,onCopy:null,onCueChange:null,onCut:null,onDblClick:null,onDrag:null,onDragEnd:null,onDragEnter:null,onDragExit:null,onDragLeave:null,onDragOver:null,onDragStart:null,onDrop:null,onDurationChange:null,onEmptied:null,onEnded:null,onError:null,onFocus:null,onFormData:null,onHashChange:null,onInput:null,onInvalid:null,onKeyDown:null,onKeyPress:null,onKeyUp:null,onLanguageChange:null,onLoad:null,onLoadedData:null,onLoadedMetadata:null,onLoadEnd:null,onLoadStart:null,onMessage:null,onMessageError:null,onMouseDown:null,onMouseEnter:null,onMouseLeave:null,onMouseMove:null,onMouseOut:null,onMouseOver:null,onMouseUp:null,onOffline:null,onOnline:null,onPageHide:null,onPageShow:null,onPaste:null,onPause:null,onPlay:null,onPlaying:null,onPopState:null,onProgress:null,onRateChange:null,onRejectionHandled:null,onReset:null,onResize:null,onScroll:null,onSecurityPolicyViolation:null,onSeeked:null,onSeeking:null,onSelect:null,onSlotChange:null,onStalled:null,onStorage:null,onSubmit:null,onSuspend:null,onTimeUpdate:null,onToggle:null,onUnhandledRejection:null,onUnload:null,onVolumeChange:null,onWaiting:null,onWheel:null,open:it,optimum:ct,pattern:null,ping:ft,placeholder:null,playsInline:it,poster:null,preload:null,readOnly:it,referrerPolicy:null,rel:ft,required:it,reversed:it,rows:ct,rowSpan:ct,sandbox:ft,scope:null,scoped:it,seamless:it,selected:it,shape:null,size:ct,sizes:null,slot:null,span:ct,spellCheck:ut,src:null,srcDoc:null,srcLang:null,srcSet:dt,start:ct,step:null,style:null,tabIndex:ct,target:null,title:null,translate:null,type:null,typeMustMatch:it,useMap:null,value:ut,width:ct,wrap:null,align:null,aLink:null,archive:ft,axis:null,background:null,bgColor:null,border:ct,borderColor:null,bottomMargin:ct,cellPadding:null,cellSpacing:null,char:null,charOff:null,classId:null,clear:null,code:null,codeBase:null,codeType:null,color:null,compact:it,declare:it,event:null,face:null,frame:null,frameBorder:null,hSpace:ct,leftMargin:ct,link:null,longDesc:null,lowSrc:null,marginHeight:ct,marginWidth:ct,noResize:it,noHref:it,noShade:it,noWrap:it,object:null,profile:null,prompt:null,rev:null,rightMargin:ct,rules:null,scheme:null,scrolling:ut,standby:null,summary:null,text:null,topMargin:ct,valueType:null,version:null,vAlign:null,vLink:null,vSpace:ct,allowTransparency:null,autoCorrect:null,autoSave:null,disablePictureInPicture:it,disableRemotePlayback:it,prefix:null,property:null,results:ct,security:null,unselectable:null}}),Ft=bt({space:"svg",attributes:{accentHeight:"accent-height",alignmentBaseline:"alignment-baseline",arabicForm:"arabic-form",baselineShift:"baseline-shift",capHeight:"cap-height",className:"class",clipPath:"clip-path",clipRule:"clip-rule",colorInterpolation:"color-interpolation",colorInterpolationFilters:"color-interpolation-filters",colorProfile:"color-profile",colorRendering:"color-rendering",crossOrigin:"crossorigin",dataType:"datatype",dominantBaseline:"dominant-baseline",enableBackground:"enable-background",fillOpacity:"fill-opacity",fillRule:"fill-rule",floodColor:"flood-color",floodOpacity:"flood-opacity",fontFamily:"font-family",fontSize:"font-size",fontSizeAdjust:"font-size-adjust",fontStretch:"font-stretch",fontStyle:"font-style",fontVariant:"font-variant",fontWeight:"font-weight",glyphName:"glyph-name",glyphOrientationHorizontal:"glyph-orientation-horizontal",glyphOrientationVertical:"glyph-orientation-vertical",hrefLang:"hreflang",horizAdvX:"horiz-adv-x",horizOriginX:"horiz-origin-x",horizOriginY:"horiz-origin-y",imageRendering:"image-rendering",letterSpacing:"letter-spacing",lightingColor:"lighting-color",markerEnd:"marker-end",markerMid:"marker-mid",markerStart:"marker-start",navDown:"nav-down",navDownLeft:"nav-down-left",navDownRight:"nav-down-right",navLeft:"nav-left",navNext:"nav-next",navPrev:"nav-prev",navRight:"nav-right",navUp:"nav-up",navUpLeft:"nav-up-left",navUpRight:"nav-up-right",onAbort:"onabort",onActivate:"onactivate",onAfterPrint:"onafterprint",onBeforePrint:"onbeforeprint",onBegin:"onbegin",onCancel:"oncancel",onCanPlay:"oncanplay",onCanPlayThrough:"oncanplaythrough",onChange:"onchange",onClick:"onclick",onClose:"onclose",onCopy:"oncopy",onCueChange:"oncuechange",onCut:"oncut",onDblClick:"ondblclick",onDrag:"ondrag",onDragEnd:"ondragend",onDragEnter:"ondragenter",onDragExit:"ondragexit",onDragLeave:"ondragleave",onDragOver:"ondragover",onDragStart:"ondragstart",onDrop:"ondrop",onDurationChange:"ondurationchange",onEmptied:"onemptied",onEnd:"onend",onEnded:"onended",onError:"onerror",onFocus:"onfocus",onFocusIn:"onfocusin",onFocusOut:"onfocusout",onHashChange:"onhashchange",onInput:"oninput",onInvalid:"oninvalid",onKeyDown:"onkeydown",onKeyPress:"onkeypress",onKeyUp:"onkeyup",onLoad:"onload",onLoadedData:"onloadeddata",onLoadedMetadata:"onloadedmetadata",onLoadStart:"onloadstart",onMessage:"onmessage",onMouseDown:"onmousedown",onMouseEnter:"onmouseenter",onMouseLeave:"onmouseleave",onMouseMove:"onmousemove",onMouseOut:"onmouseout",onMouseOver:"onmouseover",onMouseUp:"onmouseup",onMouseWheel:"onmousewheel",onOffline:"onoffline",onOnline:"ononline",onPageHide:"onpagehide",onPageShow:"onpageshow",onPaste:"onpaste",onPause:"onpause",onPlay:"onplay",onPlaying:"onplaying",onPopState:"onpopstate",onProgress:"onprogress",onRateChange:"onratechange",onRepeat:"onrepeat",onReset:"onreset",onResize:"onresize",onScroll:"onscroll",onSeeked:"onseeked",onSeeking:"onseeking",onSelect:"onselect",onShow:"onshow",onStalled:"onstalled",onStorage:"onstorage",onSubmit:"onsubmit",onSuspend:"onsuspend",onTimeUpdate:"ontimeupdate",onToggle:"ontoggle",onUnload:"onunload",onVolumeChange:"onvolumechange",onWaiting:"onwaiting",onZoom:"onzoom",overlinePosition:"overline-position",overlineThickness:"overline-thickness",paintOrder:"paint-order",panose1:"panose-1",pointerEvents:"pointer-events",referrerPolicy:"referrerpolicy",renderingIntent:"rendering-intent",shapeRendering:"shape-rendering",stopColor:"stop-color",stopOpacity:"stop-opacity",strikethroughPosition:"strikethrough-position",strikethroughThickness:"strikethrough-thickness",strokeDashArray:"stroke-dasharray",strokeDashOffset:"stroke-dashoffset",strokeLineCap:"stroke-linecap",strokeLineJoin:"stroke-linejoin",strokeMiterLimit:"stroke-miterlimit",strokeOpacity:"stroke-opacity",strokeWidth:"stroke-width",tabIndex:"tabindex",textAnchor:"text-anchor",textDecoration:"text-decoration",textRendering:"text-rendering",typeOf:"typeof",underlinePosition:"underline-position",underlineThickness:"underline-thickness",unicodeBidi:"unicode-bidi",unicodeRange:"unicode-range",unitsPerEm:"units-per-em",vAlphabetic:"v-alphabetic",vHanging:"v-hanging",vIdeographic:"v-ideographic",vMathematical:"v-mathematical",vectorEffect:"vector-effect",vertAdvY:"vert-adv-y",vertOriginX:"vert-origin-x",vertOriginY:"vert-origin-y",wordSpacing:"word-spacing",writingMode:"writing-mode",xHeight:"x-height",playbackOrder:"playbackorder",timelineBegin:"timelinebegin"},transform:At,properties:{about:pt,accentHeight:ct,accumulate:null,additive:null,alignmentBaseline:null,alphabetic:ct,amplitude:ct,arabicForm:null,ascent:ct,attributeName:null,attributeType:null,azimuth:ct,bandwidth:null,baselineShift:null,baseFrequency:null,baseProfile:null,bbox:null,begin:null,bias:ct,by:null,calcMode:null,capHeight:ct,className:ft,clip:null,clipPath:null,clipPathUnits:null,clipRule:null,color:null,colorInterpolation:null,colorInterpolationFilters:null,colorProfile:null,colorRendering:null,content:null,contentScriptType:null,contentStyleType:null,crossOrigin:null,cursor:null,cx:null,cy:null,d:null,dataType:null,defaultAction:null,descent:ct,diffuseConstant:ct,direction:null,display:null,dur:null,divisor:ct,dominantBaseline:null,download:it,dx:null,dy:null,edgeMode:null,editable:null,elevation:ct,enableBackground:null,end:null,event:null,exponent:ct,externalResourcesRequired:null,fill:null,fillOpacity:ct,fillRule:null,filter:null,filterRes:null,filterUnits:null,floodColor:null,floodOpacity:null,focusable:null,focusHighlight:null,fontFamily:null,fontSize:null,fontSizeAdjust:null,fontStretch:null,fontStyle:null,fontVariant:null,fontWeight:null,format:null,fr:null,from:null,fx:null,fy:null,g1:dt,g2:dt,glyphName:dt,glyphOrientationHorizontal:null,glyphOrientationVertical:null,glyphRef:null,gradientTransform:null,gradientUnits:null,handler:null,hanging:ct,hatchContentUnits:null,hatchUnits:null,height:null,href:null,hrefLang:null,horizAdvX:ct,horizOriginX:ct,horizOriginY:ct,id:null,ideographic:ct,imageRendering:null,initialVisibility:null,in:null,in2:null,intercept:ct,k:ct,k1:ct,k2:ct,k3:ct,k4:ct,kernelMatrix:pt,kernelUnitLength:null,keyPoints:null,keySplines:null,keyTimes:null,kerning:null,lang:null,lengthAdjust:null,letterSpacing:null,lightingColor:null,limitingConeAngle:ct,local:null,markerEnd:null,markerMid:null,markerStart:null,markerHeight:null,markerUnits:null,markerWidth:null,mask:null,maskContentUnits:null,maskUnits:null,mathematical:null,max:null,media:null,mediaCharacterEncoding:null,mediaContentEncodings:null,mediaSize:ct,mediaTime:null,method:null,min:null,mode:null,name:null,navDown:null,navDownLeft:null,navDownRight:null,navLeft:null,navNext:null,navPrev:null,navRight:null,navUp:null,navUpLeft:null,navUpRight:null,numOctaves:null,observer:null,offset:null,onAbort:null,onActivate:null,onAfterPrint:null,onBeforePrint:null,onBegin:null,onCancel:null,onCanPlay:null,onCanPlayThrough:null,onChange:null,onClick:null,onClose:null,onCopy:null,onCueChange:null,onCut:null,onDblClick:null,onDrag:null,onDragEnd:null,onDragEnter:null,onDragExit:null,onDragLeave:null,onDragOver:null,onDragStart:null,onDrop:null,onDurationChange:null,onEmptied:null,onEnd:null,onEnded:null,onError:null,onFocus:null,onFocusIn:null,onFocusOut:null,onHashChange:null,onInput:null,onInvalid:null,onKeyDown:null,onKeyPress:null,onKeyUp:null,onLoad:null,onLoadedData:null,onLoadedMetadata:null,onLoadStart:null,onMessage:null,onMouseDown:null,onMouseEnter:null,onMouseLeave:null,onMouseMove:null,onMouseOut:null,onMouseOver:null,onMouseUp:null,onMouseWheel:null,onOffline:null,onOnline:null,onPageHide:null,onPageShow:null,onPaste:null,onPause:null,onPlay:null,onPlaying:null,onPopState:null,onProgress:null,onRateChange:null,onRepeat:null,onReset:null,onResize:null,onScroll:null,onSeeked:null,onSeeking:null,onSelect:null,onShow:null,onStalled:null,onStorage:null,onSubmit:null,onSuspend:null,onTimeUpdate:null,onToggle:null,onUnload:null,onVolumeChange:null,onWaiting:null,onZoom:null,opacity:null,operator:null,order:null,orient:null,orientation:null,origin:null,overflow:null,overlay:null,overlinePosition:ct,overlineThickness:ct,paintOrder:null,panose1:null,path:null,pathLength:ct,patternContentUnits:null,patternTransform:null,patternUnits:null,phase:null,ping:ft,pitch:null,playbackOrder:null,pointerEvents:null,points:null,pointsAtX:ct,pointsAtY:ct,pointsAtZ:ct,preserveAlpha:null,preserveAspectRatio:null,primitiveUnits:null,propagate:null,property:pt,r:null,radius:null,referrerPolicy:null,refX:null,refY:null,rel:pt,rev:pt,renderingIntent:null,repeatCount:null,repeatDur:null,requiredExtensions:pt,requiredFeatures:pt,requiredFonts:pt,requiredFormats:pt,resource:null,restart:null,result:null,rotate:null,rx:null,ry:null,scale:null,seed:null,shapeRendering:null,side:null,slope:null,snapshotTime:null,specularConstant:ct,specularExponent:ct,spreadMethod:null,spacing:null,startOffset:null,stdDeviation:null,stemh:null,stemv:null,stitchTiles:null,stopColor:null,stopOpacity:null,strikethroughPosition:ct,strikethroughThickness:ct,string:null,stroke:null,strokeDashArray:pt,strokeDashOffset:null,strokeLineCap:null,strokeLineJoin:null,strokeMiterLimit:ct,strokeOpacity:ct,strokeWidth:null,style:null,surfaceScale:ct,syncBehavior:null,syncBehaviorDefault:null,syncMaster:null,syncTolerance:null,syncToleranceDefault:null,systemLanguage:pt,tabIndex:ct,tableValues:null,target:null,targetX:ct,targetY:ct,textAnchor:null,textDecoration:null,textRendering:null,textLength:null,timelineBegin:null,title:null,transformBehavior:null,type:null,typeOf:pt,to:null,transform:null,u1:null,u2:null,underlinePosition:ct,underlineThickness:ct,unicode:null,unicodeBidi:null,unicodeRange:null,unitsPerEm:ct,values:null,vAlphabetic:ct,vMathematical:ct,vectorEffect:null,vHanging:ct,vIdeographic:ct,version:null,vertAdvY:ct,vertOriginX:ct,vertOriginY:ct,viewBox:null,viewTarget:null,visibility:null,width:null,widths:null,wordSpacing:null,writingMode:null,x:null,x1:null,x2:null,xChannelSelector:null,xHeight:ct,y:null,y1:null,y2:null,yChannelSelector:null,z:null,zoomAndPan:null}}),Bt=rt([kt,wt,Ct,St,Et],"html"),Ut=rt([kt,wt,Ct,St,Ft],"svg");function Pt(e){if(e.allowedElements&&e.disallowedElements)throw new TypeError("Only one of `allowedElements` and `disallowedElements` should be defined");if(e.allowedElements||e.disallowedElements||e.allowElement)return n=>{Tn(n,"element",((n,t,r)=>{const o=r;let l;if(e.allowedElements?l=!e.allowedElements.includes(n.tagName):e.disallowedElements&&(l=e.disallowedElements.includes(n.tagName)),!l&&e.allowElement&&"number"==typeof t&&(l=!e.allowElement(n,t,o)),l&&"number"==typeof t)return e.unwrapDisallowed&&n.children?o.children.splice(t,1,...n.children):o.children.splice(t,1),t}))}}var _t=t(8316);function Tt(e){const n=e&&"object"==typeof e&&"text"===e.type?e.value||"":e;return"string"==typeof n&&""===n.replace(/[ \t\n\f\r]/g,"")}var It=/^data[-\w.:]+$/i,Ot=/-[a-z]/g,Lt=/[A-Z]/g;function Dt(e){return"-"+e.toLowerCase()}function zt(e){return e.charAt(1).toUpperCase()}var Nt={classId:"classID",dataType:"datatype",itemId:"itemID",strokeDashArray:"strokeDasharray",strokeDashOffset:"strokeDashoffset",strokeLineCap:"strokeLinecap",strokeLineJoin:"strokeLinejoin",strokeMiterLimit:"strokeMiterlimit",typeOf:"typeof",xLinkActuate:"xlinkActuate",xLinkArcRole:"xlinkArcrole",xLinkHref:"xlinkHref",xLinkRole:"xlinkRole",xLinkShow:"xlinkShow",xLinkTitle:"xlinkTitle",xLinkType:"xlinkType",xmlnsXLink:"xmlnsXlink"};const Rt=t(9108),Mt=["http","https","mailto","tel"];function jt(e){const n=(e||"").trim(),t=n.charAt(0);if("#"===t||"/"===t)return n;const r=n.indexOf(":");if(-1===r)return n;let o=-1;for(;++o<Mt.length;){const e=Mt[o];if(r===e.length&&n.slice(0,e.length).toLowerCase()===e)return n}return o=n.indexOf("?"),-1!==o&&r>o?n:(o=n.indexOf("#"),-1!==o&&r>o?n:"javascript:void(0)")}const $t={}.hasOwnProperty,Ht=new Set(["table","thead","tbody","tfoot","tr"]);function Vt(e,n){const t=[];let r,o=-1;for(;++o<n.children.length;)r=n.children[o],"element"===r.type?t.push(qt(e,r,o,n)):"text"===r.type?"element"===n.type&&Ht.has(n.tagName)&&Tt(r)||t.push(r.value):"raw"!==r.type||e.options.skipHtml||t.push(r.value);return t}function qt(e,n,t,r){const o=e.options,a=void 0===o.transformLinkUri?jt:o.transformLinkUri,i=e.schema,u=n.tagName,s={};let c,f=i;if("html"===i.space&&"svg"===u&&(f=Ut,e.schema=f),n.properties)for(c in n.properties)$t.call(n.properties,c)&&Qt(s,c,n.properties[c],e);"ol"!==u&&"ul"!==u||e.listDepth++;const d=Vt(e,n);"ol"!==u&&"ul"!==u||e.listDepth--,e.schema=i;const p=n.position||{start:{line:null,column:null,offset:null},end:{line:null,column:null,offset:null}},h=o.components&&$t.call(o.components,u)?o.components[u]:u,m="string"==typeof h||h===l.Fragment;if(!_t.isValidElementType(h))throw new TypeError(`Component for name \`${u}\` not defined or is not renderable`);if(s.key=t,"a"===u&&o.linkTarget&&(s.target="function"==typeof o.linkTarget?o.linkTarget(String(s.href||""),n.children,"string"==typeof s.title?s.title:null):o.linkTarget),"a"===u&&a&&(s.href=a(String(s.href||""),n.children,"string"==typeof s.title?s.title:null)),m||"code"!==u||"element"!==r.type||"pre"===r.tagName||(s.inline=!0),m||"h1"!==u&&"h2"!==u&&"h3"!==u&&"h4"!==u&&"h5"!==u&&"h6"!==u||(s.level=Number.parseInt(u.charAt(1),10)),"img"===u&&o.transformImageUri&&(s.src=o.transformImageUri(String(s.src||""),String(s.alt||""),"string"==typeof s.title?s.title:null)),!m&&"li"===u&&"element"===r.type){const e=function(e){let n=-1;for(;++n<e.children.length;){const t=e.children[n];if("element"===t.type&&"input"===t.tagName)return t}return null}(n);s.checked=e&&e.properties?Boolean(e.properties.checked):null,s.index=Wt(r,n),s.ordered="ol"===r.tagName}var g;return m||"ol"!==u&&"ul"!==u||(s.ordered="ol"===u,s.depth=e.listDepth),"td"!==u&&"th"!==u||(s.align&&(s.style||(s.style={}),s.style.textAlign=s.align,delete s.align),m||(s.isHeader="th"===u)),m||"tr"!==u||"element"!==r.type||(s.isHeader=Boolean("thead"===r.tagName)),o.sourcePos&&(s["data-sourcepos"]=[(g=p).start.line,":",g.start.column,"-",g.end.line,":",g.end.column].map(String).join("")),!m&&o.rawSourcePos&&(s.sourcePosition=n.position),!m&&o.includeElementIndex&&(s.index=Wt(r,n),s.siblingCount=Wt(r)),m||(s.node=n),d.length>0?l.createElement(h,s,d):l.createElement(h,s)}function Wt(e,n){let t=-1,r=0;for(;++t<e.children.length&&e.children[t]!==n;)"element"===e.children[t].type&&r++;return r}function Qt(e,n,t,r){const o=function(e,n){var t=ot(n),r=n,o=lt;return t in e.normal?e.property[e.normal[t]]:(t.length>4&&"data"===t.slice(0,4)&&It.test(n)&&("-"===n.charAt(4)?r=function(e){var n=e.slice(5).replace(Ot,zt);return"data"+n.charAt(0).toUpperCase()+n.slice(1)}(n):n=function(e){var n=e.slice(4);return Ot.test(n)?e:("-"!==(n=n.replace(Lt,Dt)).charAt(0)&&(n="-"+n),"data"+n)}(n),o=gt),new o(r,n))}(r.schema,n);let l=t;var a,i;null!=l&&l==l&&(Array.isArray(l)&&(l=o.commaSeparated?(i={},""===(a=l)[a.length-1]&&(a=a.concat("")),a.join((i.padRight?" ":"")+","+(!1===i.padLeft?"":" ")).trim()):function(e){return e.join(" ").trim()}(l)),"style"===o.property&&"string"==typeof l&&(l=function(e){const n={};try{Rt(e,(function(e,t){const r="-ms-"===e.slice(0,4)?`ms-${e.slice(4)}`:e;n[r.replace(/-([a-z])/g,Kt)]=t}))}catch{}return n}(l)),o.space&&o.property?e[$t.call(Nt,o.property)?Nt[o.property]:o.property]=l:o.attribute&&(e[o.attribute]=l))}function Kt(e,n){return n.toUpperCase()}const Yt={}.hasOwnProperty,Gt="https://github.com/remarkjs/react-markdown/blob/main/changelog.md",Xt={plugins:{to:"remarkPlugins",id:"change-plugins-to-remarkplugins"},renderers:{to:"components",id:"change-renderers-to-components"},astPlugins:{id:"remove-buggy-html-in-markdown-parser"},allowDangerousHtml:{id:"remove-buggy-html-in-markdown-parser"},escapeHtml:{id:"remove-buggy-html-in-markdown-parser"},source:{to:"children",id:"change-source-to-children"},allowNode:{to:"allowElement",id:"replace-allownode-allowedtypes-and-disallowedtypes"},allowedTypes:{to:"allowedElements",id:"replace-allownode-allowedtypes-and-disallowedtypes"},disallowedTypes:{to:"disallowedElements",id:"replace-allownode-allowedtypes-and-disallowedtypes"},includeNodeIndex:{to:"includeElementIndex",id:"change-includenodeindex-to-includeelementindex"}};function Zt(e){for(const n in Xt)if(Yt.call(Xt,n)&&Yt.call(e,n)){const e=Xt[n];console.warn(`[react-markdown] Warning: please ${e.to?`use \`${e.to}\` instead of`:"remove"} \`${n}\` (see <${Gt}#${e.id}> for more info)`),delete Xt[n]}const n=U().use(En).use(e.remarkPlugins||[]).use(et,{...e.remarkRehypeOptions,allowDangerousHtml:!0}).use(e.rehypePlugins||[]).use(Pt,e),t=new A;"string"==typeof e.children?t.value=e.children:void 0!==e.children&&null!==e.children&&console.warn(`[react-markdown] Warning: please pass a string as \`children\` (not: \`${e.children}\`)`);const r=n.runSync(n.parse(t),t);if("root"!==r.type)throw new TypeError("Expected a `root` node");let o=l.createElement(l.Fragment,{},Vt({options:e,schema:Bt,listDepth:0},r));return e.className&&(o=l.createElement("div",{className:e.className},o)),o}Zt.propTypes={children:nt.string,className:nt.string,allowElement:nt.func,allowedElements:nt.arrayOf(nt.string),disallowedElements:nt.arrayOf(nt.string),unwrapDisallowed:nt.bool,remarkPlugins:nt.arrayOf(nt.oneOfType([nt.object,nt.func,nt.arrayOf(nt.oneOfType([nt.bool,nt.string,nt.object,nt.func,nt.arrayOf(nt.any)]))])),rehypePlugins:nt.arrayOf(nt.oneOfType([nt.object,nt.func,nt.arrayOf(nt.oneOfType([nt.bool,nt.string,nt.object,nt.func,nt.arrayOf(nt.any)]))])),sourcePos:nt.bool,rawSourcePos:nt.bool,skipHtml:nt.bool,includeElementIndex:nt.bool,transformLinkUri:nt.oneOfType([nt.func,nt.bool]),linkTarget:nt.oneOfType([nt.func,nt.string]),transformImageUri:nt.func,components:nt.object}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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U2l5RixPQUFRLEdBQU1FLFVBQVcsR0FBSXdDLElBT3pELE9BSkkzMEYsRUFBUTBtRCxZQUNWaEwsRUFBUyxnQkFBb0IsTUFBTyxDQUFDZ0wsVUFBVzFtRCxFQUFRMG1ELFdBQVloTCxJQUcvREEsQ0FDVCxDQUVBMjRDLEdBQWMveEMsVUFBWSxDQUV4Qi91QyxTQUFVLFVBRVZtekMsVUFBVyxVQUVYaXFDLGFBQWMsUUFDZEYsZ0JBQWlCLFdBQWtCLFdBQ25DQyxtQkFBb0IsV0FBa0IsV0FDdENHLGlCQUFrQixRQUVsQjJELGNBQWUsV0FDYixhQUFvQixDQUNsQixVQUNBLFFBQ0EsV0FDRSxhQUFvQixDQUNsQixRQUNBLFVBQ0EsVUFDQSxRQUNBLFdBR0UsY0FNVkUsY0FBZSxXQUNiLGFBQW9CLENBQ2xCLFVBQ0EsUUFDQSxXQUNFLGFBQW9CLENBQ2xCLFFBQ0EsVUFDQSxVQUNBLFFBQ0EsV0FHRSxjQU9WM0IsVUFBVyxRQUNYQyxhQUFjLFFBQ2RsQixTQUFVLFFBQ1ZvQixvQkFBcUIsUUFDckJuQixpQkFBa0IsYUFBb0IsQ0FBQyxRQUFnQixVQUN2RFEsV0FBWSxhQUFvQixDQUFDLFFBQWdCLFlBQ2pERyxrQkFBbUIsUUFDbkJMLFdBQVkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvZm9udHNvdXJjZS1vcGVuLXNhbnMvNDAwLmNzcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvZm9udHNvdXJjZS1vcGVuLXNhbnMvNzAwLmNzcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL2V4dGVuZC9pbmRleC5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXBhcnNlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvaXMtYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvcmVhY3QtbWFya2Rvd24vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvcmVhY3QtbWFya2Rvd24vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9zaGFsbG93ZXF1YWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL2ZvbnRzb3VyY2Utb3Blbi1zYW5zLzQwMC5jc3M/OTBmYyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvZm9udHNvdXJjZS1vcGVuLXNhbnMvNzAwLmNzcz8yZjY0Iiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL3N0eWxlLXRvLW9iamVjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvc3R5bGVkLWNvbXBvbmVudHMvbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5tanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvRW51bS5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9VdGlsaXR5LmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL1Rva2VuaXplci5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9TZXJpYWxpemVyLmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL1ByZWZpeGVyLmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL01pZGRsZXdhcmUuanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvUGFyc2VyLmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi91bml0bGVzcy9kaXN0L2Vtb3Rpb24tdW5pdGxlc3MuZXNtLmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9zdHlsZWQtY29tcG9uZW50cy9kaXN0L3N0eWxlZC1jb21wb25lbnRzLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy91bmlzdC11dGlsLXN0cmluZ2lmeS1wb3NpdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvdmZpbGUtbWVzc2FnZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvdmZpbGUvbGliL21pbnBhdGguYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvdmZpbGUvbGliL21pbnByb2MuYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvdmZpbGUvbGliL21pbnVybC5zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL3ZmaWxlL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvdmZpbGUvbGliL21pbnVybC5icm93c2VyLmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9iYWlsL2luZGV4LmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy91bmlmaWVkL25vZGVfbW9kdWxlcy9pcy1wbGFpbi1vYmovaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL3VuaWZpZWQvbGliL2luZGV4LmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy90cm91Z2gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8tc3RyaW5nL2luZGV4LmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9taWNyb21hcmstdXRpbC1jaHVua2VkL2luZGV4LmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9taWNyb21hcmstdXRpbC1jb21iaW5lLWV4dGVuc2lvbnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL21pY3JvbWFyay11dGlsLWNoYXJhY3Rlci9saWIvdW5pY29kZS1wdW5jdHVhdGlvbi1yZWdleC5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyL2luZGV4LmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9taWNyb21hcmstZmFjdG9yeS1zcGFjZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrL2xpYi9pbml0aWFsaXplL2NvbnRlbnQuanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL21pY3JvbWFyay9saWIvaW5pdGlhbGl6ZS9kb2N1bWVudC5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9saWIvYmxhbmstbGluZS5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLXV0aWwtc3VidG9rZW5pemUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvbGliL2NvbnRlbnQuanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL21pY3JvbWFyay9saWIvaW5pdGlhbGl6ZS9mbG93LmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9taWNyb21hcmsvbGliL2luaXRpYWxpemUvdGV4dC5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLXV0aWwtcmVzb2x2ZS1hbGwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL21pY3JvbWFyay9saWIvY3JlYXRlLXRva2VuaXplci5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9saWIvdGhlbWF0aWMtYnJlYWsuanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvbGliL2xpc3QuanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvbGliL2Jsb2NrLXF1b3RlLmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9taWNyb21hcmstZmFjdG9yeS1kZXN0aW5hdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWZhY3RvcnktbGFiZWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL21pY3JvbWFyay1mYWN0b3J5LXRpdGxlL2luZGV4LmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9taWNyb21hcmstZmFjdG9yeS13aGl0ZXNwYWNlL2luZGV4LmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9taWNyb21hcmstdXRpbC1ub3JtYWxpemUtaWRlbnRpZmllci9pbmRleC5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9saWIvZGVmaW5pdGlvbi5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9saWIvY29kZS1pbmRlbnRlZC5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9saWIvaGVhZGluZy1hdHguanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvbGliL3NldGV4dC11bmRlcmxpbmUuanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL21pY3JvbWFyay11dGlsLWh0bWwtdGFnLW5hbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvbGliL2h0bWwtZmxvdy5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9saWIvY29kZS1mZW5jZWQuanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL3BhcnNlLWVudGl0aWVzL2RlY29kZS1lbnRpdHkuYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9saWIvY2hhcmFjdGVyLXJlZmVyZW5jZS5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9saWIvY2hhcmFjdGVyLWVzY2FwZS5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9saWIvbGluZS1lbmRpbmcuanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvbGliL2xhYmVsLWVuZC5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9saWIvbGFiZWwtc3RhcnQtaW1hZ2UuanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL21pY3JvbWFyay11dGlsLWNsYXNzaWZ5LWNoYXJhY3Rlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9saWIvYXR0ZW50aW9uLmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2xpYi9hdXRvbGluay5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9saWIvaHRtbC10ZXh0LmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2xpYi9sYWJlbC1zdGFydC1saW5rLmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2xpYi9oYXJkLWJyZWFrLWVzY2FwZS5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9saWIvY29kZS10ZXh0LmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9taWNyb21hcmsvbGliL2NvbnN0cnVjdHMuanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL21pY3JvbWFyay9saWIvcHJlcHJvY2Vzcy5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLXV0aWwtZGVjb2RlLW51bWVyaWMtY2hhcmFjdGVyLXJlZmVyZW5jZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLXV0aWwtZGVjb2RlLXN0cmluZy9pbmRleC5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC1mcm9tLW1hcmtkb3duL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrL2xpYi9wb3N0cHJvY2Vzcy5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrL2xpYi9wYXJzZS5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2luZGV4LmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL2luZGV4LmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9taWNyb21hcmstdXRpbC1zYW5pdGl6ZS11cmkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL3VuaXN0LXV0aWwtaXMvbGliL2luZGV4LmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy91bmlzdC11dGlsLXZpc2l0LXBhcmVudHMvbGliL2luZGV4LmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy91bmlzdC11dGlsLXZpc2l0L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvdW5pc3QtdXRpbC1wb3NpdGlvbi9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtZGVmaW5pdGlvbnMvbGliL2luZGV4LmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2Zvb3Rub3RlLXJlZmVyZW5jZS5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1oYXN0L2xpYi9yZXZlcnQuanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8taGFzdC9saWIvaGFuZGxlcnMvbGlzdC1pdGVtLmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy90cmltLWxpbmVzL2luZGV4LmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2luZGV4LmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2Jsb2NrcXVvdGUuanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8taGFzdC9saWIvaGFuZGxlcnMvYnJlYWsuanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8taGFzdC9saWIvaGFuZGxlcnMvY29kZS5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1oYXN0L2xpYi9oYW5kbGVycy9kZWxldGUuanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8taGFzdC9saWIvaGFuZGxlcnMvZW1waGFzaXMuanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8taGFzdC9saWIvaGFuZGxlcnMvZm9vdG5vdGUuanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8taGFzdC9saWIvaGFuZGxlcnMvaGVhZGluZy5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1oYXN0L2xpYi9oYW5kbGVycy9odG1sLmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2ltYWdlLXJlZmVyZW5jZS5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1oYXN0L2xpYi9oYW5kbGVycy9pbWFnZS5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1oYXN0L2xpYi9oYW5kbGVycy9pbmxpbmUtY29kZS5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1oYXN0L2xpYi9oYW5kbGVycy9saW5rLXJlZmVyZW5jZS5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1oYXN0L2xpYi9oYW5kbGVycy9saW5rLmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2xpc3QuanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8taGFzdC9saWIvaGFuZGxlcnMvcGFyYWdyYXBoLmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL3Jvb3QuanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8taGFzdC9saWIvaGFuZGxlcnMvc3Ryb25nLmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL3RhYmxlLmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL3RhYmxlLWNlbGwuanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8taGFzdC9saWIvaGFuZGxlcnMvdGFibGUtcm93LmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL3RleHQuanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8taGFzdC9saWIvaGFuZGxlcnMvdGhlbWF0aWMtYnJlYWsuanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8taGFzdC9saWIvc3RhdGUuanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8taGFzdC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL3VuaXN0LXV0aWwtZ2VuZXJhdGVkL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1oYXN0L2xpYi9mb290ZXIuanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1yZWh5cGUvbGliL2luZGV4LmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9wcm9wZXJ0eS1pbmZvcm1hdGlvbi9saWIvdXRpbC9zY2hlbWEuanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL3Byb3BlcnR5LWluZm9ybWF0aW9uL2xpYi91dGlsL21lcmdlLmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9wcm9wZXJ0eS1pbmZvcm1hdGlvbi9saWIvbm9ybWFsaXplLmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9wcm9wZXJ0eS1pbmZvcm1hdGlvbi9saWIvdXRpbC9pbmZvLmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9wcm9wZXJ0eS1pbmZvcm1hdGlvbi9saWIvdXRpbC90eXBlcy5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvcHJvcGVydHktaW5mb3JtYXRpb24vbGliL3V0aWwvZGVmaW5lZC1pbmZvLmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9wcm9wZXJ0eS1pbmZvcm1hdGlvbi9saWIvdXRpbC9jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL3Byb3BlcnR5LWluZm9ybWF0aW9uL2xpYi94bGluay5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvcHJvcGVydHktaW5mb3JtYXRpb24vbGliL3htbC5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvcHJvcGVydHktaW5mb3JtYXRpb24vbGliL3V0aWwvY2FzZS1zZW5zaXRpdmUtdHJhbnNmb3JtLmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9wcm9wZXJ0eS1pbmZvcm1hdGlvbi9saWIvdXRpbC9jYXNlLWluc2Vuc2l0aXZlLXRyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvcHJvcGVydHktaW5mb3JtYXRpb24vbGliL3htbG5zLmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9wcm9wZXJ0eS1pbmZvcm1hdGlvbi9saWIvYXJpYS5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvcHJvcGVydHktaW5mb3JtYXRpb24vbGliL2h0bWwuanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL3Byb3BlcnR5LWluZm9ybWF0aW9uL2xpYi9zdmcuanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL3Byb3BlcnR5LWluZm9ybWF0aW9uL2luZGV4LmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvcmVoeXBlLWZpbHRlci5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvaGFzdC11dGlsLXdoaXRlc3BhY2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcGVzc2ltaXN0aWMtaXQuY29tLy4vbm9kZV9tb2R1bGVzL3Byb3BlcnR5LWluZm9ybWF0aW9uL2xpYi9maW5kLmpzIiwid2VicGFjazovL3Blc3NpbWlzdGljLWl0LmNvbS8uL25vZGVfbW9kdWxlcy9wcm9wZXJ0eS1pbmZvcm1hdGlvbi9saWIvaGFzdC10by1yZWFjdC5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvc3R5bGUtdG8tb2JqZWN0L2luZGV4Lm1qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvcmVhY3QtbWFya2Rvd24vbGliL3VyaS10cmFuc2Zvcm1lci5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvcmVhY3QtbWFya2Rvd24vbGliL2FzdC10by1yZWFjdC5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvY29tbWEtc2VwYXJhdGVkLXRva2Vucy9pbmRleC5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvc3BhY2Utc2VwYXJhdGVkLXRva2Vucy9pbmRleC5qcyIsIndlYnBhY2s6Ly9wZXNzaW1pc3RpYy1pdC5jb20vLi9ub2RlX21vZHVsZXMvcmVhY3QtbWFya2Rvd24vbGliL3JlYWN0LW1hcmtkb3duLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fIGZyb20gXCIuLi9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IG5ldyBVUkwoXCIuL2ZpbGVzL29wZW4tc2Fucy1jeXJpbGxpYy1leHQtNDAwLWl0YWxpYy53b2ZmMlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fID0gbmV3IFVSTChcIi4vZmlsZXMvb3Blbi1zYW5zLWFsbC00MDAtaXRhbGljLndvZmZcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMl9fXyA9IG5ldyBVUkwoXCIuL2ZpbGVzL29wZW4tc2Fucy1jeXJpbGxpYy00MDAtaXRhbGljLndvZmYyXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzNfX18gPSBuZXcgVVJMKFwiLi9maWxlcy9vcGVuLXNhbnMtZ3JlZWstZXh0LTQwMC1pdGFsaWMud29mZjJcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNF9fXyA9IG5ldyBVUkwoXCIuL2ZpbGVzL29wZW4tc2Fucy1ncmVlay00MDAtaXRhbGljLndvZmYyXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzVfX18gPSBuZXcgVVJMKFwiLi9maWxlcy9vcGVuLXNhbnMtdmlldG5hbWVzZS00MDAtaXRhbGljLndvZmYyXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzZfX18gPSBuZXcgVVJMKFwiLi9maWxlcy9vcGVuLXNhbnMtbGF0aW4tZXh0LTQwMC1pdGFsaWMud29mZjJcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfN19fXyA9IG5ldyBVUkwoXCIuL2ZpbGVzL29wZW4tc2Fucy1sYXRpbi00MDAtaXRhbGljLndvZmYyXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzhfX18gPSBuZXcgVVJMKFwiLi9maWxlcy9vcGVuLXNhbnMtY3lyaWxsaWMtZXh0LTQwMC1ub3JtYWwud29mZjJcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfOV9fXyA9IG5ldyBVUkwoXCIuL2ZpbGVzL29wZW4tc2Fucy1hbGwtNDAwLW5vcm1hbC53b2ZmXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzEwX19fID0gbmV3IFVSTChcIi4vZmlsZXMvb3Blbi1zYW5zLWN5cmlsbGljLTQwMC1ub3JtYWwud29mZjJcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMTFfX18gPSBuZXcgVVJMKFwiLi9maWxlcy9vcGVuLXNhbnMtZ3JlZWstZXh0LTQwMC1ub3JtYWwud29mZjJcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMTJfX18gPSBuZXcgVVJMKFwiLi9maWxlcy9vcGVuLXNhbnMtZ3JlZWstNDAwLW5vcm1hbC53b2ZmMlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xM19fXyA9IG5ldyBVUkwoXCIuL2ZpbGVzL29wZW4tc2Fucy12aWV0bmFtZXNlLTQwMC1ub3JtYWwud29mZjJcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMTRfX18gPSBuZXcgVVJMKFwiLi9maWxlcy9vcGVuLXNhbnMtbGF0aW4tZXh0LTQwMC1ub3JtYWwud29mZjJcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMTVfX18gPSBuZXcgVVJMKFwiLi9maWxlcy9vcGVuLXNhbnMtbGF0aW4tNDAwLW5vcm1hbC53b2ZmMlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMl9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzJfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzNfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8zX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80X19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzVfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzZfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF82X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF83X19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfN19fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfOF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzhfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzlfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF85X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzEwX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xMV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzExX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xMl9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzEyX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xM19fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzEzX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xNF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzE0X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xNV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzE1X19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLyogb3Blbi1zYW5zLWN5cmlsbGljLWV4dC00MDAtaXRhbGljKi9cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogJ09wZW4gU2Fucyc7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xuICBmb250LXdlaWdodDogNDAwO1xuICBzcmM6IHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX199KSBmb3JtYXQoJ3dvZmYyJyksIHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX199KSBmb3JtYXQoJ3dvZmYnKTtcbiAgdW5pY29kZS1yYW5nZTogVSswNDYwLTA1MkYsIFUrMUM4MC0xQzg4LCBVKzIwQjQsIFUrMkRFMC0yREZGLCBVK0E2NDAtQTY5RiwgVStGRTJFLUZFMkY7XG59XG4vKiBvcGVuLXNhbnMtY3lyaWxsaWMtNDAwLWl0YWxpYyovXG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6ICdPcGVuIFNhbnMnO1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG4gIGZvbnQtZGlzcGxheTogc3dhcDtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgc3JjOiB1cmwoJHtfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yX19ffSkgZm9ybWF0KCd3b2ZmMicpLCB1cmwoJHtfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19ffSkgZm9ybWF0KCd3b2ZmJyk7XG4gIHVuaWNvZGUtcmFuZ2U6IFUrMDQwMC0wNDVGLCBVKzA0OTAtMDQ5MSwgVSswNEIwLTA0QjEsIFUrMjExNjtcbn1cbi8qIG9wZW4tc2Fucy1ncmVlay1leHQtNDAwLWl0YWxpYyovXG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6ICdPcGVuIFNhbnMnO1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG4gIGZvbnQtZGlzcGxheTogc3dhcDtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgc3JjOiB1cmwoJHtfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8zX19ffSkgZm9ybWF0KCd3b2ZmMicpLCB1cmwoJHtfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19ffSkgZm9ybWF0KCd3b2ZmJyk7XG4gIHVuaWNvZGUtcmFuZ2U6IFUrMUYwMC0xRkZGO1xufVxuLyogb3Blbi1zYW5zLWdyZWVrLTQwMC1pdGFsaWMqL1xuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiAnT3BlbiBTYW5zJztcbiAgZm9udC1zdHlsZTogaXRhbGljO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIHNyYzogdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNF9fX30pIGZvcm1hdCgnd29mZjInKSwgdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fX30pIGZvcm1hdCgnd29mZicpO1xuICB1bmljb2RlLXJhbmdlOiBVKzAzNzAtMDNGRjtcbn1cbi8qIG9wZW4tc2Fucy12aWV0bmFtZXNlLTQwMC1pdGFsaWMqL1xuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiAnT3BlbiBTYW5zJztcbiAgZm9udC1zdHlsZTogaXRhbGljO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIHNyYzogdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNV9fX30pIGZvcm1hdCgnd29mZjInKSwgdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fX30pIGZvcm1hdCgnd29mZicpO1xuICB1bmljb2RlLXJhbmdlOiBVKzAxMDItMDEwMywgVSswMTEwLTAxMTEsIFUrMDEyOC0wMTI5LCBVKzAxNjgtMDE2OSwgVSswMUEwLTAxQTEsIFUrMDFBRi0wMUIwLCBVKzFFQTAtMUVGOSwgVSsyMEFCO1xufVxuLyogb3Blbi1zYW5zLWxhdGluLWV4dC00MDAtaXRhbGljKi9cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogJ09wZW4gU2Fucyc7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xuICBmb250LXdlaWdodDogNDAwO1xuICBzcmM6IHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzZfX199KSBmb3JtYXQoJ3dvZmYyJyksIHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX199KSBmb3JtYXQoJ3dvZmYnKTtcbiAgdW5pY29kZS1yYW5nZTogVSswMTAwLTAyNEYsIFUrMDI1OSwgVSsxRTAwLTFFRkYsIFUrMjAyMCwgVSsyMEEwLTIwQUIsIFUrMjBBRC0yMENGLCBVKzIxMTMsIFUrMkM2MC0yQzdGLCBVK0E3MjAtQTdGRjtcbn1cbi8qIG9wZW4tc2Fucy1sYXRpbi00MDAtaXRhbGljKi9cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogJ09wZW4gU2Fucyc7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xuICBmb250LXdlaWdodDogNDAwO1xuICBzcmM6IHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzdfX199KSBmb3JtYXQoJ3dvZmYyJyksIHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX199KSBmb3JtYXQoJ3dvZmYnKTtcbiAgdW5pY29kZS1yYW5nZTogVSswMDAwLTAwRkYsIFUrMDEzMSwgVSswMTUyLTAxNTMsIFUrMDJCQi0wMkJDLCBVKzAyQzYsIFUrMDJEQSwgVSswMkRDLCBVKzIwMDAtMjA2RiwgVSsyMDc0LCBVKzIwQUMsIFUrMjEyMiwgVSsyMTkxLCBVKzIxOTMsIFUrMjIxMiwgVSsyMjE1LCBVK0ZFRkYsIFUrRkZGRDtcbn1cbi8qIG9wZW4tc2Fucy1jeXJpbGxpYy1leHQtNDAwLW5vcm1hbCovXG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6ICdPcGVuIFNhbnMnO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtZGlzcGxheTogc3dhcDtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgc3JjOiB1cmwoJHtfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF84X19ffSkgZm9ybWF0KCd3b2ZmMicpLCB1cmwoJHtfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF85X19ffSkgZm9ybWF0KCd3b2ZmJyk7XG4gIHVuaWNvZGUtcmFuZ2U6IFUrMDQ2MC0wNTJGLCBVKzFDODAtMUM4OCwgVSsyMEI0LCBVKzJERTAtMkRGRiwgVStBNjQwLUE2OUYsIFUrRkUyRS1GRTJGO1xufVxuLyogb3Blbi1zYW5zLWN5cmlsbGljLTQwMC1ub3JtYWwqL1xuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiAnT3BlbiBTYW5zJztcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIHNyYzogdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMTBfX199KSBmb3JtYXQoJ3dvZmYyJyksIHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzlfX199KSBmb3JtYXQoJ3dvZmYnKTtcbiAgdW5pY29kZS1yYW5nZTogVSswNDAwLTA0NUYsIFUrMDQ5MC0wNDkxLCBVKzA0QjAtMDRCMSwgVSsyMTE2O1xufVxuLyogb3Blbi1zYW5zLWdyZWVrLWV4dC00MDAtbm9ybWFsKi9cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogJ09wZW4gU2Fucyc7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xuICBmb250LXdlaWdodDogNDAwO1xuICBzcmM6IHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzExX19ffSkgZm9ybWF0KCd3b2ZmMicpLCB1cmwoJHtfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF85X19ffSkgZm9ybWF0KCd3b2ZmJyk7XG4gIHVuaWNvZGUtcmFuZ2U6IFUrMUYwMC0xRkZGO1xufVxuLyogb3Blbi1zYW5zLWdyZWVrLTQwMC1ub3JtYWwqL1xuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiAnT3BlbiBTYW5zJztcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIHNyYzogdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMTJfX199KSBmb3JtYXQoJ3dvZmYyJyksIHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzlfX199KSBmb3JtYXQoJ3dvZmYnKTtcbiAgdW5pY29kZS1yYW5nZTogVSswMzcwLTAzRkY7XG59XG4vKiBvcGVuLXNhbnMtdmlldG5hbWVzZS00MDAtbm9ybWFsKi9cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogJ09wZW4gU2Fucyc7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xuICBmb250LXdlaWdodDogNDAwO1xuICBzcmM6IHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzEzX19ffSkgZm9ybWF0KCd3b2ZmMicpLCB1cmwoJHtfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF85X19ffSkgZm9ybWF0KCd3b2ZmJyk7XG4gIHVuaWNvZGUtcmFuZ2U6IFUrMDEwMi0wMTAzLCBVKzAxMTAtMDExMSwgVSswMTI4LTAxMjksIFUrMDE2OC0wMTY5LCBVKzAxQTAtMDFBMSwgVSswMUFGLTAxQjAsIFUrMUVBMC0xRUY5LCBVKzIwQUI7XG59XG4vKiBvcGVuLXNhbnMtbGF0aW4tZXh0LTQwMC1ub3JtYWwqL1xuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiAnT3BlbiBTYW5zJztcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIHNyYzogdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMTRfX199KSBmb3JtYXQoJ3dvZmYyJyksIHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzlfX199KSBmb3JtYXQoJ3dvZmYnKTtcbiAgdW5pY29kZS1yYW5nZTogVSswMTAwLTAyNEYsIFUrMDI1OSwgVSsxRTAwLTFFRkYsIFUrMjAyMCwgVSsyMEEwLTIwQUIsIFUrMjBBRC0yMENGLCBVKzIxMTMsIFUrMkM2MC0yQzdGLCBVK0E3MjAtQTdGRjtcbn1cbi8qIG9wZW4tc2Fucy1sYXRpbi00MDAtbm9ybWFsKi9cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogJ09wZW4gU2Fucyc7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xuICBmb250LXdlaWdodDogNDAwO1xuICBzcmM6IHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzE1X19ffSkgZm9ybWF0KCd3b2ZmMicpLCB1cmwoJHtfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF85X19ffSkgZm9ybWF0KCd3b2ZmJyk7XG4gIHVuaWNvZGUtcmFuZ2U6IFUrMDAwMC0wMEZGLCBVKzAxMzEsIFUrMDE1Mi0wMTUzLCBVKzAyQkItMDJCQywgVSswMkM2LCBVKzAyREEsIFUrMDJEQywgVSsyMDAwLTIwNkYsIFUrMjA3NCwgVSsyMEFDLCBVKzIxMjIsIFUrMjE5MSwgVSsyMTkzLCBVKzIyMTIsIFUrMjIxNSwgVStGRUZGLCBVK0ZGRkQ7XG59XG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9mb250c291cmNlLW9wZW4tc2Fucy80MDAuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLHFDQUFxQztBQUNyQztFQUNFLHdCQUF3QjtFQUN4QixrQkFBa0I7RUFDbEIsa0JBQWtCO0VBQ2xCLGdCQUFnQjtFQUNoQixvSEFBd0k7RUFDeEksc0ZBQXNGO0FBQ3hGO0FBQ0EsaUNBQWlDO0FBQ2pDO0VBQ0Usd0JBQXdCO0VBQ3hCLGtCQUFrQjtFQUNsQixrQkFBa0I7RUFDbEIsZ0JBQWdCO0VBQ2hCLG9IQUFvSTtFQUNwSSw0REFBNEQ7QUFDOUQ7QUFDQSxrQ0FBa0M7QUFDbEM7RUFDRSx3QkFBd0I7RUFDeEIsa0JBQWtCO0VBQ2xCLGtCQUFrQjtFQUNsQixnQkFBZ0I7RUFDaEIsb0hBQXFJO0VBQ3JJLDBCQUEwQjtBQUM1QjtBQUNBLDhCQUE4QjtBQUM5QjtFQUNFLHdCQUF3QjtFQUN4QixrQkFBa0I7RUFDbEIsa0JBQWtCO0VBQ2xCLGdCQUFnQjtFQUNoQixvSEFBaUk7RUFDakksMEJBQTBCO0FBQzVCO0FBQ0EsbUNBQW1DO0FBQ25DO0VBQ0Usd0JBQXdCO0VBQ3hCLGtCQUFrQjtFQUNsQixrQkFBa0I7RUFDbEIsZ0JBQWdCO0VBQ2hCLG9IQUFzSTtFQUN0SSxnSEFBZ0g7QUFDbEg7QUFDQSxrQ0FBa0M7QUFDbEM7RUFDRSx3QkFBd0I7RUFDeEIsa0JBQWtCO0VBQ2xCLGtCQUFrQjtFQUNsQixnQkFBZ0I7RUFDaEIsb0hBQXFJO0VBQ3JJLG1IQUFtSDtBQUNySDtBQUNBLDhCQUE4QjtBQUM5QjtFQUNFLHdCQUF3QjtFQUN4QixrQkFBa0I7RUFDbEIsa0JBQWtCO0VBQ2xCLGdCQUFnQjtFQUNoQixvSEFBaUk7RUFDakkseUtBQXlLO0FBQzNLO0FBQ0EscUNBQXFDO0FBQ3JDO0VBQ0Usd0JBQXdCO0VBQ3hCLGtCQUFrQjtFQUNsQixrQkFBa0I7RUFDbEIsZ0JBQWdCO0VBQ2hCLG9IQUF3STtFQUN4SSxzRkFBc0Y7QUFDeEY7QUFDQSxpQ0FBaUM7QUFDakM7RUFDRSx3QkFBd0I7RUFDeEIsa0JBQWtCO0VBQ2xCLGtCQUFrQjtFQUNsQixnQkFBZ0I7RUFDaEIscUhBQW9JO0VBQ3BJLDREQUE0RDtBQUM5RDtBQUNBLGtDQUFrQztBQUNsQztFQUNFLHdCQUF3QjtFQUN4QixrQkFBa0I7RUFDbEIsa0JBQWtCO0VBQ2xCLGdCQUFnQjtFQUNoQixxSEFBcUk7RUFDckksMEJBQTBCO0FBQzVCO0FBQ0EsOEJBQThCO0FBQzlCO0VBQ0Usd0JBQXdCO0VBQ3hCLGtCQUFrQjtFQUNsQixrQkFBa0I7RUFDbEIsZ0JBQWdCO0VBQ2hCLHFIQUFpSTtFQUNqSSwwQkFBMEI7QUFDNUI7QUFDQSxtQ0FBbUM7QUFDbkM7RUFDRSx3QkFBd0I7RUFDeEIsa0JBQWtCO0VBQ2xCLGtCQUFrQjtFQUNsQixnQkFBZ0I7RUFDaEIscUhBQXNJO0VBQ3RJLGdIQUFnSDtBQUNsSDtBQUNBLGtDQUFrQztBQUNsQztFQUNFLHdCQUF3QjtFQUN4QixrQkFBa0I7RUFDbEIsa0JBQWtCO0VBQ2xCLGdCQUFnQjtFQUNoQixxSEFBcUk7RUFDckksbUhBQW1IO0FBQ3JIO0FBQ0EsOEJBQThCO0FBQzlCO0VBQ0Usd0JBQXdCO0VBQ3hCLGtCQUFrQjtFQUNsQixrQkFBa0I7RUFDbEIsZ0JBQWdCO0VBQ2hCLHFIQUFpSTtFQUNqSSx5S0FBeUs7QUFDM0tcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLyogb3Blbi1zYW5zLWN5cmlsbGljLWV4dC00MDAtaXRhbGljKi9cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiAnT3BlbiBTYW5zJztcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcXG4gIGZvbnQtZGlzcGxheTogc3dhcDtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBzcmM6IHVybCgnLi9maWxlcy9vcGVuLXNhbnMtY3lyaWxsaWMtZXh0LTQwMC1pdGFsaWMud29mZjInKSBmb3JtYXQoJ3dvZmYyJyksIHVybCgnLi9maWxlcy9vcGVuLXNhbnMtYWxsLTQwMC1pdGFsaWMud29mZicpIGZvcm1hdCgnd29mZicpO1xcbiAgdW5pY29kZS1yYW5nZTogVSswNDYwLTA1MkYsIFUrMUM4MC0xQzg4LCBVKzIwQjQsIFUrMkRFMC0yREZGLCBVK0E2NDAtQTY5RiwgVStGRTJFLUZFMkY7XFxufVxcbi8qIG9wZW4tc2Fucy1jeXJpbGxpYy00MDAtaXRhbGljKi9cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiAnT3BlbiBTYW5zJztcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcXG4gIGZvbnQtZGlzcGxheTogc3dhcDtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBzcmM6IHVybCgnLi9maWxlcy9vcGVuLXNhbnMtY3lyaWxsaWMtNDAwLWl0YWxpYy53b2ZmMicpIGZvcm1hdCgnd29mZjInKSwgdXJsKCcuL2ZpbGVzL29wZW4tc2Fucy1hbGwtNDAwLWl0YWxpYy53b2ZmJykgZm9ybWF0KCd3b2ZmJyk7XFxuICB1bmljb2RlLXJhbmdlOiBVKzA0MDAtMDQ1RiwgVSswNDkwLTA0OTEsIFUrMDRCMC0wNEIxLCBVKzIxMTY7XFxufVxcbi8qIG9wZW4tc2Fucy1ncmVlay1leHQtNDAwLWl0YWxpYyovXFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogJ09wZW4gU2Fucyc7XFxuICBmb250LXN0eWxlOiBpdGFsaWM7XFxuICBmb250LWRpc3BsYXk6IHN3YXA7XFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgc3JjOiB1cmwoJy4vZmlsZXMvb3Blbi1zYW5zLWdyZWVrLWV4dC00MDAtaXRhbGljLndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLCB1cmwoJy4vZmlsZXMvb3Blbi1zYW5zLWFsbC00MDAtaXRhbGljLndvZmYnKSBmb3JtYXQoJ3dvZmYnKTtcXG4gIHVuaWNvZGUtcmFuZ2U6IFUrMUYwMC0xRkZGO1xcbn1cXG4vKiBvcGVuLXNhbnMtZ3JlZWstNDAwLWl0YWxpYyovXFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogJ09wZW4gU2Fucyc7XFxuICBmb250LXN0eWxlOiBpdGFsaWM7XFxuICBmb250LWRpc3BsYXk6IHN3YXA7XFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgc3JjOiB1cmwoJy4vZmlsZXMvb3Blbi1zYW5zLWdyZWVrLTQwMC1pdGFsaWMud29mZjInKSBmb3JtYXQoJ3dvZmYyJyksIHVybCgnLi9maWxlcy9vcGVuLXNhbnMtYWxsLTQwMC1pdGFsaWMud29mZicpIGZvcm1hdCgnd29mZicpO1xcbiAgdW5pY29kZS1yYW5nZTogVSswMzcwLTAzRkY7XFxufVxcbi8qIG9wZW4tc2Fucy12aWV0bmFtZXNlLTQwMC1pdGFsaWMqL1xcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6ICdPcGVuIFNhbnMnO1xcbiAgZm9udC1zdHlsZTogaXRhbGljO1xcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gIHNyYzogdXJsKCcuL2ZpbGVzL29wZW4tc2Fucy12aWV0bmFtZXNlLTQwMC1pdGFsaWMud29mZjInKSBmb3JtYXQoJ3dvZmYyJyksIHVybCgnLi9maWxlcy9vcGVuLXNhbnMtYWxsLTQwMC1pdGFsaWMud29mZicpIGZvcm1hdCgnd29mZicpO1xcbiAgdW5pY29kZS1yYW5nZTogVSswMTAyLTAxMDMsIFUrMDExMC0wMTExLCBVKzAxMjgtMDEyOSwgVSswMTY4LTAxNjksIFUrMDFBMC0wMUExLCBVKzAxQUYtMDFCMCwgVSsxRUEwLTFFRjksIFUrMjBBQjtcXG59XFxuLyogb3Blbi1zYW5zLWxhdGluLWV4dC00MDAtaXRhbGljKi9cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiAnT3BlbiBTYW5zJztcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcXG4gIGZvbnQtZGlzcGxheTogc3dhcDtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBzcmM6IHVybCgnLi9maWxlcy9vcGVuLXNhbnMtbGF0aW4tZXh0LTQwMC1pdGFsaWMud29mZjInKSBmb3JtYXQoJ3dvZmYyJyksIHVybCgnLi9maWxlcy9vcGVuLXNhbnMtYWxsLTQwMC1pdGFsaWMud29mZicpIGZvcm1hdCgnd29mZicpO1xcbiAgdW5pY29kZS1yYW5nZTogVSswMTAwLTAyNEYsIFUrMDI1OSwgVSsxRTAwLTFFRkYsIFUrMjAyMCwgVSsyMEEwLTIwQUIsIFUrMjBBRC0yMENGLCBVKzIxMTMsIFUrMkM2MC0yQzdGLCBVK0E3MjAtQTdGRjtcXG59XFxuLyogb3Blbi1zYW5zLWxhdGluLTQwMC1pdGFsaWMqL1xcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6ICdPcGVuIFNhbnMnO1xcbiAgZm9udC1zdHlsZTogaXRhbGljO1xcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gIHNyYzogdXJsKCcuL2ZpbGVzL29wZW4tc2Fucy1sYXRpbi00MDAtaXRhbGljLndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLCB1cmwoJy4vZmlsZXMvb3Blbi1zYW5zLWFsbC00MDAtaXRhbGljLndvZmYnKSBmb3JtYXQoJ3dvZmYnKTtcXG4gIHVuaWNvZGUtcmFuZ2U6IFUrMDAwMC0wMEZGLCBVKzAxMzEsIFUrMDE1Mi0wMTUzLCBVKzAyQkItMDJCQywgVSswMkM2LCBVKzAyREEsIFUrMDJEQywgVSsyMDAwLTIwNkYsIFUrMjA3NCwgVSsyMEFDLCBVKzIxMjIsIFUrMjE5MSwgVSsyMTkzLCBVKzIyMTIsIFUrMjIxNSwgVStGRUZGLCBVK0ZGRkQ7XFxufVxcbi8qIG9wZW4tc2Fucy1jeXJpbGxpYy1leHQtNDAwLW5vcm1hbCovXFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogJ09wZW4gU2Fucyc7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LWRpc3BsYXk6IHN3YXA7XFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgc3JjOiB1cmwoJy4vZmlsZXMvb3Blbi1zYW5zLWN5cmlsbGljLWV4dC00MDAtbm9ybWFsLndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLCB1cmwoJy4vZmlsZXMvb3Blbi1zYW5zLWFsbC00MDAtbm9ybWFsLndvZmYnKSBmb3JtYXQoJ3dvZmYnKTtcXG4gIHVuaWNvZGUtcmFuZ2U6IFUrMDQ2MC0wNTJGLCBVKzFDODAtMUM4OCwgVSsyMEI0LCBVKzJERTAtMkRGRiwgVStBNjQwLUE2OUYsIFUrRkUyRS1GRTJGO1xcbn1cXG4vKiBvcGVuLXNhbnMtY3lyaWxsaWMtNDAwLW5vcm1hbCovXFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogJ09wZW4gU2Fucyc7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LWRpc3BsYXk6IHN3YXA7XFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgc3JjOiB1cmwoJy4vZmlsZXMvb3Blbi1zYW5zLWN5cmlsbGljLTQwMC1ub3JtYWwud29mZjInKSBmb3JtYXQoJ3dvZmYyJyksIHVybCgnLi9maWxlcy9vcGVuLXNhbnMtYWxsLTQwMC1ub3JtYWwud29mZicpIGZvcm1hdCgnd29mZicpO1xcbiAgdW5pY29kZS1yYW5nZTogVSswNDAwLTA0NUYsIFUrMDQ5MC0wNDkxLCBVKzA0QjAtMDRCMSwgVSsyMTE2O1xcbn1cXG4vKiBvcGVuLXNhbnMtZ3JlZWstZXh0LTQwMC1ub3JtYWwqL1xcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6ICdPcGVuIFNhbnMnO1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gIHNyYzogdXJsKCcuL2ZpbGVzL29wZW4tc2Fucy1ncmVlay1leHQtNDAwLW5vcm1hbC53b2ZmMicpIGZvcm1hdCgnd29mZjInKSwgdXJsKCcuL2ZpbGVzL29wZW4tc2Fucy1hbGwtNDAwLW5vcm1hbC53b2ZmJykgZm9ybWF0KCd3b2ZmJyk7XFxuICB1bmljb2RlLXJhbmdlOiBVKzFGMDAtMUZGRjtcXG59XFxuLyogb3Blbi1zYW5zLWdyZWVrLTQwMC1ub3JtYWwqL1xcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6ICdPcGVuIFNhbnMnO1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gIHNyYzogdXJsKCcuL2ZpbGVzL29wZW4tc2Fucy1ncmVlay00MDAtbm9ybWFsLndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLCB1cmwoJy4vZmlsZXMvb3Blbi1zYW5zLWFsbC00MDAtbm9ybWFsLndvZmYnKSBmb3JtYXQoJ3dvZmYnKTtcXG4gIHVuaWNvZGUtcmFuZ2U6IFUrMDM3MC0wM0ZGO1xcbn1cXG4vKiBvcGVuLXNhbnMtdmlldG5hbWVzZS00MDAtbm9ybWFsKi9cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiAnT3BlbiBTYW5zJztcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtZGlzcGxheTogc3dhcDtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBzcmM6IHVybCgnLi9maWxlcy9vcGVuLXNhbnMtdmlldG5hbWVzZS00MDAtbm9ybWFsLndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLCB1cmwoJy4vZmlsZXMvb3Blbi1zYW5zLWFsbC00MDAtbm9ybWFsLndvZmYnKSBmb3JtYXQoJ3dvZmYnKTtcXG4gIHVuaWNvZGUtcmFuZ2U6IFUrMDEwMi0wMTAzLCBVKzAxMTAtMDExMSwgVSswMTI4LTAxMjksIFUrMDE2OC0wMTY5LCBVKzAxQTAtMDFBMSwgVSswMUFGLTAxQjAsIFUrMUVBMC0xRUY5LCBVKzIwQUI7XFxufVxcbi8qIG9wZW4tc2Fucy1sYXRpbi1leHQtNDAwLW5vcm1hbCovXFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogJ09wZW4gU2Fucyc7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LWRpc3BsYXk6IHN3YXA7XFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgc3JjOiB1cmwoJy4vZmlsZXMvb3Blbi1zYW5zLWxhdGluLWV4dC00MDAtbm9ybWFsLndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLCB1cmwoJy4vZmlsZXMvb3Blbi1zYW5zLWFsbC00MDAtbm9ybWFsLndvZmYnKSBmb3JtYXQoJ3dvZmYnKTtcXG4gIHVuaWNvZGUtcmFuZ2U6IFUrMDEwMC0wMjRGLCBVKzAyNTksIFUrMUUwMC0xRUZGLCBVKzIwMjAsIFUrMjBBMC0yMEFCLCBVKzIwQUQtMjBDRiwgVSsyMTEzLCBVKzJDNjAtMkM3RiwgVStBNzIwLUE3RkY7XFxufVxcbi8qIG9wZW4tc2Fucy1sYXRpbi00MDAtbm9ybWFsKi9cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiAnT3BlbiBTYW5zJztcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtZGlzcGxheTogc3dhcDtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBzcmM6IHVybCgnLi9maWxlcy9vcGVuLXNhbnMtbGF0aW4tNDAwLW5vcm1hbC53b2ZmMicpIGZvcm1hdCgnd29mZjInKSwgdXJsKCcuL2ZpbGVzL29wZW4tc2Fucy1hbGwtNDAwLW5vcm1hbC53b2ZmJykgZm9ybWF0KCd3b2ZmJyk7XFxuICB1bmljb2RlLXJhbmdlOiBVKzAwMDAtMDBGRiwgVSswMTMxLCBVKzAxNTItMDE1MywgVSswMkJCLTAyQkMsIFUrMDJDNiwgVSswMkRBLCBVKzAyREMsIFUrMjAwMC0yMDZGLCBVKzIwNzQsIFUrMjBBQywgVSsyMTIyLCBVKzIxOTEsIFUrMjE5MywgVSsyMjEyLCBVKzIyMTUsIFUrRkVGRiwgVStGRkZEO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gZnJvbSBcIi4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fID0gbmV3IFVSTChcIi4vZmlsZXMvb3Blbi1zYW5zLWN5cmlsbGljLWV4dC03MDAtaXRhbGljLndvZmYyXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18gPSBuZXcgVVJMKFwiLi9maWxlcy9vcGVuLXNhbnMtYWxsLTcwMC1pdGFsaWMud29mZlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fID0gbmV3IFVSTChcIi4vZmlsZXMvb3Blbi1zYW5zLWN5cmlsbGljLTcwMC1pdGFsaWMud29mZjJcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfM19fXyA9IG5ldyBVUkwoXCIuL2ZpbGVzL29wZW4tc2Fucy1ncmVlay1leHQtNzAwLWl0YWxpYy53b2ZmMlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF80X19fID0gbmV3IFVSTChcIi4vZmlsZXMvb3Blbi1zYW5zLWdyZWVrLTcwMC1pdGFsaWMud29mZjJcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNV9fXyA9IG5ldyBVUkwoXCIuL2ZpbGVzL29wZW4tc2Fucy12aWV0bmFtZXNlLTcwMC1pdGFsaWMud29mZjJcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNl9fXyA9IG5ldyBVUkwoXCIuL2ZpbGVzL29wZW4tc2Fucy1sYXRpbi1leHQtNzAwLWl0YWxpYy53b2ZmMlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF83X19fID0gbmV3IFVSTChcIi4vZmlsZXMvb3Blbi1zYW5zLWxhdGluLTcwMC1pdGFsaWMud29mZjJcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfOF9fXyA9IG5ldyBVUkwoXCIuL2ZpbGVzL29wZW4tc2Fucy1jeXJpbGxpYy1leHQtNzAwLW5vcm1hbC53b2ZmMlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF85X19fID0gbmV3IFVSTChcIi4vZmlsZXMvb3Blbi1zYW5zLWFsbC03MDAtbm9ybWFsLndvZmZcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMTBfX18gPSBuZXcgVVJMKFwiLi9maWxlcy9vcGVuLXNhbnMtY3lyaWxsaWMtNzAwLW5vcm1hbC53b2ZmMlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xMV9fXyA9IG5ldyBVUkwoXCIuL2ZpbGVzL29wZW4tc2Fucy1ncmVlay1leHQtNzAwLW5vcm1hbC53b2ZmMlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xMl9fXyA9IG5ldyBVUkwoXCIuL2ZpbGVzL29wZW4tc2Fucy1ncmVlay03MDAtbm9ybWFsLndvZmYyXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzEzX19fID0gbmV3IFVSTChcIi4vZmlsZXMvb3Blbi1zYW5zLXZpZXRuYW1lc2UtNzAwLW5vcm1hbC53b2ZmMlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xNF9fXyA9IG5ldyBVUkwoXCIuL2ZpbGVzL29wZW4tc2Fucy1sYXRpbi1leHQtNzAwLW5vcm1hbC53b2ZmMlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xNV9fXyA9IG5ldyBVUkwoXCIuL2ZpbGVzL29wZW4tc2Fucy1sYXRpbi03MDAtbm9ybWFsLndvZmYyXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMl9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfM19fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzNfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzRfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF80X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF81X19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNV9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNl9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzZfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzdfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF83X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF84X19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfOF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfOV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzlfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzEwX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMTBfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzExX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMTFfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzEyX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMTJfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzEzX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMTNfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzE0X19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMTRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzE1X19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMTVfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAvKiBvcGVuLXNhbnMtY3lyaWxsaWMtZXh0LTcwMC1pdGFsaWMqL1xuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiAnT3BlbiBTYW5zJztcbiAgZm9udC1zdHlsZTogaXRhbGljO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG4gIGZvbnQtd2VpZ2h0OiA3MDA7XG4gIHNyYzogdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fX30pIGZvcm1hdCgnd29mZjInKSwgdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fX30pIGZvcm1hdCgnd29mZicpO1xuICB1bmljb2RlLXJhbmdlOiBVKzA0NjAtMDUyRiwgVSsxQzgwLTFDODgsIFUrMjBCNCwgVSsyREUwLTJERkYsIFUrQTY0MC1BNjlGLCBVK0ZFMkUtRkUyRjtcbn1cbi8qIG9wZW4tc2Fucy1jeXJpbGxpYy03MDAtaXRhbGljKi9cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogJ09wZW4gU2Fucyc7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xuICBmb250LXdlaWdodDogNzAwO1xuICBzcmM6IHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzJfX199KSBmb3JtYXQoJ3dvZmYyJyksIHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX199KSBmb3JtYXQoJ3dvZmYnKTtcbiAgdW5pY29kZS1yYW5nZTogVSswNDAwLTA0NUYsIFUrMDQ5MC0wNDkxLCBVKzA0QjAtMDRCMSwgVSsyMTE2O1xufVxuLyogb3Blbi1zYW5zLWdyZWVrLWV4dC03MDAtaXRhbGljKi9cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogJ09wZW4gU2Fucyc7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xuICBmb250LXdlaWdodDogNzAwO1xuICBzcmM6IHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzNfX199KSBmb3JtYXQoJ3dvZmYyJyksIHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX199KSBmb3JtYXQoJ3dvZmYnKTtcbiAgdW5pY29kZS1yYW5nZTogVSsxRjAwLTFGRkY7XG59XG4vKiBvcGVuLXNhbnMtZ3JlZWstNzAwLWl0YWxpYyovXG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6ICdPcGVuIFNhbnMnO1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG4gIGZvbnQtZGlzcGxheTogc3dhcDtcbiAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgc3JjOiB1cmwoJHtfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80X19ffSkgZm9ybWF0KCd3b2ZmMicpLCB1cmwoJHtfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19ffSkgZm9ybWF0KCd3b2ZmJyk7XG4gIHVuaWNvZGUtcmFuZ2U6IFUrMDM3MC0wM0ZGO1xufVxuLyogb3Blbi1zYW5zLXZpZXRuYW1lc2UtNzAwLWl0YWxpYyovXG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6ICdPcGVuIFNhbnMnO1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG4gIGZvbnQtZGlzcGxheTogc3dhcDtcbiAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgc3JjOiB1cmwoJHtfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF81X19ffSkgZm9ybWF0KCd3b2ZmMicpLCB1cmwoJHtfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19ffSkgZm9ybWF0KCd3b2ZmJyk7XG4gIHVuaWNvZGUtcmFuZ2U6IFUrMDEwMi0wMTAzLCBVKzAxMTAtMDExMSwgVSswMTI4LTAxMjksIFUrMDE2OC0wMTY5LCBVKzAxQTAtMDFBMSwgVSswMUFGLTAxQjAsIFUrMUVBMC0xRUY5LCBVKzIwQUI7XG59XG4vKiBvcGVuLXNhbnMtbGF0aW4tZXh0LTcwMC1pdGFsaWMqL1xuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiAnT3BlbiBTYW5zJztcbiAgZm9udC1zdHlsZTogaXRhbGljO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG4gIGZvbnQtd2VpZ2h0OiA3MDA7XG4gIHNyYzogdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNl9fX30pIGZvcm1hdCgnd29mZjInKSwgdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fX30pIGZvcm1hdCgnd29mZicpO1xuICB1bmljb2RlLXJhbmdlOiBVKzAxMDAtMDI0RiwgVSswMjU5LCBVKzFFMDAtMUVGRiwgVSsyMDIwLCBVKzIwQTAtMjBBQiwgVSsyMEFELTIwQ0YsIFUrMjExMywgVSsyQzYwLTJDN0YsIFUrQTcyMC1BN0ZGO1xufVxuLyogb3Blbi1zYW5zLWxhdGluLTcwMC1pdGFsaWMqL1xuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiAnT3BlbiBTYW5zJztcbiAgZm9udC1zdHlsZTogaXRhbGljO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG4gIGZvbnQtd2VpZ2h0OiA3MDA7XG4gIHNyYzogdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfN19fX30pIGZvcm1hdCgnd29mZjInKSwgdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fX30pIGZvcm1hdCgnd29mZicpO1xuICB1bmljb2RlLXJhbmdlOiBVKzAwMDAtMDBGRiwgVSswMTMxLCBVKzAxNTItMDE1MywgVSswMkJCLTAyQkMsIFUrMDJDNiwgVSswMkRBLCBVKzAyREMsIFUrMjAwMC0yMDZGLCBVKzIwNzQsIFUrMjBBQywgVSsyMTIyLCBVKzIxOTEsIFUrMjE5MywgVSsyMjEyLCBVKzIyMTUsIFUrRkVGRiwgVStGRkZEO1xufVxuLyogb3Blbi1zYW5zLWN5cmlsbGljLWV4dC03MDAtbm9ybWFsKi9cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogJ09wZW4gU2Fucyc7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xuICBmb250LXdlaWdodDogNzAwO1xuICBzcmM6IHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzhfX199KSBmb3JtYXQoJ3dvZmYyJyksIHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzlfX199KSBmb3JtYXQoJ3dvZmYnKTtcbiAgdW5pY29kZS1yYW5nZTogVSswNDYwLTA1MkYsIFUrMUM4MC0xQzg4LCBVKzIwQjQsIFUrMkRFMC0yREZGLCBVK0E2NDAtQTY5RiwgVStGRTJFLUZFMkY7XG59XG4vKiBvcGVuLXNhbnMtY3lyaWxsaWMtNzAwLW5vcm1hbCovXG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6ICdPcGVuIFNhbnMnO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtZGlzcGxheTogc3dhcDtcbiAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgc3JjOiB1cmwoJHtfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xMF9fX30pIGZvcm1hdCgnd29mZjInKSwgdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfOV9fX30pIGZvcm1hdCgnd29mZicpO1xuICB1bmljb2RlLXJhbmdlOiBVKzA0MDAtMDQ1RiwgVSswNDkwLTA0OTEsIFUrMDRCMC0wNEIxLCBVKzIxMTY7XG59XG4vKiBvcGVuLXNhbnMtZ3JlZWstZXh0LTcwMC1ub3JtYWwqL1xuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiAnT3BlbiBTYW5zJztcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG4gIGZvbnQtd2VpZ2h0OiA3MDA7XG4gIHNyYzogdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMTFfX199KSBmb3JtYXQoJ3dvZmYyJyksIHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzlfX199KSBmb3JtYXQoJ3dvZmYnKTtcbiAgdW5pY29kZS1yYW5nZTogVSsxRjAwLTFGRkY7XG59XG4vKiBvcGVuLXNhbnMtZ3JlZWstNzAwLW5vcm1hbCovXG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6ICdPcGVuIFNhbnMnO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtZGlzcGxheTogc3dhcDtcbiAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgc3JjOiB1cmwoJHtfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xMl9fX30pIGZvcm1hdCgnd29mZjInKSwgdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfOV9fX30pIGZvcm1hdCgnd29mZicpO1xuICB1bmljb2RlLXJhbmdlOiBVKzAzNzAtMDNGRjtcbn1cbi8qIG9wZW4tc2Fucy12aWV0bmFtZXNlLTcwMC1ub3JtYWwqL1xuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiAnT3BlbiBTYW5zJztcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG4gIGZvbnQtd2VpZ2h0OiA3MDA7XG4gIHNyYzogdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMTNfX199KSBmb3JtYXQoJ3dvZmYyJyksIHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzlfX199KSBmb3JtYXQoJ3dvZmYnKTtcbiAgdW5pY29kZS1yYW5nZTogVSswMTAyLTAxMDMsIFUrMDExMC0wMTExLCBVKzAxMjgtMDEyOSwgVSswMTY4LTAxNjksIFUrMDFBMC0wMUExLCBVKzAxQUYtMDFCMCwgVSsxRUEwLTFFRjksIFUrMjBBQjtcbn1cbi8qIG9wZW4tc2Fucy1sYXRpbi1leHQtNzAwLW5vcm1hbCovXG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6ICdPcGVuIFNhbnMnO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtZGlzcGxheTogc3dhcDtcbiAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgc3JjOiB1cmwoJHtfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xNF9fX30pIGZvcm1hdCgnd29mZjInKSwgdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfOV9fX30pIGZvcm1hdCgnd29mZicpO1xuICB1bmljb2RlLXJhbmdlOiBVKzAxMDAtMDI0RiwgVSswMjU5LCBVKzFFMDAtMUVGRiwgVSsyMDIwLCBVKzIwQTAtMjBBQiwgVSsyMEFELTIwQ0YsIFUrMjExMywgVSsyQzYwLTJDN0YsIFUrQTcyMC1BN0ZGO1xufVxuLyogb3Blbi1zYW5zLWxhdGluLTcwMC1ub3JtYWwqL1xuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiAnT3BlbiBTYW5zJztcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG4gIGZvbnQtd2VpZ2h0OiA3MDA7XG4gIHNyYzogdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMTVfX199KSBmb3JtYXQoJ3dvZmYyJyksIHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzlfX199KSBmb3JtYXQoJ3dvZmYnKTtcbiAgdW5pY29kZS1yYW5nZTogVSswMDAwLTAwRkYsIFUrMDEzMSwgVSswMTUyLTAxNTMsIFUrMDJCQi0wMkJDLCBVKzAyQzYsIFUrMDJEQSwgVSswMkRDLCBVKzIwMDAtMjA2RiwgVSsyMDc0LCBVKzIwQUMsIFUrMjEyMiwgVSsyMTkxLCBVKzIxOTMsIFUrMjIxMiwgVSsyMjE1LCBVK0ZFRkYsIFUrRkZGRDtcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL2ZvbnRzb3VyY2Utb3Blbi1zYW5zLzcwMC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEscUNBQXFDO0FBQ3JDO0VBQ0Usd0JBQXdCO0VBQ3hCLGtCQUFrQjtFQUNsQixrQkFBa0I7RUFDbEIsZ0JBQWdCO0VBQ2hCLG9IQUF3STtFQUN4SSxzRkFBc0Y7QUFDeEY7QUFDQSxpQ0FBaUM7QUFDakM7RUFDRSx3QkFBd0I7RUFDeEIsa0JBQWtCO0VBQ2xCLGtCQUFrQjtFQUNsQixnQkFBZ0I7RUFDaEIsb0hBQW9JO0VBQ3BJLDREQUE0RDtBQUM5RDtBQUNBLGtDQUFrQztBQUNsQztFQUNFLHdCQUF3QjtFQUN4QixrQkFBa0I7RUFDbEIsa0JBQWtCO0VBQ2xCLGdCQUFnQjtFQUNoQixvSEFBcUk7RUFDckksMEJBQTBCO0FBQzVCO0FBQ0EsOEJBQThCO0FBQzlCO0VBQ0Usd0JBQXdCO0VBQ3hCLGtCQUFrQjtFQUNsQixrQkFBa0I7RUFDbEIsZ0JBQWdCO0VBQ2hCLG9IQUFpSTtFQUNqSSwwQkFBMEI7QUFDNUI7QUFDQSxtQ0FBbUM7QUFDbkM7RUFDRSx3QkFBd0I7RUFDeEIsa0JBQWtCO0VBQ2xCLGtCQUFrQjtFQUNsQixnQkFBZ0I7RUFDaEIsb0hBQXNJO0VBQ3RJLGdIQUFnSDtBQUNsSDtBQUNBLGtDQUFrQztBQUNsQztFQUNFLHdCQUF3QjtFQUN4QixrQkFBa0I7RUFDbEIsa0JBQWtCO0VBQ2xCLGdCQUFnQjtFQUNoQixvSEFBcUk7RUFDckksbUhBQW1IO0FBQ3JIO0FBQ0EsOEJBQThCO0FBQzlCO0VBQ0Usd0JBQXdCO0VBQ3hCLGtCQUFrQjtFQUNsQixrQkFBa0I7RUFDbEIsZ0JBQWdCO0VBQ2hCLG9IQUFpSTtFQUNqSSx5S0FBeUs7QUFDM0s7QUFDQSxxQ0FBcUM7QUFDckM7RUFDRSx3QkFBd0I7RUFDeEIsa0JBQWtCO0VBQ2xCLGtCQUFrQjtFQUNsQixnQkFBZ0I7RUFDaEIsb0hBQXdJO0VBQ3hJLHNGQUFzRjtBQUN4RjtBQUNBLGlDQUFpQztBQUNqQztFQUNFLHdCQUF3QjtFQUN4QixrQkFBa0I7RUFDbEIsa0JBQWtCO0VBQ2xCLGdCQUFnQjtFQUNoQixxSEFBb0k7RUFDcEksNERBQTREO0FBQzlEO0FBQ0Esa0NBQWtDO0FBQ2xDO0VBQ0Usd0JBQXdCO0VBQ3hCLGtCQUFrQjtFQUNsQixrQkFBa0I7RUFDbEIsZ0JBQWdCO0VBQ2hCLHFIQUFxSTtFQUNySSwwQkFBMEI7QUFDNUI7QUFDQSw4QkFBOEI7QUFDOUI7RUFDRSx3QkFBd0I7RUFDeEIsa0JBQWtCO0VBQ2xCLGtCQUFrQjtFQUNsQixnQkFBZ0I7RUFDaEIscUhBQWlJO0VBQ2pJLDBCQUEwQjtBQUM1QjtBQUNBLG1DQUFtQztBQUNuQztFQUNFLHdCQUF3QjtFQUN4QixrQkFBa0I7RUFDbEIsa0JBQWtCO0VBQ2xCLGdCQUFnQjtFQUNoQixxSEFBc0k7RUFDdEksZ0hBQWdIO0FBQ2xIO0FBQ0Esa0NBQWtDO0FBQ2xDO0VBQ0Usd0JBQXdCO0VBQ3hCLGtCQUFrQjtFQUNsQixrQkFBa0I7RUFDbEIsZ0JBQWdCO0VBQ2hCLHFIQUFxSTtFQUNySSxtSEFBbUg7QUFDckg7QUFDQSw4QkFBOEI7QUFDOUI7RUFDRSx3QkFBd0I7RUFDeEIsa0JBQWtCO0VBQ2xCLGtCQUFrQjtFQUNsQixnQkFBZ0I7RUFDaEIscUhBQWlJO0VBQ2pJLHlLQUF5SztBQUMzS1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCIvKiBvcGVuLXNhbnMtY3lyaWxsaWMtZXh0LTcwMC1pdGFsaWMqL1xcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6ICdPcGVuIFNhbnMnO1xcbiAgZm9udC1zdHlsZTogaXRhbGljO1xcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xcbiAgZm9udC13ZWlnaHQ6IDcwMDtcXG4gIHNyYzogdXJsKCcuL2ZpbGVzL29wZW4tc2Fucy1jeXJpbGxpYy1leHQtNzAwLWl0YWxpYy53b2ZmMicpIGZvcm1hdCgnd29mZjInKSwgdXJsKCcuL2ZpbGVzL29wZW4tc2Fucy1hbGwtNzAwLWl0YWxpYy53b2ZmJykgZm9ybWF0KCd3b2ZmJyk7XFxuICB1bmljb2RlLXJhbmdlOiBVKzA0NjAtMDUyRiwgVSsxQzgwLTFDODgsIFUrMjBCNCwgVSsyREUwLTJERkYsIFUrQTY0MC1BNjlGLCBVK0ZFMkUtRkUyRjtcXG59XFxuLyogb3Blbi1zYW5zLWN5cmlsbGljLTcwMC1pdGFsaWMqL1xcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6ICdPcGVuIFNhbnMnO1xcbiAgZm9udC1zdHlsZTogaXRhbGljO1xcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xcbiAgZm9udC13ZWlnaHQ6IDcwMDtcXG4gIHNyYzogdXJsKCcuL2ZpbGVzL29wZW4tc2Fucy1jeXJpbGxpYy03MDAtaXRhbGljLndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLCB1cmwoJy4vZmlsZXMvb3Blbi1zYW5zLWFsbC03MDAtaXRhbGljLndvZmYnKSBmb3JtYXQoJ3dvZmYnKTtcXG4gIHVuaWNvZGUtcmFuZ2U6IFUrMDQwMC0wNDVGLCBVKzA0OTAtMDQ5MSwgVSswNEIwLTA0QjEsIFUrMjExNjtcXG59XFxuLyogb3Blbi1zYW5zLWdyZWVrLWV4dC03MDAtaXRhbGljKi9cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiAnT3BlbiBTYW5zJztcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcXG4gIGZvbnQtZGlzcGxheTogc3dhcDtcXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XFxuICBzcmM6IHVybCgnLi9maWxlcy9vcGVuLXNhbnMtZ3JlZWstZXh0LTcwMC1pdGFsaWMud29mZjInKSBmb3JtYXQoJ3dvZmYyJyksIHVybCgnLi9maWxlcy9vcGVuLXNhbnMtYWxsLTcwMC1pdGFsaWMud29mZicpIGZvcm1hdCgnd29mZicpO1xcbiAgdW5pY29kZS1yYW5nZTogVSsxRjAwLTFGRkY7XFxufVxcbi8qIG9wZW4tc2Fucy1ncmVlay03MDAtaXRhbGljKi9cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiAnT3BlbiBTYW5zJztcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcXG4gIGZvbnQtZGlzcGxheTogc3dhcDtcXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XFxuICBzcmM6IHVybCgnLi9maWxlcy9vcGVuLXNhbnMtZ3JlZWstNzAwLWl0YWxpYy53b2ZmMicpIGZvcm1hdCgnd29mZjInKSwgdXJsKCcuL2ZpbGVzL29wZW4tc2Fucy1hbGwtNzAwLWl0YWxpYy53b2ZmJykgZm9ybWF0KCd3b2ZmJyk7XFxuICB1bmljb2RlLXJhbmdlOiBVKzAzNzAtMDNGRjtcXG59XFxuLyogb3Blbi1zYW5zLXZpZXRuYW1lc2UtNzAwLWl0YWxpYyovXFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogJ09wZW4gU2Fucyc7XFxuICBmb250LXN0eWxlOiBpdGFsaWM7XFxuICBmb250LWRpc3BsYXk6IHN3YXA7XFxuICBmb250LXdlaWdodDogNzAwO1xcbiAgc3JjOiB1cmwoJy4vZmlsZXMvb3Blbi1zYW5zLXZpZXRuYW1lc2UtNzAwLWl0YWxpYy53b2ZmMicpIGZvcm1hdCgnd29mZjInKSwgdXJsKCcuL2ZpbGVzL29wZW4tc2Fucy1hbGwtNzAwLWl0YWxpYy53b2ZmJykgZm9ybWF0KCd3b2ZmJyk7XFxuICB1bmljb2RlLXJhbmdlOiBVKzAxMDItMDEwMywgVSswMTEwLTAxMTEsIFUrMDEyOC0wMTI5LCBVKzAxNjgtMDE2OSwgVSswMUEwLTAxQTEsIFUrMDFBRi0wMUIwLCBVKzFFQTAtMUVGOSwgVSsyMEFCO1xcbn1cXG4vKiBvcGVuLXNhbnMtbGF0aW4tZXh0LTcwMC1pdGFsaWMqL1xcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6ICdPcGVuIFNhbnMnO1xcbiAgZm9udC1zdHlsZTogaXRhbGljO1xcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xcbiAgZm9udC13ZWlnaHQ6IDcwMDtcXG4gIHNyYzogdXJsKCcuL2ZpbGVzL29wZW4tc2Fucy1sYXRpbi1leHQtNzAwLWl0YWxpYy53b2ZmMicpIGZvcm1hdCgnd29mZjInKSwgdXJsKCcuL2ZpbGVzL29wZW4tc2Fucy1hbGwtNzAwLWl0YWxpYy53b2ZmJykgZm9ybWF0KCd3b2ZmJyk7XFxuICB1bmljb2RlLXJhbmdlOiBVKzAxMDAtMDI0RiwgVSswMjU5LCBVKzFFMDAtMUVGRiwgVSsyMDIwLCBVKzIwQTAtMjBBQiwgVSsyMEFELTIwQ0YsIFUrMjExMywgVSsyQzYwLTJDN0YsIFUrQTcyMC1BN0ZGO1xcbn1cXG4vKiBvcGVuLXNhbnMtbGF0aW4tNzAwLWl0YWxpYyovXFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogJ09wZW4gU2Fucyc7XFxuICBmb250LXN0eWxlOiBpdGFsaWM7XFxuICBmb250LWRpc3BsYXk6IHN3YXA7XFxuICBmb250LXdlaWdodDogNzAwO1xcbiAgc3JjOiB1cmwoJy4vZmlsZXMvb3Blbi1zYW5zLWxhdGluLTcwMC1pdGFsaWMud29mZjInKSBmb3JtYXQoJ3dvZmYyJyksIHVybCgnLi9maWxlcy9vcGVuLXNhbnMtYWxsLTcwMC1pdGFsaWMud29mZicpIGZvcm1hdCgnd29mZicpO1xcbiAgdW5pY29kZS1yYW5nZTogVSswMDAwLTAwRkYsIFUrMDEzMSwgVSswMTUyLTAxNTMsIFUrMDJCQi0wMkJDLCBVKzAyQzYsIFUrMDJEQSwgVSswMkRDLCBVKzIwMDAtMjA2RiwgVSsyMDc0LCBVKzIwQUMsIFUrMjEyMiwgVSsyMTkxLCBVKzIxOTMsIFUrMjIxMiwgVSsyMjE1LCBVK0ZFRkYsIFUrRkZGRDtcXG59XFxuLyogb3Blbi1zYW5zLWN5cmlsbGljLWV4dC03MDAtbm9ybWFsKi9cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiAnT3BlbiBTYW5zJztcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtZGlzcGxheTogc3dhcDtcXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XFxuICBzcmM6IHVybCgnLi9maWxlcy9vcGVuLXNhbnMtY3lyaWxsaWMtZXh0LTcwMC1ub3JtYWwud29mZjInKSBmb3JtYXQoJ3dvZmYyJyksIHVybCgnLi9maWxlcy9vcGVuLXNhbnMtYWxsLTcwMC1ub3JtYWwud29mZicpIGZvcm1hdCgnd29mZicpO1xcbiAgdW5pY29kZS1yYW5nZTogVSswNDYwLTA1MkYsIFUrMUM4MC0xQzg4LCBVKzIwQjQsIFUrMkRFMC0yREZGLCBVK0E2NDAtQTY5RiwgVStGRTJFLUZFMkY7XFxufVxcbi8qIG9wZW4tc2Fucy1jeXJpbGxpYy03MDAtbm9ybWFsKi9cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiAnT3BlbiBTYW5zJztcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtZGlzcGxheTogc3dhcDtcXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XFxuICBzcmM6IHVybCgnLi9maWxlcy9vcGVuLXNhbnMtY3lyaWxsaWMtNzAwLW5vcm1hbC53b2ZmMicpIGZvcm1hdCgnd29mZjInKSwgdXJsKCcuL2ZpbGVzL29wZW4tc2Fucy1hbGwtNzAwLW5vcm1hbC53b2ZmJykgZm9ybWF0KCd3b2ZmJyk7XFxuICB1bmljb2RlLXJhbmdlOiBVKzA0MDAtMDQ1RiwgVSswNDkwLTA0OTEsIFUrMDRCMC0wNEIxLCBVKzIxMTY7XFxufVxcbi8qIG9wZW4tc2Fucy1ncmVlay1leHQtNzAwLW5vcm1hbCovXFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogJ09wZW4gU2Fucyc7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LWRpc3BsYXk6IHN3YXA7XFxuICBmb250LXdlaWdodDogNzAwO1xcbiAgc3JjOiB1cmwoJy4vZmlsZXMvb3Blbi1zYW5zLWdyZWVrLWV4dC03MDAtbm9ybWFsLndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLCB1cmwoJy4vZmlsZXMvb3Blbi1zYW5zLWFsbC03MDAtbm9ybWFsLndvZmYnKSBmb3JtYXQoJ3dvZmYnKTtcXG4gIHVuaWNvZGUtcmFuZ2U6IFUrMUYwMC0xRkZGO1xcbn1cXG4vKiBvcGVuLXNhbnMtZ3JlZWstNzAwLW5vcm1hbCovXFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogJ09wZW4gU2Fucyc7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LWRpc3BsYXk6IHN3YXA7XFxuICBmb250LXdlaWdodDogNzAwO1xcbiAgc3JjOiB1cmwoJy4vZmlsZXMvb3Blbi1zYW5zLWdyZWVrLTcwMC1ub3JtYWwud29mZjInKSBmb3JtYXQoJ3dvZmYyJyksIHVybCgnLi9maWxlcy9vcGVuLXNhbnMtYWxsLTcwMC1ub3JtYWwud29mZicpIGZvcm1hdCgnd29mZicpO1xcbiAgdW5pY29kZS1yYW5nZTogVSswMzcwLTAzRkY7XFxufVxcbi8qIG9wZW4tc2Fucy12aWV0bmFtZXNlLTcwMC1ub3JtYWwqL1xcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6ICdPcGVuIFNhbnMnO1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xcbiAgZm9udC13ZWlnaHQ6IDcwMDtcXG4gIHNyYzogdXJsKCcuL2ZpbGVzL29wZW4tc2Fucy12aWV0bmFtZXNlLTcwMC1ub3JtYWwud29mZjInKSBmb3JtYXQoJ3dvZmYyJyksIHVybCgnLi9maWxlcy9vcGVuLXNhbnMtYWxsLTcwMC1ub3JtYWwud29mZicpIGZvcm1hdCgnd29mZicpO1xcbiAgdW5pY29kZS1yYW5nZTogVSswMTAyLTAxMDMsIFUrMDExMC0wMTExLCBVKzAxMjgtMDEyOSwgVSswMTY4LTAxNjksIFUrMDFBMC0wMUExLCBVKzAxQUYtMDFCMCwgVSsxRUEwLTFFRjksIFUrMjBBQjtcXG59XFxuLyogb3Blbi1zYW5zLWxhdGluLWV4dC03MDAtbm9ybWFsKi9cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiAnT3BlbiBTYW5zJztcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtZGlzcGxheTogc3dhcDtcXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XFxuICBzcmM6IHVybCgnLi9maWxlcy9vcGVuLXNhbnMtbGF0aW4tZXh0LTcwMC1ub3JtYWwud29mZjInKSBmb3JtYXQoJ3dvZmYyJyksIHVybCgnLi9maWxlcy9vcGVuLXNhbnMtYWxsLTcwMC1ub3JtYWwud29mZicpIGZvcm1hdCgnd29mZicpO1xcbiAgdW5pY29kZS1yYW5nZTogVSswMTAwLTAyNEYsIFUrMDI1OSwgVSsxRTAwLTFFRkYsIFUrMjAyMCwgVSsyMEEwLTIwQUIsIFUrMjBBRC0yMENGLCBVKzIxMTMsIFUrMkM2MC0yQzdGLCBVK0E3MjAtQTdGRjtcXG59XFxuLyogb3Blbi1zYW5zLWxhdGluLTcwMC1ub3JtYWwqL1xcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6ICdPcGVuIFNhbnMnO1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xcbiAgZm9udC13ZWlnaHQ6IDcwMDtcXG4gIHNyYzogdXJsKCcuL2ZpbGVzL29wZW4tc2Fucy1sYXRpbi03MDAtbm9ybWFsLndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLCB1cmwoJy4vZmlsZXMvb3Blbi1zYW5zLWFsbC03MDAtbm9ybWFsLndvZmYnKSBmb3JtYXQoJ3dvZmYnKTtcXG4gIHVuaWNvZGUtcmFuZ2U6IFUrMDAwMC0wMEZGLCBVKzAxMzEsIFUrMDE1Mi0wMTUzLCBVKzAyQkItMDJCQywgVSswMkM2LCBVKzAyREEsIFUrMDJEQywgVSsyMDAwLTIwNkYsIFUrMjA3NCwgVSsyMEFDLCBVKzIxMjIsIFUrMjE5MSwgVSsyMTkzLCBVKzIyMTIsIFUrMjIxNSwgVStGRUZGLCBVK0ZGRkQ7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICB1cmwgPSBTdHJpbmcodXJsLl9fZXNNb2R1bGUgPyB1cmwuZGVmYXVsdCA6IHVybCk7XG5cbiAgLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH1cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH1cblxuICAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG4gIGlmICgvW1wiJygpIFxcdFxcbl18KCUyMCkvLnRlc3QodXJsKSB8fCBvcHRpb25zLm5lZWRRdW90ZXMpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csIFwiXFxcXG5cIiksIFwiXFxcIlwiKTtcbiAgfVxuICByZXR1cm4gdXJsO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG52YXIgaXNBcnJheSA9IGZ1bmN0aW9uIGlzQXJyYXkoYXJyKSB7XG5cdGlmICh0eXBlb2YgQXJyYXkuaXNBcnJheSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHJldHVybiBBcnJheS5pc0FycmF5KGFycik7XG5cdH1cblxuXHRyZXR1cm4gdG9TdHIuY2FsbChhcnIpID09PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxudmFyIGlzUGxhaW5PYmplY3QgPSBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuXHRpZiAoIW9iaiB8fCB0b1N0ci5jYWxsKG9iaikgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0dmFyIGhhc093bkNvbnN0cnVjdG9yID0gaGFzT3duLmNhbGwob2JqLCAnY29uc3RydWN0b3InKTtcblx0dmFyIGhhc0lzUHJvdG90eXBlT2YgPSBvYmouY29uc3RydWN0b3IgJiYgb2JqLmNvbnN0cnVjdG9yLnByb3RvdHlwZSAmJiBoYXNPd24uY2FsbChvYmouY29uc3RydWN0b3IucHJvdG90eXBlLCAnaXNQcm90b3R5cGVPZicpO1xuXHQvLyBOb3Qgb3duIGNvbnN0cnVjdG9yIHByb3BlcnR5IG11c3QgYmUgT2JqZWN0XG5cdGlmIChvYmouY29uc3RydWN0b3IgJiYgIWhhc093bkNvbnN0cnVjdG9yICYmICFoYXNJc1Byb3RvdHlwZU9mKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Ly8gT3duIHByb3BlcnRpZXMgYXJlIGVudW1lcmF0ZWQgZmlyc3RseSwgc28gdG8gc3BlZWQgdXAsXG5cdC8vIGlmIGxhc3Qgb25lIGlzIG93biwgdGhlbiBhbGwgcHJvcGVydGllcyBhcmUgb3duLlxuXHR2YXIga2V5O1xuXHRmb3IgKGtleSBpbiBvYmopIHsgLyoqLyB9XG5cblx0cmV0dXJuIHR5cGVvZiBrZXkgPT09ICd1bmRlZmluZWQnIHx8IGhhc093bi5jYWxsKG9iaiwga2V5KTtcbn07XG5cbi8vIElmIG5hbWUgaXMgJ19fcHJvdG9fXycsIGFuZCBPYmplY3QuZGVmaW5lUHJvcGVydHkgaXMgYXZhaWxhYmxlLCBkZWZpbmUgX19wcm90b19fIGFzIGFuIG93biBwcm9wZXJ0eSBvbiB0YXJnZXRcbnZhciBzZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIHNldFByb3BlcnR5KHRhcmdldCwgb3B0aW9ucykge1xuXHRpZiAoZGVmaW5lUHJvcGVydHkgJiYgb3B0aW9ucy5uYW1lID09PSAnX19wcm90b19fJykge1xuXHRcdGRlZmluZVByb3BlcnR5KHRhcmdldCwgb3B0aW9ucy5uYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0dmFsdWU6IG9wdGlvbnMubmV3VmFsdWUsXG5cdFx0XHR3cml0YWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHRhcmdldFtvcHRpb25zLm5hbWVdID0gb3B0aW9ucy5uZXdWYWx1ZTtcblx0fVxufTtcblxuLy8gUmV0dXJuIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIF9fcHJvdG9fXyBpZiAnX19wcm90b19fJyBpcyBub3QgYW4gb3duIHByb3BlcnR5XG52YXIgZ2V0UHJvcGVydHkgPSBmdW5jdGlvbiBnZXRQcm9wZXJ0eShvYmosIG5hbWUpIHtcblx0aWYgKG5hbWUgPT09ICdfX3Byb3RvX18nKSB7XG5cdFx0aWYgKCFoYXNPd24uY2FsbChvYmosIG5hbWUpKSB7XG5cdFx0XHRyZXR1cm4gdm9pZCAwO1xuXHRcdH0gZWxzZSBpZiAoZ09QRCkge1xuXHRcdFx0Ly8gSW4gZWFybHkgdmVyc2lvbnMgb2Ygbm9kZSwgb2JqWydfX3Byb3RvX18nXSBpcyBidWdneSB3aGVuIG9iaiBoYXNcblx0XHRcdC8vIF9fcHJvdG9fXyBhcyBhbiBvd24gcHJvcGVydHkuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoKSB3b3Jrcy5cblx0XHRcdHJldHVybiBnT1BEKG9iaiwgbmFtZSkudmFsdWU7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG9ialtuYW1lXTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZXh0ZW5kKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmU7XG5cdHZhciB0YXJnZXQgPSBhcmd1bWVudHNbMF07XG5cdHZhciBpID0gMTtcblx0dmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cdHZhciBkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Jvb2xlYW4nKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbMV0gfHwge307XG5cdFx0Ly8gc2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdGkgPSAyO1xuXHR9XG5cdGlmICh0YXJnZXQgPT0gbnVsbCB8fCAodHlwZW9mIHRhcmdldCAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIHRhcmdldCAhPT0gJ2Z1bmN0aW9uJykpIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdGZvciAoOyBpIDwgbGVuZ3RoOyArK2kpIHtcblx0XHRvcHRpb25zID0gYXJndW1lbnRzW2ldO1xuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAob3B0aW9ucyAhPSBudWxsKSB7XG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKG5hbWUgaW4gb3B0aW9ucykge1xuXHRcdFx0XHRzcmMgPSBnZXRQcm9wZXJ0eSh0YXJnZXQsIG5hbWUpO1xuXHRcdFx0XHRjb3B5ID0gZ2V0UHJvcGVydHkob3B0aW9ucywgbmFtZSk7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAodGFyZ2V0ICE9PSBjb3B5KSB7XG5cdFx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdFx0aWYgKGRlZXAgJiYgY29weSAmJiAoaXNQbGFpbk9iamVjdChjb3B5KSB8fCAoY29weUlzQXJyYXkgPSBpc0FycmF5KGNvcHkpKSkpIHtcblx0XHRcdFx0XHRcdGlmIChjb3B5SXNBcnJheSkge1xuXHRcdFx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBpc0FycmF5KHNyYykgPyBzcmMgOiBbXTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGlzUGxhaW5PYmplY3Qoc3JjKSA/IHNyYyA6IHt9O1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHRcdHNldFByb3BlcnR5KHRhcmdldCwgeyBuYW1lOiBuYW1lLCBuZXdWYWx1ZTogZXh0ZW5kKGRlZXAsIGNsb25lLCBjb3B5KSB9KTtcblxuXHRcdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHR5cGVvZiBjb3B5ICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRcdFx0c2V0UHJvcGVydHkodGFyZ2V0LCB7IG5hbWU6IG5hbWUsIG5ld1ZhbHVlOiBjb3B5IH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuIiwiLy8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvZ3JhbW1hci5odG1sXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdmlzaW9ubWVkaWEvY3NzLXBhcnNlL3B1bGwvNDkjaXNzdWVjb21tZW50LTMwMDg4MDI3XG52YXIgQ09NTUVOVF9SRUdFWCA9IC9cXC9cXCpbXipdKlxcKisoW14vKl1bXipdKlxcKispKlxcLy9nO1xuXG52YXIgTkVXTElORV9SRUdFWCA9IC9cXG4vZztcbnZhciBXSElURVNQQUNFX1JFR0VYID0gL15cXHMqLztcblxuLy8gZGVjbGFyYXRpb25cbnZhciBQUk9QRVJUWV9SRUdFWCA9IC9eKFxcKj9bLSMvKlxcXFxcXHddKyhcXFtbMC05YS16Xy1dK1xcXSk/KVxccyovO1xudmFyIENPTE9OX1JFR0VYID0gL146XFxzKi87XG52YXIgVkFMVUVfUkVHRVggPSAvXigoPzonKD86XFxcXCd8LikqPyd8XCIoPzpcXFxcXCJ8LikqP1wifFxcKFteKV0qP1xcKXxbXn07XSkrKS87XG52YXIgU0VNSUNPTE9OX1JFR0VYID0gL15bO1xcc10qLztcblxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL1RyaW0jUG9seWZpbGxcbnZhciBUUklNX1JFR0VYID0gL15cXHMrfFxccyskL2c7XG5cbi8vIHN0cmluZ3NcbnZhciBORVdMSU5FID0gJ1xcbic7XG52YXIgRk9SV0FSRF9TTEFTSCA9ICcvJztcbnZhciBBU1RFUklTSyA9ICcqJztcbnZhciBFTVBUWV9TVFJJTkcgPSAnJztcblxuLy8gdHlwZXNcbnZhciBUWVBFX0NPTU1FTlQgPSAnY29tbWVudCc7XG52YXIgVFlQRV9ERUNMQVJBVElPTiA9ICdkZWNsYXJhdGlvbic7XG5cbi8qKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0eWxlXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAcmV0dXJuIHtPYmplY3RbXX1cbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn1cbiAqIEB0aHJvd3Mge0Vycm9yfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHN0eWxlLCBvcHRpb25zKSB7XG4gIGlmICh0eXBlb2Ygc3R5bGUgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZycpO1xuICB9XG5cbiAgaWYgKCFzdHlsZSkgcmV0dXJuIFtdO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8qKlxuICAgKiBQb3NpdGlvbmFsLlxuICAgKi9cbiAgdmFyIGxpbmVubyA9IDE7XG4gIHZhciBjb2x1bW4gPSAxO1xuXG4gIC8qKlxuICAgKiBVcGRhdGUgbGluZW5vIGFuZCBjb2x1bW4gYmFzZWQgb24gYHN0cmAuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAgICovXG4gIGZ1bmN0aW9uIHVwZGF0ZVBvc2l0aW9uKHN0cikge1xuICAgIHZhciBsaW5lcyA9IHN0ci5tYXRjaChORVdMSU5FX1JFR0VYKTtcbiAgICBpZiAobGluZXMpIGxpbmVubyArPSBsaW5lcy5sZW5ndGg7XG4gICAgdmFyIGkgPSBzdHIubGFzdEluZGV4T2YoTkVXTElORSk7XG4gICAgY29sdW1uID0gfmkgPyBzdHIubGVuZ3RoIC0gaSA6IGNvbHVtbiArIHN0ci5sZW5ndGg7XG4gIH1cblxuICAvKipcbiAgICogTWFyayBwb3NpdGlvbiBhbmQgcGF0Y2ggYG5vZGUucG9zaXRpb25gLlxuICAgKlxuICAgKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAgICovXG4gIGZ1bmN0aW9uIHBvc2l0aW9uKCkge1xuICAgIHZhciBzdGFydCA9IHsgbGluZTogbGluZW5vLCBjb2x1bW46IGNvbHVtbiB9O1xuICAgIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgICBub2RlLnBvc2l0aW9uID0gbmV3IFBvc2l0aW9uKHN0YXJ0KTtcbiAgICAgIHdoaXRlc3BhY2UoKTtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogU3RvcmUgcG9zaXRpb24gaW5mb3JtYXRpb24gZm9yIGEgbm9kZS5cbiAgICpcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBzdGFydFxuICAgKiBAcHJvcGVydHkge09iamVjdH0gZW5kXG4gICAqIEBwcm9wZXJ0eSB7dW5kZWZpbmVkfFN0cmluZ30gc291cmNlXG4gICAqL1xuICBmdW5jdGlvbiBQb3NpdGlvbihzdGFydCkge1xuICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICB0aGlzLmVuZCA9IHsgbGluZTogbGluZW5vLCBjb2x1bW46IGNvbHVtbiB9O1xuICAgIHRoaXMuc291cmNlID0gb3B0aW9ucy5zb3VyY2U7XG4gIH1cblxuICAvKipcbiAgICogTm9uLWVudW1lcmFibGUgc291cmNlIHN0cmluZy5cbiAgICovXG4gIFBvc2l0aW9uLnByb3RvdHlwZS5jb250ZW50ID0gc3R5bGU7XG5cbiAgdmFyIGVycm9yc0xpc3QgPSBbXTtcblxuICAvKipcbiAgICogRXJyb3IgYG1zZ2AuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2dcbiAgICogQHRocm93cyB7RXJyb3J9XG4gICAqL1xuICBmdW5jdGlvbiBlcnJvcihtc2cpIHtcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgb3B0aW9ucy5zb3VyY2UgKyAnOicgKyBsaW5lbm8gKyAnOicgKyBjb2x1bW4gKyAnOiAnICsgbXNnXG4gICAgKTtcbiAgICBlcnIucmVhc29uID0gbXNnO1xuICAgIGVyci5maWxlbmFtZSA9IG9wdGlvbnMuc291cmNlO1xuICAgIGVyci5saW5lID0gbGluZW5vO1xuICAgIGVyci5jb2x1bW4gPSBjb2x1bW47XG4gICAgZXJyLnNvdXJjZSA9IHN0eWxlO1xuXG4gICAgaWYgKG9wdGlvbnMuc2lsZW50KSB7XG4gICAgICBlcnJvcnNMaXN0LnB1c2goZXJyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBNYXRjaCBgcmVgIGFuZCByZXR1cm4gY2FwdHVyZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVnRXhwfSByZVxuICAgKiBAcmV0dXJuIHt1bmRlZmluZWR8QXJyYXl9XG4gICAqL1xuICBmdW5jdGlvbiBtYXRjaChyZSkge1xuICAgIHZhciBtID0gcmUuZXhlYyhzdHlsZSk7XG4gICAgaWYgKCFtKSByZXR1cm47XG4gICAgdmFyIHN0ciA9IG1bMF07XG4gICAgdXBkYXRlUG9zaXRpb24oc3RyKTtcbiAgICBzdHlsZSA9IHN0eWxlLnNsaWNlKHN0ci5sZW5ndGgpO1xuICAgIHJldHVybiBtO1xuICB9XG5cbiAgLyoqXG4gICAqIFBhcnNlIHdoaXRlc3BhY2UuXG4gICAqL1xuICBmdW5jdGlvbiB3aGl0ZXNwYWNlKCkge1xuICAgIG1hdGNoKFdISVRFU1BBQ0VfUkVHRVgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFBhcnNlIGNvbW1lbnRzLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdFtdfSBbcnVsZXNdXG4gICAqIEByZXR1cm4ge09iamVjdFtdfVxuICAgKi9cbiAgZnVuY3Rpb24gY29tbWVudHMocnVsZXMpIHtcbiAgICB2YXIgYztcbiAgICBydWxlcyA9IHJ1bGVzIHx8IFtdO1xuICAgIHdoaWxlICgoYyA9IGNvbW1lbnQoKSkpIHtcbiAgICAgIGlmIChjICE9PSBmYWxzZSkge1xuICAgICAgICBydWxlcy5wdXNoKGMpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcnVsZXM7XG4gIH1cblxuICAvKipcbiAgICogUGFyc2UgY29tbWVudC5cbiAgICpcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiBAdGhyb3dzIHtFcnJvcn1cbiAgICovXG4gIGZ1bmN0aW9uIGNvbW1lbnQoKSB7XG4gICAgdmFyIHBvcyA9IHBvc2l0aW9uKCk7XG4gICAgaWYgKEZPUldBUkRfU0xBU0ggIT0gc3R5bGUuY2hhckF0KDApIHx8IEFTVEVSSVNLICE9IHN0eWxlLmNoYXJBdCgxKSkgcmV0dXJuO1xuXG4gICAgdmFyIGkgPSAyO1xuICAgIHdoaWxlIChcbiAgICAgIEVNUFRZX1NUUklORyAhPSBzdHlsZS5jaGFyQXQoaSkgJiZcbiAgICAgIChBU1RFUklTSyAhPSBzdHlsZS5jaGFyQXQoaSkgfHwgRk9SV0FSRF9TTEFTSCAhPSBzdHlsZS5jaGFyQXQoaSArIDEpKVxuICAgICkge1xuICAgICAgKytpO1xuICAgIH1cbiAgICBpICs9IDI7XG5cbiAgICBpZiAoRU1QVFlfU1RSSU5HID09PSBzdHlsZS5jaGFyQXQoaSAtIDEpKSB7XG4gICAgICByZXR1cm4gZXJyb3IoJ0VuZCBvZiBjb21tZW50IG1pc3NpbmcnKTtcbiAgICB9XG5cbiAgICB2YXIgc3RyID0gc3R5bGUuc2xpY2UoMiwgaSAtIDIpO1xuICAgIGNvbHVtbiArPSAyO1xuICAgIHVwZGF0ZVBvc2l0aW9uKHN0cik7XG4gICAgc3R5bGUgPSBzdHlsZS5zbGljZShpKTtcbiAgICBjb2x1bW4gKz0gMjtcblxuICAgIHJldHVybiBwb3Moe1xuICAgICAgdHlwZTogVFlQRV9DT01NRU5ULFxuICAgICAgY29tbWVudDogc3RyXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUGFyc2UgZGVjbGFyYXRpb24uXG4gICAqXG4gICAqIEByZXR1cm4ge09iamVjdH1cbiAgICogQHRocm93cyB7RXJyb3J9XG4gICAqL1xuICBmdW5jdGlvbiBkZWNsYXJhdGlvbigpIHtcbiAgICB2YXIgcG9zID0gcG9zaXRpb24oKTtcblxuICAgIC8vIHByb3BcbiAgICB2YXIgcHJvcCA9IG1hdGNoKFBST1BFUlRZX1JFR0VYKTtcbiAgICBpZiAoIXByb3ApIHJldHVybjtcbiAgICBjb21tZW50KCk7XG5cbiAgICAvLyA6XG4gICAgaWYgKCFtYXRjaChDT0xPTl9SRUdFWCkpIHJldHVybiBlcnJvcihcInByb3BlcnR5IG1pc3NpbmcgJzonXCIpO1xuXG4gICAgLy8gdmFsXG4gICAgdmFyIHZhbCA9IG1hdGNoKFZBTFVFX1JFR0VYKTtcblxuICAgIHZhciByZXQgPSBwb3Moe1xuICAgICAgdHlwZTogVFlQRV9ERUNMQVJBVElPTixcbiAgICAgIHByb3BlcnR5OiB0cmltKHByb3BbMF0ucmVwbGFjZShDT01NRU5UX1JFR0VYLCBFTVBUWV9TVFJJTkcpKSxcbiAgICAgIHZhbHVlOiB2YWxcbiAgICAgICAgPyB0cmltKHZhbFswXS5yZXBsYWNlKENPTU1FTlRfUkVHRVgsIEVNUFRZX1NUUklORykpXG4gICAgICAgIDogRU1QVFlfU1RSSU5HXG4gICAgfSk7XG5cbiAgICAvLyA7XG4gICAgbWF0Y2goU0VNSUNPTE9OX1JFR0VYKTtcblxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICogUGFyc2UgZGVjbGFyYXRpb25zLlxuICAgKlxuICAgKiBAcmV0dXJuIHtPYmplY3RbXX1cbiAgICovXG4gIGZ1bmN0aW9uIGRlY2xhcmF0aW9ucygpIHtcbiAgICB2YXIgZGVjbHMgPSBbXTtcblxuICAgIGNvbW1lbnRzKGRlY2xzKTtcblxuICAgIC8vIGRlY2xhcmF0aW9uc1xuICAgIHZhciBkZWNsO1xuICAgIHdoaWxlICgoZGVjbCA9IGRlY2xhcmF0aW9uKCkpKSB7XG4gICAgICBpZiAoZGVjbCAhPT0gZmFsc2UpIHtcbiAgICAgICAgZGVjbHMucHVzaChkZWNsKTtcbiAgICAgICAgY29tbWVudHMoZGVjbHMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkZWNscztcbiAgfVxuXG4gIHdoaXRlc3BhY2UoKTtcbiAgcmV0dXJuIGRlY2xhcmF0aW9ucygpO1xufTtcblxuLyoqXG4gKiBUcmltIGBzdHJgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ciA/IHN0ci5yZXBsYWNlKFRSSU1fUkVHRVgsIEVNUFRZX1NUUklORykgOiBFTVBUWV9TVFJJTkc7XG59XG4iLCIvKiFcbiAqIERldGVybWluZSBpZiBhbiBvYmplY3QgaXMgYSBCdWZmZXJcbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNCdWZmZXIgKG9iaikge1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yICE9IG51bGwgJiZcbiAgICB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopXG59XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLGNhPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24gcChhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn12YXIgZGE9bmV3IFNldCxlYT17fTtmdW5jdGlvbiBmYShhLGIpe2hhKGEsYik7aGEoYStcIkNhcHR1cmVcIixiKX1cbmZ1bmN0aW9uIGhhKGEsYil7ZWFbYV09Yjtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWRhLmFkZChiW2FdKX1cbnZhciBpYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksamE9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxrYT0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sbGE9XG57fSxtYT17fTtmdW5jdGlvbiBvYShhKXtpZihqYS5jYWxsKG1hLGEpKXJldHVybiEwO2lmKGphLmNhbGwobGEsYSkpcmV0dXJuITE7aWYoa2EudGVzdChhKSlyZXR1cm4gbWFbYV09ITA7bGFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gcGEoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBxYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxwYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIHYoYSxiLGMsZCxlLGYsZyl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWY7dGhpcy5yZW1vdmVFbXB0eVN0cmluZz1nfXZhciB6PXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMCwhMSxhLG51bGwsITEsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO3pbYl09bmV3IHYoYiwxLCExLGFbMV0sbnVsbCwhMSwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMiwhMSxhLG51bGwsITEsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZGlzYWJsZVJlbW90ZVBsYXliYWNrIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDMsITAsYSxudWxsLCExLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDQsITEsYSxudWxsLCExLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsNiwhMSxhLG51bGwsITEsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTt2YXIgcmE9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBzYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYSxcbnNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLG51bGwsITEsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsc2EpO3pbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsc2EpO3pbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbnoueGxpbmtIcmVmPW5ldyB2KFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCwhMSk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCwhMCl9KTtcbmZ1bmN0aW9uIHRhKGEsYixjLGQpe3ZhciBlPXouaGFzT3duUHJvcGVydHkoYik/eltiXTpudWxsO2lmKG51bGwhPT1lPzAhPT1lLnR5cGU6ZHx8ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdKXFhKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9vYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSl9XG52YXIgdWE9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQsdmE9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksd2E9U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSx5YT1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIiksemE9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLEFhPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSxCYT1TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksQ2E9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksRGE9U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLEVhPVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSxGYT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKSxHYT1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSxIYT1TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTtTeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik7U3ltYm9sLmZvcihcInJlYWN0LmRlYnVnX3RyYWNlX21vZGVcIik7XG52YXIgSWE9U3ltYm9sLmZvcihcInJlYWN0Lm9mZnNjcmVlblwiKTtTeW1ib2wuZm9yKFwicmVhY3QubGVnYWN5X2hpZGRlblwiKTtTeW1ib2wuZm9yKFwicmVhY3QuY2FjaGVcIik7U3ltYm9sLmZvcihcInJlYWN0LnRyYWNpbmdfbWFya2VyXCIpO3ZhciBKYT1TeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gS2EoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPUphJiZhW0phXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfXZhciBBPU9iamVjdC5hc3NpZ24sTGE7ZnVuY3Rpb24gTWEoYSl7aWYodm9pZCAwPT09TGEpdHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGMpe3ZhciBiPWMuc3RhY2sudHJpbSgpLm1hdGNoKC9cXG4oICooYXQgKT8pLyk7TGE9YiYmYlsxXXx8XCJcIn1yZXR1cm5cIlxcblwiK0xhK2F9dmFyIE5hPSExO1xuZnVuY3Rpb24gT2EoYSxiKXtpZighYXx8TmEpcmV0dXJuXCJcIjtOYT0hMDt2YXIgYz1FcnJvci5wcmVwYXJlU3RhY2tUcmFjZTtFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT12b2lkIDA7dHJ5e2lmKGIpaWYoYj1mdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJwcm9wc1wiLHtzZXQ6ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO319KSxcIm9iamVjdFwiPT09dHlwZW9mIFJlZmxlY3QmJlJlZmxlY3QuY29uc3RydWN0KXt0cnl7UmVmbGVjdC5jb25zdHJ1Y3QoYixbXSl9Y2F0Y2gobCl7dmFyIGQ9bH1SZWZsZWN0LmNvbnN0cnVjdChhLFtdLGIpfWVsc2V7dHJ5e2IuY2FsbCgpfWNhdGNoKGwpe2Q9bH1hLmNhbGwoYi5wcm90b3R5cGUpfWVsc2V7dHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGwpe2Q9bH1hKCl9fWNhdGNoKGwpe2lmKGwmJmQmJlwic3RyaW5nXCI9PT10eXBlb2YgbC5zdGFjayl7Zm9yKHZhciBlPWwuc3RhY2suc3BsaXQoXCJcXG5cIiksXG5mPWQuc3RhY2suc3BsaXQoXCJcXG5cIiksZz1lLmxlbmd0aC0xLGg9Zi5sZW5ndGgtMTsxPD1nJiYwPD1oJiZlW2ddIT09ZltoXTspaC0tO2Zvcig7MTw9ZyYmMDw9aDtnLS0saC0tKWlmKGVbZ10hPT1mW2hdKXtpZigxIT09Z3x8MSE9PWgpe2RvIGlmKGctLSxoLS0sMD5ofHxlW2ddIT09ZltoXSl7dmFyIGs9XCJcXG5cIitlW2ddLnJlcGxhY2UoXCIgYXQgbmV3IFwiLFwiIGF0IFwiKTthLmRpc3BsYXlOYW1lJiZrLmluY2x1ZGVzKFwiPGFub255bW91cz5cIikmJihrPWsucmVwbGFjZShcIjxhbm9ueW1vdXM+XCIsYS5kaXNwbGF5TmFtZSkpO3JldHVybiBrfXdoaWxlKDE8PWcmJjA8PWgpfWJyZWFrfX19ZmluYWxseXtOYT0hMSxFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT1jfXJldHVybihhPWE/YS5kaXNwbGF5TmFtZXx8YS5uYW1lOlwiXCIpP01hKGEpOlwiXCJ9XG5mdW5jdGlvbiBQYShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTpyZXR1cm4gTWEoYS50eXBlKTtjYXNlIDE2OnJldHVybiBNYShcIkxhenlcIik7Y2FzZSAxMzpyZXR1cm4gTWEoXCJTdXNwZW5zZVwiKTtjYXNlIDE5OnJldHVybiBNYShcIlN1c3BlbnNlTGlzdFwiKTtjYXNlIDA6Y2FzZSAyOmNhc2UgMTU6cmV0dXJuIGE9T2EoYS50eXBlLCExKSxhO2Nhc2UgMTE6cmV0dXJuIGE9T2EoYS50eXBlLnJlbmRlciwhMSksYTtjYXNlIDE6cmV0dXJuIGE9T2EoYS50eXBlLCEwKSxhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBRYShhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHlhOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIHdhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSBBYTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSB6YTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIEVhOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIEZhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIENhOnJldHVybihhLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIEJhOnJldHVybihhLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIERhOnZhciBiPWEucmVuZGVyO2E9YS5kaXNwbGF5TmFtZTthfHwoYT1iLmRpc3BsYXlOYW1lfHxcbmIubmFtZXx8XCJcIixhPVwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtyZXR1cm4gYTtjYXNlIEdhOnJldHVybiBiPWEuZGlzcGxheU5hbWV8fG51bGwsbnVsbCE9PWI/YjpRYShhLnR5cGUpfHxcIk1lbW9cIjtjYXNlIEhhOmI9YS5fcGF5bG9hZDthPWEuX2luaXQ7dHJ5e3JldHVybiBRYShhKGIpKX1jYXRjaChjKXt9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gUmEoYSl7dmFyIGI9YS50eXBlO3N3aXRjaChhLnRhZyl7Y2FzZSAyNDpyZXR1cm5cIkNhY2hlXCI7Y2FzZSA5OnJldHVybihiLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIDEwOnJldHVybihiLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIDE4OnJldHVyblwiRGVoeWRyYXRlZEZyYWdtZW50XCI7Y2FzZSAxMTpyZXR1cm4gYT1iLnJlbmRlcixhPWEuZGlzcGxheU5hbWV8fGEubmFtZXx8XCJcIixiLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK2ErXCIpXCI6XCJGb3J3YXJkUmVmXCIpO2Nhc2UgNzpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSA1OnJldHVybiBiO2Nhc2UgNDpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgMzpyZXR1cm5cIlJvb3RcIjtjYXNlIDY6cmV0dXJuXCJUZXh0XCI7Y2FzZSAxNjpyZXR1cm4gUWEoYik7Y2FzZSA4OnJldHVybiBiPT09emE/XCJTdHJpY3RNb2RlXCI6XCJNb2RlXCI7Y2FzZSAyMjpyZXR1cm5cIk9mZnNjcmVlblwiO1xuY2FzZSAxMjpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSAyMTpyZXR1cm5cIlNjb3BlXCI7Y2FzZSAxMzpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSAxOTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwiO2Nhc2UgMjU6cmV0dXJuXCJUcmFjaW5nTWFya2VyXCI7Y2FzZSAxOmNhc2UgMDpjYXNlIDE3OmNhc2UgMjpjYXNlIDE0OmNhc2UgMTU6aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGIuZGlzcGxheU5hbWV8fGIubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGIpcmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gU2EoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2Nhc2UgXCJvYmplY3RcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gVGEoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFVhKGEpe3ZhciBiPVRhKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBWYShhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9VWEoYSkpfWZ1bmN0aW9uIFdhKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1UYShhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIFhhKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1cbmZ1bmN0aW9uIFlhKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBBKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1mdW5jdGlvbiBaYShhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1TYShudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIGFiKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmdGEoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIGJiKGEsYil7YWIoYSxiKTt2YXIgYz1TYShiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9jYihhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZjYihhLGIudHlwZSxTYShiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIGRiKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBjYihhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fFhhKGEub3duZXJEb2N1bWVudCkhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX12YXIgZWI9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIGZiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitTYShjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gZ2IoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHAoOTEpKTtyZXR1cm4gQSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBoYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcihwKDkyKSk7aWYoZWIoYykpe2lmKDE8Yy5sZW5ndGgpdGhyb3cgRXJyb3IocCg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlNhKGMpfX1cbmZ1bmN0aW9uIGliKGEsYil7dmFyIGM9U2EoYi52YWx1ZSksZD1TYShiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIGpiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9ZnVuY3Rpb24ga2IoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1cbmZ1bmN0aW9uIGxiKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9rYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBtYixuYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIT09YS5uYW1lc3BhY2VVUkl8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXttYj1tYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTttYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1tYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBvYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHBiPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxhc3BlY3RSYXRpbzohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsXG56b29tOiEwLGZpbGxPcGFjaXR5OiEwLGZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHFiPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhwYikuZm9yRWFjaChmdW5jdGlvbihhKXtxYi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3BiW2JdPXBiW2FdfSl9KTtmdW5jdGlvbiByYihhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8cGIuaGFzT3duUHJvcGVydHkoYSkmJnBiW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHNiKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXJiKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHRiPUEoe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB1YihhLGIpe2lmKGIpe2lmKHRiW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IocCgxMzcsYSkpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IocCg2MCkpO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTHx8IShcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IocCg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IocCg2MikpO319XG5mdW5jdGlvbiB2YihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIHdiPW51bGw7ZnVuY3Rpb24geGIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfXZhciB5Yj1udWxsLHpiPW51bGwsQWI9bnVsbDtcbmZ1bmN0aW9uIEJiKGEpe2lmKGE9Q2IoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB5Yil0aHJvdyBFcnJvcihwKDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPURiKGIpLHliKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIEViKGEpe3piP0FiP0FiLnB1c2goYSk6QWI9W2FdOnpiPWF9ZnVuY3Rpb24gRmIoKXtpZih6Yil7dmFyIGE9emIsYj1BYjtBYj16Yj1udWxsO0JiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylCYihiW2FdKX19ZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYigpe312YXIgSWI9ITE7ZnVuY3Rpb24gSmIoYSxiLGMpe2lmKEliKXJldHVybiBhKGIsYyk7SWI9ITA7dHJ5e3JldHVybiBHYihhLGIsYyl9ZmluYWxseXtpZihJYj0hMSxudWxsIT09emJ8fG51bGwhPT1BYilIYigpLEZiKCl9fVxuZnVuY3Rpb24gS2IoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDt2YXIgZD1EYihjKTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VFbnRlclwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7aWYoYyYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgYyl0aHJvdyBFcnJvcihwKDIzMSxiLHR5cGVvZiBjKSk7cmV0dXJuIGN9dmFyIExiPSExO2lmKGlhKXRyeXt2YXIgTWI9e307T2JqZWN0LmRlZmluZVByb3BlcnR5KE1iLFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtMYj0hMH19KTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIixNYixNYik7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsTWIsTWIpfWNhdGNoKGEpe0xiPSExfWZ1bmN0aW9uIE5iKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChtKXt0aGlzLm9uRXJyb3IobSl9fXZhciBPYj0hMSxQYj1udWxsLFFiPSExLFJiPW51bGwsU2I9e29uRXJyb3I6ZnVuY3Rpb24oYSl7T2I9ITA7UGI9YX19O2Z1bmN0aW9uIFRiKGEsYixjLGQsZSxmLGcsaCxrKXtPYj0hMTtQYj1udWxsO05iLmFwcGx5KFNiLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiBVYihhLGIsYyxkLGUsZixnLGgsayl7VGIuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKE9iKXtpZihPYil7dmFyIGw9UGI7T2I9ITE7UGI9bnVsbH1lbHNlIHRocm93IEVycm9yKHAoMTk4KSk7UWJ8fChRYj0hMCxSYj1sKX19ZnVuY3Rpb24gVmIoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmZsYWdzJjQwOTgpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiBXYihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIFhiKGEpe2lmKFZiKGEpIT09YSl0aHJvdyBFcnJvcihwKDE4OCkpO31cbmZ1bmN0aW9uIFliKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPVZiKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHAoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIFhiKGUpLGE7aWYoZj09PWQpcmV0dXJuIFhiKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IocCgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcihwKDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHAoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcihwKDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gWmIoYSl7YT1ZYihhKTtyZXR1cm4gbnVsbCE9PWE/JGIoYSk6bnVsbH1mdW5jdGlvbiAkYihhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYTtmb3IoYT1hLmNoaWxkO251bGwhPT1hOyl7dmFyIGI9JGIoYSk7aWYobnVsbCE9PWIpcmV0dXJuIGI7YT1hLnNpYmxpbmd9cmV0dXJuIG51bGx9XG52YXIgYWM9Y2EudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxiYz1jYS51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxjYz1jYS51bnN0YWJsZV9zaG91bGRZaWVsZCxkYz1jYS51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsQj1jYS51bnN0YWJsZV9ub3csZWM9Y2EudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsZmM9Y2EudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksZ2M9Y2EudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksaGM9Y2EudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksaWM9Y2EudW5zdGFibGVfTG93UHJpb3JpdHksamM9Y2EudW5zdGFibGVfSWRsZVByaW9yaXR5LGtjPW51bGwsbGM9bnVsbDtmdW5jdGlvbiBtYyhhKXtpZihsYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGxjLm9uQ29tbWl0RmliZXJSb290KXRyeXtsYy5vbkNvbW1pdEZpYmVyUm9vdChrYyxhLHZvaWQgMCwxMjg9PT0oYS5jdXJyZW50LmZsYWdzJjEyOCkpfWNhdGNoKGIpe319XG52YXIgb2M9TWF0aC5jbHozMj9NYXRoLmNsejMyOm5jLHBjPU1hdGgubG9nLHFjPU1hdGguTE4yO2Z1bmN0aW9uIG5jKGEpe2E+Pj49MDtyZXR1cm4gMD09PWE/MzI6MzEtKHBjKGEpL3FjfDApfDB9dmFyIHJjPTY0LHNjPTQxOTQzMDQ7XG5mdW5jdGlvbiB0YyhhKXtzd2l0Y2goYSYtYSl7Y2FzZSAxOnJldHVybiAxO2Nhc2UgMjpyZXR1cm4gMjtjYXNlIDQ6cmV0dXJuIDQ7Y2FzZSA4OnJldHVybiA4O2Nhc2UgMTY6cmV0dXJuIDE2O2Nhc2UgMzI6cmV0dXJuIDMyO2Nhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6cmV0dXJuIGEmNDE5NDI0MDtjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OnJldHVybiBhJjEzMDAyMzQyNDtjYXNlIDEzNDIxNzcyODpyZXR1cm4gMTM0MjE3NzI4O2Nhc2UgMjY4NDM1NDU2OnJldHVybiAyNjg0MzU0NTY7Y2FzZSA1MzY4NzA5MTI6cmV0dXJuIDUzNjg3MDkxMjtjYXNlIDEwNzM3NDE4MjQ6cmV0dXJuIDEwNzM3NDE4MjQ7XG5kZWZhdWx0OnJldHVybiBhfX1mdW5jdGlvbiB1YyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzO2lmKDA9PT1jKXJldHVybiAwO3ZhciBkPTAsZT1hLnN1c3BlbmRlZExhbmVzLGY9YS5waW5nZWRMYW5lcyxnPWMmMjY4NDM1NDU1O2lmKDAhPT1nKXt2YXIgaD1nJn5lOzAhPT1oP2Q9dGMoaCk6KGYmPWcsMCE9PWYmJihkPXRjKGYpKSl9ZWxzZSBnPWMmfmUsMCE9PWc/ZD10YyhnKTowIT09ZiYmKGQ9dGMoZikpO2lmKDA9PT1kKXJldHVybiAwO2lmKDAhPT1iJiZiIT09ZCYmMD09PShiJmUpJiYoZT1kJi1kLGY9YiYtYixlPj1mfHwxNj09PWUmJjAhPT0oZiY0MTk0MjQwKSkpcmV0dXJuIGI7MCE9PShkJjQpJiYoZHw9YyYxNik7Yj1hLmVudGFuZ2xlZExhbmVzO2lmKDAhPT1iKWZvcihhPWEuZW50YW5nbGVtZW50cyxiJj1kOzA8YjspYz0zMS1vYyhiKSxlPTE8PGMsZHw9YVtjXSxiJj1+ZTtyZXR1cm4gZH1cbmZ1bmN0aW9uIHZjKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSA0OnJldHVybiBiKzI1MDtjYXNlIDg6Y2FzZSAxNjpjYXNlIDMyOmNhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6cmV0dXJuIGIrNUUzO2Nhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6cmV0dXJuLTE7Y2FzZSAxMzQyMTc3Mjg6Y2FzZSAyNjg0MzU0NTY6Y2FzZSA1MzY4NzA5MTI6Y2FzZSAxMDczNzQxODI0OnJldHVybi0xO2RlZmF1bHQ6cmV0dXJuLTF9fVxuZnVuY3Rpb24gd2MoYSxiKXtmb3IodmFyIGM9YS5zdXNwZW5kZWRMYW5lcyxkPWEucGluZ2VkTGFuZXMsZT1hLmV4cGlyYXRpb25UaW1lcyxmPWEucGVuZGluZ0xhbmVzOzA8Zjspe3ZhciBnPTMxLW9jKGYpLGg9MTw8ZyxrPWVbZ107aWYoLTE9PT1rKXtpZigwPT09KGgmYyl8fDAhPT0oaCZkKSllW2ddPXZjKGgsYil9ZWxzZSBrPD1iJiYoYS5leHBpcmVkTGFuZXN8PWgpO2YmPX5ofX1mdW5jdGlvbiB4YyhhKXthPWEucGVuZGluZ0xhbmVzJi0xMDczNzQxODI1O3JldHVybiAwIT09YT9hOmEmMTA3Mzc0MTgyND8xMDczNzQxODI0OjB9ZnVuY3Rpb24geWMoKXt2YXIgYT1yYztyYzw8PTE7MD09PShyYyY0MTk0MjQwKSYmKHJjPTY0KTtyZXR1cm4gYX1mdW5jdGlvbiB6YyhhKXtmb3IodmFyIGI9W10sYz0wOzMxPmM7YysrKWIucHVzaChhKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIEFjKGEsYixjKXthLnBlbmRpbmdMYW5lc3w9Yjs1MzY4NzA5MTIhPT1iJiYoYS5zdXNwZW5kZWRMYW5lcz0wLGEucGluZ2VkTGFuZXM9MCk7YT1hLmV2ZW50VGltZXM7Yj0zMS1vYyhiKTthW2JdPWN9ZnVuY3Rpb24gQmMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcyZ+YjthLnBlbmRpbmdMYW5lcz1iO2Euc3VzcGVuZGVkTGFuZXM9MDthLnBpbmdlZExhbmVzPTA7YS5leHBpcmVkTGFuZXMmPWI7YS5tdXRhYmxlUmVhZExhbmVzJj1iO2EuZW50YW5nbGVkTGFuZXMmPWI7Yj1hLmVudGFuZ2xlbWVudHM7dmFyIGQ9YS5ldmVudFRpbWVzO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yzspe3ZhciBlPTMxLW9jKGMpLGY9MTw8ZTtiW2VdPTA7ZFtlXT0tMTthW2VdPS0xO2MmPX5mfX1cbmZ1bmN0aW9uIENjKGEsYil7dmFyIGM9YS5lbnRhbmdsZWRMYW5lc3w9Yjtmb3IoYT1hLmVudGFuZ2xlbWVudHM7Yzspe3ZhciBkPTMxLW9jKGMpLGU9MTw8ZDtlJmJ8YVtkXSZiJiYoYVtkXXw9Yik7YyY9fmV9fXZhciBDPTA7ZnVuY3Rpb24gRGMoYSl7YSY9LWE7cmV0dXJuIDE8YT80PGE/MCE9PShhJjI2ODQzNTQ1NSk/MTY6NTM2ODcwOTEyOjQ6MX12YXIgRWMsRmMsR2MsSGMsSWMsSmM9ITEsS2M9W10sTGM9bnVsbCxNYz1udWxsLE5jPW51bGwsT2M9bmV3IE1hcCxQYz1uZXcgTWFwLFFjPVtdLFJjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIFNjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6TGM9bnVsbDticmVhaztjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdsZWF2ZVwiOk1jPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJtb3VzZW91dFwiOk5jPW51bGw7YnJlYWs7Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpPYy5kZWxldGUoYi5wb2ludGVySWQpO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpQYy5kZWxldGUoYi5wb2ludGVySWQpfX1cbmZ1bmN0aW9uIFRjKGEsYixjLGQsZSxmKXtpZihudWxsPT09YXx8YS5uYXRpdmVFdmVudCE9PWYpcmV0dXJuIGE9e2Jsb2NrZWRPbjpiLGRvbUV2ZW50TmFtZTpjLGV2ZW50U3lzdGVtRmxhZ3M6ZCxuYXRpdmVFdmVudDpmLHRhcmdldENvbnRhaW5lcnM6W2VdfSxudWxsIT09YiYmKGI9Q2IoYiksbnVsbCE9PWImJkZjKGIpKSxhO2EuZXZlbnRTeXN0ZW1GbGFnc3w9ZDtiPWEudGFyZ2V0Q29udGFpbmVycztudWxsIT09ZSYmLTE9PT1iLmluZGV4T2YoZSkmJmIucHVzaChlKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIFVjKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJmb2N1c2luXCI6cmV0dXJuIExjPVRjKExjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBNYz1UYyhNYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gTmM9VGMoTmMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtPYy5zZXQoZixUYyhPYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsUGMuc2V0KGYsVGMoUGMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gVmMoYSl7dmFyIGI9V2MoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1WYihiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj1XYihjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtJYyhhLnByaW9yaXR5LGZ1bmN0aW9uKCl7R2MoYyl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfVxuZnVuY3Rpb24gWGMoYSl7aWYobnVsbCE9PWEuYmxvY2tlZE9uKXJldHVybiExO2Zvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPVljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGw9PT1jKXtjPWEubmF0aXZlRXZlbnQ7dmFyIGQ9bmV3IGMuY29uc3RydWN0b3IoYy50eXBlLGMpO3diPWQ7Yy50YXJnZXQuZGlzcGF0Y2hFdmVudChkKTt3Yj1udWxsfWVsc2UgcmV0dXJuIGI9Q2IoYyksbnVsbCE9PWImJkZjKGIpLGEuYmxvY2tlZE9uPWMsITE7Yi5zaGlmdCgpfXJldHVybiEwfWZ1bmN0aW9uIFpjKGEsYixjKXtYYyhhKSYmYy5kZWxldGUoYil9ZnVuY3Rpb24gJGMoKXtKYz0hMTtudWxsIT09TGMmJlhjKExjKSYmKExjPW51bGwpO251bGwhPT1NYyYmWGMoTWMpJiYoTWM9bnVsbCk7bnVsbCE9PU5jJiZYYyhOYykmJihOYz1udWxsKTtPYy5mb3JFYWNoKFpjKTtQYy5mb3JFYWNoKFpjKX1cbmZ1bmN0aW9uIGFkKGEsYil7YS5ibG9ja2VkT249PT1iJiYoYS5ibG9ja2VkT249bnVsbCxKY3x8KEpjPSEwLGNhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soY2EudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksJGMpKSl9XG5mdW5jdGlvbiBiZChhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBhZChiLGEpfWlmKDA8S2MubGVuZ3RoKXthZChLY1swXSxhKTtmb3IodmFyIGM9MTtjPEtjLmxlbmd0aDtjKyspe3ZhciBkPUtjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09TGMmJmFkKExjLGEpO251bGwhPT1NYyYmYWQoTWMsYSk7bnVsbCE9PU5jJiZhZChOYyxhKTtPYy5mb3JFYWNoKGIpO1BjLmZvckVhY2goYik7Zm9yKGM9MDtjPFFjLmxlbmd0aDtjKyspZD1RY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8UWMubGVuZ3RoJiYoYz1RY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOylWYyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJlFjLnNoaWZ0KCl9dmFyIGNkPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLGRkPSEwO1xuZnVuY3Rpb24gZWQoYSxiLGMsZCl7dmFyIGU9QyxmPWNkLnRyYW5zaXRpb247Y2QudHJhbnNpdGlvbj1udWxsO3RyeXtDPTEsZmQoYSxiLGMsZCl9ZmluYWxseXtDPWUsY2QudHJhbnNpdGlvbj1mfX1mdW5jdGlvbiBnZChhLGIsYyxkKXt2YXIgZT1DLGY9Y2QudHJhbnNpdGlvbjtjZC50cmFuc2l0aW9uPW51bGw7dHJ5e0M9NCxmZChhLGIsYyxkKX1maW5hbGx5e0M9ZSxjZC50cmFuc2l0aW9uPWZ9fVxuZnVuY3Rpb24gZmQoYSxiLGMsZCl7aWYoZGQpe3ZhciBlPVljKGEsYixjLGQpO2lmKG51bGw9PT1lKWhkKGEsYixkLGlkLGMpLFNjKGEsZCk7ZWxzZSBpZihVYyhlLGEsYixjLGQpKWQuc3RvcFByb3BhZ2F0aW9uKCk7ZWxzZSBpZihTYyhhLGQpLGImNCYmLTE8UmMuaW5kZXhPZihhKSl7Zm9yKDtudWxsIT09ZTspe3ZhciBmPUNiKGUpO251bGwhPT1mJiZFYyhmKTtmPVljKGEsYixjLGQpO251bGw9PT1mJiZoZChhLGIsZCxpZCxjKTtpZihmPT09ZSlicmVhaztlPWZ9bnVsbCE9PWUmJmQuc3RvcFByb3BhZ2F0aW9uKCl9ZWxzZSBoZChhLGIsZCxudWxsLGMpfX12YXIgaWQ9bnVsbDtcbmZ1bmN0aW9uIFljKGEsYixjLGQpe2lkPW51bGw7YT14YihkKTthPVdjKGEpO2lmKG51bGwhPT1hKWlmKGI9VmIoYSksbnVsbD09PWIpYT1udWxsO2Vsc2UgaWYoYz1iLnRhZywxMz09PWMpe2E9V2IoYik7aWYobnVsbCE9PWEpcmV0dXJuIGE7YT1udWxsfWVsc2UgaWYoMz09PWMpe2lmKGIuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpcmV0dXJuIDM9PT1iLnRhZz9iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7YT1udWxsfWVsc2UgYiE9PWEmJihhPW51bGwpO2lkPWE7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBqZChhKXtzd2l0Y2goYSl7Y2FzZSBcImNhbmNlbFwiOmNhc2UgXCJjbGlja1wiOmNhc2UgXCJjbG9zZVwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6Y2FzZSBcImZvY3VzaW5cIjpjYXNlIFwiZm9jdXNvdXRcIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcImtleXVwXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcInBhc3RlXCI6Y2FzZSBcInBhdXNlXCI6Y2FzZSBcInBsYXlcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVydXBcIjpjYXNlIFwicmF0ZWNoYW5nZVwiOmNhc2UgXCJyZXNldFwiOmNhc2UgXCJyZXNpemVcIjpjYXNlIFwic2Vla2VkXCI6Y2FzZSBcInN1Ym1pdFwiOmNhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6Y2FzZSBcInZvbHVtZWNoYW5nZVwiOmNhc2UgXCJjaGFuZ2VcIjpjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6Y2FzZSBcInRleHRJbnB1dFwiOmNhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6Y2FzZSBcImJlZm9yZWJsdXJcIjpjYXNlIFwiYWZ0ZXJibHVyXCI6Y2FzZSBcImJlZm9yZWlucHV0XCI6Y2FzZSBcImJsdXJcIjpjYXNlIFwiZnVsbHNjcmVlbmNoYW5nZVwiOmNhc2UgXCJmb2N1c1wiOmNhc2UgXCJoYXNoY2hhbmdlXCI6Y2FzZSBcInBvcHN0YXRlXCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJzZWxlY3RzdGFydFwiOnJldHVybiAxO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInNjcm9sbFwiOmNhc2UgXCJ0b2dnbGVcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcIndoZWVsXCI6Y2FzZSBcIm1vdXNlZW50ZXJcIjpjYXNlIFwibW91c2VsZWF2ZVwiOmNhc2UgXCJwb2ludGVyZW50ZXJcIjpjYXNlIFwicG9pbnRlcmxlYXZlXCI6cmV0dXJuIDQ7XG5jYXNlIFwibWVzc2FnZVwiOnN3aXRjaChlYygpKXtjYXNlIGZjOnJldHVybiAxO2Nhc2UgZ2M6cmV0dXJuIDQ7Y2FzZSBoYzpjYXNlIGljOnJldHVybiAxNjtjYXNlIGpjOnJldHVybiA1MzY4NzA5MTI7ZGVmYXVsdDpyZXR1cm4gMTZ9ZGVmYXVsdDpyZXR1cm4gMTZ9fXZhciBrZD1udWxsLGxkPW51bGwsbWQ9bnVsbDtmdW5jdGlvbiBuZCgpe2lmKG1kKXJldHVybiBtZDt2YXIgYSxiPWxkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIG1kPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9XG5mdW5jdGlvbiBvZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1mdW5jdGlvbiBwZCgpe3JldHVybiEwfWZ1bmN0aW9uIHFkKCl7cmV0dXJuITF9XG5mdW5jdGlvbiByZChhKXtmdW5jdGlvbiBiKGIsZCxlLGYsZyl7dGhpcy5fcmVhY3ROYW1lPWI7dGhpcy5fdGFyZ2V0SW5zdD1lO3RoaXMudHlwZT1kO3RoaXMubmF0aXZlRXZlbnQ9Zjt0aGlzLnRhcmdldD1nO3RoaXMuY3VycmVudFRhcmdldD1udWxsO2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJihiPWFbY10sdGhpc1tjXT1iP2IoZik6ZltjXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWYuZGVmYXVsdFByZXZlbnRlZD9mLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1mLnJldHVyblZhbHVlKT9wZDpxZDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXFkO3JldHVybiB0aGlzfUEoYi5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJlxuKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPXBkKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXBkKX0scGVyc2lzdDpmdW5jdGlvbigpe30saXNQZXJzaXN0ZW50OnBkfSk7cmV0dXJuIGJ9XG52YXIgc2Q9e2V2ZW50UGhhc2U6MCxidWJibGVzOjAsY2FuY2VsYWJsZTowLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6MCxpc1RydXN0ZWQ6MH0sdGQ9cmQoc2QpLHVkPUEoe30sc2Qse3ZpZXc6MCxkZXRhaWw6MH0pLHZkPXJkKHVkKSx3ZCx4ZCx5ZCxBZD1BKHt9LHVkLHtzY3JlZW5YOjAsc2NyZWVuWTowLGNsaWVudFg6MCxjbGllbnRZOjAscGFnZVg6MCxwYWdlWTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkLGJ1dHRvbjowLGJ1dHRvbnM6MCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiB2b2lkIDA9PT1hLnJlbGF0ZWRUYXJnZXQ/YS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50OmEucmVsYXRlZFRhcmdldH0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpblxuYSlyZXR1cm4gYS5tb3ZlbWVudFg7YSE9PXlkJiYoeWQmJlwibW91c2Vtb3ZlXCI9PT1hLnR5cGU/KHdkPWEuc2NyZWVuWC15ZC5zY3JlZW5YLHhkPWEuc2NyZWVuWS15ZC5zY3JlZW5ZKTp4ZD13ZD0wLHlkPWEpO3JldHVybiB3ZH0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe3JldHVyblwibW92ZW1lbnRZXCJpbiBhP2EubW92ZW1lbnRZOnhkfX0pLEJkPXJkKEFkKSxDZD1BKHt9LEFkLHtkYXRhVHJhbnNmZXI6MH0pLERkPXJkKENkKSxFZD1BKHt9LHVkLHtyZWxhdGVkVGFyZ2V0OjB9KSxGZD1yZChFZCksR2Q9QSh7fSxzZCx7YW5pbWF0aW9uTmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksSGQ9cmQoR2QpLElkPUEoe30sc2Qse2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxKZD1yZChJZCksS2Q9QSh7fSxzZCx7ZGF0YTowfSksTGQ9cmQoS2QpLE1kPXtFc2M6XCJFc2NhcGVcIixcblNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LE5kPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLDExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLFxuMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxPZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gUGQoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1PZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIHpkKCl7cmV0dXJuIFBkfVxudmFyIFFkPUEoe30sdWQse2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9TWRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9b2QoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP05kW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sY29kZTowLGxvY2F0aW9uOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLHJlcGVhdDowLGxvY2FsZTowLGdldE1vZGlmaWVyU3RhdGU6emQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP29kKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/b2QoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxSZD1yZChRZCksU2Q9QSh7fSxBZCx7cG9pbnRlcklkOjAsd2lkdGg6MCxoZWlnaHQ6MCxwcmVzc3VyZTowLHRhbmdlbnRpYWxQcmVzc3VyZTowLHRpbHRYOjAsdGlsdFk6MCx0d2lzdDowLHBvaW50ZXJUeXBlOjAsaXNQcmltYXJ5OjB9KSxUZD1yZChTZCksVWQ9QSh7fSx1ZCx7dG91Y2hlczowLHRhcmdldFRvdWNoZXM6MCxjaGFuZ2VkVG91Y2hlczowLGFsdEtleTowLG1ldGFLZXk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkfSksVmQ9cmQoVWQpLFdkPUEoe30sc2Qse3Byb3BlcnR5TmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksWGQ9cmQoV2QpLFlkPUEoe30sQWQse2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpbiBhPy1hLndoZWVsRGVsdGFYOjB9LFxuZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOjAsZGVsdGFNb2RlOjB9KSxaZD1yZChZZCksJGQ9WzksMTMsMjcsMzJdLGFlPWlhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxiZT1udWxsO2lhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihiZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO3ZhciBjZT1pYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIWJlLGRlPWlhJiYoIWFlfHxiZSYmODxiZSYmMTE+PWJlKSxlZT1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxmZT0hMTtcbmZ1bmN0aW9uIGdlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09JGQuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImZvY3Vzb3V0XCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gaGUoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgaWU9ITE7ZnVuY3Rpb24gamUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGhlKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtmZT0hMDtyZXR1cm4gZWU7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09ZWUmJmZlP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIGtlKGEsYil7aWYoaWUpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IWFlJiZnZShhLGIpPyhhPW5kKCksbWQ9bGQ9a2Q9bnVsbCxpZT0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gZGUmJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIGxlPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIG1lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhbGVbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfWZ1bmN0aW9uIG5lKGEsYixjLGQpe0ViKGQpO2I9b2UoYixcIm9uQ2hhbmdlXCIpOzA8Yi5sZW5ndGgmJihjPW5ldyB0ZChcIm9uQ2hhbmdlXCIsXCJjaGFuZ2VcIixudWxsLGMsZCksYS5wdXNoKHtldmVudDpjLGxpc3RlbmVyczpifSkpfXZhciBwZT1udWxsLHFlPW51bGw7ZnVuY3Rpb24gcmUoYSl7c2UoYSwwKX1mdW5jdGlvbiB0ZShhKXt2YXIgYj11ZShhKTtpZihXYShiKSlyZXR1cm4gYX1cbmZ1bmN0aW9uIHZlKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIHdlPSExO2lmKGlhKXt2YXIgeGU7aWYoaWEpe3ZhciB5ZT1cIm9uaW5wdXRcImluIGRvY3VtZW50O2lmKCF5ZSl7dmFyIHplPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7emUuc2V0QXR0cmlidXRlKFwib25pbnB1dFwiLFwicmV0dXJuO1wiKTt5ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgemUub25pbnB1dH14ZT15ZX1lbHNlIHhlPSExO3dlPXhlJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpfWZ1bmN0aW9uIEFlKCl7cGUmJihwZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkscWU9cGU9bnVsbCl9ZnVuY3Rpb24gQmUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJnRlKHFlKSl7dmFyIGI9W107bmUoYixxZSxhLHhiKGEpKTtKYihyZSxiKX19XG5mdW5jdGlvbiBDZShhLGIsYyl7XCJmb2N1c2luXCI9PT1hPyhBZSgpLHBlPWIscWU9YyxwZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkpOlwiZm9jdXNvdXRcIj09PWEmJkFlKCl9ZnVuY3Rpb24gRGUoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gdGUocWUpfWZ1bmN0aW9uIEVlKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gRmUoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gR2UoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBIZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpHZTtcbmZ1bmN0aW9uIEllKGEsYil7aWYoSGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdO2lmKCFqYS5jYWxsKGIsZSl8fCFIZShhW2VdLGJbZV0pKXJldHVybiExfXJldHVybiEwfWZ1bmN0aW9uIEplKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIEtlKGEsYil7dmFyIGM9SmUoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9SmUoYyl9fWZ1bmN0aW9uIExlKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/TGUoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gTWUoKXtmb3IodmFyIGE9d2luZG93LGI9WGEoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9WGEoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gTmUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbmZ1bmN0aW9uIE9lKGEpe3ZhciBiPU1lKCksYz1hLmZvY3VzZWRFbGVtLGQ9YS5zZWxlY3Rpb25SYW5nZTtpZihiIT09YyYmYyYmYy5vd25lckRvY3VtZW50JiZMZShjLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGMpKXtpZihudWxsIT09ZCYmTmUoYykpaWYoYj1kLnN0YXJ0LGE9ZC5lbmQsdm9pZCAwPT09YSYmKGE9YiksXCJzZWxlY3Rpb25TdGFydFwiaW4gYyljLnNlbGVjdGlvblN0YXJ0PWIsYy5zZWxlY3Rpb25FbmQ9TWF0aC5taW4oYSxjLnZhbHVlLmxlbmd0aCk7ZWxzZSBpZihhPShiPWMub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZiLmRlZmF1bHRWaWV3fHx3aW5kb3csYS5nZXRTZWxlY3Rpb24pe2E9YS5nZXRTZWxlY3Rpb24oKTt2YXIgZT1jLnRleHRDb250ZW50Lmxlbmd0aCxmPU1hdGgubWluKGQuc3RhcnQsZSk7ZD12b2lkIDA9PT1kLmVuZD9mOk1hdGgubWluKGQuZW5kLGUpOyFhLmV4dGVuZCYmZj5kJiYoZT1kLGQ9ZixmPWUpO2U9S2UoYyxmKTt2YXIgZz1LZShjLFxuZCk7ZSYmZyYmKDEhPT1hLnJhbmdlQ291bnR8fGEuYW5jaG9yTm9kZSE9PWUubm9kZXx8YS5hbmNob3JPZmZzZXQhPT1lLm9mZnNldHx8YS5mb2N1c05vZGUhPT1nLm5vZGV8fGEuZm9jdXNPZmZzZXQhPT1nLm9mZnNldCkmJihiPWIuY3JlYXRlUmFuZ2UoKSxiLnNldFN0YXJ0KGUubm9kZSxlLm9mZnNldCksYS5yZW1vdmVBbGxSYW5nZXMoKSxmPmQ/KGEuYWRkUmFuZ2UoYiksYS5leHRlbmQoZy5ub2RlLGcub2Zmc2V0KSk6KGIuc2V0RW5kKGcubm9kZSxnLm9mZnNldCksYS5hZGRSYW5nZShiKSkpfWI9W107Zm9yKGE9YzthPWEucGFyZW50Tm9kZTspMT09PWEubm9kZVR5cGUmJmIucHVzaCh7ZWxlbWVudDphLGxlZnQ6YS5zY3JvbGxMZWZ0LHRvcDphLnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmZvY3VzJiZjLmZvY3VzKCk7Zm9yKGM9MDtjPGIubGVuZ3RoO2MrKylhPWJbY10sYS5lbGVtZW50LnNjcm9sbExlZnQ9YS5sZWZ0LGEuZWxlbWVudC5zY3JvbGxUb3A9YS50b3B9fVxudmFyIFBlPWlhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsUWU9bnVsbCxSZT1udWxsLFNlPW51bGwsVGU9ITE7XG5mdW5jdGlvbiBVZShhLGIsYyl7dmFyIGQ9Yy53aW5kb3c9PT1jP2MuZG9jdW1lbnQ6OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7VGV8fG51bGw9PVFlfHxRZSE9PVhhKGQpfHwoZD1RZSxcInNlbGVjdGlvblN0YXJ0XCJpbiBkJiZOZShkKT9kPXtzdGFydDpkLnNlbGVjdGlvblN0YXJ0LGVuZDpkLnNlbGVjdGlvbkVuZH06KGQ9KGQub3duZXJEb2N1bWVudCYmZC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGQ9e2FuY2hvck5vZGU6ZC5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpkLmFuY2hvck9mZnNldCxmb2N1c05vZGU6ZC5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6ZC5mb2N1c09mZnNldH0pLFNlJiZJZShTZSxkKXx8KFNlPWQsZD1vZShSZSxcIm9uU2VsZWN0XCIpLDA8ZC5sZW5ndGgmJihiPW5ldyB0ZChcIm9uU2VsZWN0XCIsXCJzZWxlY3RcIixudWxsLGIsYyksYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpkfSksYi50YXJnZXQ9UWUpKSl9XG5mdW5jdGlvbiBWZShhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBXZT17YW5pbWF0aW9uZW5kOlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6VmUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6VmUoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxYZT17fSxZZT17fTtcbmlhJiYoWWU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgV2UuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgV2UuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgV2UuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgV2UudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBaZShhKXtpZihYZVthXSlyZXR1cm4gWGVbYV07aWYoIVdlW2FdKXJldHVybiBhO3ZhciBiPVdlW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIFllKXJldHVybiBYZVthXT1iW2NdO3JldHVybiBhfXZhciAkZT1aZShcImFuaW1hdGlvbmVuZFwiKSxhZj1aZShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxiZj1aZShcImFuaW1hdGlvbnN0YXJ0XCIpLGNmPVplKFwidHJhbnNpdGlvbmVuZFwiKSxkZj1uZXcgTWFwLGVmPVwiYWJvcnQgYXV4Q2xpY2sgY2FuY2VsIGNhblBsYXkgY2FuUGxheVRocm91Z2ggY2xpY2sgY2xvc2UgY29udGV4dE1lbnUgY29weSBjdXQgZHJhZyBkcmFnRW5kIGRyYWdFbnRlciBkcmFnRXhpdCBkcmFnTGVhdmUgZHJhZ092ZXIgZHJhZ1N0YXJ0IGRyb3AgZHVyYXRpb25DaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgZ290UG9pbnRlckNhcHR1cmUgaW5wdXQgaW52YWxpZCBrZXlEb3duIGtleVByZXNzIGtleVVwIGxvYWQgbG9hZGVkRGF0YSBsb2FkZWRNZXRhZGF0YSBsb2FkU3RhcnQgbG9zdFBvaW50ZXJDYXB0dXJlIG1vdXNlRG93biBtb3VzZU1vdmUgbW91c2VPdXQgbW91c2VPdmVyIG1vdXNlVXAgcGFzdGUgcGF1c2UgcGxheSBwbGF5aW5nIHBvaW50ZXJDYW5jZWwgcG9pbnRlckRvd24gcG9pbnRlck1vdmUgcG9pbnRlck91dCBwb2ludGVyT3ZlciBwb2ludGVyVXAgcHJvZ3Jlc3MgcmF0ZUNoYW5nZSByZXNldCByZXNpemUgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdWJtaXQgc3VzcGVuZCB0aW1lVXBkYXRlIHRvdWNoQ2FuY2VsIHRvdWNoRW5kIHRvdWNoU3RhcnQgdm9sdW1lQ2hhbmdlIHNjcm9sbCB0b2dnbGUgdG91Y2hNb3ZlIHdhaXRpbmcgd2hlZWxcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBmZihhLGIpe2RmLnNldChhLGIpO2ZhKGIsW2FdKX1mb3IodmFyIGdmPTA7Z2Y8ZWYubGVuZ3RoO2dmKyspe3ZhciBoZj1lZltnZl0samY9aGYudG9Mb3dlckNhc2UoKSxrZj1oZlswXS50b1VwcGVyQ2FzZSgpK2hmLnNsaWNlKDEpO2ZmKGpmLFwib25cIitrZil9ZmYoJGUsXCJvbkFuaW1hdGlvbkVuZFwiKTtmZihhZixcIm9uQW5pbWF0aW9uSXRlcmF0aW9uXCIpO2ZmKGJmLFwib25BbmltYXRpb25TdGFydFwiKTtmZihcImRibGNsaWNrXCIsXCJvbkRvdWJsZUNsaWNrXCIpO2ZmKFwiZm9jdXNpblwiLFwib25Gb2N1c1wiKTtmZihcImZvY3Vzb3V0XCIsXCJvbkJsdXJcIik7ZmYoY2YsXCJvblRyYW5zaXRpb25FbmRcIik7aGEoXCJvbk1vdXNlRW50ZXJcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtoYShcIm9uTW91c2VMZWF2ZVwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO2hhKFwib25Qb2ludGVyRW50ZXJcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7XG5oYShcIm9uUG9pbnRlckxlYXZlXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2ZhKFwib25DaGFuZ2VcIixcImNoYW5nZSBjbGljayBmb2N1c2luIGZvY3Vzb3V0IGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uU2VsZWN0XCIsXCJmb2N1c291dCBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzaW4ga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2ZhKFwib25CZWZvcmVJbnB1dFwiLFtcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXSk7ZmEoXCJvbkNvbXBvc2l0aW9uRW5kXCIsXCJjb21wb3NpdGlvbmVuZCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcImNvbXBvc2l0aW9uc3RhcnQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO1xuZmEoXCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsXCJjb21wb3NpdGlvbnVwZGF0ZSBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7dmFyIGxmPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSByZXNpemUgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksbWY9bmV3IFNldChcImNhbmNlbCBjbG9zZSBpbnZhbGlkIGxvYWQgc2Nyb2xsIHRvZ2dsZVwiLnNwbGl0KFwiIFwiKS5jb25jYXQobGYpKTtcbmZ1bmN0aW9uIG5mKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1jO1ViKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG5mdW5jdGlvbiBzZShhLGIpe2I9MCE9PShiJjQpO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD1hW2NdLGU9ZC5ldmVudDtkPWQubGlzdGVuZXJzO2E6e3ZhciBmPXZvaWQgMDtpZihiKWZvcih2YXIgZz1kLmxlbmd0aC0xOzA8PWc7Zy0tKXt2YXIgaD1kW2ddLGs9aC5pbnN0YW5jZSxsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO25mKGUsaCxsKTtmPWt9ZWxzZSBmb3IoZz0wO2c8ZC5sZW5ndGg7ZysrKXtoPWRbZ107az1oLmluc3RhbmNlO2w9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7bmYoZSxoLGwpO2Y9a319fWlmKFFiKXRocm93IGE9UmIsUWI9ITEsUmI9bnVsbCxhO31cbmZ1bmN0aW9uIEQoYSxiKXt2YXIgYz1iW29mXTt2b2lkIDA9PT1jJiYoYz1iW29mXT1uZXcgU2V0KTt2YXIgZD1hK1wiX19idWJibGVcIjtjLmhhcyhkKXx8KHBmKGIsYSwyLCExKSxjLmFkZChkKSl9ZnVuY3Rpb24gcWYoYSxiLGMpe3ZhciBkPTA7YiYmKGR8PTQpO3BmKGMsYSxkLGIpfXZhciByZj1cIl9yZWFjdExpc3RlbmluZ1wiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO2Z1bmN0aW9uIHNmKGEpe2lmKCFhW3JmXSl7YVtyZl09ITA7ZGEuZm9yRWFjaChmdW5jdGlvbihiKXtcInNlbGVjdGlvbmNoYW5nZVwiIT09YiYmKG1mLmhhcyhiKXx8cWYoYiwhMSxhKSxxZihiLCEwLGEpKX0pO3ZhciBiPTk9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O251bGw9PT1ifHxiW3JmXXx8KGJbcmZdPSEwLHFmKFwic2VsZWN0aW9uY2hhbmdlXCIsITEsYikpfX1cbmZ1bmN0aW9uIHBmKGEsYixjLGQpe3N3aXRjaChqZChiKSl7Y2FzZSAxOnZhciBlPWVkO2JyZWFrO2Nhc2UgNDplPWdkO2JyZWFrO2RlZmF1bHQ6ZT1mZH1jPWUuYmluZChudWxsLGIsYyxhKTtlPXZvaWQgMDshTGJ8fFwidG91Y2hzdGFydFwiIT09YiYmXCJ0b3VjaG1vdmVcIiE9PWImJlwid2hlZWxcIiE9PWJ8fChlPSEwKTtkP3ZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7Y2FwdHVyZTohMCxwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCEwKTp2b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse3Bhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfVxuZnVuY3Rpb24gaGQoYSxiLGMsZCxlKXt2YXIgZj1kO2lmKDA9PT0oYiYxKSYmMD09PShiJjIpJiZudWxsIT09ZClhOmZvcig7Oyl7aWYobnVsbD09PWQpcmV0dXJuO3ZhciBnPWQudGFnO2lmKDM9PT1nfHw0PT09Zyl7dmFyIGg9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZihoPT09ZXx8OD09PWgubm9kZVR5cGUmJmgucGFyZW50Tm9kZT09PWUpYnJlYWs7aWYoND09PWcpZm9yKGc9ZC5yZXR1cm47bnVsbCE9PWc7KXt2YXIgaz1nLnRhZztpZigzPT09a3x8ND09PWspaWYoaz1nLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGs9PT1lfHw4PT09ay5ub2RlVHlwZSYmay5wYXJlbnROb2RlPT09ZSlyZXR1cm47Zz1nLnJldHVybn1mb3IoO251bGwhPT1oOyl7Zz1XYyhoKTtpZihudWxsPT09ZylyZXR1cm47az1nLnRhZztpZig1PT09a3x8Nj09PWspe2Q9Zj1nO2NvbnRpbnVlIGF9aD1oLnBhcmVudE5vZGV9fWQ9ZC5yZXR1cm59SmIoZnVuY3Rpb24oKXt2YXIgZD1mLGU9eGIoYyksZz1bXTtcbmE6e3ZhciBoPWRmLmdldChhKTtpZih2b2lkIDAhPT1oKXt2YXIgaz10ZCxuPWE7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZChjKSlicmVhayBhO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6az1SZDticmVhaztjYXNlIFwiZm9jdXNpblwiOm49XCJmb2N1c1wiO2s9RmQ7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6bj1cImJsdXJcIjtrPUZkO2JyZWFrO2Nhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOms9RmQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKWJyZWFrIGE7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjprPUJkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOms9XG5EZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjprPVZkO2JyZWFrO2Nhc2UgJGU6Y2FzZSBhZjpjYXNlIGJmOms9SGQ7YnJlYWs7Y2FzZSBjZjprPVhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjprPXZkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOms9WmQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6az1KZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjprPVRkfXZhciB0PTAhPT0oYiY0KSxKPSF0JiZcInNjcm9sbFwiPT09YSx4PXQ/bnVsbCE9PWg/aCtcIkNhcHR1cmVcIjpudWxsOmg7dD1bXTtmb3IodmFyIHc9ZCx1O251bGwhPT1cbnc7KXt1PXc7dmFyIEY9dS5zdGF0ZU5vZGU7NT09PXUudGFnJiZudWxsIT09RiYmKHU9RixudWxsIT09eCYmKEY9S2Iodyx4KSxudWxsIT1GJiZ0LnB1c2godGYodyxGLHUpKSkpO2lmKEopYnJlYWs7dz13LnJldHVybn0wPHQubGVuZ3RoJiYoaD1uZXcgayhoLG4sbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6aCxsaXN0ZW5lcnM6dH0pKX19aWYoMD09PShiJjcpKXthOntoPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hO2s9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGgmJmMhPT13YiYmKG49Yy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KSYmKFdjKG4pfHxuW3VmXSkpYnJlYWsgYTtpZihrfHxoKXtoPWUud2luZG93PT09ZT9lOihoPWUub3duZXJEb2N1bWVudCk/aC5kZWZhdWx0Vmlld3x8aC5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGspe2lmKG49Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCxrPWQsbj1uP1djKG4pOm51bGwsbnVsbCE9PVxubiYmKEo9VmIobiksbiE9PUp8fDUhPT1uLnRhZyYmNiE9PW4udGFnKSluPW51bGx9ZWxzZSBrPW51bGwsbj1kO2lmKGshPT1uKXt0PUJkO0Y9XCJvbk1vdXNlTGVhdmVcIjt4PVwib25Nb3VzZUVudGVyXCI7dz1cIm1vdXNlXCI7aWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKXQ9VGQsRj1cIm9uUG9pbnRlckxlYXZlXCIseD1cIm9uUG9pbnRlckVudGVyXCIsdz1cInBvaW50ZXJcIjtKPW51bGw9PWs/aDp1ZShrKTt1PW51bGw9PW4/aDp1ZShuKTtoPW5ldyB0KEYsdytcImxlYXZlXCIsayxjLGUpO2gudGFyZ2V0PUo7aC5yZWxhdGVkVGFyZ2V0PXU7Rj1udWxsO1djKGUpPT09ZCYmKHQ9bmV3IHQoeCx3K1wiZW50ZXJcIixuLGMsZSksdC50YXJnZXQ9dSx0LnJlbGF0ZWRUYXJnZXQ9SixGPXQpO0o9RjtpZihrJiZuKWI6e3Q9azt4PW47dz0wO2Zvcih1PXQ7dTt1PXZmKHUpKXcrKzt1PTA7Zm9yKEY9eDtGO0Y9dmYoRikpdSsrO2Zvcig7MDx3LXU7KXQ9dmYodCksdy0tO2Zvcig7MDx1LXc7KXg9XG52Zih4KSx1LS07Zm9yKDt3LS07KXtpZih0PT09eHx8bnVsbCE9PXgmJnQ9PT14LmFsdGVybmF0ZSlicmVhayBiO3Q9dmYodCk7eD12Zih4KX10PW51bGx9ZWxzZSB0PW51bGw7bnVsbCE9PWsmJndmKGcsaCxrLHQsITEpO251bGwhPT1uJiZudWxsIT09SiYmd2YoZyxKLG4sdCwhMCl9fX1hOntoPWQ/dWUoZCk6d2luZG93O2s9aC5ub2RlTmFtZSYmaC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKFwic2VsZWN0XCI9PT1rfHxcImlucHV0XCI9PT1rJiZcImZpbGVcIj09PWgudHlwZSl2YXIgbmE9dmU7ZWxzZSBpZihtZShoKSlpZih3ZSluYT1GZTtlbHNle25hPURlO3ZhciB4YT1DZX1lbHNlKGs9aC5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWsudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWgudHlwZXx8XCJyYWRpb1wiPT09aC50eXBlKSYmKG5hPUVlKTtpZihuYSYmKG5hPW5hKGEsZCkpKXtuZShnLG5hLGMsZSk7YnJlYWsgYX14YSYmeGEoYSxoLGQpO1wiZm9jdXNvdXRcIj09PWEmJih4YT1oLl93cmFwcGVyU3RhdGUpJiZcbnhhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1oLnR5cGUmJmNiKGgsXCJudW1iZXJcIixoLnZhbHVlKX14YT1kP3VlKGQpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjppZihtZSh4YSl8fFwidHJ1ZVwiPT09eGEuY29udGVudEVkaXRhYmxlKVFlPXhhLFJlPWQsU2U9bnVsbDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpTZT1SZT1RZT1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpUZT0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6VGU9ITE7VWUoZyxjLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihQZSlicmVhaztjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOlVlKGcsYyxlKX12YXIgJGE7aWYoYWUpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6dmFyIGJhPVwib25Db21wb3NpdGlvblN0YXJ0XCI7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpiYT1cIm9uQ29tcG9zaXRpb25FbmRcIjtcbmJyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6YmE9XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCI7YnJlYWsgYn1iYT12b2lkIDB9ZWxzZSBpZT9nZShhLGMpJiYoYmE9XCJvbkNvbXBvc2l0aW9uRW5kXCIpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoYmE9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIik7YmEmJihkZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihpZXx8XCJvbkNvbXBvc2l0aW9uU3RhcnRcIiE9PWJhP1wib25Db21wb3NpdGlvbkVuZFwiPT09YmEmJmllJiYoJGE9bmQoKSk6KGtkPWUsbGQ9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsaWU9ITApKSx4YT1vZShkLGJhKSwwPHhhLmxlbmd0aCYmKGJhPW5ldyBMZChiYSxhLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmJhLGxpc3RlbmVyczp4YX0pLCRhP2JhLmRhdGE9JGE6KCRhPWhlKGMpLG51bGwhPT0kYSYmKGJhLmRhdGE9JGEpKSkpO2lmKCRhPWNlP2plKGEsYyk6a2UoYSxjKSlkPW9lKGQsXCJvbkJlZm9yZUlucHV0XCIpLFxuMDxkLmxlbmd0aCYmKGU9bmV3IExkKFwib25CZWZvcmVJbnB1dFwiLFwiYmVmb3JlaW5wdXRcIixudWxsLGMsZSksZy5wdXNoKHtldmVudDplLGxpc3RlbmVyczpkfSksZS5kYXRhPSRhKX1zZShnLGIpfSl9ZnVuY3Rpb24gdGYoYSxiLGMpe3JldHVybntpbnN0YW5jZTphLGxpc3RlbmVyOmIsY3VycmVudFRhcmdldDpjfX1mdW5jdGlvbiBvZShhLGIpe2Zvcih2YXIgYz1iK1wiQ2FwdHVyZVwiLGQ9W107bnVsbCE9PWE7KXt2YXIgZT1hLGY9ZS5zdGF0ZU5vZGU7NT09PWUudGFnJiZudWxsIT09ZiYmKGU9ZixmPUtiKGEsYyksbnVsbCE9ZiYmZC51bnNoaWZ0KHRmKGEsZixlKSksZj1LYihhLGIpLG51bGwhPWYmJmQucHVzaCh0ZihhLGYsZSkpKTthPWEucmV0dXJufXJldHVybiBkfWZ1bmN0aW9uIHZmKGEpe2lmKG51bGw9PT1hKXJldHVybiBudWxsO2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9XG5mdW5jdGlvbiB3ZihhLGIsYyxkLGUpe2Zvcih2YXIgZj1iLl9yZWFjdE5hbWUsZz1bXTtudWxsIT09YyYmYyE9PWQ7KXt2YXIgaD1jLGs9aC5hbHRlcm5hdGUsbD1oLnN0YXRlTm9kZTtpZihudWxsIT09ayYmaz09PWQpYnJlYWs7NT09PWgudGFnJiZudWxsIT09bCYmKGg9bCxlPyhrPUtiKGMsZiksbnVsbCE9ayYmZy51bnNoaWZ0KHRmKGMsayxoKSkpOmV8fChrPUtiKGMsZiksbnVsbCE9ayYmZy5wdXNoKHRmKGMsayxoKSkpKTtjPWMucmV0dXJufTAhPT1nLmxlbmd0aCYmYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpnfSl9dmFyIHhmPS9cXHJcXG4/L2cseWY9L1xcdTAwMDB8XFx1RkZGRC9nO2Z1bmN0aW9uIHpmKGEpe3JldHVybihcInN0cmluZ1wiPT09dHlwZW9mIGE/YTpcIlwiK2EpLnJlcGxhY2UoeGYsXCJcXG5cIikucmVwbGFjZSh5ZixcIlwiKX1mdW5jdGlvbiBBZihhLGIsYyl7Yj16ZihiKTtpZih6ZihhKSE9PWImJmMpdGhyb3cgRXJyb3IocCg0MjUpKTt9ZnVuY3Rpb24gQmYoKXt9XG52YXIgQ2Y9bnVsbCxEZj1udWxsO2Z1bmN0aW9uIEVmKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfVxudmFyIEZmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLEdmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMCxIZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgUHJvbWlzZT9Qcm9taXNlOnZvaWQgMCxKZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcXVldWVNaWNyb3Rhc2s/cXVldWVNaWNyb3Rhc2s6XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBIZj9mdW5jdGlvbihhKXtyZXR1cm4gSGYucmVzb2x2ZShudWxsKS50aGVuKGEpLmNhdGNoKElmKX06RmY7ZnVuY3Rpb24gSWYoYSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGE7fSl9XG5mdW5jdGlvbiBLZihhLGIpe3ZhciBjPWIsZD0wO2Rve3ZhciBlPWMubmV4dFNpYmxpbmc7YS5yZW1vdmVDaGlsZChjKTtpZihlJiY4PT09ZS5ub2RlVHlwZSlpZihjPWUuZGF0YSxcIi8kXCI9PT1jKXtpZigwPT09ZCl7YS5yZW1vdmVDaGlsZChlKTtiZChiKTtyZXR1cm59ZC0tfWVsc2VcIiRcIiE9PWMmJlwiJD9cIiE9PWMmJlwiJCFcIiE9PWN8fGQrKztjPWV9d2hpbGUoYyk7YmQoYil9ZnVuY3Rpb24gTGYoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWs7aWYoOD09PWIpe2I9YS5kYXRhO2lmKFwiJFwiPT09Ynx8XCIkIVwiPT09Ynx8XCIkP1wiPT09YilicmVhaztpZihcIi8kXCI9PT1iKXJldHVybiBudWxsfX1yZXR1cm4gYX1cbmZ1bmN0aW9uIE1mKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIkXCI9PT1jfHxcIiQhXCI9PT1jfHxcIiQ/XCI9PT1jKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZVwiLyRcIj09PWMmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciBOZj1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxPZj1cIl9fcmVhY3RGaWJlciRcIitOZixQZj1cIl9fcmVhY3RQcm9wcyRcIitOZix1Zj1cIl9fcmVhY3RDb250YWluZXIkXCIrTmYsb2Y9XCJfX3JlYWN0RXZlbnRzJFwiK05mLFFmPVwiX19yZWFjdExpc3RlbmVycyRcIitOZixSZj1cIl9fcmVhY3RIYW5kbGVzJFwiK05mO1xuZnVuY3Rpb24gV2MoYSl7dmFyIGI9YVtPZl07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbdWZdfHxjW09mXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPU1mKGEpO251bGwhPT1hOyl7aWYoYz1hW09mXSlyZXR1cm4gYzthPU1mKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDYihhKXthPWFbT2ZdfHxhW3VmXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gdWUoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHAoMzMpKTt9ZnVuY3Rpb24gRGIoYSl7cmV0dXJuIGFbUGZdfHxudWxsfXZhciBTZj1bXSxUZj0tMTtmdW5jdGlvbiBVZihhKXtyZXR1cm57Y3VycmVudDphfX1cbmZ1bmN0aW9uIEUoYSl7MD5UZnx8KGEuY3VycmVudD1TZltUZl0sU2ZbVGZdPW51bGwsVGYtLSl9ZnVuY3Rpb24gRyhhLGIpe1RmKys7U2ZbVGZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgVmY9e30sSD1VZihWZiksV2Y9VWYoITEpLFhmPVZmO2Z1bmN0aW9uIFlmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gVmY7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBaZihhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfWZ1bmN0aW9uICRmKCl7RShXZik7RShIKX1mdW5jdGlvbiBhZyhhLGIsYyl7aWYoSC5jdXJyZW50IT09VmYpdGhyb3cgRXJyb3IocCgxNjgpKTtHKEgsYik7RyhXZixjKX1mdW5jdGlvbiBiZyhhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7Yj1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGIpKXRocm93IEVycm9yKHAoMTA4LFJhKGEpfHxcIlVua25vd25cIixlKSk7cmV0dXJuIEEoe30sYyxkKX1cbmZ1bmN0aW9uIGNnKGEpe2E9KGE9YS5zdGF0ZU5vZGUpJiZhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxWZjtYZj1ILmN1cnJlbnQ7RyhILGEpO0coV2YsV2YuY3VycmVudCk7cmV0dXJuITB9ZnVuY3Rpb24gZGcoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHAoMTY5KSk7Yz8oYT1iZyhhLGIsWGYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxFKFdmKSxFKEgpLEcoSCxhKSk6RShXZik7RyhXZixjKX12YXIgZWc9bnVsbCxmZz0hMSxnZz0hMTtmdW5jdGlvbiBoZyhhKXtudWxsPT09ZWc/ZWc9W2FdOmVnLnB1c2goYSl9ZnVuY3Rpb24gaWcoYSl7Zmc9ITA7aGcoYSl9XG5mdW5jdGlvbiBqZygpe2lmKCFnZyYmbnVsbCE9PWVnKXtnZz0hMDt2YXIgYT0wLGI9Qzt0cnl7dmFyIGM9ZWc7Zm9yKEM9MTthPGMubGVuZ3RoO2ErKyl7dmFyIGQ9Y1thXTtkbyBkPWQoITApO3doaWxlKG51bGwhPT1kKX1lZz1udWxsO2ZnPSExfWNhdGNoKGUpe3Rocm93IG51bGwhPT1lZyYmKGVnPWVnLnNsaWNlKGErMSkpLGFjKGZjLGpnKSxlO31maW5hbGx5e0M9YixnZz0hMX19cmV0dXJuIG51bGx9dmFyIGtnPVtdLGxnPTAsbWc9bnVsbCxuZz0wLG9nPVtdLHBnPTAscWc9bnVsbCxyZz0xLHNnPVwiXCI7ZnVuY3Rpb24gdGcoYSxiKXtrZ1tsZysrXT1uZztrZ1tsZysrXT1tZzttZz1hO25nPWJ9XG5mdW5jdGlvbiB1ZyhhLGIsYyl7b2dbcGcrK109cmc7b2dbcGcrK109c2c7b2dbcGcrK109cWc7cWc9YTt2YXIgZD1yZzthPXNnO3ZhciBlPTMyLW9jKGQpLTE7ZCY9figxPDxlKTtjKz0xO3ZhciBmPTMyLW9jKGIpK2U7aWYoMzA8Zil7dmFyIGc9ZS1lJTU7Zj0oZCYoMTw8ZyktMSkudG9TdHJpbmcoMzIpO2Q+Pj1nO2UtPWc7cmc9MTw8MzItb2MoYikrZXxjPDxlfGQ7c2c9ZithfWVsc2Ugcmc9MTw8ZnxjPDxlfGQsc2c9YX1mdW5jdGlvbiB2ZyhhKXtudWxsIT09YS5yZXR1cm4mJih0ZyhhLDEpLHVnKGEsMSwwKSl9ZnVuY3Rpb24gd2coYSl7Zm9yKDthPT09bWc7KW1nPWtnWy0tbGddLGtnW2xnXT1udWxsLG5nPWtnWy0tbGddLGtnW2xnXT1udWxsO2Zvcig7YT09PXFnOylxZz1vZ1stLXBnXSxvZ1twZ109bnVsbCxzZz1vZ1stLXBnXSxvZ1twZ109bnVsbCxyZz1vZ1stLXBnXSxvZ1twZ109bnVsbH12YXIgeGc9bnVsbCx5Zz1udWxsLEk9ITEsemc9bnVsbDtcbmZ1bmN0aW9uIEFnKGEsYil7dmFyIGM9QmcoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yj1hLmRlbGV0aW9ucztudWxsPT09Yj8oYS5kZWxldGlvbnM9W2NdLGEuZmxhZ3N8PTE2KTpiLnB1c2goYyl9XG5mdW5jdGlvbiBDZyhhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9Yix4Zz1hLHlnPUxmKGIuZmlyc3RDaGlsZCksITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9Yix4Zz1hLHlnPW51bGwsITApOiExO2Nhc2UgMTM6cmV0dXJuIGI9OCE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhjPW51bGwhPT1xZz97aWQ6cmcsb3ZlcmZsb3c6c2d9Om51bGwsYS5tZW1vaXplZFN0YXRlPXtkZWh5ZHJhdGVkOmIsdHJlZUNvbnRleHQ6YyxyZXRyeUxhbmU6MTA3Mzc0MTgyNH0sYz1CZygxOCxudWxsLG51bGwsMCksYy5zdGF0ZU5vZGU9YixjLnJldHVybj1hLGEuY2hpbGQ9Yyx4Zz1hLHlnPVxubnVsbCwhMCk6ITE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gRGcoYSl7cmV0dXJuIDAhPT0oYS5tb2RlJjEpJiYwPT09KGEuZmxhZ3MmMTI4KX1mdW5jdGlvbiBFZyhhKXtpZihJKXt2YXIgYj15ZztpZihiKXt2YXIgYz1iO2lmKCFDZyhhLGIpKXtpZihEZyhhKSl0aHJvdyBFcnJvcihwKDQxOCkpO2I9TGYoYy5uZXh0U2libGluZyk7dmFyIGQ9eGc7YiYmQ2coYSxiKT9BZyhkLGMpOihhLmZsYWdzPWEuZmxhZ3MmLTQwOTd8MixJPSExLHhnPWEpfX1lbHNle2lmKERnKGEpKXRocm93IEVycm9yKHAoNDE4KSk7YS5mbGFncz1hLmZsYWdzJi00MDk3fDI7ST0hMTt4Zz1hfX19ZnVuY3Rpb24gRmcoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO3hnPWF9XG5mdW5jdGlvbiBHZyhhKXtpZihhIT09eGcpcmV0dXJuITE7aWYoIUkpcmV0dXJuIEZnKGEpLEk9ITAsITE7dmFyIGI7KGI9MyE9PWEudGFnKSYmIShiPTUhPT1hLnRhZykmJihiPWEudHlwZSxiPVwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhRWYoYS50eXBlLGEubWVtb2l6ZWRQcm9wcykpO2lmKGImJihiPXlnKSl7aWYoRGcoYSkpdGhyb3cgSGcoKSxFcnJvcihwKDQxOCkpO2Zvcig7YjspQWcoYSxiKSxiPUxmKGIubmV4dFNpYmxpbmcpfUZnKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IocCgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIi8kXCI9PT1jKXtpZigwPT09Yil7eWc9TGYoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZVwiJFwiIT09YyYmXCIkIVwiIT09YyYmXCIkP1wiIT09Y3x8YisrfWE9YS5uZXh0U2libGluZ315Zz1cbm51bGx9fWVsc2UgeWc9eGc/TGYoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9ZnVuY3Rpb24gSGcoKXtmb3IodmFyIGE9eWc7YTspYT1MZihhLm5leHRTaWJsaW5nKX1mdW5jdGlvbiBJZygpe3lnPXhnPW51bGw7ST0hMX1mdW5jdGlvbiBKZyhhKXtudWxsPT09emc/emc9W2FdOnpnLnB1c2goYSl9dmFyIEtnPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnO2Z1bmN0aW9uIExnKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9QSh7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pO3JldHVybiBifXJldHVybiBifXZhciBNZz1VZihudWxsKSxOZz1udWxsLE9nPW51bGwsUGc9bnVsbDtmdW5jdGlvbiBRZygpe1BnPU9nPU5nPW51bGx9ZnVuY3Rpb24gUmcoYSl7dmFyIGI9TWcuY3VycmVudDtFKE1nKTthLl9jdXJyZW50VmFsdWU9Yn1cbmZ1bmN0aW9uIFNnKGEsYixjKXtmb3IoO251bGwhPT1hOyl7dmFyIGQ9YS5hbHRlcm5hdGU7KGEuY2hpbGRMYW5lcyZiKSE9PWI/KGEuY2hpbGRMYW5lc3w9YixudWxsIT09ZCYmKGQuY2hpbGRMYW5lc3w9YikpOm51bGwhPT1kJiYoZC5jaGlsZExhbmVzJmIpIT09YiYmKGQuY2hpbGRMYW5lc3w9Yik7aWYoYT09PWMpYnJlYWs7YT1hLnJldHVybn19ZnVuY3Rpb24gVGcoYSxiKXtOZz1hO1BnPU9nPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoMCE9PShhLmxhbmVzJmIpJiYoVWc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gVmcoYSl7dmFyIGI9YS5fY3VycmVudFZhbHVlO2lmKFBnIT09YSlpZihhPXtjb250ZXh0OmEsbWVtb2l6ZWRWYWx1ZTpiLG5leHQ6bnVsbH0sbnVsbD09PU9nKXtpZihudWxsPT09TmcpdGhyb3cgRXJyb3IocCgzMDgpKTtPZz1hO05nLmRlcGVuZGVuY2llcz17bGFuZXM6MCxmaXJzdENvbnRleHQ6YX19ZWxzZSBPZz1PZy5uZXh0PWE7cmV0dXJuIGJ9dmFyIFdnPW51bGw7ZnVuY3Rpb24gWGcoYSl7bnVsbD09PVdnP1dnPVthXTpXZy5wdXNoKGEpfWZ1bmN0aW9uIFlnKGEsYixjLGQpe3ZhciBlPWIuaW50ZXJsZWF2ZWQ7bnVsbD09PWU/KGMubmV4dD1jLFhnKGIpKTooYy5uZXh0PWUubmV4dCxlLm5leHQ9Yyk7Yi5pbnRlcmxlYXZlZD1jO3JldHVybiBaZyhhLGQpfVxuZnVuY3Rpb24gWmcoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7Yz1hO2ZvcihhPWEucmV0dXJuO251bGwhPT1hOylhLmNoaWxkTGFuZXN8PWIsYz1hLmFsdGVybmF0ZSxudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9YiksYz1hLGE9YS5yZXR1cm47cmV0dXJuIDM9PT1jLnRhZz9jLnN0YXRlTm9kZTpudWxsfXZhciAkZz0hMTtmdW5jdGlvbiBhaChhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGZpcnN0QmFzZVVwZGF0ZTpudWxsLGxhc3RCYXNlVXBkYXRlOm51bGwsc2hhcmVkOntwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowfSxlZmZlY3RzOm51bGx9fVxuZnVuY3Rpb24gYmgoYSxiKXthPWEudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT09PWEmJihiLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmEuZmlyc3RCYXNlVXBkYXRlLGxhc3RCYXNlVXBkYXRlOmEubGFzdEJhc2VVcGRhdGUsc2hhcmVkOmEuc2hhcmVkLGVmZmVjdHM6YS5lZmZlY3RzfSl9ZnVuY3Rpb24gY2goYSxiKXtyZXR1cm57ZXZlbnRUaW1lOmEsbGFuZTpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbH19XG5mdW5jdGlvbiBkaChhLGIsYyl7dmFyIGQ9YS51cGRhdGVRdWV1ZTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtkPWQuc2hhcmVkO2lmKDAhPT0oSyYyKSl7dmFyIGU9ZC5wZW5kaW5nO251bGw9PT1lP2IubmV4dD1iOihiLm5leHQ9ZS5uZXh0LGUubmV4dD1iKTtkLnBlbmRpbmc9YjtyZXR1cm4gWmcoYSxjKX1lPWQuaW50ZXJsZWF2ZWQ7bnVsbD09PWU/KGIubmV4dD1iLFhnKGQpKTooYi5uZXh0PWUubmV4dCxlLm5leHQ9Yik7ZC5pbnRlcmxlYXZlZD1iO3JldHVybiBaZyhhLGMpfWZ1bmN0aW9uIGVoKGEsYixjKXtiPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWImJihiPWIuc2hhcmVkLDAhPT0oYyY0MTk0MjQwKSkpe3ZhciBkPWIubGFuZXM7ZCY9YS5wZW5kaW5nTGFuZXM7Y3w9ZDtiLmxhbmVzPWM7Q2MoYSxjKX19XG5mdW5jdGlvbiBmaChhLGIpe3ZhciBjPWEudXBkYXRlUXVldWUsZD1hLmFsdGVybmF0ZTtpZihudWxsIT09ZCYmKGQ9ZC51cGRhdGVRdWV1ZSxjPT09ZCkpe3ZhciBlPW51bGwsZj1udWxsO2M9Yy5maXJzdEJhc2VVcGRhdGU7aWYobnVsbCE9PWMpe2Rve3ZhciBnPXtldmVudFRpbWU6Yy5ldmVudFRpbWUsbGFuZTpjLmxhbmUsdGFnOmMudGFnLHBheWxvYWQ6Yy5wYXlsb2FkLGNhbGxiYWNrOmMuY2FsbGJhY2ssbmV4dDpudWxsfTtudWxsPT09Zj9lPWY9ZzpmPWYubmV4dD1nO2M9Yy5uZXh0fXdoaWxlKG51bGwhPT1jKTtudWxsPT09Zj9lPWY9YjpmPWYubmV4dD1ifWVsc2UgZT1mPWI7Yz17YmFzZVN0YXRlOmQuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTplLGxhc3RCYXNlVXBkYXRlOmYsc2hhcmVkOmQuc2hhcmVkLGVmZmVjdHM6ZC5lZmZlY3RzfTthLnVwZGF0ZVF1ZXVlPWM7cmV0dXJufWE9Yy5sYXN0QmFzZVVwZGF0ZTtudWxsPT09YT9jLmZpcnN0QmFzZVVwZGF0ZT1iOmEubmV4dD1cbmI7Yy5sYXN0QmFzZVVwZGF0ZT1ifVxuZnVuY3Rpb24gZ2goYSxiLGMsZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTskZz0hMTt2YXIgZj1lLmZpcnN0QmFzZVVwZGF0ZSxnPWUubGFzdEJhc2VVcGRhdGUsaD1lLnNoYXJlZC5wZW5kaW5nO2lmKG51bGwhPT1oKXtlLnNoYXJlZC5wZW5kaW5nPW51bGw7dmFyIGs9aCxsPWsubmV4dDtrLm5leHQ9bnVsbDtudWxsPT09Zz9mPWw6Zy5uZXh0PWw7Zz1rO3ZhciBtPWEuYWx0ZXJuYXRlO251bGwhPT1tJiYobT1tLnVwZGF0ZVF1ZXVlLGg9bS5sYXN0QmFzZVVwZGF0ZSxoIT09ZyYmKG51bGw9PT1oP20uZmlyc3RCYXNlVXBkYXRlPWw6aC5uZXh0PWwsbS5sYXN0QmFzZVVwZGF0ZT1rKSl9aWYobnVsbCE9PWYpe3ZhciBxPWUuYmFzZVN0YXRlO2c9MDttPWw9az1udWxsO2g9Zjtkb3t2YXIgcj1oLmxhbmUseT1oLmV2ZW50VGltZTtpZigoZCZyKT09PXIpe251bGwhPT1tJiYobT1tLm5leHQ9e2V2ZW50VGltZTp5LGxhbmU6MCx0YWc6aC50YWcscGF5bG9hZDpoLnBheWxvYWQsY2FsbGJhY2s6aC5jYWxsYmFjayxcbm5leHQ6bnVsbH0pO2E6e3ZhciBuPWEsdD1oO3I9Yjt5PWM7c3dpdGNoKHQudGFnKXtjYXNlIDE6bj10LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIG4pe3E9bi5jYWxsKHkscSxyKTticmVhayBhfXE9bjticmVhayBhO2Nhc2UgMzpuLmZsYWdzPW4uZmxhZ3MmLTY1NTM3fDEyODtjYXNlIDA6bj10LnBheWxvYWQ7cj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbj9uLmNhbGwoeSxxLHIpOm47aWYobnVsbD09PXJ8fHZvaWQgMD09PXIpYnJlYWsgYTtxPUEoe30scSxyKTticmVhayBhO2Nhc2UgMjokZz0hMH19bnVsbCE9PWguY2FsbGJhY2smJjAhPT1oLmxhbmUmJihhLmZsYWdzfD02NCxyPWUuZWZmZWN0cyxudWxsPT09cj9lLmVmZmVjdHM9W2hdOnIucHVzaChoKSl9ZWxzZSB5PXtldmVudFRpbWU6eSxsYW5lOnIsdGFnOmgudGFnLHBheWxvYWQ6aC5wYXlsb2FkLGNhbGxiYWNrOmguY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bT8obD1tPXksaz1xKTptPW0ubmV4dD15LGd8PXI7XG5oPWgubmV4dDtpZihudWxsPT09aClpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSByPWgsaD1yLm5leHQsci5uZXh0PW51bGwsZS5sYXN0QmFzZVVwZGF0ZT1yLGUuc2hhcmVkLnBlbmRpbmc9bnVsbH13aGlsZSgxKTtudWxsPT09bSYmKGs9cSk7ZS5iYXNlU3RhdGU9aztlLmZpcnN0QmFzZVVwZGF0ZT1sO2UubGFzdEJhc2VVcGRhdGU9bTtiPWUuc2hhcmVkLmludGVybGVhdmVkO2lmKG51bGwhPT1iKXtlPWI7ZG8gZ3w9ZS5sYW5lLGU9ZS5uZXh0O3doaWxlKGUhPT1iKX1lbHNlIG51bGw9PT1mJiYoZS5zaGFyZWQubGFuZXM9MCk7aGh8PWc7YS5sYW5lcz1nO2EubWVtb2l6ZWRTdGF0ZT1xfX1cbmZ1bmN0aW9uIGloKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZSl0aHJvdyBFcnJvcihwKDE5MSxlKSk7ZS5jYWxsKGQpfX19dmFyIGpoPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO2Z1bmN0aW9uIGtoKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpBKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7MD09PWEubGFuZXMmJihhLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1jKX1cbnZhciBuaD17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxzKT9WYihhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1MKCksZT1saChhKSxmPWNoKGQsZSk7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO2I9ZGgoYSxmLGUpO251bGwhPT1iJiYobWgoYixhLGUsZCksZWgoYixhLGUpKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1MKCksZT1saChhKSxmPWNoKGQsZSk7Zi50YWc9MTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7Yj1kaChhLGYsZSk7bnVsbCE9PWImJihtaChiLGEsZSxkKSxlaChiLGEsZSkpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBjPUwoKSxkPVxubGgoYSksZT1jaChjLGQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPWIpO2I9ZGgoYSxlLGQpO251bGwhPT1iJiYobWgoYixhLGQsYyksZWgoYixhLGQpKX19O2Z1bmN0aW9uIG9oKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IUllKGMsZCl8fCFJZShlLGYpOiEwfVxuZnVuY3Rpb24gcGgoYSxiLGMpe3ZhciBkPSExLGU9VmY7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9VmcoZik6KGU9WmYoYik/WGY6SC5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/WWYoYSxlKTpWZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPW5oO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbHM9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gcWgoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJm5oLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gcmgoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1qaDthaChhKTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PVZnKGYpOihmPVpmKGIpP1hmOkguY3VycmVudCxlLmNvbnRleHQ9WWYoYSxmKSk7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKGtoKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChiPWUuc3RhdGUsXG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJm5oLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLGdoKGEsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZmxhZ3N8PTQxOTQzMDgpfVxuZnVuY3Rpb24gc2goYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO2lmKGMpe2lmKDEhPT1jLnRhZyl0aHJvdyBFcnJvcihwKDMwOSkpO3ZhciBkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IEVycm9yKHAoMTQ3LGEpKTt2YXIgZT1kLGY9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWYpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZS5yZWZzO2I9PT1qaCYmKGI9ZS5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltmXTpiW2ZdPWF9O2IuX3N0cmluZ1JlZj1mO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcihwKDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcihwKDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gdGgoYSxiKXthPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKTt0aHJvdyBFcnJvcihwKDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1hP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmEpKTt9ZnVuY3Rpb24gdWgoYSl7dmFyIGI9YS5faW5pdDtyZXR1cm4gYihhLl9wYXlsb2FkKX1cbmZ1bmN0aW9uIHZoKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmRlbGV0aW9ucztudWxsPT09ZD8oYi5kZWxldGlvbnM9W2NdLGIuZmxhZ3N8PTE2KTpkLnB1c2goYyl9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPXdoKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYi5mbGFnc3w9MTA0ODU3NixjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZmxhZ3N8PTIsYyk6ZDtiLmZsYWdzfD0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmXG5udWxsPT09Yi5hbHRlcm5hdGUmJihiLmZsYWdzfD0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9eGgoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXt2YXIgZj1jLnR5cGU7aWYoZj09PXlhKXJldHVybiBtKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsYy5rZXkpO2lmKG51bGwhPT1iJiYoYi5lbGVtZW50VHlwZT09PWZ8fFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYuJCR0eXBlb2Y9PT1IYSYmdWgoZik9PT1iLnR5cGUpKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1zaChhLGIsYyksZC5yZXR1cm49YSxkO2Q9eWgoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9c2goYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxcbmIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj16aChjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9QWgoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBxKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGImJlwiXCIhPT1ifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9eGgoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGM9eWgoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksXG5jLnJlZj1zaChhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2Ugd2E6cmV0dXJuIGI9emgoYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2Nhc2UgSGE6dmFyIGQ9Yi5faW5pdDtyZXR1cm4gcShhLGQoYi5fcGF5bG9hZCksYyl9aWYoZWIoYil8fEthKGIpKXJldHVybiBiPUFoKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO3RoKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcihhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYyYmXCJcIiE9PWN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGMua2V5PT09ZT9rKGEsYixjLGQpOm51bGw7Y2FzZSB3YTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbDtjYXNlIEhhOnJldHVybiBlPWMuX2luaXQscihhLFxuYixlKGMuX3BheWxvYWQpLGQpfWlmKGViKGMpfHxLYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7dGgoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB5KGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkJiZcIlwiIT09ZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSB2YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsayhiLGEsZCxlKTtjYXNlIHdhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpO2Nhc2UgSGE6dmFyIGY9ZC5faW5pdDtyZXR1cm4geShhLGIsYyxmKGQuX3BheWxvYWQpLGUpfWlmKGViKGQpfHxLYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7dGgoYixkKX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIG4oZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsbT1udWxsLHU9Zyx3PWc9MCx4PW51bGw7bnVsbCE9PXUmJnc8aC5sZW5ndGg7dysrKXt1LmluZGV4Pnc/KHg9dSx1PW51bGwpOng9dS5zaWJsaW5nO3ZhciBuPXIoZSx1LGhbd10sayk7aWYobnVsbD09PW4pe251bGw9PT11JiYodT14KTticmVha31hJiZ1JiZudWxsPT09bi5hbHRlcm5hdGUmJmIoZSx1KTtnPWYobixnLHcpO251bGw9PT1tP2w9bjptLnNpYmxpbmc9bjttPW47dT14fWlmKHc9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHUpLEkmJnRnKGUsdyksbDtpZihudWxsPT09dSl7Zm9yKDt3PGgubGVuZ3RoO3crKyl1PXEoZSxoW3ddLGspLG51bGwhPT11JiYoZz1mKHUsZyx3KSxudWxsPT09bT9sPXU6bS5zaWJsaW5nPXUsbT11KTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZvcih1PWQoZSx1KTt3PGgubGVuZ3RoO3crKyl4PXkodSxlLHcsaFt3XSxrKSxudWxsIT09eCYmKGEmJm51bGwhPT14LmFsdGVybmF0ZSYmdS5kZWxldGUobnVsbD09PVxueC5rZXk/dzp4LmtleSksZz1mKHgsZyx3KSxudWxsPT09bT9sPXg6bS5zaWJsaW5nPXgsbT14KTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO0kmJnRnKGUsdyk7cmV0dXJuIGx9ZnVuY3Rpb24gdChlLGcsaCxrKXt2YXIgbD1LYShoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgbCl0aHJvdyBFcnJvcihwKDE1MCkpO2g9bC5jYWxsKGgpO2lmKG51bGw9PWgpdGhyb3cgRXJyb3IocCgxNTEpKTtmb3IodmFyIHU9bD1udWxsLG09Zyx3PWc9MCx4PW51bGwsbj1oLm5leHQoKTtudWxsIT09bSYmIW4uZG9uZTt3Kyssbj1oLm5leHQoKSl7bS5pbmRleD53Pyh4PW0sbT1udWxsKTp4PW0uc2libGluZzt2YXIgdD1yKGUsbSxuLnZhbHVlLGspO2lmKG51bGw9PT10KXtudWxsPT09bSYmKG09eCk7YnJlYWt9YSYmbSYmbnVsbD09PXQuYWx0ZXJuYXRlJiZiKGUsbSk7Zz1mKHQsZyx3KTtudWxsPT09dT9sPXQ6dS5zaWJsaW5nPXQ7dT10O209eH1pZihuLmRvbmUpcmV0dXJuIGMoZSxcbm0pLEkmJnRnKGUsdyksbDtpZihudWxsPT09bSl7Zm9yKDshbi5kb25lO3crKyxuPWgubmV4dCgpKW49cShlLG4udmFsdWUsayksbnVsbCE9PW4mJihnPWYobixnLHcpLG51bGw9PT11P2w9bjp1LnNpYmxpbmc9bix1PW4pO0kmJnRnKGUsdyk7cmV0dXJuIGx9Zm9yKG09ZChlLG0pOyFuLmRvbmU7dysrLG49aC5uZXh0KCkpbj15KG0sZSx3LG4udmFsdWUsayksbnVsbCE9PW4mJihhJiZudWxsIT09bi5hbHRlcm5hdGUmJm0uZGVsZXRlKG51bGw9PT1uLmtleT93Om4ua2V5KSxnPWYobixnLHcpLG51bGw9PT11P2w9bjp1LnNpYmxpbmc9bix1PW4pO2EmJm0uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7SSYmdGcoZSx3KTtyZXR1cm4gbH1mdW5jdGlvbiBKKGEsZCxmLGgpe1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PXlhJiZudWxsPT09Zi5rZXkmJihmPWYucHJvcHMuY2hpbGRyZW4pO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYpe3N3aXRjaChmLiQkdHlwZW9mKXtjYXNlIHZhOmE6e2Zvcih2YXIgaz1cbmYua2V5LGw9ZDtudWxsIT09bDspe2lmKGwua2V5PT09ayl7az1mLnR5cGU7aWYoaz09PXlhKXtpZig3PT09bC50YWcpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWVsc2UgaWYobC5lbGVtZW50VHlwZT09PWt8fFwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1IYSYmdWgoayk9PT1sLnR5cGUpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMpO2QucmVmPXNoKGEsbCxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWMoYSxsKTticmVha31lbHNlIGIoYSxsKTtsPWwuc2libGluZ31mLnR5cGU9PT15YT8oZD1BaChmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9eWgoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9c2goYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHdhOmE6e2ZvcihsPWYua2V5O251bGwhPT1cbmQ7KXtpZihkLmtleT09PWwpaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9emgoZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSk7Y2FzZSBIYTpyZXR1cm4gbD1mLl9pbml0LEooYSxkLGwoZi5fcGF5bG9hZCksaCl9aWYoZWIoZikpcmV0dXJuIG4oYSxkLGYsaCk7aWYoS2EoZikpcmV0dXJuIHQoYSxkLGYsaCk7dGgoYSxmKX1yZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGYmJlwiXCIhPT1mfHxcIm51bWJlclwiPT09dHlwZW9mIGY/KGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTpcbihjKGEsZCksZD14aChmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKSk6YyhhLGQpfXJldHVybiBKfXZhciBCaD12aCghMCksQ2g9dmgoITEpLERoPXt9LEVoPVVmKERoKSxGaD1VZihEaCksR2g9VWYoRGgpO2Z1bmN0aW9uIEhoKGEpe2lmKGE9PT1EaCl0aHJvdyBFcnJvcihwKDE3NCkpO3JldHVybiBhfWZ1bmN0aW9uIEloKGEsYil7RyhHaCxiKTtHKEZoLGEpO0coRWgsRGgpO2E9Yi5ub2RlVHlwZTtzd2l0Y2goYSl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6bGIobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmE9OD09PWE/Yi5wYXJlbnROb2RlOmIsYj1hLm5hbWVzcGFjZVVSSXx8bnVsbCxhPWEudGFnTmFtZSxiPWxiKGIsYSl9RShFaCk7RyhFaCxiKX1mdW5jdGlvbiBKaCgpe0UoRWgpO0UoRmgpO0UoR2gpfVxuZnVuY3Rpb24gS2goYSl7SGgoR2guY3VycmVudCk7dmFyIGI9SGgoRWguY3VycmVudCk7dmFyIGM9bGIoYixhLnR5cGUpO2IhPT1jJiYoRyhGaCxhKSxHKEVoLGMpKX1mdW5jdGlvbiBMaChhKXtGaC5jdXJyZW50PT09YSYmKEUoRWgpLEUoRmgpKX12YXIgTT1VZigwKTtcbmZ1bmN0aW9uIE1oKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjEyOCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfXZhciBOaD1bXTtcbmZ1bmN0aW9uIE9oKCl7Zm9yKHZhciBhPTA7YTxOaC5sZW5ndGg7YSsrKU5oW2FdLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PW51bGw7TmgubGVuZ3RoPTB9dmFyIFBoPXVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsUWg9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsUmg9MCxOPW51bGwsTz1udWxsLFA9bnVsbCxTaD0hMSxUaD0hMSxVaD0wLFZoPTA7ZnVuY3Rpb24gUSgpe3Rocm93IEVycm9yKHAoMzIxKSk7fWZ1bmN0aW9uIFdoKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIUhlKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBYaChhLGIsYyxkLGUsZil7Umg9ZjtOPWI7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2IubGFuZXM9MDtQaC5jdXJyZW50PW51bGw9PT1hfHxudWxsPT09YS5tZW1vaXplZFN0YXRlP1loOlpoO2E9YyhkLGUpO2lmKFRoKXtmPTA7ZG97VGg9ITE7VWg9MDtpZigyNTw9Zil0aHJvdyBFcnJvcihwKDMwMSkpO2YrPTE7UD1PPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO1BoLmN1cnJlbnQ9JGg7YT1jKGQsZSl9d2hpbGUoVGgpfVBoLmN1cnJlbnQ9YWk7Yj1udWxsIT09TyYmbnVsbCE9PU8ubmV4dDtSaD0wO1A9Tz1OPW51bGw7U2g9ITE7aWYoYil0aHJvdyBFcnJvcihwKDMwMCkpO3JldHVybiBhfWZ1bmN0aW9uIGJpKCl7dmFyIGE9MCE9PVVoO1VoPTA7cmV0dXJuIGF9XG5mdW5jdGlvbiBjaSgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YTtyZXR1cm4gUH1mdW5jdGlvbiBkaSgpe2lmKG51bGw9PT1PKXt2YXIgYT1OLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1PLm5leHQ7dmFyIGI9bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlOlAubmV4dDtpZihudWxsIT09YilQPWIsTz1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzMTApKTtPPWE7YT17bWVtb2l6ZWRTdGF0ZTpPLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk8uYmFzZVN0YXRlLGJhc2VRdWV1ZTpPLmJhc2VRdWV1ZSxxdWV1ZTpPLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlPVA9YTpQPVAubmV4dD1hfXJldHVybiBQfVxuZnVuY3Rpb24gZWkoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBmaShhKXt2YXIgYj1kaSgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcihwKDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPU8sZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7Zj1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPW51bGwsaz1udWxsLGw9Zjtkb3t2YXIgbT1sLmxhbmU7aWYoKFJoJm0pPT09bSludWxsIT09ayYmKGs9ay5uZXh0PXtsYW5lOjAsYWN0aW9uOmwuYWN0aW9uLGhhc0VhZ2VyU3RhdGU6bC5oYXNFYWdlclN0YXRlLGVhZ2VyU3RhdGU6bC5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLGQ9bC5oYXNFYWdlclN0YXRlP2wuZWFnZXJTdGF0ZTphKGQsbC5hY3Rpb24pO2Vsc2V7dmFyIHE9e2xhbmU6bSxhY3Rpb246bC5hY3Rpb24saGFzRWFnZXJTdGF0ZTpsLmhhc0VhZ2VyU3RhdGUsXG5lYWdlclN0YXRlOmwuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1rPyhoPWs9cSxnPWQpOms9ay5uZXh0PXE7Ti5sYW5lc3w9bTtoaHw9bX1sPWwubmV4dH13aGlsZShudWxsIT09bCYmbCE9PWYpO251bGw9PT1rP2c9ZDprLm5leHQ9aDtIZShkLGIubWVtb2l6ZWRTdGF0ZSl8fChVZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZztiLmJhc2VRdWV1ZT1rO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1hPWMuaW50ZXJsZWF2ZWQ7aWYobnVsbCE9PWEpe2U9YTtkbyBmPWUubGFuZSxOLmxhbmVzfD1mLGhofD1mLGU9ZS5uZXh0O3doaWxlKGUhPT1hKX1lbHNlIG51bGw9PT1lJiYoYy5sYW5lcz0wKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gZ2koYSl7dmFyIGI9ZGkoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IocCgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0hlKGYsYi5tZW1vaXplZFN0YXRlKXx8KFVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19ZnVuY3Rpb24gaGkoKXt9XG5mdW5jdGlvbiBpaShhLGIpe3ZhciBjPU4sZD1kaSgpLGU9YigpLGY9IUhlKGQubWVtb2l6ZWRTdGF0ZSxlKTtmJiYoZC5tZW1vaXplZFN0YXRlPWUsVWc9ITApO2Q9ZC5xdWV1ZTtqaShraS5iaW5kKG51bGwsYyxkLGEpLFthXSk7aWYoZC5nZXRTbmFwc2hvdCE9PWJ8fGZ8fG51bGwhPT1QJiZQLm1lbW9pemVkU3RhdGUudGFnJjEpe2MuZmxhZ3N8PTIwNDg7bGkoOSxtaS5iaW5kKG51bGwsYyxkLGUsYiksdm9pZCAwLG51bGwpO2lmKG51bGw9PT1SKXRocm93IEVycm9yKHAoMzQ5KSk7MCE9PShSaCYzMCl8fG5pKGMsYixlKX1yZXR1cm4gZX1mdW5jdGlvbiBuaShhLGIsYyl7YS5mbGFnc3w9MTYzODQ7YT17Z2V0U25hcHNob3Q6Yix2YWx1ZTpjfTtiPU4udXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbCxzdG9yZXM6bnVsbH0sTi51cGRhdGVRdWV1ZT1iLGIuc3RvcmVzPVthXSk6KGM9Yi5zdG9yZXMsbnVsbD09PWM/Yi5zdG9yZXM9W2FdOmMucHVzaChhKSl9XG5mdW5jdGlvbiBtaShhLGIsYyxkKXtiLnZhbHVlPWM7Yi5nZXRTbmFwc2hvdD1kO29pKGIpJiZwaShhKX1mdW5jdGlvbiBraShhLGIsYyl7cmV0dXJuIGMoZnVuY3Rpb24oKXtvaShiKSYmcGkoYSl9KX1mdW5jdGlvbiBvaShhKXt2YXIgYj1hLmdldFNuYXBzaG90O2E9YS52YWx1ZTt0cnl7dmFyIGM9YigpO3JldHVybiFIZShhLGMpfWNhdGNoKGQpe3JldHVybiEwfX1mdW5jdGlvbiBwaShhKXt2YXIgYj1aZyhhLDEpO251bGwhPT1iJiZtaChiLGEsMSwtMSl9XG5mdW5jdGlvbiBxaShhKXt2YXIgYj1jaSgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjAsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmVpLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2IucXVldWU9YTthPWEuZGlzcGF0Y2g9cmkuYmluZChudWxsLE4sYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX1cbmZ1bmN0aW9uIGxpKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtiPU4udXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbCxzdG9yZXM6bnVsbH0sTi51cGRhdGVRdWV1ZT1iLGIubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGM9Yi5sYXN0RWZmZWN0LG51bGw9PT1jP2IubGFzdEVmZmVjdD1hLm5leHQ9YTooZD1jLm5leHQsYy5uZXh0PWEsYS5uZXh0PWQsYi5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1mdW5jdGlvbiBzaSgpe3JldHVybiBkaSgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gdGkoYSxiLGMsZCl7dmFyIGU9Y2koKTtOLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1saSgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gdWkoYSxiLGMsZCl7dmFyIGU9ZGkoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Tyl7dmFyIGc9Ty5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZXaChkLGcuZGVwcykpe2UubWVtb2l6ZWRTdGF0ZT1saShiLGMsZixkKTtyZXR1cm59fU4uZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPWxpKDF8YixjLGYsZCl9ZnVuY3Rpb24gdmkoYSxiKXtyZXR1cm4gdGkoODM5MDY1Niw4LGEsYil9ZnVuY3Rpb24gamkoYSxiKXtyZXR1cm4gdWkoMjA0OCw4LGEsYil9ZnVuY3Rpb24gd2koYSxiKXtyZXR1cm4gdWkoNCwyLGEsYil9ZnVuY3Rpb24geGkoYSxiKXtyZXR1cm4gdWkoNCw0LGEsYil9XG5mdW5jdGlvbiB5aShhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fWZ1bmN0aW9uIHppKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gdWkoNCw0LHlpLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIEFpKCl7fWZ1bmN0aW9uIEJpKGEsYil7dmFyIGM9ZGkoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJldoKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gQ2koYSxiKXt2YXIgYz1kaSgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmV2goYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9ZnVuY3Rpb24gRGkoYSxiLGMpe2lmKDA9PT0oUmgmMjEpKXJldHVybiBhLmJhc2VTdGF0ZSYmKGEuYmFzZVN0YXRlPSExLFVnPSEwKSxhLm1lbW9pemVkU3RhdGU9YztIZShjLGIpfHwoYz15YygpLE4ubGFuZXN8PWMsaGh8PWMsYS5iYXNlU3RhdGU9ITApO3JldHVybiBifWZ1bmN0aW9uIEVpKGEsYil7dmFyIGM9QztDPTAhPT1jJiY0PmM/Yzo0O2EoITApO3ZhciBkPVFoLnRyYW5zaXRpb247UWgudHJhbnNpdGlvbj17fTt0cnl7YSghMSksYigpfWZpbmFsbHl7Qz1jLFFoLnRyYW5zaXRpb249ZH19ZnVuY3Rpb24gRmkoKXtyZXR1cm4gZGkoKS5tZW1vaXplZFN0YXRlfVxuZnVuY3Rpb24gR2koYSxiLGMpe3ZhciBkPWxoKGEpO2M9e2xhbmU6ZCxhY3Rpb246YyxoYXNFYWdlclN0YXRlOiExLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O2lmKEhpKGEpKUlpKGIsYyk7ZWxzZSBpZihjPVlnKGEsYixjLGQpLG51bGwhPT1jKXt2YXIgZT1MKCk7bWgoYyxhLGQsZSk7SmkoYyxiLGQpfX1cbmZ1bmN0aW9uIHJpKGEsYixjKXt2YXIgZD1saChhKSxlPXtsYW5lOmQsYWN0aW9uOmMsaGFzRWFnZXJTdGF0ZTohMSxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTtpZihIaShhKSlJaShiLGUpO2Vsc2V7dmFyIGY9YS5hbHRlcm5hdGU7aWYoMD09PWEubGFuZXMmJihudWxsPT09Znx8MD09PWYubGFuZXMpJiYoZj1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWYpKXRyeXt2YXIgZz1iLmxhc3RSZW5kZXJlZFN0YXRlLGg9ZihnLGMpO2UuaGFzRWFnZXJTdGF0ZT0hMDtlLmVhZ2VyU3RhdGU9aDtpZihIZShoLGcpKXt2YXIgaz1iLmludGVybGVhdmVkO251bGw9PT1rPyhlLm5leHQ9ZSxYZyhiKSk6KGUubmV4dD1rLm5leHQsay5uZXh0PWUpO2IuaW50ZXJsZWF2ZWQ9ZTtyZXR1cm59fWNhdGNoKGwpe31maW5hbGx5e31jPVlnKGEsYixlLGQpO251bGwhPT1jJiYoZT1MKCksbWgoYyxhLGQsZSksSmkoYyxiLGQpKX19XG5mdW5jdGlvbiBIaShhKXt2YXIgYj1hLmFsdGVybmF0ZTtyZXR1cm4gYT09PU58fG51bGwhPT1iJiZiPT09Tn1mdW5jdGlvbiBJaShhLGIpe1RoPVNoPSEwO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9ZnVuY3Rpb24gSmkoYSxiLGMpe2lmKDAhPT0oYyY0MTk0MjQwKSl7dmFyIGQ9Yi5sYW5lcztkJj1hLnBlbmRpbmdMYW5lcztjfD1kO2IubGFuZXM9YztDYyhhLGMpfX1cbnZhciBhaT17cmVhZENvbnRleHQ6VmcsdXNlQ2FsbGJhY2s6USx1c2VDb250ZXh0OlEsdXNlRWZmZWN0OlEsdXNlSW1wZXJhdGl2ZUhhbmRsZTpRLHVzZUluc2VydGlvbkVmZmVjdDpRLHVzZUxheW91dEVmZmVjdDpRLHVzZU1lbW86USx1c2VSZWR1Y2VyOlEsdXNlUmVmOlEsdXNlU3RhdGU6USx1c2VEZWJ1Z1ZhbHVlOlEsdXNlRGVmZXJyZWRWYWx1ZTpRLHVzZVRyYW5zaXRpb246USx1c2VNdXRhYmxlU291cmNlOlEsdXNlU3luY0V4dGVybmFsU3RvcmU6USx1c2VJZDpRLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sWWg9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7Y2koKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDpWZyx1c2VFZmZlY3Q6dmksdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIHRpKDQxOTQzMDgsXG40LHlpLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGkoNDE5NDMwOCw0LGEsYil9LHVzZUluc2VydGlvbkVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiB0aSg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPWNpKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWNpKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPXtwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2QucXVldWU9YTthPWEuZGlzcGF0Y2g9R2kuYmluZChudWxsLE4sYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPVxuY2koKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX0sdXNlU3RhdGU6cWksdXNlRGVidWdWYWx1ZTpBaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3JldHVybiBjaSgpLm1lbW9pemVkU3RhdGU9YX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPXFpKCExKSxiPWFbMF07YT1FaS5iaW5kKG51bGwsYVsxXSk7Y2koKS5tZW1vaXplZFN0YXRlPWE7cmV0dXJuW2IsYV19LHVzZU11dGFibGVTb3VyY2U6ZnVuY3Rpb24oKXt9LHVzZVN5bmNFeHRlcm5hbFN0b3JlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1OLGU9Y2koKTtpZihJKXtpZih2b2lkIDA9PT1jKXRocm93IEVycm9yKHAoNDA3KSk7Yz1jKCl9ZWxzZXtjPWIoKTtpZihudWxsPT09Uil0aHJvdyBFcnJvcihwKDM0OSkpOzAhPT0oUmgmMzApfHxuaShkLGIsYyl9ZS5tZW1vaXplZFN0YXRlPWM7dmFyIGY9e3ZhbHVlOmMsZ2V0U25hcHNob3Q6Yn07ZS5xdWV1ZT1mO3ZpKGtpLmJpbmQobnVsbCxkLFxuZixhKSxbYV0pO2QuZmxhZ3N8PTIwNDg7bGkoOSxtaS5iaW5kKG51bGwsZCxmLGMsYiksdm9pZCAwLG51bGwpO3JldHVybiBjfSx1c2VJZDpmdW5jdGlvbigpe3ZhciBhPWNpKCksYj1SLmlkZW50aWZpZXJQcmVmaXg7aWYoSSl7dmFyIGM9c2c7dmFyIGQ9cmc7Yz0oZCZ+KDE8PDMyLW9jKGQpLTEpKS50b1N0cmluZygzMikrYztiPVwiOlwiK2IrXCJSXCIrYztjPVVoKys7MDxjJiYoYis9XCJIXCIrYy50b1N0cmluZygzMikpO2IrPVwiOlwifWVsc2UgYz1WaCsrLGI9XCI6XCIrYitcInJcIitjLnRvU3RyaW5nKDMyKStcIjpcIjtyZXR1cm4gYS5tZW1vaXplZFN0YXRlPWJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sWmg9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOkJpLHVzZUNvbnRleHQ6VmcsdXNlRWZmZWN0OmppLHVzZUltcGVyYXRpdmVIYW5kbGU6emksdXNlSW5zZXJ0aW9uRWZmZWN0OndpLHVzZUxheW91dEVmZmVjdDp4aSx1c2VNZW1vOkNpLHVzZVJlZHVjZXI6ZmksdXNlUmVmOnNpLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGZpKGVpKX0sXG51c2VEZWJ1Z1ZhbHVlOkFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9ZGkoKTtyZXR1cm4gRGkoYixPLm1lbW9pemVkU3RhdGUsYSl9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1maShlaSlbMF0sYj1kaSgpLm1lbW9pemVkU3RhdGU7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6aGksdXNlU3luY0V4dGVybmFsU3RvcmU6aWksdXNlSWQ6RmksdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSwkaD17cmVhZENvbnRleHQ6VmcsdXNlQ2FsbGJhY2s6QmksdXNlQ29udGV4dDpWZyx1c2VFZmZlY3Q6amksdXNlSW1wZXJhdGl2ZUhhbmRsZTp6aSx1c2VJbnNlcnRpb25FZmZlY3Q6d2ksdXNlTGF5b3V0RWZmZWN0OnhpLHVzZU1lbW86Q2ksdXNlUmVkdWNlcjpnaSx1c2VSZWY6c2ksdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gZ2koZWkpfSx1c2VEZWJ1Z1ZhbHVlOkFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9ZGkoKTtyZXR1cm4gbnVsbD09PVxuTz9iLm1lbW9pemVkU3RhdGU9YTpEaShiLE8ubWVtb2l6ZWRTdGF0ZSxhKX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPWdpKGVpKVswXSxiPWRpKCkubWVtb2l6ZWRTdGF0ZTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTpoaSx1c2VTeW5jRXh0ZXJuYWxTdG9yZTppaSx1c2VJZDpGaSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9O2Z1bmN0aW9uIEtpKGEsYil7dHJ5e3ZhciBjPVwiXCIsZD1iO2RvIGMrPVBhKGQpLGQ9ZC5yZXR1cm47d2hpbGUoZCk7dmFyIGU9Y31jYXRjaChmKXtlPVwiXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogXCIrZi5tZXNzYWdlK1wiXFxuXCIrZi5zdGFja31yZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazplLGRpZ2VzdDpudWxsfX1mdW5jdGlvbiBMaShhLGIsYyl7cmV0dXJue3ZhbHVlOmEsc291cmNlOm51bGwsc3RhY2s6bnVsbCE9Yz9jOm51bGwsZGlnZXN0Om51bGwhPWI/YjpudWxsfX1cbmZ1bmN0aW9uIE1pKGEsYil7dHJ5e2NvbnNvbGUuZXJyb3IoYi52YWx1ZSl9Y2F0Y2goYyl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGM7fSl9fXZhciBOaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBPaShhLGIsYyl7Yz1jaCgtMSxjKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtQaXx8KFBpPSEwLFFpPWQpO01pKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gUmkoYSxiLGMpe2M9Y2goLTEsYyk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe3JldHVybiBkKGUpfTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7TWkoYSxiKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe01pKGEsYik7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09U2k/U2k9bmV3IFNldChbdGhpc10pOlNpLmFkZCh0aGlzKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9XG5mdW5jdGlvbiBUaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7aWYobnVsbD09PWQpe2Q9YS5waW5nQ2FjaGU9bmV3IE5pO3ZhciBlPW5ldyBTZXQ7ZC5zZXQoYixlKX1lbHNlIGU9ZC5nZXQoYiksdm9pZCAwPT09ZSYmKGU9bmV3IFNldCxkLnNldChiLGUpKTtlLmhhcyhjKXx8KGUuYWRkKGMpLGE9VWkuYmluZChudWxsLGEsYixjKSxiLnRoZW4oYSxhKSl9ZnVuY3Rpb24gVmkoYSl7ZG97dmFyIGI7aWYoYj0xMz09PWEudGFnKWI9YS5tZW1vaXplZFN0YXRlLGI9bnVsbCE9PWI/bnVsbCE9PWIuZGVoeWRyYXRlZD8hMDohMTohMDtpZihiKXJldHVybiBhO2E9YS5yZXR1cm59d2hpbGUobnVsbCE9PWEpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gV2koYSxiLGMsZCxlKXtpZigwPT09KGEubW9kZSYxKSlyZXR1cm4gYT09PWI/YS5mbGFnc3w9NjU1MzY6KGEuZmxhZ3N8PTEyOCxjLmZsYWdzfD0xMzEwNzIsYy5mbGFncyY9LTUyODA1LDE9PT1jLnRhZyYmKG51bGw9PT1jLmFsdGVybmF0ZT9jLnRhZz0xNzooYj1jaCgtMSwxKSxiLnRhZz0yLGRoKGMsYiwxKSkpLGMubGFuZXN8PTEpLGE7YS5mbGFnc3w9NjU1MzY7YS5sYW5lcz1lO3JldHVybiBhfXZhciBYaT11YS5SZWFjdEN1cnJlbnRPd25lcixVZz0hMTtmdW5jdGlvbiBZaShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP0NoKGIsbnVsbCxjLGQpOkJoKGIsYS5jaGlsZCxjLGQpfVxuZnVuY3Rpb24gWmkoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO1RnKGIsZSk7ZD1YaChhLGIsYyxkLGYsZSk7Yz1iaSgpO2lmKG51bGwhPT1hJiYhVWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tMjA1MyxhLmxhbmVzJj1+ZSwkaShhLGIsZSk7SSYmYyYmdmcoYik7Yi5mbGFnc3w9MTtZaShhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGFqKGEsYixjLGQsZSl7aWYobnVsbD09PWEpe3ZhciBmPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmIWJqKGYpJiZ2b2lkIDA9PT1mLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1mLGNqKGEsYixmLGQsZSk7YT15aChjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGUpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1mPWEuY2hpbGQ7aWYoMD09PShhLmxhbmVzJmUpKXt2YXIgZz1mLm1lbW9pemVkUHJvcHM7Yz1jLmNvbXBhcmU7Yz1udWxsIT09Yz9jOkllO2lmKGMoZyxkKSYmYS5yZWY9PT1iLnJlZilyZXR1cm4gJGkoYSxiLGUpfWIuZmxhZ3N8PTE7YT13aChmLGQpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIGNqKGEsYixjLGQsZSl7aWYobnVsbCE9PWEpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcztpZihJZShmLGQpJiZhLnJlZj09PWIucmVmKWlmKFVnPSExLGIucGVuZGluZ1Byb3BzPWQ9ZiwwIT09KGEubGFuZXMmZSkpMCE9PShhLmZsYWdzJjEzMTA3MikmJihVZz0hMCk7ZWxzZSByZXR1cm4gYi5sYW5lcz1hLmxhbmVzLCRpKGEsYixlKX1yZXR1cm4gZGooYSxiLGMsZCxlKX1cbmZ1bmN0aW9uIGVqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQuY2hpbGRyZW4sZj1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtpZihcImhpZGRlblwiPT09ZC5tb2RlKWlmKDA9PT0oYi5tb2RlJjEpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjAsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH0sRyhmaixnaiksZ2p8PWM7ZWxzZXtpZigwPT09KGMmMTA3Mzc0MTgyNCkpcmV0dXJuIGE9bnVsbCE9PWY/Zi5iYXNlTGFuZXN8YzpjLGIubGFuZXM9Yi5jaGlsZExhbmVzPTEwNzM3NDE4MjQsYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6YSxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfSxiLnVwZGF0ZVF1ZXVlPW51bGwsRyhmaixnaiksZ2p8PWEsbnVsbDtiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9O2Q9bnVsbCE9PWY/Zi5iYXNlTGFuZXM6YztHKGZqLGdqKTtnanw9ZH1lbHNlIG51bGwhPT1cbmY/KGQ9Zi5iYXNlTGFuZXN8YyxiLm1lbW9pemVkU3RhdGU9bnVsbCk6ZD1jLEcoZmosZ2opLGdqfD1kO1lpKGEsYixlLGMpO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGhqKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyfWZ1bmN0aW9uIGRqKGEsYixjLGQsZSl7dmFyIGY9WmYoYyk/WGY6SC5jdXJyZW50O2Y9WWYoYixmKTtUZyhiLGUpO2M9WGgoYSxiLGMsZCxmLGUpO2Q9YmkoKTtpZihudWxsIT09YSYmIVVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTIwNTMsYS5sYW5lcyY9fmUsJGkoYSxiLGUpO0kmJmQmJnZnKGIpO2IuZmxhZ3N8PTE7WWkoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBpaihhLGIsYyxkLGUpe2lmKFpmKGMpKXt2YXIgZj0hMDtjZyhiKX1lbHNlIGY9ITE7VGcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpamooYSxiKSxwaChiLGMsZCkscmgoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9VmcobCk6KGw9WmYoYyk/WGY6SC5jdXJyZW50LGw9WWYoYixsKSk7dmFyIG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMscT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7cXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fFxuKGghPT1kfHxrIT09bCkmJnFoKGIsZyxkLGwpOyRnPSExO3ZhciByPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXI7Z2goYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHIhPT1rfHxXZi5jdXJyZW50fHwkZz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihraChiLGMsbSxkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9JGd8fG9oKGIsYyxoLGQscixrLGwpKT8ocXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpKTpcbihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCksZD0hMSl9ZWxzZXtnPWIuc3RhdGVOb2RlO2JoKGEsYik7aD1iLm1lbW9pemVkUHJvcHM7bD1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6TGcoYi50eXBlLGgpO2cucHJvcHM9bDtxPWIucGVuZGluZ1Byb3BzO3I9Zy5jb250ZXh0O2s9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9Vmcoayk6KGs9WmYoYyk/WGY6SC5jdXJyZW50LGs9WWYoYixrKSk7dmFyIHk9Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7KG09XCJmdW5jdGlvblwiPT09dHlwZW9mIHl8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1xfHxyIT09aykmJnFoKGIsZyxkLGspOyRnPSExO3I9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cjtnaChiLGQsZyxlKTt2YXIgbj1iLm1lbW9pemVkU3RhdGU7aCE9PXF8fHIhPT1ufHxXZi5jdXJyZW50fHwkZz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIHkmJihraChiLGMseSxkKSxuPWIubWVtb2l6ZWRTdGF0ZSksKGw9JGd8fG9oKGIsYyxsLGQscixuLGspfHwhMSk/KG18fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsbixrKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXG5nLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQsbixrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0xMDI0KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MTAyNCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPW4pLGcucHJvcHM9ZCxnLnN0YXRlPW4sZy5jb250ZXh0PWssZD1sKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09XG5hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTEwMjQpLGQ9ITEpfXJldHVybiBraihhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBraihhLGIsYyxkLGUsZil7aGooYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmMTI4KTtpZighZCYmIWcpcmV0dXJuIGUmJmRnKGIsYywhMSksJGkoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7WGkuY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5mbGFnc3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1CaChiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPUJoKGIsbnVsbCxoLGYpKTpZaShhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZkZyhiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGxqKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/YWcoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmYWcoYSxiLmNvbnRleHQsITEpO0loKGEsYi5jb250YWluZXJJbmZvKX1cbmZ1bmN0aW9uIG1qKGEsYixjLGQsZSl7SWcoKTtKZyhlKTtiLmZsYWdzfD0yNTY7WWkoYSxiLGMsZCk7cmV0dXJuIGIuY2hpbGR9dmFyIG5qPXtkZWh5ZHJhdGVkOm51bGwsdHJlZUNvbnRleHQ6bnVsbCxyZXRyeUxhbmU6MH07ZnVuY3Rpb24gb2ooYSl7cmV0dXJue2Jhc2VMYW5lczphLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9fVxuZnVuY3Rpb24gcGooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9TS5jdXJyZW50LGY9ITEsZz0wIT09KGIuZmxhZ3MmMTI4KSxoOyhoPWcpfHwoaD1udWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZT8hMTowIT09KGUmMikpO2lmKGgpZj0hMCxiLmZsYWdzJj0tMTI5O2Vsc2UgaWYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpZXw9MTtHKE0sZSYxKTtpZihudWxsPT09YSl7RWcoYik7YT1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJihhPWEuZGVoeWRyYXRlZCxudWxsIT09YSkpcmV0dXJuIDA9PT0oYi5tb2RlJjEpP2IubGFuZXM9MTpcIiQhXCI9PT1hLmRhdGE/Yi5sYW5lcz04OmIubGFuZXM9MTA3Mzc0MTgyNCxudWxsO2c9ZC5jaGlsZHJlbjthPWQuZmFsbGJhY2s7cmV0dXJuIGY/KGQ9Yi5tb2RlLGY9Yi5jaGlsZCxnPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Z30sMD09PShkJjEpJiZudWxsIT09Zj8oZi5jaGlsZExhbmVzPTAsZi5wZW5kaW5nUHJvcHM9XG5nKTpmPXFqKGcsZCwwLG51bGwpLGE9QWgoYSxkLGMsbnVsbCksZi5yZXR1cm49YixhLnJldHVybj1iLGYuc2libGluZz1hLGIuY2hpbGQ9ZixiLmNoaWxkLm1lbW9pemVkU3RhdGU9b2ooYyksYi5tZW1vaXplZFN0YXRlPW5qLGEpOnJqKGIsZyl9ZT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUmJihoPWUuZGVoeWRyYXRlZCxudWxsIT09aCkpcmV0dXJuIHNqKGEsYixnLGQsaCxlLGMpO2lmKGYpe2Y9ZC5mYWxsYmFjaztnPWIubW9kZTtlPWEuY2hpbGQ7aD1lLnNpYmxpbmc7dmFyIGs9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpkLmNoaWxkcmVufTswPT09KGcmMSkmJmIuY2hpbGQhPT1lPyhkPWIuY2hpbGQsZC5jaGlsZExhbmVzPTAsZC5wZW5kaW5nUHJvcHM9ayxiLmRlbGV0aW9ucz1udWxsKTooZD13aChlLGspLGQuc3VidHJlZUZsYWdzPWUuc3VidHJlZUZsYWdzJjE0NjgwMDY0KTtudWxsIT09aD9mPXdoKGgsZik6KGY9QWgoZixnLGMsbnVsbCksZi5mbGFnc3w9Mik7Zi5yZXR1cm49XG5iO2QucmV0dXJuPWI7ZC5zaWJsaW5nPWY7Yi5jaGlsZD1kO2Q9ZjtmPWIuY2hpbGQ7Zz1hLmNoaWxkLm1lbW9pemVkU3RhdGU7Zz1udWxsPT09Zz9vaihjKTp7YmFzZUxhbmVzOmcuYmFzZUxhbmVzfGMsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6Zy50cmFuc2l0aW9uc307Zi5tZW1vaXplZFN0YXRlPWc7Zi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YztiLm1lbW9pemVkU3RhdGU9bmo7cmV0dXJuIGR9Zj1hLmNoaWxkO2E9Zi5zaWJsaW5nO2Q9d2goZix7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpkLmNoaWxkcmVufSk7MD09PShiLm1vZGUmMSkmJihkLmxhbmVzPWMpO2QucmV0dXJuPWI7ZC5zaWJsaW5nPW51bGw7bnVsbCE9PWEmJihjPWIuZGVsZXRpb25zLG51bGw9PT1jPyhiLmRlbGV0aW9ucz1bYV0sYi5mbGFnc3w9MTYpOmMucHVzaChhKSk7Yi5jaGlsZD1kO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBkfVxuZnVuY3Rpb24gcmooYSxiKXtiPXFqKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmJ9LGEubW9kZSwwLG51bGwpO2IucmV0dXJuPWE7cmV0dXJuIGEuY2hpbGQ9Yn1mdW5jdGlvbiB0aihhLGIsYyxkKXtudWxsIT09ZCYmSmcoZCk7QmgoYixhLmNoaWxkLG51bGwsYyk7YT1yaihiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuKTthLmZsYWdzfD0yO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBhfVxuZnVuY3Rpb24gc2ooYSxiLGMsZCxlLGYsZyl7aWYoYyl7aWYoYi5mbGFncyYyNTYpcmV0dXJuIGIuZmxhZ3MmPS0yNTcsZD1MaShFcnJvcihwKDQyMikpKSx0aihhLGIsZyxkKTtpZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXJldHVybiBiLmNoaWxkPWEuY2hpbGQsYi5mbGFnc3w9MTI4LG51bGw7Zj1kLmZhbGxiYWNrO2U9Yi5tb2RlO2Q9cWooe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn0sZSwwLG51bGwpO2Y9QWgoZixlLGcsbnVsbCk7Zi5mbGFnc3w9MjtkLnJldHVybj1iO2YucmV0dXJuPWI7ZC5zaWJsaW5nPWY7Yi5jaGlsZD1kOzAhPT0oYi5tb2RlJjEpJiZCaChiLGEuY2hpbGQsbnVsbCxnKTtiLmNoaWxkLm1lbW9pemVkU3RhdGU9b2ooZyk7Yi5tZW1vaXplZFN0YXRlPW5qO3JldHVybiBmfWlmKDA9PT0oYi5tb2RlJjEpKXJldHVybiB0aihhLGIsZyxudWxsKTtpZihcIiQhXCI9PT1lLmRhdGEpe2Q9ZS5uZXh0U2libGluZyYmZS5uZXh0U2libGluZy5kYXRhc2V0O1xuaWYoZCl2YXIgaD1kLmRnc3Q7ZD1oO2Y9RXJyb3IocCg0MTkpKTtkPUxpKGYsZCx2b2lkIDApO3JldHVybiB0aihhLGIsZyxkKX1oPTAhPT0oZyZhLmNoaWxkTGFuZXMpO2lmKFVnfHxoKXtkPVI7aWYobnVsbCE9PWQpe3N3aXRjaChnJi1nKXtjYXNlIDQ6ZT0yO2JyZWFrO2Nhc2UgMTY6ZT04O2JyZWFrO2Nhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDplPTMyO2JyZWFrO2Nhc2UgNTM2ODcwOTEyOmU9MjY4NDM1NDU2O2JyZWFrO2RlZmF1bHQ6ZT0wfWU9MCE9PShlJihkLnN1c3BlbmRlZExhbmVzfGcpKT8wOmU7XG4wIT09ZSYmZSE9PWYucmV0cnlMYW5lJiYoZi5yZXRyeUxhbmU9ZSxaZyhhLGUpLG1oKGQsYSxlLC0xKSl9dWooKTtkPUxpKEVycm9yKHAoNDIxKSkpO3JldHVybiB0aihhLGIsZyxkKX1pZihcIiQ/XCI9PT1lLmRhdGEpcmV0dXJuIGIuZmxhZ3N8PTEyOCxiLmNoaWxkPWEuY2hpbGQsYj12ai5iaW5kKG51bGwsYSksZS5fcmVhY3RSZXRyeT1iLG51bGw7YT1mLnRyZWVDb250ZXh0O3lnPUxmKGUubmV4dFNpYmxpbmcpO3hnPWI7ST0hMDt6Zz1udWxsO251bGwhPT1hJiYob2dbcGcrK109cmcsb2dbcGcrK109c2csb2dbcGcrK109cWcscmc9YS5pZCxzZz1hLm92ZXJmbG93LHFnPWIpO2I9cmooYixkLmNoaWxkcmVuKTtiLmZsYWdzfD00MDk2O3JldHVybiBifWZ1bmN0aW9uIHdqKGEsYixjKXthLmxhbmVzfD1iO3ZhciBkPWEuYWx0ZXJuYXRlO251bGwhPT1kJiYoZC5sYW5lc3w9Yik7U2coYS5yZXR1cm4sYixjKX1cbmZ1bmN0aW9uIHhqKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFN0YXRlO251bGw9PT1mP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxNb2RlOmV9OihmLmlzQmFja3dhcmRzPWIsZi5yZW5kZXJpbmc9bnVsbCxmLnJlbmRlcmluZ1N0YXJ0VGltZT0wLGYubGFzdD1kLGYudGFpbD1jLGYudGFpbE1vZGU9ZSl9XG5mdW5jdGlvbiB5aihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO1lpKGEsYixkLmNoaWxkcmVuLGMpO2Q9TS5jdXJyZW50O2lmKDAhPT0oZCYyKSlkPWQmMXwyLGIuZmxhZ3N8PTEyODtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmMTI4KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJndqKGEsYyxiKTtlbHNlIGlmKDE5PT09YS50YWcpd2ooYSxjLGIpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1HKE0sZCk7aWYoMD09PShiLm1vZGUmMSkpYi5tZW1vaXplZFN0YXRlPVxubnVsbDtlbHNlIHN3aXRjaChlKXtjYXNlIFwiZm9yd2FyZHNcIjpjPWIuY2hpbGQ7Zm9yKGU9bnVsbDtudWxsIT09YzspYT1jLmFsdGVybmF0ZSxudWxsIT09YSYmbnVsbD09PU1oKGEpJiYoZT1jKSxjPWMuc2libGluZztjPWU7bnVsbD09PWM/KGU9Yi5jaGlsZCxiLmNoaWxkPW51bGwpOihlPWMuc2libGluZyxjLnNpYmxpbmc9bnVsbCk7eGooYiwhMSxlLGMsZik7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1NaChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9eGooYiwhMCxjLG51bGwsZik7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6eGooYiwhMSxudWxsLG51bGwsdm9pZCAwKTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gamooYSxiKXswPT09KGIubW9kZSYxKSYmbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mil9ZnVuY3Rpb24gJGkoYSxiLGMpe251bGwhPT1hJiYoYi5kZXBlbmRlbmNpZXM9YS5kZXBlbmRlbmNpZXMpO2hofD1iLmxhbmVzO2lmKDA9PT0oYyZiLmNoaWxkTGFuZXMpKXJldHVybiBudWxsO2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyBFcnJvcihwKDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz13aChhLGEucGVuZGluZ1Byb3BzKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9d2goYSxhLnBlbmRpbmdQcm9wcyksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHpqKGEsYixjKXtzd2l0Y2goYi50YWcpe2Nhc2UgMzpsaihiKTtJZygpO2JyZWFrO2Nhc2UgNTpLaChiKTticmVhaztjYXNlIDE6WmYoYi50eXBlKSYmY2coYik7YnJlYWs7Y2FzZSA0OkloKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDp2YXIgZD1iLnR5cGUuX2NvbnRleHQsZT1iLm1lbW9pemVkUHJvcHMudmFsdWU7RyhNZyxkLl9jdXJyZW50VmFsdWUpO2QuX2N1cnJlbnRWYWx1ZT1lO2JyZWFrO2Nhc2UgMTM6ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQpe2lmKG51bGwhPT1kLmRlaHlkcmF0ZWQpcmV0dXJuIEcoTSxNLmN1cnJlbnQmMSksYi5mbGFnc3w9MTI4LG51bGw7aWYoMCE9PShjJmIuY2hpbGQuY2hpbGRMYW5lcykpcmV0dXJuIHBqKGEsYixjKTtHKE0sTS5jdXJyZW50JjEpO2E9JGkoYSxiLGMpO3JldHVybiBudWxsIT09YT9hLnNpYmxpbmc6bnVsbH1HKE0sTS5jdXJyZW50JjEpO2JyZWFrO2Nhc2UgMTk6ZD0wIT09KGMmXG5iLmNoaWxkTGFuZXMpO2lmKDAhPT0oYS5mbGFncyYxMjgpKXtpZihkKXJldHVybiB5aihhLGIsYyk7Yi5mbGFnc3w9MTI4fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCk7RyhNLE0uY3VycmVudCk7aWYoZClicmVhaztlbHNlIHJldHVybiBudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gYi5sYW5lcz0wLGVqKGEsYixjKX1yZXR1cm4gJGkoYSxiLGMpfXZhciBBaixCaixDaixEajtcbkFqPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtCaj1mdW5jdGlvbigpe307XG5Daj1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7SGgoRWguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1ZYShhLGUpO2Q9WWEoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjplPUEoe30sZSx7dmFsdWU6dm9pZCAwfSk7ZD1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZT1nYihhLGUpO2Q9Z2IoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGUub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz1CZil9dWIoYyxkKTt2YXIgZztjPW51bGw7Zm9yKGwgaW4gZSlpZighZC5oYXNPd25Qcm9wZXJ0eShsKSYmZS5oYXNPd25Qcm9wZXJ0eShsKSYmbnVsbCE9ZVtsXSlpZihcInN0eWxlXCI9PT1sKXt2YXIgaD1lW2xdO2ZvcihnIGluIGgpaC5oYXNPd25Qcm9wZXJ0eShnKSYmXG4oY3x8KGM9e30pLGNbZ109XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWwmJlwiY2hpbGRyZW5cIiE9PWwmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmXCJhdXRvRm9jdXNcIiE9PWwmJihlYS5oYXNPd25Qcm9wZXJ0eShsKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2gobCxudWxsKSk7Zm9yKGwgaW4gZCl7dmFyIGs9ZFtsXTtoPW51bGwhPWU/ZVtsXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShsKSYmayE9PWgmJihudWxsIT1rfHxudWxsIT1oKSlpZihcInN0eWxlXCI9PT1sKWlmKGgpe2ZvcihnIGluIGgpIWguaGFzT3duUHJvcGVydHkoZyl8fGsmJmsuaGFzT3duUHJvcGVydHkoZyl8fChjfHwoYz17fSksY1tnXT1cIlwiKTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJmhbZ10hPT1rW2ddJiYoY3x8KGM9e30pLGNbZ109a1tnXSl9ZWxzZSBjfHwoZnx8KGY9W10pLGYucHVzaChsLFxuYykpLGM9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bD8oaz1rP2suX19odG1sOnZvaWQgMCxoPWg/aC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmghPT1rJiYoZj1mfHxbXSkucHVzaChsLGspKTpcImNoaWxkcmVuXCI9PT1sP1wic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChsLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiYoZWEuaGFzT3duUHJvcGVydHkobCk/KG51bGwhPWsmJlwib25TY3JvbGxcIj09PWwmJkQoXCJzY3JvbGxcIixhKSxmfHxoPT09a3x8KGY9W10pKTooZj1mfHxbXSkucHVzaChsLGspKX1jJiYoZj1mfHxbXSkucHVzaChcInN0eWxlXCIsYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O0RqPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O1xuZnVuY3Rpb24gRWooYSxiKXtpZighSSlzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gUyhhKXt2YXIgYj1udWxsIT09YS5hbHRlcm5hdGUmJmEuYWx0ZXJuYXRlLmNoaWxkPT09YS5jaGlsZCxjPTAsZD0wO2lmKGIpZm9yKHZhciBlPWEuY2hpbGQ7bnVsbCE9PWU7KWN8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGR8PWUuc3VidHJlZUZsYWdzJjE0NjgwMDY0LGR8PWUuZmxhZ3MmMTQ2ODAwNjQsZS5yZXR1cm49YSxlPWUuc2libGluZztlbHNlIGZvcihlPWEuY2hpbGQ7bnVsbCE9PWU7KWN8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGR8PWUuc3VidHJlZUZsYWdzLGR8PWUuZmxhZ3MsZS5yZXR1cm49YSxlPWUuc2libGluZzthLnN1YnRyZWVGbGFnc3w9ZDthLmNoaWxkTGFuZXM9YztyZXR1cm4gYn1cbmZ1bmN0aW9uIEZqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wczt3ZyhiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMjpjYXNlIDE2OmNhc2UgMTU6Y2FzZSAwOmNhc2UgMTE6Y2FzZSA3OmNhc2UgODpjYXNlIDEyOmNhc2UgOTpjYXNlIDE0OnJldHVybiBTKGIpLG51bGw7Y2FzZSAxOnJldHVybiBaZihiLnR5cGUpJiYkZigpLFMoYiksbnVsbDtjYXNlIDM6ZD1iLnN0YXRlTm9kZTtKaCgpO0UoV2YpO0UoSCk7T2goKTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpR2coYik/Yi5mbGFnc3w9NDpudWxsPT09YXx8YS5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCYmMD09PShiLmZsYWdzJjI1Nil8fChiLmZsYWdzfD0xMDI0LG51bGwhPT16ZyYmKEdqKHpnKSx6Zz1udWxsKSk7QmooYSxiKTtTKGIpO3JldHVybiBudWxsO2Nhc2UgNTpMaChiKTt2YXIgZT1IaChHaC5jdXJyZW50KTtcbmM9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlDaihhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mik7ZWxzZXtpZighZCl7aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTY2KSk7UyhiKTtyZXR1cm4gbnVsbH1hPUhoKEVoLmN1cnJlbnQpO2lmKEdnKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi50eXBlO3ZhciBmPWIubWVtb2l6ZWRQcm9wcztkW09mXT1iO2RbUGZdPWY7YT0wIT09KGIubW9kZSYxKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkQoXCJjYW5jZWxcIixkKTtEKFwiY2xvc2VcIixkKTticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkQoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPGxmLmxlbmd0aDtlKyspRChsZltlXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RChcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RChcImVycm9yXCIsXG5kKTtEKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RChcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGQsZik7RChcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWYubXVsdGlwbGV9O0QoXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoZCxmKSxEKFwiaW52YWxpZFwiLGQpfXViKGMsZik7ZT1udWxsO2Zvcih2YXIgZyBpbiBmKWlmKGYuaGFzT3duUHJvcGVydHkoZykpe3ZhciBoPWZbZ107XCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGg/ZC50ZXh0Q29udGVudCE9PWgmJighMCE9PWYuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZBZihkLnRleHRDb250ZW50LGgsYSksZT1bXCJjaGlsZHJlblwiLGhdKTpcIm51bWJlclwiPT09dHlwZW9mIGgmJmQudGV4dENvbnRlbnQhPT1cIlwiK2gmJighMCE9PWYuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZBZihkLnRleHRDb250ZW50LFxuaCxhKSxlPVtcImNoaWxkcmVuXCIsXCJcIitoXSk6ZWEuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWgmJlwib25TY3JvbGxcIj09PWcmJkQoXCJzY3JvbGxcIixkKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoZCk7ZGIoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShkKTtqYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGQub25jbGljaz1CZil9ZD1lO2IudXBkYXRlUXVldWU9ZDtudWxsIT09ZCYmKGIuZmxhZ3N8PTQpfWVsc2V7Zz05PT09ZS5ub2RlVHlwZT9lOmUub3duZXJEb2N1bWVudDtcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWEmJihhPWtiKGMpKTtcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/XCJzY3JpcHRcIj09PWM/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlxuXCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGMse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2FbT2ZdPWI7YVtQZl09ZDtBaihhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7YTp7Zz12YihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RChcImNhbmNlbFwiLGEpO0QoXCJjbG9zZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkQoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxsZi5sZW5ndGg7ZSsrKUQobGZbZV0sYSk7ZT1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpEKFwiZXJyb3JcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RChcImVycm9yXCIsXG5hKTtEKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkQoXCJ0b2dnbGVcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoYSxkKTtlPVlhKGEsZCk7RChcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1kO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoYSxkKTtlPWdiKGEsZCk7RChcImludmFsaWRcIixhKTticmVhaztkZWZhdWx0OmU9ZH11YihjLGUpO2g9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj9zYihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmbmIoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PVxuY3x8XCJcIiE9PWspJiZvYihhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmb2IoYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJihlYS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1mJiZEKFwic2Nyb2xsXCIsYSk6bnVsbCE9ayYmdGEoYSxmLGssZykpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShhKTtkYihhLGQsITEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGEpO2piKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitTYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2ZiKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZmYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSxcbiEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLm9uQ2xpY2smJihhLm9uY2xpY2s9QmYpfXN3aXRjaChjKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOmQ9ISFkLmF1dG9Gb2N1czticmVhayBhO2Nhc2UgXCJpbWdcIjpkPSEwO2JyZWFrIGE7ZGVmYXVsdDpkPSExfX1kJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTIpfVMoYik7cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKURqKGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2NikpO2M9SGgoR2guY3VycmVudCk7SGgoRWguY3VycmVudCk7aWYoR2coYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLm1lbW9pemVkUHJvcHM7ZFtPZl09YjtpZihmPWQubm9kZVZhbHVlIT09YylpZihhPVxueGcsbnVsbCE9PWEpc3dpdGNoKGEudGFnKXtjYXNlIDM6QWYoZC5ub2RlVmFsdWUsYywwIT09KGEubW9kZSYxKSk7YnJlYWs7Y2FzZSA1OiEwIT09YS5tZW1vaXplZFByb3BzLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC5ub2RlVmFsdWUsYywwIT09KGEubW9kZSYxKSl9ZiYmKGIuZmxhZ3N8PTQpfWVsc2UgZD0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGQpLGRbT2ZdPWIsYi5zdGF0ZU5vZGU9ZH1TKGIpO3JldHVybiBudWxsO2Nhc2UgMTM6RShNKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09YXx8bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZS5kZWh5ZHJhdGVkKXtpZihJJiZudWxsIT09eWcmJjAhPT0oYi5tb2RlJjEpJiYwPT09KGIuZmxhZ3MmMTI4KSlIZygpLElnKCksYi5mbGFnc3w9OTg1NjAsZj0hMTtlbHNlIGlmKGY9R2coYiksbnVsbCE9PWQmJm51bGwhPT1kLmRlaHlkcmF0ZWQpe2lmKG51bGw9PT1cbmEpe2lmKCFmKXRocm93IEVycm9yKHAoMzE4KSk7Zj1iLm1lbW9pemVkU3RhdGU7Zj1udWxsIT09Zj9mLmRlaHlkcmF0ZWQ6bnVsbDtpZighZil0aHJvdyBFcnJvcihwKDMxNykpO2ZbT2ZdPWJ9ZWxzZSBJZygpLDA9PT0oYi5mbGFncyYxMjgpJiYoYi5tZW1vaXplZFN0YXRlPW51bGwpLGIuZmxhZ3N8PTQ7UyhiKTtmPSExfWVsc2UgbnVsbCE9PXpnJiYoR2ooemcpLHpnPW51bGwpLGY9ITA7aWYoIWYpcmV0dXJuIGIuZmxhZ3MmNjU1MzY/YjpudWxsfWlmKDAhPT0oYi5mbGFncyYxMjgpKXJldHVybiBiLmxhbmVzPWMsYjtkPW51bGwhPT1kO2QhPT0obnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUpJiZkJiYoYi5jaGlsZC5mbGFnc3w9ODE5MiwwIT09KGIubW9kZSYxKSYmKG51bGw9PT1hfHwwIT09KE0uY3VycmVudCYxKT8wPT09VCYmKFQ9Myk6dWooKSkpO251bGwhPT1iLnVwZGF0ZVF1ZXVlJiYoYi5mbGFnc3w9NCk7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIEpoKCksXG5CaihhLGIpLG51bGw9PT1hJiZzZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxTKGIpLG51bGw7Y2FzZSAxMDpyZXR1cm4gUmcoYi50eXBlLl9jb250ZXh0KSxTKGIpLG51bGw7Y2FzZSAxNzpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxTKGIpLG51bGw7Y2FzZSAxOTpFKE0pO2Y9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1mKXJldHVybiBTKGIpLG51bGw7ZD0wIT09KGIuZmxhZ3MmMTI4KTtnPWYucmVuZGVyaW5nO2lmKG51bGw9PT1nKWlmKGQpRWooZiwhMSk7ZWxzZXtpZigwIT09VHx8bnVsbCE9PWEmJjAhPT0oYS5mbGFncyYxMjgpKWZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtnPU1oKGEpO2lmKG51bGwhPT1nKXtiLmZsYWdzfD0xMjg7RWooZiwhMSk7ZD1nLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYoYi51cGRhdGVRdWV1ZT1kLGIuZmxhZ3N8PTQpO2Iuc3VidHJlZUZsYWdzPTA7ZD1jO2ZvcihjPWIuY2hpbGQ7bnVsbCE9PWM7KWY9YyxhPWQsZi5mbGFncyY9MTQ2ODAwNjYsXG5nPWYuYWx0ZXJuYXRlLG51bGw9PT1nPyhmLmNoaWxkTGFuZXM9MCxmLmxhbmVzPWEsZi5jaGlsZD1udWxsLGYuc3VidHJlZUZsYWdzPTAsZi5tZW1vaXplZFByb3BzPW51bGwsZi5tZW1vaXplZFN0YXRlPW51bGwsZi51cGRhdGVRdWV1ZT1udWxsLGYuZGVwZW5kZW5jaWVzPW51bGwsZi5zdGF0ZU5vZGU9bnVsbCk6KGYuY2hpbGRMYW5lcz1nLmNoaWxkTGFuZXMsZi5sYW5lcz1nLmxhbmVzLGYuY2hpbGQ9Zy5jaGlsZCxmLnN1YnRyZWVGbGFncz0wLGYuZGVsZXRpb25zPW51bGwsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsZi5kZXBlbmRlbmNpZXM9bnVsbD09PWE/bnVsbDp7bGFuZXM6YS5sYW5lcyxmaXJzdENvbnRleHQ6YS5maXJzdENvbnRleHR9KSxjPWMuc2libGluZztHKE0sTS5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9YT1cbmEuc2libGluZ31udWxsIT09Zi50YWlsJiZCKCk+SGomJihiLmZsYWdzfD0xMjgsZD0hMCxFaihmLCExKSxiLmxhbmVzPTQxOTQzMDQpfWVsc2V7aWYoIWQpaWYoYT1NaChnKSxudWxsIT09YSl7aWYoYi5mbGFnc3w9MTI4LGQ9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZmxhZ3N8PTQpLEVqKGYsITApLG51bGw9PT1mLnRhaWwmJlwiaGlkZGVuXCI9PT1mLnRhaWxNb2RlJiYhZy5hbHRlcm5hdGUmJiFJKXJldHVybiBTKGIpLG51bGx9ZWxzZSAyKkIoKS1mLnJlbmRlcmluZ1N0YXJ0VGltZT5IaiYmMTA3Mzc0MTgyNCE9PWMmJihiLmZsYWdzfD0xMjgsZD0hMCxFaihmLCExKSxiLmxhbmVzPTQxOTQzMDQpO2YuaXNCYWNrd2FyZHM/KGcuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9Zyk6KGM9Zi5sYXN0LG51bGwhPT1jP2Muc2libGluZz1nOmIuY2hpbGQ9ZyxmLmxhc3Q9Zyl9aWYobnVsbCE9PWYudGFpbClyZXR1cm4gYj1mLnRhaWwsZi5yZW5kZXJpbmc9XG5iLGYudGFpbD1iLnNpYmxpbmcsZi5yZW5kZXJpbmdTdGFydFRpbWU9QigpLGIuc2libGluZz1udWxsLGM9TS5jdXJyZW50LEcoTSxkP2MmMXwyOmMmMSksYjtTKGIpO3JldHVybiBudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gSWooKSxkPW51bGwhPT1iLm1lbW9pemVkU3RhdGUsbnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUhPT1kJiYoYi5mbGFnc3w9ODE5MiksZCYmMCE9PShiLm1vZGUmMSk/MCE9PShnaiYxMDczNzQxODI0KSYmKFMoYiksYi5zdWJ0cmVlRmxhZ3MmNiYmKGIuZmxhZ3N8PTgxOTIpKTpTKGIpLG51bGw7Y2FzZSAyNDpyZXR1cm4gbnVsbDtjYXNlIDI1OnJldHVybiBudWxsfXRocm93IEVycm9yKHAoMTU2LGIudGFnKSk7fVxuZnVuY3Rpb24gSmooYSxiKXt3ZyhiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMTpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxhPWIuZmxhZ3MsYSY2NTUzNj8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDM6cmV0dXJuIEpoKCksRShXZiksRShIKSxPaCgpLGE9Yi5mbGFncywwIT09KGEmNjU1MzYpJiYwPT09KGEmMTI4KT8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDU6cmV0dXJuIExoKGIpLG51bGw7Y2FzZSAxMzpFKE0pO2E9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXtpZihudWxsPT09Yi5hbHRlcm5hdGUpdGhyb3cgRXJyb3IocCgzNDApKTtJZygpfWE9Yi5mbGFncztyZXR1cm4gYSY2NTUzNj8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDE5OnJldHVybiBFKE0pLG51bGw7Y2FzZSA0OnJldHVybiBKaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gUmcoYi50eXBlLl9jb250ZXh0KSxudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gSWooKSxcbm51bGw7Y2FzZSAyNDpyZXR1cm4gbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX12YXIgS2o9ITEsVT0hMSxMaj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldCxWPW51bGw7ZnVuY3Rpb24gTWooYSxiKXt2YXIgYz1hLnJlZjtpZihudWxsIT09YylpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYyl0cnl7YyhudWxsKX1jYXRjaChkKXtXKGEsYixkKX1lbHNlIGMuY3VycmVudD1udWxsfWZ1bmN0aW9uIE5qKGEsYixjKXt0cnl7YygpfWNhdGNoKGQpe1coYSxiLGQpfX12YXIgT2o9ITE7XG5mdW5jdGlvbiBQaihhLGIpe0NmPWRkO2E9TWUoKTtpZihOZShhKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gYSl2YXIgYz17c3RhcnQ6YS5zZWxlY3Rpb25TdGFydCxlbmQ6YS5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7Yz0oYz1hLm93bmVyRG9jdW1lbnQpJiZjLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGQ9Yy5nZXRTZWxlY3Rpb24mJmMuZ2V0U2VsZWN0aW9uKCk7aWYoZCYmMCE9PWQucmFuZ2VDb3VudCl7Yz1kLmFuY2hvck5vZGU7dmFyIGU9ZC5hbmNob3JPZmZzZXQsZj1kLmZvY3VzTm9kZTtkPWQuZm9jdXNPZmZzZXQ7dHJ5e2Mubm9kZVR5cGUsZi5ub2RlVHlwZX1jYXRjaChGKXtjPW51bGw7YnJlYWsgYX12YXIgZz0wLGg9LTEsaz0tMSxsPTAsbT0wLHE9YSxyPW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgeTs7KXtxIT09Y3x8MCE9PWUmJjMhPT1xLm5vZGVUeXBlfHwoaD1nK2UpO3EhPT1mfHwwIT09ZCYmMyE9PXEubm9kZVR5cGV8fChrPWcrZCk7Mz09PXEubm9kZVR5cGUmJihnKz1cbnEubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh5PXEuZmlyc3RDaGlsZCkpYnJlYWs7cj1xO3E9eX1mb3IoOzspe2lmKHE9PT1hKWJyZWFrIGI7cj09PWMmJisrbD09PWUmJihoPWcpO3I9PT1mJiYrK209PT1kJiYoaz1nKTtpZihudWxsIT09KHk9cS5uZXh0U2libGluZykpYnJlYWs7cT1yO3I9cS5wYXJlbnROb2RlfXE9eX1jPS0xPT09aHx8LTE9PT1rP251bGw6e3N0YXJ0OmgsZW5kOmt9fWVsc2UgYz1udWxsfWM9Y3x8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgYz1udWxsO0RmPXtmb2N1c2VkRWxlbTphLHNlbGVjdGlvblJhbmdlOmN9O2RkPSExO2ZvcihWPWI7bnVsbCE9PVY7KWlmKGI9VixhPWIuY2hpbGQsMCE9PShiLnN1YnRyZWVGbGFncyYxMDI4KSYmbnVsbCE9PWEpYS5yZXR1cm49YixWPWE7ZWxzZSBmb3IoO251bGwhPT1WOyl7Yj1WO3RyeXt2YXIgbj1iLmFsdGVybmF0ZTtpZigwIT09KGIuZmxhZ3MmMTAyNCkpc3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmJyZWFrO1xuY2FzZSAxOmlmKG51bGwhPT1uKXt2YXIgdD1uLm1lbW9pemVkUHJvcHMsSj1uLm1lbW9pemVkU3RhdGUseD1iLnN0YXRlTm9kZSx3PXguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT90OkxnKGIudHlwZSx0KSxKKTt4Ll9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPXd9YnJlYWs7Y2FzZSAzOnZhciB1PWIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87MT09PXUubm9kZVR5cGU/dS50ZXh0Q29udGVudD1cIlwiOjk9PT11Lm5vZGVUeXBlJiZ1LmRvY3VtZW50RWxlbWVudCYmdS5yZW1vdmVDaGlsZCh1LmRvY3VtZW50RWxlbWVudCk7YnJlYWs7Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpicmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMTYzKSk7fX1jYXRjaChGKXtXKGIsYi5yZXR1cm4sRil9YT1iLnNpYmxpbmc7aWYobnVsbCE9PWEpe2EucmV0dXJuPWIucmV0dXJuO1Y9YTticmVha31WPWIucmV0dXJufW49T2o7T2o9ITE7cmV0dXJuIG59XG5mdW5jdGlvbiBRaihhLGIsYyl7dmFyIGQ9Yi51cGRhdGVRdWV1ZTtkPW51bGwhPT1kP2QubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1kKXt2YXIgZT1kPWQubmV4dDtkb3tpZigoZS50YWcmYSk9PT1hKXt2YXIgZj1lLmRlc3Ryb3k7ZS5kZXN0cm95PXZvaWQgMDt2b2lkIDAhPT1mJiZOaihiLGMsZil9ZT1lLm5leHR9d2hpbGUoZSE9PWQpfX1mdW5jdGlvbiBSaihhLGIpe2I9Yi51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXt2YXIgYz1iPWIubmV4dDtkb3tpZigoYy50YWcmYSk9PT1hKXt2YXIgZD1jLmNyZWF0ZTtjLmRlc3Ryb3k9ZCgpfWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX19ZnVuY3Rpb24gU2ooYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpe3ZhciBjPWEuc3RhdGVOb2RlO3N3aXRjaChhLnRhZyl7Y2FzZSA1OmE9YzticmVhaztkZWZhdWx0OmE9Y31cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmIuY3VycmVudD1hfX1cbmZ1bmN0aW9uIFRqKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO251bGwhPT1iJiYoYS5hbHRlcm5hdGU9bnVsbCxUaihiKSk7YS5jaGlsZD1udWxsO2EuZGVsZXRpb25zPW51bGw7YS5zaWJsaW5nPW51bGw7NT09PWEudGFnJiYoYj1hLnN0YXRlTm9kZSxudWxsIT09YiYmKGRlbGV0ZSBiW09mXSxkZWxldGUgYltQZl0sZGVsZXRlIGJbb2ZdLGRlbGV0ZSBiW1FmXSxkZWxldGUgYltSZl0pKTthLnN0YXRlTm9kZT1udWxsO2EucmV0dXJuPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2Euc3RhdGVOb2RlPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsfWZ1bmN0aW9uIFVqKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gVmooYSl7YTpmb3IoOzspe2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8VWooYS5yZXR1cm4pKXJldHVybiBudWxsO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjtmb3IoYT1hLnNpYmxpbmc7NSE9PWEudGFnJiY2IT09YS50YWcmJjE4IT09YS50YWc7KXtpZihhLmZsYWdzJjIpY29udGludWUgYTtpZihudWxsPT09YS5jaGlsZHx8ND09PWEudGFnKWNvbnRpbnVlIGE7ZWxzZSBhLmNoaWxkLnJldHVybj1hLGE9YS5jaGlsZH1pZighKGEuZmxhZ3MmMikpcmV0dXJuIGEuc3RhdGVOb2RlfX1cbmZ1bmN0aW9uIFdqKGEsYixjKXt2YXIgZD1hLnRhZztpZig1PT09ZHx8Nj09PWQpYT1hLnN0YXRlTm9kZSxiPzg9PT1jLm5vZGVUeXBlP2MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxiKTpjLmluc2VydEJlZm9yZShhLGIpOig4PT09Yy5ub2RlVHlwZT8oYj1jLnBhcmVudE5vZGUsYi5pbnNlcnRCZWZvcmUoYSxjKSk6KGI9YyxiLmFwcGVuZENoaWxkKGEpKSxjPWMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09YyYmdm9pZCAwIT09Y3x8bnVsbCE9PWIub25jbGlja3x8KGIub25jbGljaz1CZikpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihXaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVdqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIFhqKGEsYixjKXt2YXIgZD1hLnRhZztpZig1PT09ZHx8Nj09PWQpYT1hLnN0YXRlTm9kZSxiP2MuaW5zZXJ0QmVmb3JlKGEsYik6Yy5hcHBlbmRDaGlsZChhKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoWGooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylYaihhLGIsYyksYT1hLnNpYmxpbmd9dmFyIFg9bnVsbCxZaj0hMTtmdW5jdGlvbiBaaihhLGIsYyl7Zm9yKGM9Yy5jaGlsZDtudWxsIT09YzspYWsoYSxiLGMpLGM9Yy5zaWJsaW5nfVxuZnVuY3Rpb24gYWsoYSxiLGMpe2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Db21taXRGaWJlclVubW91bnQpdHJ5e2xjLm9uQ29tbWl0RmliZXJVbm1vdW50KGtjLGMpfWNhdGNoKGgpe31zd2l0Y2goYy50YWcpe2Nhc2UgNTpVfHxNaihjLGIpO2Nhc2UgNjp2YXIgZD1YLGU9WWo7WD1udWxsO1pqKGEsYixjKTtYPWQ7WWo9ZTtudWxsIT09WCYmKFlqPyhhPVgsYz1jLnN0YXRlTm9kZSw4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYyk6YS5yZW1vdmVDaGlsZChjKSk6WC5yZW1vdmVDaGlsZChjLnN0YXRlTm9kZSkpO2JyZWFrO2Nhc2UgMTg6bnVsbCE9PVgmJihZaj8oYT1YLGM9Yy5zdGF0ZU5vZGUsOD09PWEubm9kZVR5cGU/S2YoYS5wYXJlbnROb2RlLGMpOjE9PT1hLm5vZGVUeXBlJiZLZihhLGMpLGJkKGEpKTpLZihYLGMuc3RhdGVOb2RlKSk7YnJlYWs7Y2FzZSA0OmQ9WDtlPVlqO1g9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztZaj0hMDtcblpqKGEsYixjKTtYPWQ7WWo9ZTticmVhaztjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6aWYoIVUmJihkPWMudXBkYXRlUXVldWUsbnVsbCE9PWQmJihkPWQubGFzdEVmZmVjdCxudWxsIT09ZCkpKXtlPWQ9ZC5uZXh0O2Rve3ZhciBmPWUsZz1mLmRlc3Ryb3k7Zj1mLnRhZzt2b2lkIDAhPT1nJiYoMCE9PShmJjIpP05qKGMsYixnKTowIT09KGYmNCkmJk5qKGMsYixnKSk7ZT1lLm5leHR9d2hpbGUoZSE9PWQpfVpqKGEsYixjKTticmVhaztjYXNlIDE6aWYoIVUmJihNaihjLGIpLGQ9Yy5zdGF0ZU5vZGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFVubW91bnQpKXRyeXtkLnByb3BzPWMubWVtb2l6ZWRQcm9wcyxkLnN0YXRlPWMubWVtb2l6ZWRTdGF0ZSxkLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goaCl7VyhjLGIsaCl9WmooYSxiLGMpO2JyZWFrO2Nhc2UgMjE6WmooYSxiLGMpO2JyZWFrO2Nhc2UgMjI6Yy5tb2RlJjE/KFU9KGQ9VSl8fG51bGwhPT1cbmMubWVtb2l6ZWRTdGF0ZSxaaihhLGIsYyksVT1kKTpaaihhLGIsYyk7YnJlYWs7ZGVmYXVsdDpaaihhLGIsYyl9fWZ1bmN0aW9uIGJrKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IExqKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9Y2suYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19XG5mdW5jdGlvbiBkayhhLGIpe3ZhciBjPWIuZGVsZXRpb25zO2lmKG51bGwhPT1jKWZvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdO3RyeXt2YXIgZj1hLGc9YixoPWc7YTpmb3IoO251bGwhPT1oOyl7c3dpdGNoKGgudGFnKXtjYXNlIDU6WD1oLnN0YXRlTm9kZTtZaj0hMTticmVhayBhO2Nhc2UgMzpYPWguc3RhdGVOb2RlLmNvbnRhaW5lckluZm87WWo9ITA7YnJlYWsgYTtjYXNlIDQ6WD1oLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1lqPSEwO2JyZWFrIGF9aD1oLnJldHVybn1pZihudWxsPT09WCl0aHJvdyBFcnJvcihwKDE2MCkpO2FrKGYsZyxlKTtYPW51bGw7WWo9ITE7dmFyIGs9ZS5hbHRlcm5hdGU7bnVsbCE9PWsmJihrLnJldHVybj1udWxsKTtlLnJldHVybj1udWxsfWNhdGNoKGwpe1coZSxiLGwpfX1pZihiLnN1YnRyZWVGbGFncyYxMjg1NClmb3IoYj1iLmNoaWxkO251bGwhPT1iOyllayhiLGEpLGI9Yi5zaWJsaW5nfVxuZnVuY3Rpb24gZWsoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZSxkPWEuZmxhZ3M7c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6ZGsoYixhKTtmayhhKTtpZihkJjQpe3RyeXtRaigzLGEsYS5yZXR1cm4pLFJqKDMsYSl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfXRyeXtRaig1LGEsYS5yZXR1cm4pfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSAxOmRrKGIsYSk7ZmsoYSk7ZCY1MTImJm51bGwhPT1jJiZNaihjLGMucmV0dXJuKTticmVhaztjYXNlIDU6ZGsoYixhKTtmayhhKTtkJjUxMiYmbnVsbCE9PWMmJk1qKGMsYy5yZXR1cm4pO2lmKGEuZmxhZ3MmMzIpe3ZhciBlPWEuc3RhdGVOb2RlO3RyeXtvYihlLFwiXCIpfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19aWYoZCY0JiYoZT1hLnN0YXRlTm9kZSxudWxsIT1lKSl7dmFyIGY9YS5tZW1vaXplZFByb3BzLGc9bnVsbCE9PWM/Yy5tZW1vaXplZFByb3BzOmYsaD1hLnR5cGUsaz1hLnVwZGF0ZVF1ZXVlO1xuYS51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1rKXRyeXtcImlucHV0XCI9PT1oJiZcInJhZGlvXCI9PT1mLnR5cGUmJm51bGwhPWYubmFtZSYmYWIoZSxmKTt2YihoLGcpO3ZhciBsPXZiKGgsZik7Zm9yKGc9MDtnPGsubGVuZ3RoO2crPTIpe3ZhciBtPWtbZ10scT1rW2crMV07XCJzdHlsZVwiPT09bT9zYihlLHEpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PW0/bmIoZSxxKTpcImNoaWxkcmVuXCI9PT1tP29iKGUscSk6dGEoZSxtLHEsbCl9c3dpdGNoKGgpe2Nhc2UgXCJpbnB1dFwiOmJiKGUsZik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoZSxmKTticmVhaztjYXNlIFwic2VsZWN0XCI6dmFyIHI9ZS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlO2UuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWYubXVsdGlwbGU7dmFyIHk9Zi52YWx1ZTtudWxsIT15P2ZiKGUsISFmLm11bHRpcGxlLHksITEpOnIhPT0hIWYubXVsdGlwbGUmJihudWxsIT1mLmRlZmF1bHRWYWx1ZT9mYihlLCEhZi5tdWx0aXBsZSxcbmYuZGVmYXVsdFZhbHVlLCEwKTpmYihlLCEhZi5tdWx0aXBsZSxmLm11bHRpcGxlP1tdOlwiXCIsITEpKX1lW1BmXT1mfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSA2OmRrKGIsYSk7ZmsoYSk7aWYoZCY0KXtpZihudWxsPT09YS5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjIpKTtlPWEuc3RhdGVOb2RlO2Y9YS5tZW1vaXplZFByb3BzO3RyeXtlLm5vZGVWYWx1ZT1mfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSAzOmRrKGIsYSk7ZmsoYSk7aWYoZCY0JiZudWxsIT09YyYmYy5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl0cnl7YmQoYi5jb250YWluZXJJbmZvKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9YnJlYWs7Y2FzZSA0OmRrKGIsYSk7ZmsoYSk7YnJlYWs7Y2FzZSAxMzpkayhiLGEpO2ZrKGEpO2U9YS5jaGlsZDtlLmZsYWdzJjgxOTImJihmPW51bGwhPT1lLm1lbW9pemVkU3RhdGUsZS5zdGF0ZU5vZGUuaXNIaWRkZW49ZiwhZnx8XG5udWxsIT09ZS5hbHRlcm5hdGUmJm51bGwhPT1lLmFsdGVybmF0ZS5tZW1vaXplZFN0YXRlfHwoZ2s9QigpKSk7ZCY0JiZiayhhKTticmVhaztjYXNlIDIyOm09bnVsbCE9PWMmJm51bGwhPT1jLm1lbW9pemVkU3RhdGU7YS5tb2RlJjE/KFU9KGw9VSl8fG0sZGsoYixhKSxVPWwpOmRrKGIsYSk7ZmsoYSk7aWYoZCY4MTkyKXtsPW51bGwhPT1hLm1lbW9pemVkU3RhdGU7aWYoKGEuc3RhdGVOb2RlLmlzSGlkZGVuPWwpJiYhbSYmMCE9PShhLm1vZGUmMSkpZm9yKFY9YSxtPWEuY2hpbGQ7bnVsbCE9PW07KXtmb3IocT1WPW07bnVsbCE9PVY7KXtyPVY7eT1yLmNoaWxkO3N3aXRjaChyLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OlFqKDQscixyLnJldHVybik7YnJlYWs7Y2FzZSAxOk1qKHIsci5yZXR1cm4pO3ZhciBuPXIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudFdpbGxVbm1vdW50KXtkPXI7Yz1yLnJldHVybjt0cnl7Yj1kLG4ucHJvcHM9XG5iLm1lbW9pemVkUHJvcHMsbi5zdGF0ZT1iLm1lbW9pemVkU3RhdGUsbi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKHQpe1coZCxjLHQpfX1icmVhaztjYXNlIDU6TWoocixyLnJldHVybik7YnJlYWs7Y2FzZSAyMjppZihudWxsIT09ci5tZW1vaXplZFN0YXRlKXtoayhxKTtjb250aW51ZX19bnVsbCE9PXk/KHkucmV0dXJuPXIsVj15KTpoayhxKX1tPW0uc2libGluZ31hOmZvcihtPW51bGwscT1hOzspe2lmKDU9PT1xLnRhZyl7aWYobnVsbD09PW0pe209cTt0cnl7ZT1xLnN0YXRlTm9kZSxsPyhmPWUuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuc2V0UHJvcGVydHk/Zi5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpmLmRpc3BsYXk9XCJub25lXCIpOihoPXEuc3RhdGVOb2RlLGs9cS5tZW1vaXplZFByb3BzLnN0eWxlLGc9dm9pZCAwIT09ayYmbnVsbCE9PWsmJmsuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2suZGlzcGxheTpudWxsLGguc3R5bGUuZGlzcGxheT1cbnJiKFwiZGlzcGxheVwiLGcpKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fX1lbHNlIGlmKDY9PT1xLnRhZyl7aWYobnVsbD09PW0pdHJ5e3Euc3RhdGVOb2RlLm5vZGVWYWx1ZT1sP1wiXCI6cS5tZW1vaXplZFByb3BzfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19ZWxzZSBpZigoMjIhPT1xLnRhZyYmMjMhPT1xLnRhZ3x8bnVsbD09PXEubWVtb2l6ZWRTdGF0ZXx8cT09PWEpJiZudWxsIT09cS5jaGlsZCl7cS5jaGlsZC5yZXR1cm49cTtxPXEuY2hpbGQ7Y29udGludWV9aWYocT09PWEpYnJlYWsgYTtmb3IoO251bGw9PT1xLnNpYmxpbmc7KXtpZihudWxsPT09cS5yZXR1cm58fHEucmV0dXJuPT09YSlicmVhayBhO209PT1xJiYobT1udWxsKTtxPXEucmV0dXJufW09PT1xJiYobT1udWxsKTtxLnNpYmxpbmcucmV0dXJuPXEucmV0dXJuO3E9cS5zaWJsaW5nfX1icmVhaztjYXNlIDE5OmRrKGIsYSk7ZmsoYSk7ZCY0JiZiayhhKTticmVhaztjYXNlIDIxOmJyZWFrO2RlZmF1bHQ6ZGsoYixcbmEpLGZrKGEpfX1mdW5jdGlvbiBmayhhKXt2YXIgYj1hLmZsYWdzO2lmKGImMil7dHJ5e2E6e2Zvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKFVqKGMpKXt2YXIgZD1jO2JyZWFrIGF9Yz1jLnJldHVybn10aHJvdyBFcnJvcihwKDE2MCkpO31zd2l0Y2goZC50YWcpe2Nhc2UgNTp2YXIgZT1kLnN0YXRlTm9kZTtkLmZsYWdzJjMyJiYob2IoZSxcIlwiKSxkLmZsYWdzJj0tMzMpO3ZhciBmPVZqKGEpO1hqKGEsZixlKTticmVhaztjYXNlIDM6Y2FzZSA0OnZhciBnPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saD1WaihhKTtXaihhLGgsZyk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MSkpO319Y2F0Y2goayl7VyhhLGEucmV0dXJuLGspfWEuZmxhZ3MmPS0zfWImNDA5NiYmKGEuZmxhZ3MmPS00MDk3KX1mdW5jdGlvbiBpayhhLGIsYyl7Vj1hO2prKGEsYixjKX1cbmZ1bmN0aW9uIGprKGEsYixjKXtmb3IodmFyIGQ9MCE9PShhLm1vZGUmMSk7bnVsbCE9PVY7KXt2YXIgZT1WLGY9ZS5jaGlsZDtpZigyMj09PWUudGFnJiZkKXt2YXIgZz1udWxsIT09ZS5tZW1vaXplZFN0YXRlfHxLajtpZighZyl7dmFyIGg9ZS5hbHRlcm5hdGUsaz1udWxsIT09aCYmbnVsbCE9PWgubWVtb2l6ZWRTdGF0ZXx8VTtoPUtqO3ZhciBsPVU7S2o9ZztpZigoVT1rKSYmIWwpZm9yKFY9ZTtudWxsIT09VjspZz1WLGs9Zy5jaGlsZCwyMj09PWcudGFnJiZudWxsIT09Zy5tZW1vaXplZFN0YXRlP2trKGUpOm51bGwhPT1rPyhrLnJldHVybj1nLFY9ayk6a2soZSk7Zm9yKDtudWxsIT09ZjspVj1mLGprKGYsYixjKSxmPWYuc2libGluZztWPWU7S2o9aDtVPWx9bGsoYSxiLGMpfWVsc2UgMCE9PShlLnN1YnRyZWVGbGFncyY4NzcyKSYmbnVsbCE9PWY/KGYucmV0dXJuPWUsVj1mKTpsayhhLGIsYyl9fVxuZnVuY3Rpb24gbGsoYSl7Zm9yKDtudWxsIT09Vjspe3ZhciBiPVY7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXt2YXIgYz1iLmFsdGVybmF0ZTt0cnl7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpVfHxSaig1LGIpO2JyZWFrO2Nhc2UgMTp2YXIgZD1iLnN0YXRlTm9kZTtpZihiLmZsYWdzJjQmJiFVKWlmKG51bGw9PT1jKWQuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBlPWIuZWxlbWVudFR5cGU9PT1iLnR5cGU/Yy5tZW1vaXplZFByb3BzOkxnKGIudHlwZSxjLm1lbW9pemVkUHJvcHMpO2QuY29tcG9uZW50RGlkVXBkYXRlKGUsYy5tZW1vaXplZFN0YXRlLGQuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfXZhciBmPWIudXBkYXRlUXVldWU7bnVsbCE9PWYmJmloKGIsZixkKTticmVhaztjYXNlIDM6dmFyIGc9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09Zyl7Yz1udWxsO2lmKG51bGwhPT1iLmNoaWxkKXN3aXRjaChiLmNoaWxkLnRhZyl7Y2FzZSA1OmM9XG5iLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6Yz1iLmNoaWxkLnN0YXRlTm9kZX1paChiLGcsYyl9YnJlYWs7Y2FzZSA1OnZhciBoPWIuc3RhdGVOb2RlO2lmKG51bGw9PT1jJiZiLmZsYWdzJjQpe2M9aDt2YXIgaz1iLm1lbW9pemVkUHJvcHM7c3dpdGNoKGIudHlwZSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjprLmF1dG9Gb2N1cyYmYy5mb2N1cygpO2JyZWFrO2Nhc2UgXCJpbWdcIjprLnNyYyYmKGMuc3JjPWsuc3JjKX19YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6aWYobnVsbD09PWIubWVtb2l6ZWRTdGF0ZSl7dmFyIGw9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWwpe3ZhciBtPWwubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09bSl7dmFyIHE9bS5kZWh5ZHJhdGVkO251bGwhPT1xJiZiZChxKX19fWJyZWFrO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIxOmNhc2UgMjI6Y2FzZSAyMzpjYXNlIDI1OmJyZWFrO1xuZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MykpO31VfHxiLmZsYWdzJjUxMiYmU2ooYil9Y2F0Y2gocil7VyhiLGIucmV0dXJuLHIpfX1pZihiPT09YSl7Vj1udWxsO2JyZWFrfWM9Yi5zaWJsaW5nO2lmKG51bGwhPT1jKXtjLnJldHVybj1iLnJldHVybjtWPWM7YnJlYWt9Vj1iLnJldHVybn19ZnVuY3Rpb24gaGsoYSl7Zm9yKDtudWxsIT09Vjspe3ZhciBiPVY7aWYoYj09PWEpe1Y9bnVsbDticmVha312YXIgYz1iLnNpYmxpbmc7aWYobnVsbCE9PWMpe2MucmV0dXJuPWIucmV0dXJuO1Y9YzticmVha31WPWIucmV0dXJufX1cbmZ1bmN0aW9uIGtrKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO3RyeXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6dmFyIGM9Yi5yZXR1cm47dHJ5e1JqKDQsYil9Y2F0Y2goayl7VyhiLGMsayl9YnJlYWs7Y2FzZSAxOnZhciBkPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZE1vdW50KXt2YXIgZT1iLnJldHVybjt0cnl7ZC5jb21wb25lbnREaWRNb3VudCgpfWNhdGNoKGspe1coYixlLGspfX12YXIgZj1iLnJldHVybjt0cnl7U2ooYil9Y2F0Y2goayl7VyhiLGYsayl9YnJlYWs7Y2FzZSA1OnZhciBnPWIucmV0dXJuO3RyeXtTaihiKX1jYXRjaChrKXtXKGIsZyxrKX19fWNhdGNoKGspe1coYixiLnJldHVybixrKX1pZihiPT09YSl7Vj1udWxsO2JyZWFrfXZhciBoPWIuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Yi5yZXR1cm47Vj1oO2JyZWFrfVY9Yi5yZXR1cm59fVxudmFyIG1rPU1hdGguY2VpbCxuaz11YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLG9rPXVhLlJlYWN0Q3VycmVudE93bmVyLHBrPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLEs9MCxSPW51bGwsWT1udWxsLFo9MCxnaj0wLGZqPVVmKDApLFQ9MCxxaz1udWxsLGhoPTAscms9MCxzaz0wLHRrPW51bGwsdWs9bnVsbCxnaz0wLEhqPUluZmluaXR5LHZrPW51bGwsUGk9ITEsUWk9bnVsbCxTaT1udWxsLHdrPSExLHhrPW51bGwseWs9MCx6az0wLEFrPW51bGwsQms9LTEsQ2s9MDtmdW5jdGlvbiBMKCl7cmV0dXJuIDAhPT0oSyY2KT9CKCk6LTEhPT1Caz9CazpCaz1CKCl9XG5mdW5jdGlvbiBsaChhKXtpZigwPT09KGEubW9kZSYxKSlyZXR1cm4gMTtpZigwIT09KEsmMikmJjAhPT1aKXJldHVybiBaJi1aO2lmKG51bGwhPT1LZy50cmFuc2l0aW9uKXJldHVybiAwPT09Q2smJihDaz15YygpKSxDazthPUM7aWYoMCE9PWEpcmV0dXJuIGE7YT13aW5kb3cuZXZlbnQ7YT12b2lkIDA9PT1hPzE2OmpkKGEudHlwZSk7cmV0dXJuIGF9ZnVuY3Rpb24gbWgoYSxiLGMsZCl7aWYoNTA8emspdGhyb3cgems9MCxBaz1udWxsLEVycm9yKHAoMTg1KSk7QWMoYSxjLGQpO2lmKDA9PT0oSyYyKXx8YSE9PVIpYT09PVImJigwPT09KEsmMikmJihya3w9YyksND09PVQmJkRrKGEsWikpLEVrKGEsZCksMT09PWMmJjA9PT1LJiYwPT09KGIubW9kZSYxKSYmKEhqPUIoKSs1MDAsZmcmJmpnKCkpfVxuZnVuY3Rpb24gRWsoYSxiKXt2YXIgYz1hLmNhbGxiYWNrTm9kZTt3YyhhLGIpO3ZhciBkPXVjKGEsYT09PVI/WjowKTtpZigwPT09ZCludWxsIT09YyYmYmMoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MDtlbHNlIGlmKGI9ZCYtZCxhLmNhbGxiYWNrUHJpb3JpdHkhPT1iKXtudWxsIT1jJiZiYyhjKTtpZigxPT09YikwPT09YS50YWc/aWcoRmsuYmluZChudWxsLGEpKTpoZyhGay5iaW5kKG51bGwsYSkpLEpmKGZ1bmN0aW9uKCl7MD09PShLJjYpJiZqZygpfSksYz1udWxsO2Vsc2V7c3dpdGNoKERjKGQpKXtjYXNlIDE6Yz1mYzticmVhaztjYXNlIDQ6Yz1nYzticmVhaztjYXNlIDE2OmM9aGM7YnJlYWs7Y2FzZSA1MzY4NzA5MTI6Yz1qYzticmVhaztkZWZhdWx0OmM9aGN9Yz1HayhjLEhrLmJpbmQobnVsbCxhKSl9YS5jYWxsYmFja1ByaW9yaXR5PWI7YS5jYWxsYmFja05vZGU9Y319XG5mdW5jdGlvbiBIayhhLGIpe0JrPS0xO0NrPTA7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzI3KSk7dmFyIGM9YS5jYWxsYmFja05vZGU7aWYoSWsoKSYmYS5jYWxsYmFja05vZGUhPT1jKXJldHVybiBudWxsO3ZhciBkPXVjKGEsYT09PVI/WjowKTtpZigwPT09ZClyZXR1cm4gbnVsbDtpZigwIT09KGQmMzApfHwwIT09KGQmYS5leHBpcmVkTGFuZXMpfHxiKWI9SmsoYSxkKTtlbHNle2I9ZDt2YXIgZT1LO0t8PTI7dmFyIGY9S2soKTtpZihSIT09YXx8WiE9PWIpdms9bnVsbCxIaj1CKCkrNTAwLExrKGEsYik7ZG8gdHJ5e01rKCk7YnJlYWt9Y2F0Y2goaCl7TmsoYSxoKX13aGlsZSgxKTtRZygpO25rLmN1cnJlbnQ9ZjtLPWU7bnVsbCE9PVk/Yj0wOihSPW51bGwsWj0wLGI9VCl9aWYoMCE9PWIpezI9PT1iJiYoZT14YyhhKSwwIT09ZSYmKGQ9ZSxiPU9rKGEsZSkpKTtpZigxPT09Yil0aHJvdyBjPXFrLExrKGEsMCksRGsoYSxkKSxFayhhLEIoKSksYztpZig2PT09YilEayhhLGQpO1xuZWxzZXtlPWEuY3VycmVudC5hbHRlcm5hdGU7aWYoMD09PShkJjMwKSYmIVBrKGUpJiYoYj1KayhhLGQpLDI9PT1iJiYoZj14YyhhKSwwIT09ZiYmKGQ9ZixiPU9rKGEsZikpKSwxPT09YikpdGhyb3cgYz1xayxMayhhLDApLERrKGEsZCksRWsoYSxCKCkpLGM7YS5maW5pc2hlZFdvcms9ZTthLmZpbmlzaGVkTGFuZXM9ZDtzd2l0Y2goYil7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcihwKDM0NSkpO2Nhc2UgMjpRayhhLHVrLHZrKTticmVhaztjYXNlIDM6RGsoYSxkKTtpZigoZCYxMzAwMjM0MjQpPT09ZCYmKGI9Z2srNTAwLUIoKSwxMDxiKSl7aWYoMCE9PXVjKGEsMCkpYnJlYWs7ZT1hLnN1c3BlbmRlZExhbmVzO2lmKChlJmQpIT09ZCl7TCgpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9RmYoUWsuYmluZChudWxsLGEsdWssdmspLGIpO2JyZWFrfVFrKGEsdWssdmspO2JyZWFrO2Nhc2UgNDpEayhhLGQpO2lmKChkJjQxOTQyNDApPT09XG5kKWJyZWFrO2I9YS5ldmVudFRpbWVzO2ZvcihlPS0xOzA8ZDspe3ZhciBnPTMxLW9jKGQpO2Y9MTw8ZztnPWJbZ107Zz5lJiYoZT1nKTtkJj1+Zn1kPWU7ZD1CKCktZDtkPSgxMjA+ZD8xMjA6NDgwPmQ/NDgwOjEwODA+ZD8xMDgwOjE5MjA+ZD8xOTIwOjNFMz5kPzNFMzo0MzIwPmQ/NDMyMDoxOTYwKm1rKGQvMTk2MCkpLWQ7aWYoMTA8ZCl7YS50aW1lb3V0SGFuZGxlPUZmKFFrLmJpbmQobnVsbCxhLHVrLHZrKSxkKTticmVha31RayhhLHVrLHZrKTticmVhaztjYXNlIDU6UWsoYSx1ayx2ayk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDMyOSkpO319fUVrKGEsQigpKTtyZXR1cm4gYS5jYWxsYmFja05vZGU9PT1jP0hrLmJpbmQobnVsbCxhKTpudWxsfVxuZnVuY3Rpb24gT2soYSxiKXt2YXIgYz10azthLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQmJihMayhhLGIpLmZsYWdzfD0yNTYpO2E9SmsoYSxiKTsyIT09YSYmKGI9dWssdWs9YyxudWxsIT09YiYmR2ooYikpO3JldHVybiBhfWZ1bmN0aW9uIEdqKGEpe251bGw9PT11az91az1hOnVrLnB1c2guYXBwbHkodWssYSl9XG5mdW5jdGlvbiBQayhhKXtmb3IodmFyIGI9YTs7KXtpZihiLmZsYWdzJjE2Mzg0KXt2YXIgYz1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1jJiYoYz1jLnN0b3JlcyxudWxsIT09YykpZm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF0sZj1lLmdldFNuYXBzaG90O2U9ZS52YWx1ZTt0cnl7aWYoIUhlKGYoKSxlKSlyZXR1cm4hMX1jYXRjaChnKXtyZXR1cm4hMX19fWM9Yi5jaGlsZDtpZihiLnN1YnRyZWVGbGFncyYxNjM4NCYmbnVsbCE9PWMpYy5yZXR1cm49YixiPWM7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4hMDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiEwfVxuZnVuY3Rpb24gRGsoYSxiKXtiJj1+c2s7YiY9fnJrO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtb2MoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fWZ1bmN0aW9uIEZrKGEpe2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO0lrKCk7dmFyIGI9dWMoYSwwKTtpZigwPT09KGImMSkpcmV0dXJuIEVrKGEsQigpKSxudWxsO3ZhciBjPUprKGEsYik7aWYoMCE9PWEudGFnJiYyPT09Yyl7dmFyIGQ9eGMoYSk7MCE9PWQmJihiPWQsYz1PayhhLGQpKX1pZigxPT09Yyl0aHJvdyBjPXFrLExrKGEsMCksRGsoYSxiKSxFayhhLEIoKSksYztpZig2PT09Yyl0aHJvdyBFcnJvcihwKDM0NSkpO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWI7UWsoYSx1ayx2ayk7RWsoYSxCKCkpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gUmsoYSxiKXt2YXIgYz1LO0t8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Sz1jLDA9PT1LJiYoSGo9QigpKzUwMCxmZyYmamcoKSl9fWZ1bmN0aW9uIFNrKGEpe251bGwhPT14ayYmMD09PXhrLnRhZyYmMD09PShLJjYpJiZJaygpO3ZhciBiPUs7S3w9MTt2YXIgYz1way50cmFuc2l0aW9uLGQ9Qzt0cnl7aWYocGsudHJhbnNpdGlvbj1udWxsLEM9MSxhKXJldHVybiBhKCl9ZmluYWxseXtDPWQscGsudHJhbnNpdGlvbj1jLEs9YiwwPT09KEsmNikmJmpnKCl9fWZ1bmN0aW9uIElqKCl7Z2o9ZmouY3VycmVudDtFKGZqKX1cbmZ1bmN0aW9uIExrKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLEdmKGMpKTtpZihudWxsIT09WSlmb3IoYz1ZLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7d2coZCk7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJiRmKCk7YnJlYWs7Y2FzZSAzOkpoKCk7RShXZik7RShIKTtPaCgpO2JyZWFrO2Nhc2UgNTpMaChkKTticmVhaztjYXNlIDQ6SmgoKTticmVhaztjYXNlIDEzOkUoTSk7YnJlYWs7Y2FzZSAxOTpFKE0pO2JyZWFrO2Nhc2UgMTA6UmcoZC50eXBlLl9jb250ZXh0KTticmVhaztjYXNlIDIyOmNhc2UgMjM6SWooKX1jPWMucmV0dXJufVI9YTtZPWE9d2goYS5jdXJyZW50LG51bGwpO1o9Z2o9YjtUPTA7cWs9bnVsbDtzaz1yaz1oaD0wO3VrPXRrPW51bGw7aWYobnVsbCE9PVdnKXtmb3IoYj1cbjA7YjxXZy5sZW5ndGg7YisrKWlmKGM9V2dbYl0sZD1jLmludGVybGVhdmVkLG51bGwhPT1kKXtjLmludGVybGVhdmVkPW51bGw7dmFyIGU9ZC5uZXh0LGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXt2YXIgZz1mLm5leHQ7Zi5uZXh0PWU7ZC5uZXh0PWd9Yy5wZW5kaW5nPWR9V2c9bnVsbH1yZXR1cm4gYX1cbmZ1bmN0aW9uIE5rKGEsYil7ZG97dmFyIGM9WTt0cnl7UWcoKTtQaC5jdXJyZW50PWFpO2lmKFNoKXtmb3IodmFyIGQ9Ti5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH1TaD0hMX1SaD0wO1A9Tz1OPW51bGw7VGg9ITE7VWg9MDtvay5jdXJyZW50PW51bGw7aWYobnVsbD09PWN8fG51bGw9PT1jLnJldHVybil7VD0xO3FrPWI7WT1udWxsO2JyZWFrfWE6e3ZhciBmPWEsZz1jLnJldHVybixoPWMsaz1iO2I9WjtoLmZsYWdzfD0zMjc2ODtpZihudWxsIT09ayYmXCJvYmplY3RcIj09PXR5cGVvZiBrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay50aGVuKXt2YXIgbD1rLG09aCxxPW0udGFnO2lmKDA9PT0obS5tb2RlJjEpJiYoMD09PXF8fDExPT09cXx8MTU9PT1xKSl7dmFyIHI9bS5hbHRlcm5hdGU7cj8obS51cGRhdGVRdWV1ZT1yLnVwZGF0ZVF1ZXVlLG0ubWVtb2l6ZWRTdGF0ZT1yLm1lbW9pemVkU3RhdGUsXG5tLmxhbmVzPXIubGFuZXMpOihtLnVwZGF0ZVF1ZXVlPW51bGwsbS5tZW1vaXplZFN0YXRlPW51bGwpfXZhciB5PVZpKGcpO2lmKG51bGwhPT15KXt5LmZsYWdzJj0tMjU3O1dpKHksZyxoLGYsYik7eS5tb2RlJjEmJlRpKGYsbCxiKTtiPXk7az1sO3ZhciBuPWIudXBkYXRlUXVldWU7aWYobnVsbD09PW4pe3ZhciB0PW5ldyBTZXQ7dC5hZGQoayk7Yi51cGRhdGVRdWV1ZT10fWVsc2Ugbi5hZGQoayk7YnJlYWsgYX1lbHNle2lmKDA9PT0oYiYxKSl7VGkoZixsLGIpO3VqKCk7YnJlYWsgYX1rPUVycm9yKHAoNDI2KSl9fWVsc2UgaWYoSSYmaC5tb2RlJjEpe3ZhciBKPVZpKGcpO2lmKG51bGwhPT1KKXswPT09KEouZmxhZ3MmNjU1MzYpJiYoSi5mbGFnc3w9MjU2KTtXaShKLGcsaCxmLGIpO0pnKEtpKGssaCkpO2JyZWFrIGF9fWY9az1LaShrLGgpOzQhPT1UJiYoVD0yKTtudWxsPT09dGs/dGs9W2ZdOnRrLnB1c2goZik7Zj1nO2Rve3N3aXRjaChmLnRhZyl7Y2FzZSAzOmYuZmxhZ3N8PTY1NTM2O1xuYiY9LWI7Zi5sYW5lc3w9Yjt2YXIgeD1PaShmLGssYik7ZmgoZix4KTticmVhayBhO2Nhc2UgMTpoPWs7dmFyIHc9Zi50eXBlLHU9Zi5zdGF0ZU5vZGU7aWYoMD09PShmLmZsYWdzJjEyOCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT11JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgdS5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1TaXx8IVNpLmhhcyh1KSkpKXtmLmZsYWdzfD02NTUzNjtiJj0tYjtmLmxhbmVzfD1iO3ZhciBGPVJpKGYsaCxiKTtmaChmLEYpO2JyZWFrIGF9fWY9Zi5yZXR1cm59d2hpbGUobnVsbCE9PWYpfVRrKGMpfWNhdGNoKG5hKXtiPW5hO1k9PT1jJiZudWxsIT09YyYmKFk9Yz1jLnJldHVybik7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9ZnVuY3Rpb24gS2soKXt2YXIgYT1uay5jdXJyZW50O25rLmN1cnJlbnQ9YWk7cmV0dXJuIG51bGw9PT1hP2FpOmF9XG5mdW5jdGlvbiB1aigpe2lmKDA9PT1UfHwzPT09VHx8Mj09PVQpVD00O251bGw9PT1SfHwwPT09KGhoJjI2ODQzNTQ1NSkmJjA9PT0ocmsmMjY4NDM1NDU1KXx8RGsoUixaKX1mdW5jdGlvbiBKayhhLGIpe3ZhciBjPUs7S3w9Mjt2YXIgZD1LaygpO2lmKFIhPT1hfHxaIT09Yil2az1udWxsLExrKGEsYik7ZG8gdHJ5e1VrKCk7YnJlYWt9Y2F0Y2goZSl7TmsoYSxlKX13aGlsZSgxKTtRZygpO0s9Yztuay5jdXJyZW50PWQ7aWYobnVsbCE9PVkpdGhyb3cgRXJyb3IocCgyNjEpKTtSPW51bGw7Wj0wO3JldHVybiBUfWZ1bmN0aW9uIFVrKCl7Zm9yKDtudWxsIT09WTspVmsoWSl9ZnVuY3Rpb24gTWsoKXtmb3IoO251bGwhPT1ZJiYhY2MoKTspVmsoWSl9ZnVuY3Rpb24gVmsoYSl7dmFyIGI9V2soYS5hbHRlcm5hdGUsYSxnaik7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iP1RrKGEpOlk9Yjtvay5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBUayhhKXt2YXIgYj1hO2Rve3ZhciBjPWIuYWx0ZXJuYXRlO2E9Yi5yZXR1cm47aWYoMD09PShiLmZsYWdzJjMyNzY4KSl7aWYoYz1GaihjLGIsZ2opLG51bGwhPT1jKXtZPWM7cmV0dXJufX1lbHNle2M9SmooYyxiKTtpZihudWxsIT09Yyl7Yy5mbGFncyY9MzI3Njc7WT1jO3JldHVybn1pZihudWxsIT09YSlhLmZsYWdzfD0zMjc2OCxhLnN1YnRyZWVGbGFncz0wLGEuZGVsZXRpb25zPW51bGw7ZWxzZXtUPTY7WT1udWxsO3JldHVybn19Yj1iLnNpYmxpbmc7aWYobnVsbCE9PWIpe1k9YjtyZXR1cm59WT1iPWF9d2hpbGUobnVsbCE9PWIpOzA9PT1UJiYoVD01KX1mdW5jdGlvbiBRayhhLGIsYyl7dmFyIGQ9QyxlPXBrLnRyYW5zaXRpb247dHJ5e3BrLnRyYW5zaXRpb249bnVsbCxDPTEsWGsoYSxiLGMsZCl9ZmluYWxseXtway50cmFuc2l0aW9uPWUsQz1kfXJldHVybiBudWxsfVxuZnVuY3Rpb24gWGsoYSxiLGMsZCl7ZG8gSWsoKTt3aGlsZShudWxsIT09eGspO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO2M9YS5maW5pc2hlZFdvcms7dmFyIGU9YS5maW5pc2hlZExhbmVzO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcihwKDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7YS5jYWxsYmFja1ByaW9yaXR5PTA7dmFyIGY9Yy5sYW5lc3xjLmNoaWxkTGFuZXM7QmMoYSxmKTthPT09UiYmKFk9Uj1udWxsLFo9MCk7MD09PShjLnN1YnRyZWVGbGFncyYyMDY0KSYmMD09PShjLmZsYWdzJjIwNjQpfHx3a3x8KHdrPSEwLEdrKGhjLGZ1bmN0aW9uKCl7SWsoKTtyZXR1cm4gbnVsbH0pKTtmPTAhPT0oYy5mbGFncyYxNTk5MCk7aWYoMCE9PShjLnN1YnRyZWVGbGFncyYxNTk5MCl8fGYpe2Y9cGsudHJhbnNpdGlvbjtway50cmFuc2l0aW9uPW51bGw7XG52YXIgZz1DO0M9MTt2YXIgaD1LO0t8PTQ7b2suY3VycmVudD1udWxsO1BqKGEsYyk7ZWsoYyxhKTtPZShEZik7ZGQ9ISFDZjtEZj1DZj1udWxsO2EuY3VycmVudD1jO2lrKGMsYSxlKTtkYygpO0s9aDtDPWc7cGsudHJhbnNpdGlvbj1mfWVsc2UgYS5jdXJyZW50PWM7d2smJih3az0hMSx4az1hLHlrPWUpO2Y9YS5wZW5kaW5nTGFuZXM7MD09PWYmJihTaT1udWxsKTttYyhjLnN0YXRlTm9kZSxkKTtFayhhLEIoKSk7aWYobnVsbCE9PWIpZm9yKGQ9YS5vblJlY292ZXJhYmxlRXJyb3IsYz0wO2M8Yi5sZW5ndGg7YysrKWU9YltjXSxkKGUudmFsdWUse2NvbXBvbmVudFN0YWNrOmUuc3RhY2ssZGlnZXN0OmUuZGlnZXN0fSk7aWYoUGkpdGhyb3cgUGk9ITEsYT1RaSxRaT1udWxsLGE7MCE9PSh5ayYxKSYmMCE9PWEudGFnJiZJaygpO2Y9YS5wZW5kaW5nTGFuZXM7MCE9PShmJjEpP2E9PT1Baz96aysrOih6az0wLEFrPWEpOnprPTA7amcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIElrKCl7aWYobnVsbCE9PXhrKXt2YXIgYT1EYyh5ayksYj1way50cmFuc2l0aW9uLGM9Qzt0cnl7cGsudHJhbnNpdGlvbj1udWxsO0M9MTY+YT8xNjphO2lmKG51bGw9PT14ayl2YXIgZD0hMTtlbHNle2E9eGs7eGs9bnVsbDt5az0wO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMzMSkpO3ZhciBlPUs7S3w9NDtmb3IoVj1hLmN1cnJlbnQ7bnVsbCE9PVY7KXt2YXIgZj1WLGc9Zi5jaGlsZDtpZigwIT09KFYuZmxhZ3MmMTYpKXt2YXIgaD1mLmRlbGV0aW9ucztpZihudWxsIT09aCl7Zm9yKHZhciBrPTA7azxoLmxlbmd0aDtrKyspe3ZhciBsPWhba107Zm9yKFY9bDtudWxsIT09Vjspe3ZhciBtPVY7c3dpdGNoKG0udGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlFqKDgsbSxmKX12YXIgcT1tLmNoaWxkO2lmKG51bGwhPT1xKXEucmV0dXJuPW0sVj1xO2Vsc2UgZm9yKDtudWxsIT09Vjspe209Vjt2YXIgcj1tLnNpYmxpbmcseT1tLnJldHVybjtUaihtKTtpZihtPT09XG5sKXtWPW51bGw7YnJlYWt9aWYobnVsbCE9PXIpe3IucmV0dXJuPXk7Vj1yO2JyZWFrfVY9eX19fXZhciBuPWYuYWx0ZXJuYXRlO2lmKG51bGwhPT1uKXt2YXIgdD1uLmNoaWxkO2lmKG51bGwhPT10KXtuLmNoaWxkPW51bGw7ZG97dmFyIEo9dC5zaWJsaW5nO3Quc2libGluZz1udWxsO3Q9Sn13aGlsZShudWxsIT09dCl9fVY9Zn19aWYoMCE9PShmLnN1YnRyZWVGbGFncyYyMDY0KSYmbnVsbCE9PWcpZy5yZXR1cm49ZixWPWc7ZWxzZSBiOmZvcig7bnVsbCE9PVY7KXtmPVY7aWYoMCE9PShmLmZsYWdzJjIwNDgpKXN3aXRjaChmLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpRaig5LGYsZi5yZXR1cm4pfXZhciB4PWYuc2libGluZztpZihudWxsIT09eCl7eC5yZXR1cm49Zi5yZXR1cm47Vj14O2JyZWFrIGJ9Vj1mLnJldHVybn19dmFyIHc9YS5jdXJyZW50O2ZvcihWPXc7bnVsbCE9PVY7KXtnPVY7dmFyIHU9Zy5jaGlsZDtpZigwIT09KGcuc3VidHJlZUZsYWdzJjIwNjQpJiZudWxsIT09XG51KXUucmV0dXJuPWcsVj11O2Vsc2UgYjpmb3IoZz13O251bGwhPT1WOyl7aD1WO2lmKDAhPT0oaC5mbGFncyYyMDQ4KSl0cnl7c3dpdGNoKGgudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlJqKDksaCl9fWNhdGNoKG5hKXtXKGgsaC5yZXR1cm4sbmEpfWlmKGg9PT1nKXtWPW51bGw7YnJlYWsgYn12YXIgRj1oLnNpYmxpbmc7aWYobnVsbCE9PUYpe0YucmV0dXJuPWgucmV0dXJuO1Y9RjticmVhayBifVY9aC5yZXR1cm59fUs9ZTtqZygpO2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Qb3N0Q29tbWl0RmliZXJSb290KXRyeXtsYy5vblBvc3RDb21taXRGaWJlclJvb3Qoa2MsYSl9Y2F0Y2gobmEpe31kPSEwfXJldHVybiBkfWZpbmFsbHl7Qz1jLHBrLnRyYW5zaXRpb249Yn19cmV0dXJuITF9ZnVuY3Rpb24gWWsoYSxiLGMpe2I9S2koYyxiKTtiPU9pKGEsYiwxKTthPWRoKGEsYiwxKTtiPUwoKTtudWxsIT09YSYmKEFjKGEsMSxiKSxFayhhLGIpKX1cbmZ1bmN0aW9uIFcoYSxiLGMpe2lmKDM9PT1hLnRhZylZayhhLGEsYyk7ZWxzZSBmb3IoO251bGwhPT1iOyl7aWYoMz09PWIudGFnKXtZayhiLGEsYyk7YnJlYWt9ZWxzZSBpZigxPT09Yi50YWcpe3ZhciBkPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1TaXx8IVNpLmhhcyhkKSkpe2E9S2koYyxhKTthPVJpKGIsYSwxKTtiPWRoKGIsYSwxKTthPUwoKTtudWxsIT09YiYmKEFjKGIsMSxhKSxFayhiLGEpKTticmVha319Yj1iLnJldHVybn19XG5mdW5jdGlvbiBVaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO2I9TCgpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmYztSPT09YSYmKFomYyk9PT1jJiYoND09PVR8fDM9PT1UJiYoWiYxMzAwMjM0MjQpPT09WiYmNTAwPkIoKS1naz9MayhhLDApOnNrfD1jKTtFayhhLGIpfWZ1bmN0aW9uIFprKGEsYil7MD09PWImJigwPT09KGEubW9kZSYxKT9iPTE6KGI9c2Msc2M8PD0xLDA9PT0oc2MmMTMwMDIzNDI0KSYmKHNjPTQxOTQzMDQpKSk7dmFyIGM9TCgpO2E9WmcoYSxiKTtudWxsIT09YSYmKEFjKGEsYixjKSxFayhhLGMpKX1mdW5jdGlvbiB2aihhKXt2YXIgYj1hLm1lbW9pemVkU3RhdGUsYz0wO251bGwhPT1iJiYoYz1iLnJldHJ5TGFuZSk7WmsoYSxjKX1cbmZ1bmN0aW9uIGNrKGEsYil7dmFyIGM9MDtzd2l0Y2goYS50YWcpe2Nhc2UgMTM6dmFyIGQ9YS5zdGF0ZU5vZGU7dmFyIGU9YS5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoYz1lLnJldHJ5TGFuZSk7YnJlYWs7Y2FzZSAxOTpkPWEuc3RhdGVOb2RlO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgzMTQpKTt9bnVsbCE9PWQmJmQuZGVsZXRlKGIpO1prKGEsYyl9dmFyIFdrO1xuV2s9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGwhPT1hKWlmKGEubWVtb2l6ZWRQcm9wcyE9PWIucGVuZGluZ1Byb3BzfHxXZi5jdXJyZW50KVVnPSEwO2Vsc2V7aWYoMD09PShhLmxhbmVzJmMpJiYwPT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gVWc9ITEsemooYSxiLGMpO1VnPTAhPT0oYS5mbGFncyYxMzEwNzIpPyEwOiExfWVsc2UgVWc9ITEsSSYmMCE9PShiLmZsYWdzJjEwNDg1NzYpJiZ1ZyhiLG5nLGIuaW5kZXgpO2IubGFuZXM9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjp2YXIgZD1iLnR5cGU7amooYSxiKTthPWIucGVuZGluZ1Byb3BzO3ZhciBlPVlmKGIsSC5jdXJyZW50KTtUZyhiLGMpO2U9WGgobnVsbCxiLGQsYSxlLGMpO3ZhciBmPWJpKCk7Yi5mbGFnc3w9MTtcIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Y/KGIudGFnPTEsYi5tZW1vaXplZFN0YXRlPW51bGwsYi51cGRhdGVRdWV1ZT1cbm51bGwsWmYoZCk/KGY9ITAsY2coYikpOmY9ITEsYi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbCxhaChiKSxlLnVwZGF0ZXI9bmgsYi5zdGF0ZU5vZGU9ZSxlLl9yZWFjdEludGVybmFscz1iLHJoKGIsZCxhLGMpLGI9a2oobnVsbCxiLGQsITAsZixjKSk6KGIudGFnPTAsSSYmZiYmdmcoYiksWWkobnVsbCxiLGUsYyksYj1iLmNoaWxkKTtyZXR1cm4gYjtjYXNlIDE2OmQ9Yi5lbGVtZW50VHlwZTthOntqaihhLGIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1kLl9pbml0O2Q9ZShkLl9wYXlsb2FkKTtiLnR5cGU9ZDtlPWIudGFnPSRrKGQpO2E9TGcoZCxhKTtzd2l0Y2goZSl7Y2FzZSAwOmI9ZGoobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTpiPWlqKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9WmkobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj1haihudWxsLGIsZCxMZyhkLnR5cGUsYSksYyk7YnJlYWsgYX10aHJvdyBFcnJvcihwKDMwNixcbmQsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksZGooYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksaWooYSxiLGQsZSxjKTtjYXNlIDM6YTp7bGooYik7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzODcpKTtkPWIucGVuZGluZ1Byb3BzO2Y9Yi5tZW1vaXplZFN0YXRlO2U9Zi5lbGVtZW50O2JoKGEsYik7Z2goYixkLG51bGwsYyk7dmFyIGc9Yi5tZW1vaXplZFN0YXRlO2Q9Zy5lbGVtZW50O2lmKGYuaXNEZWh5ZHJhdGVkKWlmKGY9e2VsZW1lbnQ6ZCxpc0RlaHlkcmF0ZWQ6ITEsY2FjaGU6Zy5jYWNoZSxwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzOmcucGVuZGluZ1N1c3BlbnNlQm91bmRhcmllcyx0cmFuc2l0aW9uczpnLnRyYW5zaXRpb25zfSxiLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1cbmYsYi5tZW1vaXplZFN0YXRlPWYsYi5mbGFncyYyNTYpe2U9S2koRXJyb3IocCg0MjMpKSxiKTtiPW1qKGEsYixkLGMsZSk7YnJlYWsgYX1lbHNlIGlmKGQhPT1lKXtlPUtpKEVycm9yKHAoNDI0KSksYik7Yj1taihhLGIsZCxjLGUpO2JyZWFrIGF9ZWxzZSBmb3IoeWc9TGYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSx4Zz1iLEk9ITAsemc9bnVsbCxjPUNoKGIsbnVsbCxkLGMpLGIuY2hpbGQ9YztjOyljLmZsYWdzPWMuZmxhZ3MmLTN8NDA5NixjPWMuc2libGluZztlbHNle0lnKCk7aWYoZD09PWUpe2I9JGkoYSxiLGMpO2JyZWFrIGF9WWkoYSxiLGQsYyl9Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gS2goYiksbnVsbD09PWEmJkVnKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxnPWUuY2hpbGRyZW4sRWYoZCxlKT9nPW51bGw6bnVsbCE9PWYmJkVmKGQsZikmJihiLmZsYWdzfD0zMiksXG5oaihhLGIpLFlpKGEsYixnLGMpLGIuY2hpbGQ7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmRWcoYiksbnVsbDtjYXNlIDEzOnJldHVybiBwaihhLGIsYyk7Y2FzZSA0OnJldHVybiBJaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1CaChiLG51bGwsZCxjKTpZaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksWmkoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFlpKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gWWkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gWWkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2Y9Yi5tZW1vaXplZFByb3BzO1xuZz1lLnZhbHVlO0coTWcsZC5fY3VycmVudFZhbHVlKTtkLl9jdXJyZW50VmFsdWU9ZztpZihudWxsIT09ZilpZihIZShmLnZhbHVlLGcpKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIVdmLmN1cnJlbnQpe2I9JGkoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGY9Yi5jaGlsZCxudWxsIT09ZiYmKGYucmV0dXJuPWIpO251bGwhPT1mOyl7dmFyIGg9Zi5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PWgpe2c9Zi5jaGlsZDtmb3IodmFyIGs9aC5maXJzdENvbnRleHQ7bnVsbCE9PWs7KXtpZihrLmNvbnRleHQ9PT1kKXtpZigxPT09Zi50YWcpe2s9Y2goLTEsYyYtYyk7ay50YWc9Mjt2YXIgbD1mLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1sKXtsPWwuc2hhcmVkO3ZhciBtPWwucGVuZGluZztudWxsPT09bT9rLm5leHQ9azooay5uZXh0PW0ubmV4dCxtLm5leHQ9ayk7bC5wZW5kaW5nPWt9fWYubGFuZXN8PWM7az1mLmFsdGVybmF0ZTtudWxsIT09ayYmKGsubGFuZXN8PWMpO1NnKGYucmV0dXJuLFxuYyxiKTtoLmxhbmVzfD1jO2JyZWFrfWs9ay5uZXh0fX1lbHNlIGlmKDEwPT09Zi50YWcpZz1mLnR5cGU9PT1iLnR5cGU/bnVsbDpmLmNoaWxkO2Vsc2UgaWYoMTg9PT1mLnRhZyl7Zz1mLnJldHVybjtpZihudWxsPT09Zyl0aHJvdyBFcnJvcihwKDM0MSkpO2cubGFuZXN8PWM7aD1nLmFsdGVybmF0ZTtudWxsIT09aCYmKGgubGFuZXN8PWMpO1NnKGcsYyxiKTtnPWYuc2libGluZ31lbHNlIGc9Zi5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1mO2Vsc2UgZm9yKGc9ZjtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9Zj1nLnNpYmxpbmc7aWYobnVsbCE9PWYpe2YucmV0dXJuPWcucmV0dXJuO2c9ZjticmVha31nPWcucmV0dXJufWY9Z31ZaShhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxkPWIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFRnKGIsYyksZT1WZyhlKSxkPWQoZSksYi5mbGFnc3w9MSxZaShhLGIsZCxjKSxcbmIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZD1iLnR5cGUsZT1MZyhkLGIucGVuZGluZ1Byb3BzKSxlPUxnKGQudHlwZSxlKSxhaihhLGIsZCxlLGMpO2Nhc2UgMTU6cmV0dXJuIGNqKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TGcoZCxlKSxqaihhLGIpLGIudGFnPTEsWmYoZCk/KGE9ITAsY2coYikpOmE9ITEsVGcoYixjKSxwaChiLGQsZSkscmgoYixkLGUsYyksa2oobnVsbCxiLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiB5aihhLGIsYyk7Y2FzZSAyMjpyZXR1cm4gZWooYSxiLGMpfXRocm93IEVycm9yKHAoMTU2LGIudGFnKSk7fTtmdW5jdGlvbiBHayhhLGIpe3JldHVybiBhYyhhLGIpfVxuZnVuY3Rpb24gYWwoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLnN1YnRyZWVGbGFncz10aGlzLmZsYWdzPTA7dGhpcy5kZWxldGlvbnM9bnVsbDt0aGlzLmNoaWxkTGFuZXM9dGhpcy5sYW5lcz0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gQmcoYSxiLGMsZCl7cmV0dXJuIG5ldyBhbChhLGIsYyxkKX1mdW5jdGlvbiBiaihhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfVxuZnVuY3Rpb24gJGsoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGJqKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1EYSlyZXR1cm4gMTE7aWYoYT09PUdhKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIHdoKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9QmcoYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy50eXBlPWEudHlwZSxjLmZsYWdzPTAsYy5zdWJ0cmVlRmxhZ3M9MCxjLmRlbGV0aW9ucz1udWxsKTtjLmZsYWdzPWEuZmxhZ3MmMTQ2ODAwNjQ7Yy5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcztjLmxhbmVzPWEubGFuZXM7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntsYW5lczpiLmxhbmVzLGZpcnN0Q29udGV4dDpiLmZpcnN0Q29udGV4dH07XG5jLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIHloKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSliaihhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSB5YTpyZXR1cm4gQWgoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSB6YTpnPTg7ZXw9ODticmVhaztjYXNlIEFhOnJldHVybiBhPUJnKDEyLGMsYixlfDIpLGEuZWxlbWVudFR5cGU9QWEsYS5sYW5lcz1mLGE7Y2FzZSBFYTpyZXR1cm4gYT1CZygxMyxjLGIsZSksYS5lbGVtZW50VHlwZT1FYSxhLmxhbmVzPWYsYTtjYXNlIEZhOnJldHVybiBhPUJnKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPUZhLGEubGFuZXM9ZixhO2Nhc2UgSWE6cmV0dXJuIHFqKGMsZSxmLGIpO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBCYTpnPTEwO2JyZWFrIGE7Y2FzZSBDYTpnPTk7YnJlYWsgYTtjYXNlIERhOmc9MTE7XG5icmVhayBhO2Nhc2UgR2E6Zz0xNDticmVhayBhO2Nhc2UgSGE6Zz0xNjtkPW51bGw7YnJlYWsgYX10aHJvdyBFcnJvcihwKDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPUJnKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmxhbmVzPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gQWgoYSxiLGMsZCl7YT1CZyg3LGEsZCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gcWooYSxiLGMsZCl7YT1CZygyMixhLGQsYik7YS5lbGVtZW50VHlwZT1JYTthLmxhbmVzPWM7YS5zdGF0ZU5vZGU9e2lzSGlkZGVuOiExfTtyZXR1cm4gYX1mdW5jdGlvbiB4aChhLGIsYyl7YT1CZyg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiB6aChhLGIsYyl7Yj1CZyg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGJsKGEsYixjLGQsZSl7dGhpcy50YWc9Yjt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLmZpbmlzaGVkV29yaz10aGlzLnBpbmdDYWNoZT10aGlzLmN1cnJlbnQ9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5jYWxsYmFja05vZGU9dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9MDt0aGlzLmV2ZW50VGltZXM9emMoMCk7dGhpcy5leHBpcmF0aW9uVGltZXM9emMoLTEpO3RoaXMuZW50YW5nbGVkTGFuZXM9dGhpcy5maW5pc2hlZExhbmVzPXRoaXMubXV0YWJsZVJlYWRMYW5lcz10aGlzLmV4cGlyZWRMYW5lcz10aGlzLnBpbmdlZExhbmVzPXRoaXMuc3VzcGVuZGVkTGFuZXM9dGhpcy5wZW5kaW5nTGFuZXM9MDt0aGlzLmVudGFuZ2xlbWVudHM9emMoMCk7dGhpcy5pZGVudGlmaWVyUHJlZml4PWQ7dGhpcy5vblJlY292ZXJhYmxlRXJyb3I9ZTt0aGlzLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9XG5udWxsfWZ1bmN0aW9uIGNsKGEsYixjLGQsZSxmLGcsaCxrKXthPW5ldyBibChhLGIsYyxoLGspOzE9PT1iPyhiPTEsITA9PT1mJiYoYnw9OCkpOmI9MDtmPUJnKDMsbnVsbCxudWxsLGIpO2EuY3VycmVudD1mO2Yuc3RhdGVOb2RlPWE7Zi5tZW1vaXplZFN0YXRlPXtlbGVtZW50OmQsaXNEZWh5ZHJhdGVkOmMsY2FjaGU6bnVsbCx0cmFuc2l0aW9uczpudWxsLHBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXM6bnVsbH07YWgoZik7cmV0dXJuIGF9ZnVuY3Rpb24gZGwoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjp3YSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmZ1bmN0aW9uIGVsKGEpe2lmKCFhKXJldHVybiBWZjthPWEuX3JlYWN0SW50ZXJuYWxzO2E6e2lmKFZiKGEpIT09YXx8MSE9PWEudGFnKXRocm93IEVycm9yKHAoMTcwKSk7dmFyIGI9YTtkb3tzd2l0Y2goYi50YWcpe2Nhc2UgMzpiPWIuc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYTtjYXNlIDE6aWYoWmYoYi50eXBlKSl7Yj1iLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBhfX1iPWIucmV0dXJufXdoaWxlKG51bGwhPT1iKTt0aHJvdyBFcnJvcihwKDE3MSkpO31pZigxPT09YS50YWcpe3ZhciBjPWEudHlwZTtpZihaZihjKSlyZXR1cm4gYmcoYSxjLGIpfXJldHVybiBifVxuZnVuY3Rpb24gZmwoYSxiLGMsZCxlLGYsZyxoLGspe2E9Y2woYyxkLCEwLGEsZSxmLGcsaCxrKTthLmNvbnRleHQ9ZWwobnVsbCk7Yz1hLmN1cnJlbnQ7ZD1MKCk7ZT1saChjKTtmPWNoKGQsZSk7Zi5jYWxsYmFjaz12b2lkIDAhPT1iJiZudWxsIT09Yj9iOm51bGw7ZGgoYyxmLGUpO2EuY3VycmVudC5sYW5lcz1lO0FjKGEsZSxkKTtFayhhLGQpO3JldHVybiBhfWZ1bmN0aW9uIGdsKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUwoKSxnPWxoKGUpO2M9ZWwoYyk7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1jaChmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PWQ/bnVsbDpkO251bGwhPT1kJiYoYi5jYWxsYmFjaz1kKTthPWRoKGUsYixnKTtudWxsIT09YSYmKG1oKGEsZSxnLGYpLGVoKGEsZSxnKSk7cmV0dXJuIGd9XG5mdW5jdGlvbiBobChhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIGlsKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBqbChhLGIpe2lsKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZpbChhLGIpfWZ1bmN0aW9uIGtsKCl7cmV0dXJuIG51bGx9dmFyIGxsPVwiZnVuY3Rpb25cIj09PXR5cGVvZiByZXBvcnRFcnJvcj9yZXBvcnRFcnJvcjpmdW5jdGlvbihhKXtjb25zb2xlLmVycm9yKGEpfTtmdW5jdGlvbiBtbChhKXt0aGlzLl9pbnRlcm5hbFJvb3Q9YX1cbm5sLnByb3RvdHlwZS5yZW5kZXI9bWwucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3Q7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IocCg0MDkpKTtnbChhLGIsbnVsbCxudWxsKX07bmwucHJvdG90eXBlLnVubW91bnQ9bWwucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9pbnRlcm5hbFJvb3Q7aWYobnVsbCE9PWEpe3RoaXMuX2ludGVybmFsUm9vdD1udWxsO3ZhciBiPWEuY29udGFpbmVySW5mbztTayhmdW5jdGlvbigpe2dsKG51bGwsYSxudWxsLG51bGwpfSk7Ylt1Zl09bnVsbH19O2Z1bmN0aW9uIG5sKGEpe3RoaXMuX2ludGVybmFsUm9vdD1hfVxubmwucHJvdG90eXBlLnVuc3RhYmxlX3NjaGVkdWxlSHlkcmF0aW9uPWZ1bmN0aW9uKGEpe2lmKGEpe3ZhciBiPUhjKCk7YT17YmxvY2tlZE9uOm51bGwsdGFyZ2V0OmEscHJpb3JpdHk6Yn07Zm9yKHZhciBjPTA7YzxRYy5sZW5ndGgmJjAhPT1iJiZiPFFjW2NdLnByaW9yaXR5O2MrKyk7UWMuc3BsaWNlKGMsMCxhKTswPT09YyYmVmMoYSl9fTtmdW5jdGlvbiBvbChhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSl9ZnVuY3Rpb24gcGwoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfWZ1bmN0aW9uIHFsKCl7fVxuZnVuY3Rpb24gcmwoYSxiLGMsZCxlKXtpZihlKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGY9ZDtkPWZ1bmN0aW9uKCl7dmFyIGE9aGwoZyk7Zi5jYWxsKGEpfX12YXIgZz1mbChiLGQsYSwwLG51bGwsITEsITEsXCJcIixxbCk7YS5fcmVhY3RSb290Q29udGFpbmVyPWc7YVt1Zl09Zy5jdXJyZW50O3NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtTaygpO3JldHVybiBnfWZvcig7ZT1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChlKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGg9ZDtkPWZ1bmN0aW9uKCl7dmFyIGE9aGwoayk7aC5jYWxsKGEpfX12YXIgaz1jbChhLDAsITEsbnVsbCxudWxsLCExLCExLFwiXCIscWwpO2EuX3JlYWN0Um9vdENvbnRhaW5lcj1rO2FbdWZdPWsuY3VycmVudDtzZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7U2soZnVuY3Rpb24oKXtnbChiLGssYyxkKX0pO3JldHVybiBrfVxuZnVuY3Rpb24gc2woYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9ZjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9aGwoZyk7aC5jYWxsKGEpfX1nbChiLGcsYSxlKX1lbHNlIGc9cmwoYyxiLGEsZSxkKTtyZXR1cm4gaGwoZyl9RWM9ZnVuY3Rpb24oYSl7c3dpdGNoKGEudGFnKXtjYXNlIDM6dmFyIGI9YS5zdGF0ZU5vZGU7aWYoYi5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXt2YXIgYz10YyhiLnBlbmRpbmdMYW5lcyk7MCE9PWMmJihDYyhiLGN8MSksRWsoYixCKCkpLDA9PT0oSyY2KSYmKEhqPUIoKSs1MDAsamcoKSkpfWJyZWFrO2Nhc2UgMTM6U2soZnVuY3Rpb24oKXt2YXIgYj1aZyhhLDEpO2lmKG51bGwhPT1iKXt2YXIgYz1MKCk7bWgoYixhLDEsYyl9fSksamwoYSwxKX19O1xuRmM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9WmcoYSwxMzQyMTc3MjgpO2lmKG51bGwhPT1iKXt2YXIgYz1MKCk7bWgoYixhLDEzNDIxNzcyOCxjKX1qbChhLDEzNDIxNzcyOCl9fTtHYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1saChhKSxjPVpnKGEsYik7aWYobnVsbCE9PWMpe3ZhciBkPUwoKTttaChjLGEsYixkKX1qbChhLGIpfX07SGM9ZnVuY3Rpb24oKXtyZXR1cm4gQ307SWM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1DO3RyeXtyZXR1cm4gQz1hLGIoKX1maW5hbGx5e0M9Y319O1xueWI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpiYihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9RGIoZCk7aWYoIWUpdGhyb3cgRXJyb3IocCg5MCkpO1dhKGQpO2JiKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmZmIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtHYj1SaztIYj1TaztcbnZhciB0bD17dXNpbmdDbGllbnRFbnRyeVBvaW50OiExLEV2ZW50czpbQ2IsdWUsRGIsRWIsRmIsUmtdfSx1bD17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6V2MsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxOC4yLjBcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHZsPXtidW5kbGVUeXBlOnVsLmJ1bmRsZVR5cGUsdmVyc2lvbjp1bC52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6dWwucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzp1bC5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0RXJyb3JIYW5kbGVyOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjp1YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9WmIoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOnVsLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbmtsLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGwscmVjb25jaWxlclZlcnNpb246XCIxOC4yLjAtbmV4dC05ZTNiNzcyYjgtMjAyMjA2MDhcIn07aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pe3ZhciB3bD1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoIXdsLmlzRGlzYWJsZWQmJndsLnN1cHBvcnRzRmliZXIpdHJ5e2tjPXdsLmluamVjdCh2bCksbGM9d2x9Y2F0Y2goYSl7fX1leHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPXRsO1xuZXhwb3J0cy5jcmVhdGVQb3J0YWw9ZnVuY3Rpb24oYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZighb2woYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gZGwoYSxiLG51bGwsYyl9O2V4cG9ydHMuY3JlYXRlUm9vdD1mdW5jdGlvbihhLGIpe2lmKCFvbChhKSl0aHJvdyBFcnJvcihwKDI5OSkpO3ZhciBjPSExLGQ9XCJcIixlPWxsO251bGwhPT1iJiZ2b2lkIDAhPT1iJiYoITA9PT1iLnVuc3RhYmxlX3N0cmljdE1vZGUmJihjPSEwKSx2b2lkIDAhPT1iLmlkZW50aWZpZXJQcmVmaXgmJihkPWIuaWRlbnRpZmllclByZWZpeCksdm9pZCAwIT09Yi5vblJlY292ZXJhYmxlRXJyb3ImJihlPWIub25SZWNvdmVyYWJsZUVycm9yKSk7Yj1jbChhLDEsITEsbnVsbCxudWxsLGMsITEsZCxlKTthW3VmXT1iLmN1cnJlbnQ7c2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO3JldHVybiBuZXcgbWwoYil9O1xuZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxzO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcihwKDE4OCkpO2E9T2JqZWN0LmtleXMoYSkuam9pbihcIixcIik7dGhyb3cgRXJyb3IocCgyNjgsYSkpO31hPVpiKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSl7cmV0dXJuIFNrKGEpfTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFwbChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBzbChudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLmh5ZHJhdGVSb290PWZ1bmN0aW9uKGEsYixjKXtpZighb2woYSkpdGhyb3cgRXJyb3IocCg0MDUpKTt2YXIgZD1udWxsIT1jJiZjLmh5ZHJhdGVkU291cmNlc3x8bnVsbCxlPSExLGY9XCJcIixnPWxsO251bGwhPT1jJiZ2b2lkIDAhPT1jJiYoITA9PT1jLnVuc3RhYmxlX3N0cmljdE1vZGUmJihlPSEwKSx2b2lkIDAhPT1jLmlkZW50aWZpZXJQcmVmaXgmJihmPWMuaWRlbnRpZmllclByZWZpeCksdm9pZCAwIT09Yy5vblJlY292ZXJhYmxlRXJyb3ImJihnPWMub25SZWNvdmVyYWJsZUVycm9yKSk7Yj1mbChiLG51bGwsYSwxLG51bGwhPWM/YzpudWxsLGUsITEsZixnKTthW3VmXT1iLmN1cnJlbnQ7c2YoYSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKWM9ZFthXSxlPWMuX2dldFZlcnNpb24sZT1lKGMuX3NvdXJjZSksbnVsbD09Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhP2IubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1bYyxlXTpiLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEucHVzaChjLFxuZSk7cmV0dXJuIG5ldyBubChiKX07ZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFwbChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBzbChudWxsLGEsYiwhMSxjKX07ZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFwbChhKSl0aHJvdyBFcnJvcihwKDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oU2soZnVuY3Rpb24oKXtzbChudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbdWZdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1SaztcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIXBsKGMpKXRocm93IEVycm9yKHAoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbHMpdGhyb3cgRXJyb3IocCgzOCkpO3JldHVybiBzbChhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTguMi4wLW5leHQtOWUzYjc3MmI4LTIwMjIwNjA4XCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGI9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksYz1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLGQ9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLGU9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLGY9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLGc9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLGg9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksaz1TeW1ib2wuZm9yKFwicmVhY3Quc2VydmVyX2NvbnRleHRcIiksbD1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksbT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIiksbj1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKSxwPVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLHE9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIiksdD1TeW1ib2wuZm9yKFwicmVhY3Qub2Zmc2NyZWVuXCIpLHU7dT1TeW1ib2wuZm9yKFwicmVhY3QubW9kdWxlLnJlZmVyZW5jZVwiKTtcbmZ1bmN0aW9uIHYoYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHI9YS4kJHR5cGVvZjtzd2l0Y2gocil7Y2FzZSBiOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGQ6Y2FzZSBmOmNhc2UgZTpjYXNlIG06Y2FzZSBuOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBoOmNhc2UgbDpjYXNlIHE6Y2FzZSBwOmNhc2UgZzpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiByfX1jYXNlIGM6cmV0dXJuIHJ9fX1leHBvcnRzLkNvbnRleHRDb25zdW1lcj1oO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWc7ZXhwb3J0cy5FbGVtZW50PWI7ZXhwb3J0cy5Gb3J3YXJkUmVmPWw7ZXhwb3J0cy5GcmFnbWVudD1kO2V4cG9ydHMuTGF6eT1xO2V4cG9ydHMuTWVtbz1wO2V4cG9ydHMuUG9ydGFsPWM7ZXhwb3J0cy5Qcm9maWxlcj1mO2V4cG9ydHMuU3RyaWN0TW9kZT1lO2V4cG9ydHMuU3VzcGVuc2U9bTtcbmV4cG9ydHMuU3VzcGVuc2VMaXN0PW47ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbigpe3JldHVybiExfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9ZnVuY3Rpb24oKXtyZXR1cm4hMX07ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWh9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1nfTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Yn07ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1sfTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1kfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PXF9O2V4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09cH07XG5leHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09Y307ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09Zn07ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1lfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1tfTtleHBvcnRzLmlzU3VzcGVuc2VMaXN0PWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09bn07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZHx8YT09PWZ8fGE9PT1lfHxhPT09bXx8YT09PW58fGE9PT10fHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXF8fGEuJCR0eXBlb2Y9PT1wfHxhLiQkdHlwZW9mPT09Z3x8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1sfHxhLiQkdHlwZW9mPT09dXx8dm9pZCAwIT09YS5nZXRNb2R1bGVJZCk/ITA6ITF9O2V4cG9ydHMudHlwZU9mPXY7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgbD1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSxuPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIikscD1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIikscT1TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIikscj1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksdD1TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksdT1TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSx2PVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSx3PVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSx4PVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLHk9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIiksej1TeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gQShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9eiYmYVt6XXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxudmFyIEI9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEM9T2JqZWN0LmFzc2lnbixEPXt9O2Z1bmN0aW9uIEUoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZXx8Qn1FLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O1xuRS5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKFwic2V0U3RhdGUoLi4uKTogdGFrZXMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcyB0byB1cGRhdGUgb3IgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMuXCIpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RS5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRigpe31GLnByb3RvdHlwZT1FLnByb3RvdHlwZTtmdW5jdGlvbiBHKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWV8fEJ9dmFyIEg9Ry5wcm90b3R5cGU9bmV3IEY7XG5ILmNvbnN0cnVjdG9yPUc7QyhILEUucHJvdG90eXBlKTtILmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBJPUFycmF5LmlzQXJyYXksSj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEs9e2N1cnJlbnQ6bnVsbH0sTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsZSl7dmFyIGQsYz17fSxrPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGQgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGs9XCJcIitiLmtleSksYilKLmNhbGwoYixkKSYmIUwuaGFzT3duUHJvcGVydHkoZCkmJihjW2RdPWJbZF0pO3ZhciBnPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZyljLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGcpe2Zvcih2YXIgZj1BcnJheShnKSxtPTA7bTxnO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2MuY2hpbGRyZW49Zn1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZCBpbiBnPWEuZGVmYXVsdFByb3BzLGcpdm9pZCAwPT09Y1tkXSYmKGNbZF09Z1tkXSk7cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLGtleTprLHJlZjpoLHByb3BzOmMsX293bmVyOksuY3VycmVudH19XG5mdW5jdGlvbiBOKGEsYil7cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBPKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1sfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrYS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgUD0vXFwvKy9nO2Z1bmN0aW9uIFEoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoXCJcIithLmtleSk6Yi50b1N0cmluZygzNil9XG5mdW5jdGlvbiBSKGEsYixlLGQsYyl7dmFyIGs9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWt8fFwiYm9vbGVhblwiPT09aylhPW51bGw7dmFyIGg9ITE7aWYobnVsbD09PWEpaD0hMDtlbHNlIHN3aXRjaChrKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmg9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGw6Y2FzZSBuOmg9ITB9fWlmKGgpcmV0dXJuIGg9YSxjPWMoaCksYT1cIlwiPT09ZD9cIi5cIitRKGgsMCk6ZCxJKGMpPyhlPVwiXCIsbnVsbCE9YSYmKGU9YS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpLFIoYyxiLGUsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYX0pKTpudWxsIT1jJiYoTyhjKSYmKGM9TihjLGUrKCFjLmtleXx8aCYmaC5rZXk9PT1jLmtleT9cIlwiOihcIlwiK2Mua2V5KS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpK2EpKSxiLnB1c2goYykpLDE7aD0wO2Q9XCJcIj09PWQ/XCIuXCI6ZCtcIjpcIjtpZihJKGEpKWZvcih2YXIgZz0wO2c8YS5sZW5ndGg7ZysrKXtrPVxuYVtnXTt2YXIgZj1kK1EoayxnKTtoKz1SKGssYixlLGYsYyl9ZWxzZSBpZihmPUEoYSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGc9MDshKGs9YS5uZXh0KCkpLmRvbmU7KWs9ay52YWx1ZSxmPWQrUShrLGcrKyksaCs9UihrLGIsZSxmLGMpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWspdGhyb3cgYj1TdHJpbmcoYSksRXJyb3IoXCJPYmplY3RzIGFyZSBub3QgdmFsaWQgYXMgYSBSZWFjdCBjaGlsZCAoZm91bmQ6IFwiKyhcIltvYmplY3QgT2JqZWN0XVwiPT09Yj9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpiKStcIikuIElmIHlvdSBtZWFudCB0byByZW5kZXIgYSBjb2xsZWN0aW9uIG9mIGNoaWxkcmVuLCB1c2UgYW4gYXJyYXkgaW5zdGVhZC5cIik7cmV0dXJuIGh9XG5mdW5jdGlvbiBTKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBkPVtdLGM9MDtSKGEsZCxcIlwiLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGIuY2FsbChlLGEsYysrKX0pO3JldHVybiBkfWZ1bmN0aW9uIFQoYSl7aWYoLTE9PT1hLl9zdGF0dXMpe3ZhciBiPWEuX3Jlc3VsdDtiPWIoKTtiLnRoZW4oZnVuY3Rpb24oYil7aWYoMD09PWEuX3N0YXR1c3x8LTE9PT1hLl9zdGF0dXMpYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWJ9LGZ1bmN0aW9uKGIpe2lmKDA9PT1hLl9zdGF0dXN8fC0xPT09YS5fc3RhdHVzKWEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1ifSk7LTE9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MCxhLl9yZXN1bHQ9Yil9aWYoMT09PWEuX3N0YXR1cylyZXR1cm4gYS5fcmVzdWx0LmRlZmF1bHQ7dGhyb3cgYS5fcmVzdWx0O31cbnZhciBVPXtjdXJyZW50Om51bGx9LFY9e3RyYW5zaXRpb246bnVsbH0sVz17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpVLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOlYsUmVhY3RDdXJyZW50T3duZXI6S307ZXhwb3J0cy5DaGlsZHJlbj17bWFwOlMsZm9yRWFjaDpmdW5jdGlvbihhLGIsZSl7UyhhLGZ1bmN0aW9uKCl7Yi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGUpfSxjb3VudDpmdW5jdGlvbihhKXt2YXIgYj0wO1MoYSxmdW5jdGlvbigpe2IrK30pO3JldHVybiBifSx0b0FycmF5OmZ1bmN0aW9uKGEpe3JldHVybiBTKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KXx8W119LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIU8oYSkpdGhyb3cgRXJyb3IoXCJSZWFjdC5DaGlsZHJlbi5vbmx5IGV4cGVjdGVkIHRvIHJlY2VpdmUgYSBzaW5nbGUgUmVhY3QgZWxlbWVudCBjaGlsZC5cIik7cmV0dXJuIGF9fTtleHBvcnRzLkNvbXBvbmVudD1FO2V4cG9ydHMuRnJhZ21lbnQ9cDtcbmV4cG9ydHMuUHJvZmlsZXI9cjtleHBvcnRzLlB1cmVDb21wb25lbnQ9RztleHBvcnRzLlN0cmljdE1vZGU9cTtleHBvcnRzLlN1c3BlbnNlPXc7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1XO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKFwiUmVhY3QuY2xvbmVFbGVtZW50KC4uLik6IFRoZSBhcmd1bWVudCBtdXN0IGJlIGEgUmVhY3QgZWxlbWVudCwgYnV0IHlvdSBwYXNzZWQgXCIrYStcIi5cIik7dmFyIGQ9Qyh7fSxhLnByb3BzKSxjPWEua2V5LGs9YS5yZWYsaD1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYsaD1LLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoYz1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGc9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoZiBpbiBiKUouY2FsbChiLGYpJiYhTC5oYXNPd25Qcm9wZXJ0eShmKSYmKGRbZl09dm9pZCAwPT09YltmXSYmdm9pZCAwIT09Zz9nW2ZdOmJbZl0pfXZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGYpe2c9QXJyYXkoZik7XG5mb3IodmFyIG09MDttPGY7bSsrKWdbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1nfXJldHVybnskJHR5cGVvZjpsLHR5cGU6YS50eXBlLGtleTpjLHJlZjprLHByb3BzOmQsX293bmVyOmh9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSl7YT17JCR0eXBlb2Y6dSxfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGwsX2RlZmF1bHRWYWx1ZTpudWxsLF9nbG9iYWxOYW1lOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnQsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PU07ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtcbmV4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dixyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TztleHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnksX3BheWxvYWQ6e19zdGF0dXM6LTEsX3Jlc3VsdDphfSxfaW5pdDpUfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOngsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnN0YXJ0VHJhbnNpdGlvbj1mdW5jdGlvbihhKXt2YXIgYj1WLnRyYW5zaXRpb247Vi50cmFuc2l0aW9uPXt9O3RyeXthKCl9ZmluYWxseXtWLnRyYW5zaXRpb249Yn19O2V4cG9ydHMudW5zdGFibGVfYWN0PWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoXCJhY3QoLi4uKSBpcyBub3Qgc3VwcG9ydGVkIGluIHByb2R1Y3Rpb24gYnVpbGRzIG9mIFJlYWN0LlwiKTt9O1xuZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlQ29udGV4dChhKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZURlZmVycmVkVmFsdWU9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VEZWZlcnJlZFZhbHVlKGEpfTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSWQ9ZnVuY3Rpb24oKXtyZXR1cm4gVS5jdXJyZW50LnVzZUlkKCl9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixlKX07XG5leHBvcnRzLnVzZUluc2VydGlvbkVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlSW5zZXJ0aW9uRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VMYXlvdXRFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VSZWR1Y2VyKGEsYixlKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VTdGF0ZShhKX07ZXhwb3J0cy51c2VTeW5jRXh0ZXJuYWxTdG9yZT1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VTeW5jRXh0ZXJuYWxTdG9yZShhLGIsZSl9O1xuZXhwb3J0cy51c2VUcmFuc2l0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIFUuY3VycmVudC51c2VUcmFuc2l0aW9uKCl9O2V4cG9ydHMudmVyc2lvbj1cIjE4LjIuMFwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO2Z1bmN0aW9uIGYoYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzA8Yzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKDA8ZyhlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gaChhKXtyZXR1cm4gMD09PWEubGVuZ3RoP251bGw6YVswXX1mdW5jdGlvbiBrKGEpe2lmKDA9PT1hLmxlbmd0aClyZXR1cm4gbnVsbDt2YXIgYj1hWzBdLGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aCx3PWU+Pj4xO2Q8dzspe3ZhciBtPTIqKGQrMSktMSxDPWFbbV0sbj1tKzEseD1hW25dO2lmKDA+ZyhDLGMpKW48ZSYmMD5nKHgsQyk/KGFbZF09eCxhW25dPWMsZD1uKTooYVtkXT1DLGFbbV09YyxkPW0pO2Vsc2UgaWYobjxlJiYwPmcoeCxjKSlhW2RdPXgsYVtuXT1jLGQ9bjtlbHNlIGJyZWFrIGF9fXJldHVybiBifVxuZnVuY3Rpb24gZyhhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH1pZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19dmFyIHI9W10sdD1bXSx1PTEsdj1udWxsLHk9Myx6PSExLEE9ITEsQj0hMSxEPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6bnVsbCxFPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0Om51bGwsRj1cInVuZGVmaW5lZFwiIT09dHlwZW9mIHNldEltbWVkaWF0ZT9zZXRJbW1lZGlhdGU6bnVsbDtcblwidW5kZWZpbmVkXCIhPT10eXBlb2YgbmF2aWdhdG9yJiZ2b2lkIDAhPT1uYXZpZ2F0b3Iuc2NoZWR1bGluZyYmdm9pZCAwIT09bmF2aWdhdG9yLnNjaGVkdWxpbmcuaXNJbnB1dFBlbmRpbmcmJm5hdmlnYXRvci5zY2hlZHVsaW5nLmlzSW5wdXRQZW5kaW5nLmJpbmQobmF2aWdhdG9yLnNjaGVkdWxpbmcpO2Z1bmN0aW9uIEcoYSl7Zm9yKHZhciBiPWgodCk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylrKHQpO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpayh0KSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLGYocixiKTtlbHNlIGJyZWFrO2I9aCh0KX19ZnVuY3Rpb24gSChhKXtCPSExO0coYSk7aWYoIUEpaWYobnVsbCE9PWgocikpQT0hMCxJKEopO2Vsc2V7dmFyIGI9aCh0KTtudWxsIT09YiYmSyhILGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIEooYSxiKXtBPSExO0ImJihCPSExLEUoTCksTD0tMSk7ej0hMDt2YXIgYz15O3RyeXtHKGIpO2Zvcih2PWgocik7bnVsbCE9PXYmJighKHYuZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFNKCkpOyl7dmFyIGQ9di5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7di5jYWxsYmFjaz1udWxsO3k9di5wcmlvcml0eUxldmVsO3ZhciBlPWQodi5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP3YuY2FsbGJhY2s9ZTp2PT09aChyKSYmayhyKTtHKGIpfWVsc2UgayhyKTt2PWgocil9aWYobnVsbCE9PXYpdmFyIHc9ITA7ZWxzZXt2YXIgbT1oKHQpO251bGwhPT1tJiZLKEgsbS5zdGFydFRpbWUtYik7dz0hMX1yZXR1cm4gd31maW5hbGx5e3Y9bnVsbCx5PWMsej0hMX19dmFyIE49ITEsTz1udWxsLEw9LTEsUD01LFE9LTE7XG5mdW5jdGlvbiBNKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCktUTxQPyExOiEwfWZ1bmN0aW9uIFIoKXtpZihudWxsIT09Tyl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtRPWE7dmFyIGI9ITA7dHJ5e2I9TyghMCxhKX1maW5hbGx5e2I/UygpOihOPSExLE89bnVsbCl9fWVsc2UgTj0hMX12YXIgUztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgRilTPWZ1bmN0aW9uKCl7RihSKX07ZWxzZSBpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgVD1uZXcgTWVzc2FnZUNoYW5uZWwsVT1ULnBvcnQyO1QucG9ydDEub25tZXNzYWdlPVI7Uz1mdW5jdGlvbigpe1UucG9zdE1lc3NhZ2UobnVsbCl9fWVsc2UgUz1mdW5jdGlvbigpe0QoUiwwKX07ZnVuY3Rpb24gSShhKXtPPWE7Tnx8KE49ITAsUygpKX1mdW5jdGlvbiBLKGEsYil7TD1EKGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9XG5leHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7QXx8enx8KEE9ITAsSShKKSl9O1xuZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6UD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiB5fTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIGgocil9O2V4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goeSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9eX12YXIgYz15O3k9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e3k9Y319O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O1xuZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9eTt5PWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXt5PWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jPyhjPWMuZGVsYXksYz1cIm51bWJlclwiPT09dHlwZW9mIGMmJjA8Yz9kK2M6ZCk6Yz1kO3N3aXRjaChhKXtjYXNlIDE6dmFyIGU9LTE7YnJlYWs7Y2FzZSAyOmU9MjUwO2JyZWFrO2Nhc2UgNTplPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA0OmU9MUU0O2JyZWFrO2RlZmF1bHQ6ZT01RTN9ZT1jK2U7YT17aWQ6dSsrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTpjLGV4cGlyYXRpb25UaW1lOmUsc29ydEluZGV4Oi0xfTtjPmQ/KGEuc29ydEluZGV4PWMsZih0LGEpLG51bGw9PT1oKHIpJiZhPT09aCh0KSYmKEI/KEUoTCksTD0tMSk6Qj0hMCxLKEgsYy1kKSkpOihhLnNvcnRJbmRleD1lLGYocixhKSxBfHx6fHwoQT0hMCxJKEopKSk7cmV0dXJuIGF9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1NO2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPXk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9eTt5PWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e3k9Y319fTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCLCBjb21wYXJlLCBjb21wYXJlQ29udGV4dCkge1xuICB2YXIgcmV0ID0gY29tcGFyZSA/IGNvbXBhcmUuY2FsbChjb21wYXJlQ29udGV4dCwgb2JqQSwgb2JqQikgOiB2b2lkIDA7XG5cbiAgaWYgKHJldCAhPT0gdm9pZCAwKSB7XG4gICAgcmV0dXJuICEhcmV0O1xuICB9XG5cbiAgaWYgKG9iakEgPT09IG9iakIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gXCJvYmplY3RcIiB8fCAhb2JqQSB8fCB0eXBlb2Ygb2JqQiAhPT0gXCJvYmplY3RcIiB8fCAhb2JqQikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgYkhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5iaW5kKG9iakIpO1xuXG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IGtleXNBLmxlbmd0aDsgaWR4KyspIHtcbiAgICB2YXIga2V5ID0ga2V5c0FbaWR4XTtcblxuICAgIGlmICghYkhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWVBID0gb2JqQVtrZXldO1xuICAgIHZhciB2YWx1ZUIgPSBvYmpCW2tleV07XG5cbiAgICByZXQgPSBjb21wYXJlID8gY29tcGFyZS5jYWxsKGNvbXBhcmVDb250ZXh0LCB2YWx1ZUEsIHZhbHVlQiwga2V5KSA6IHZvaWQgMDtcblxuICAgIGlmIChyZXQgPT09IGZhbHNlIHx8IChyZXQgPT09IHZvaWQgMCAmJiB2YWx1ZUEgIT09IHZhbHVlQikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi80MDAuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLzQwMC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi83MDAuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLzcwMC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsInZhciBwYXJzZSA9IHJlcXVpcmUoJ2lubGluZS1zdHlsZS1wYXJzZXInKTtcblxuLyoqXG4gKiBQYXJzZXMgaW5saW5lIHN0eWxlIHRvIG9iamVjdC5cbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gcmV0dXJucyB7ICdsaW5lLWhlaWdodCc6ICc0MicgfVxuICogU3R5bGVUb09iamVjdCgnbGluZS1oZWlnaHQ6IDQyOycpO1xuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gICAgICBzdHlsZSAgICAgIC0gVGhlIGlubGluZSBzdHlsZS5cbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSAgICBbaXRlcmF0b3JdIC0gVGhlIGl0ZXJhdG9yIGZ1bmN0aW9uLlxuICogQHJldHVybiB7bnVsbHxPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIFN0eWxlVG9PYmplY3Qoc3R5bGUsIGl0ZXJhdG9yKSB7XG4gIHZhciBvdXRwdXQgPSBudWxsO1xuICBpZiAoIXN0eWxlIHx8IHR5cGVvZiBzdHlsZSAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gb3V0cHV0O1xuICB9XG5cbiAgdmFyIGRlY2xhcmF0aW9uO1xuICB2YXIgZGVjbGFyYXRpb25zID0gcGFyc2Uoc3R5bGUpO1xuICB2YXIgaGFzSXRlcmF0b3IgPSB0eXBlb2YgaXRlcmF0b3IgPT09ICdmdW5jdGlvbic7XG4gIHZhciBwcm9wZXJ0eTtcbiAgdmFyIHZhbHVlO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBkZWNsYXJhdGlvbnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBkZWNsYXJhdGlvbiA9IGRlY2xhcmF0aW9uc1tpXTtcbiAgICBwcm9wZXJ0eSA9IGRlY2xhcmF0aW9uLnByb3BlcnR5O1xuICAgIHZhbHVlID0gZGVjbGFyYXRpb24udmFsdWU7XG5cbiAgICBpZiAoaGFzSXRlcmF0b3IpIHtcbiAgICAgIGl0ZXJhdG9yKHByb3BlcnR5LCB2YWx1ZSwgZGVjbGFyYXRpb24pO1xuICAgIH0gZWxzZSBpZiAodmFsdWUpIHtcbiAgICAgIG91dHB1dCB8fCAob3V0cHV0ID0ge30pO1xuICAgICAgb3V0cHV0W3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU3R5bGVUb09iamVjdDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBTdHlsZVRvT2JqZWN0OyAvLyBFU00gc3VwcG9ydFxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG5cblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1Jcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UsIFN1cHByZXNzZWRFcnJvciwgU3ltYm9sICovXG5cbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xuICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xuICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufVxuXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XG4gIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XG4gICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XG4gICAgICB9XG4gICAgICByZXR1cm4gdDtcbiAgfVxuICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XG4gIHZhciB0ID0ge307XG4gIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgdFtwXSA9IHNbcF07XG4gIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xuICAgICAgfVxuICByZXR1cm4gdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19lc0RlY29yYXRlKGN0b3IsIGRlc2NyaXB0b3JJbiwgZGVjb3JhdG9ycywgY29udGV4dEluLCBpbml0aWFsaXplcnMsIGV4dHJhSW5pdGlhbGl6ZXJzKSB7XG4gIGZ1bmN0aW9uIGFjY2VwdChmKSB7IGlmIChmICE9PSB2b2lkIDAgJiYgdHlwZW9mIGYgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZ1bmN0aW9uIGV4cGVjdGVkXCIpOyByZXR1cm4gZjsgfVxuICB2YXIga2luZCA9IGNvbnRleHRJbi5raW5kLCBrZXkgPSBraW5kID09PSBcImdldHRlclwiID8gXCJnZXRcIiA6IGtpbmQgPT09IFwic2V0dGVyXCIgPyBcInNldFwiIDogXCJ2YWx1ZVwiO1xuICB2YXIgdGFyZ2V0ID0gIWRlc2NyaXB0b3JJbiAmJiBjdG9yID8gY29udGV4dEluW1wic3RhdGljXCJdID8gY3RvciA6IGN0b3IucHJvdG90eXBlIDogbnVsbDtcbiAgdmFyIGRlc2NyaXB0b3IgPSBkZXNjcmlwdG9ySW4gfHwgKHRhcmdldCA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBjb250ZXh0SW4ubmFtZSkgOiB7fSk7XG4gIHZhciBfLCBkb25lID0gZmFsc2U7XG4gIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgY29udGV4dCA9IHt9O1xuICAgICAgZm9yICh2YXIgcCBpbiBjb250ZXh0SW4pIGNvbnRleHRbcF0gPSBwID09PSBcImFjY2Vzc1wiID8ge30gOiBjb250ZXh0SW5bcF07XG4gICAgICBmb3IgKHZhciBwIGluIGNvbnRleHRJbi5hY2Nlc3MpIGNvbnRleHQuYWNjZXNzW3BdID0gY29udGV4dEluLmFjY2Vzc1twXTtcbiAgICAgIGNvbnRleHQuYWRkSW5pdGlhbGl6ZXIgPSBmdW5jdGlvbiAoZikgeyBpZiAoZG9uZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBhZGQgaW5pdGlhbGl6ZXJzIGFmdGVyIGRlY29yYXRpb24gaGFzIGNvbXBsZXRlZFwiKTsgZXh0cmFJbml0aWFsaXplcnMucHVzaChhY2NlcHQoZiB8fCBudWxsKSk7IH07XG4gICAgICB2YXIgcmVzdWx0ID0gKDAsIGRlY29yYXRvcnNbaV0pKGtpbmQgPT09IFwiYWNjZXNzb3JcIiA/IHsgZ2V0OiBkZXNjcmlwdG9yLmdldCwgc2V0OiBkZXNjcmlwdG9yLnNldCB9IDogZGVzY3JpcHRvcltrZXldLCBjb250ZXh0KTtcbiAgICAgIGlmIChraW5kID09PSBcImFjY2Vzc29yXCIpIHtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSB2b2lkIDApIGNvbnRpbnVlO1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwgfHwgdHlwZW9mIHJlc3VsdCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBleHBlY3RlZFwiKTtcbiAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuZ2V0KSkgZGVzY3JpcHRvci5nZXQgPSBfO1xuICAgICAgICAgIGlmIChfID0gYWNjZXB0KHJlc3VsdC5zZXQpKSBkZXNjcmlwdG9yLnNldCA9IF87XG4gICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LmluaXQpKSBpbml0aWFsaXplcnMudW5zaGlmdChfKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKF8gPSBhY2NlcHQocmVzdWx0KSkge1xuICAgICAgICAgIGlmIChraW5kID09PSBcImZpZWxkXCIpIGluaXRpYWxpemVycy51bnNoaWZ0KF8pO1xuICAgICAgICAgIGVsc2UgZGVzY3JpcHRvcltrZXldID0gXztcbiAgICAgIH1cbiAgfVxuICBpZiAodGFyZ2V0KSBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBjb250ZXh0SW4ubmFtZSwgZGVzY3JpcHRvcik7XG4gIGRvbmUgPSB0cnVlO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fcnVuSW5pdGlhbGl6ZXJzKHRoaXNBcmcsIGluaXRpYWxpemVycywgdmFsdWUpIHtcbiAgdmFyIHVzZVZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaW5pdGlhbGl6ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YWx1ZSA9IHVzZVZhbHVlID8gaW5pdGlhbGl6ZXJzW2ldLmNhbGwodGhpc0FyZywgdmFsdWUpIDogaW5pdGlhbGl6ZXJzW2ldLmNhbGwodGhpc0FyZyk7XG4gIH1cbiAgcmV0dXJuIHVzZVZhbHVlID8gdmFsdWUgOiB2b2lkIDA7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19wcm9wS2V5KHgpIHtcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSBcInN5bWJvbFwiID8geCA6IFwiXCIuY29uY2F0KHgpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fc2V0RnVuY3Rpb25OYW1lKGYsIG5hbWUsIHByZWZpeCkge1xuICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3ltYm9sXCIpIG5hbWUgPSBuYW1lLmRlc2NyaXB0aW9uID8gXCJbXCIuY29uY2F0KG5hbWUuZGVzY3JpcHRpb24sIFwiXVwiKSA6IFwiXCI7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZiwgXCJuYW1lXCIsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogcHJlZml4ID8gXCJcIi5jb25jYXQocHJlZml4LCBcIiBcIiwgbmFtZSkgOiBuYW1lIH0pO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcbiAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcbiAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XG4gIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICB3aGlsZSAoZyAmJiAoZyA9IDAsIG9wWzBdICYmIChfID0gMCkpLCBfKSB0cnkge1xuICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gIH1cbn1cblxuZXhwb3J0IHZhciBfX2NyZWF0ZUJpbmRpbmcgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gIG9bazJdID0gbVtrXTtcbn0pO1xuXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIG8pIHtcbiAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBwKSkgX19jcmVhdGVCaW5kaW5nKG8sIG0sIHApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xuICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xuICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcbiAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xuICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XG4gICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xuICAgICAgfVxuICB9O1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xuICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gIGlmICghbSkgcmV0dXJuIG87XG4gIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICB0cnkge1xuICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gIH1cbiAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gIGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgIH1cbiAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICB9XG4gIHJldHVybiBhcjtcbn1cblxuLyoqIEBkZXByZWNhdGVkICovXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XG4gIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxuICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xuICByZXR1cm4gYXI7XG59XG5cbi8qKiBAZGVwcmVjYXRlZCAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xuICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcbiAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxuICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXG4gICAgICAgICAgcltrXSA9IGFbal07XG4gIHJldHVybiByO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheSh0bywgZnJvbSwgcGFjaykge1xuICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xuICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XG4gICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xuICAgICAgfVxuICB9XG4gIHJldHVybiB0by5jb25jYXQoYXIgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XG4gIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcbiAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcbiAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xuICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cbiAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxuICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cbiAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxuICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XG4gIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xuICB2YXIgaSwgcDtcbiAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcbiAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogZmFsc2UgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xuICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xuICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xuICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XG4gIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cbiAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcbiAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cbiAgcmV0dXJuIGNvb2tlZDtcbn07XG5cbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gIG9bXCJkZWZhdWx0XCJdID0gdjtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XG4gIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xuICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkSW4oc3RhdGUsIHJlY2VpdmVyKSB7XG4gIGlmIChyZWNlaXZlciA9PT0gbnVsbCB8fCAodHlwZW9mIHJlY2VpdmVyICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiByZWNlaXZlciAhPT0gXCJmdW5jdGlvblwiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB1c2UgJ2luJyBvcGVyYXRvciBvbiBub24tb2JqZWN0XCIpO1xuICByZXR1cm4gdHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciA9PT0gc3RhdGUgOiBzdGF0ZS5oYXMocmVjZWl2ZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hZGREaXNwb3NhYmxlUmVzb3VyY2UoZW52LCB2YWx1ZSwgYXN5bmMpIHtcbiAgaWYgKHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB2b2lkIDApIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IGV4cGVjdGVkLlwiKTtcbiAgICB2YXIgZGlzcG9zZTtcbiAgICBpZiAoYXN5bmMpIHtcbiAgICAgICAgaWYgKCFTeW1ib2wuYXN5bmNEaXNwb3NlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jRGlzcG9zZSBpcyBub3QgZGVmaW5lZC5cIik7XG4gICAgICAgIGRpc3Bvc2UgPSB2YWx1ZVtTeW1ib2wuYXN5bmNEaXNwb3NlXTtcbiAgICB9XG4gICAgaWYgKGRpc3Bvc2UgPT09IHZvaWQgMCkge1xuICAgICAgICBpZiAoIVN5bWJvbC5kaXNwb3NlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmRpc3Bvc2UgaXMgbm90IGRlZmluZWQuXCIpO1xuICAgICAgICBkaXNwb3NlID0gdmFsdWVbU3ltYm9sLmRpc3Bvc2VdO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGRpc3Bvc2UgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBub3QgZGlzcG9zYWJsZS5cIik7XG4gICAgZW52LnN0YWNrLnB1c2goeyB2YWx1ZTogdmFsdWUsIGRpc3Bvc2U6IGRpc3Bvc2UsIGFzeW5jOiBhc3luYyB9KTtcbiAgfVxuICBlbHNlIGlmIChhc3luYykge1xuICAgIGVudi5zdGFjay5wdXNoKHsgYXN5bmM6IHRydWUgfSk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG52YXIgX1N1cHByZXNzZWRFcnJvciA9IHR5cGVvZiBTdXBwcmVzc2VkRXJyb3IgPT09IFwiZnVuY3Rpb25cIiA/IFN1cHByZXNzZWRFcnJvciA6IGZ1bmN0aW9uIChlcnJvciwgc3VwcHJlc3NlZCwgbWVzc2FnZSkge1xuICB2YXIgZSA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGUubmFtZSA9IFwiU3VwcHJlc3NlZEVycm9yXCIsIGUuZXJyb3IgPSBlcnJvciwgZS5zdXBwcmVzc2VkID0gc3VwcHJlc3NlZCwgZTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2Rpc3Bvc2VSZXNvdXJjZXMoZW52KSB7XG4gIGZ1bmN0aW9uIGZhaWwoZSkge1xuICAgIGVudi5lcnJvciA9IGVudi5oYXNFcnJvciA/IG5ldyBfU3VwcHJlc3NlZEVycm9yKGUsIGVudi5lcnJvciwgXCJBbiBlcnJvciB3YXMgc3VwcHJlc3NlZCBkdXJpbmcgZGlzcG9zYWwuXCIpIDogZTtcbiAgICBlbnYuaGFzRXJyb3IgPSB0cnVlO1xuICB9XG4gIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgd2hpbGUgKGVudi5zdGFjay5sZW5ndGgpIHtcbiAgICAgIHZhciByZWMgPSBlbnYuc3RhY2sucG9wKCk7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjLmRpc3Bvc2UgJiYgcmVjLmRpc3Bvc2UuY2FsbChyZWMudmFsdWUpO1xuICAgICAgICBpZiAocmVjLmFzeW5jKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCkudGhlbihuZXh0LCBmdW5jdGlvbihlKSB7IGZhaWwoZSk7IHJldHVybiBuZXh0KCk7IH0pO1xuICAgICAgfVxuICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICBmYWlsKGUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW52Lmhhc0Vycm9yKSB0aHJvdyBlbnYuZXJyb3I7XG4gIH1cbiAgcmV0dXJuIG5leHQoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBfX2V4dGVuZHMsXG4gIF9fYXNzaWduLFxuICBfX3Jlc3QsXG4gIF9fZGVjb3JhdGUsXG4gIF9fcGFyYW0sXG4gIF9fbWV0YWRhdGEsXG4gIF9fYXdhaXRlcixcbiAgX19nZW5lcmF0b3IsXG4gIF9fY3JlYXRlQmluZGluZyxcbiAgX19leHBvcnRTdGFyLFxuICBfX3ZhbHVlcyxcbiAgX19yZWFkLFxuICBfX3NwcmVhZCxcbiAgX19zcHJlYWRBcnJheXMsXG4gIF9fc3ByZWFkQXJyYXksXG4gIF9fYXdhaXQsXG4gIF9fYXN5bmNHZW5lcmF0b3IsXG4gIF9fYXN5bmNEZWxlZ2F0b3IsXG4gIF9fYXN5bmNWYWx1ZXMsXG4gIF9fbWFrZVRlbXBsYXRlT2JqZWN0LFxuICBfX2ltcG9ydFN0YXIsXG4gIF9faW1wb3J0RGVmYXVsdCxcbiAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCxcbiAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCxcbiAgX19jbGFzc1ByaXZhdGVGaWVsZEluLFxuICBfX2FkZERpc3Bvc2FibGVSZXNvdXJjZSxcbiAgX19kaXNwb3NlUmVzb3VyY2VzLFxufTtcbiIsImV4cG9ydCB2YXIgTVMgPSAnLW1zLSdcbmV4cG9ydCB2YXIgTU9aID0gJy1tb3otJ1xuZXhwb3J0IHZhciBXRUJLSVQgPSAnLXdlYmtpdC0nXG5cbmV4cG9ydCB2YXIgQ09NTUVOVCA9ICdjb21tJ1xuZXhwb3J0IHZhciBSVUxFU0VUID0gJ3J1bGUnXG5leHBvcnQgdmFyIERFQ0xBUkFUSU9OID0gJ2RlY2wnXG5cbmV4cG9ydCB2YXIgUEFHRSA9ICdAcGFnZSdcbmV4cG9ydCB2YXIgTUVESUEgPSAnQG1lZGlhJ1xuZXhwb3J0IHZhciBJTVBPUlQgPSAnQGltcG9ydCdcbmV4cG9ydCB2YXIgQ0hBUlNFVCA9ICdAY2hhcnNldCdcbmV4cG9ydCB2YXIgVklFV1BPUlQgPSAnQHZpZXdwb3J0J1xuZXhwb3J0IHZhciBTVVBQT1JUUyA9ICdAc3VwcG9ydHMnXG5leHBvcnQgdmFyIERPQ1VNRU5UID0gJ0Bkb2N1bWVudCdcbmV4cG9ydCB2YXIgTkFNRVNQQUNFID0gJ0BuYW1lc3BhY2UnXG5leHBvcnQgdmFyIEtFWUZSQU1FUyA9ICdAa2V5ZnJhbWVzJ1xuZXhwb3J0IHZhciBGT05UX0ZBQ0UgPSAnQGZvbnQtZmFjZSdcbmV4cG9ydCB2YXIgQ09VTlRFUl9TVFlMRSA9ICdAY291bnRlci1zdHlsZSdcbmV4cG9ydCB2YXIgRk9OVF9GRUFUVVJFX1ZBTFVFUyA9ICdAZm9udC1mZWF0dXJlLXZhbHVlcydcbmV4cG9ydCB2YXIgTEFZRVIgPSAnQGxheWVyJ1xuIiwiLyoqXG4gKiBAcGFyYW0ge251bWJlcn1cbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IHZhciBhYnMgPSBNYXRoLmFic1xuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgdmFyIGZyb20gPSBTdHJpbmcuZnJvbUNoYXJDb2RlXG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9XG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCB2YXIgYXNzaWduID0gT2JqZWN0LmFzc2lnblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFzaCAodmFsdWUsIGxlbmd0aCkge1xuXHRyZXR1cm4gY2hhcmF0KHZhbHVlLCAwKSBeIDQ1ID8gKCgoKCgoKGxlbmd0aCA8PCAyKSBeIGNoYXJhdCh2YWx1ZSwgMCkpIDw8IDIpIF4gY2hhcmF0KHZhbHVlLCAxKSkgPDwgMikgXiBjaGFyYXQodmFsdWUsIDIpKSA8PCAyKSBeIGNoYXJhdCh2YWx1ZSwgMykgOiAwXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmltICh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUudHJpbSgpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge1JlZ0V4cH0gcGF0dGVyblxuICogQHJldHVybiB7c3RyaW5nP31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoICh2YWx1ZSwgcGF0dGVybikge1xuXHRyZXR1cm4gKHZhbHVlID0gcGF0dGVybi5leGVjKHZhbHVlKSkgPyB2YWx1ZVswXSA6IHZhbHVlXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0geyhzdHJpbmd8UmVnRXhwKX0gcGF0dGVyblxuICogQHBhcmFtIHtzdHJpbmd9IHJlcGxhY2VtZW50XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlICh2YWx1ZSwgcGF0dGVybiwgcmVwbGFjZW1lbnQpIHtcblx0cmV0dXJuIHZhbHVlLnJlcGxhY2UocGF0dGVybiwgcmVwbGFjZW1lbnQpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VhcmNoXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbmRleG9mICh2YWx1ZSwgc2VhcmNoKSB7XG5cdHJldHVybiB2YWx1ZS5pbmRleE9mKHNlYXJjaClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hhcmF0ICh2YWx1ZSwgaW5kZXgpIHtcblx0cmV0dXJuIHZhbHVlLmNoYXJDb2RlQXQoaW5kZXgpIHwgMFxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXJ9IGJlZ2luXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdWJzdHIgKHZhbHVlLCBiZWdpbiwgZW5kKSB7XG5cdHJldHVybiB2YWx1ZS5zbGljZShiZWdpbiwgZW5kKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RybGVuICh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUubGVuZ3RoXG59XG5cbi8qKlxuICogQHBhcmFtIHthbnlbXX0gdmFsdWVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNpemVvZiAodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLmxlbmd0aFxufVxuXG4vKipcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICogQHBhcmFtIHthbnlbXX0gYXJyYXlcbiAqIEByZXR1cm4ge2FueX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZCAodmFsdWUsIGFycmF5KSB7XG5cdHJldHVybiBhcnJheS5wdXNoKHZhbHVlKSwgdmFsdWVcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBhcnJheVxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbWJpbmUgKGFycmF5LCBjYWxsYmFjaykge1xuXHRyZXR1cm4gYXJyYXkubWFwKGNhbGxiYWNrKS5qb2luKCcnKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nW119IGFycmF5XG4gKiBAcGFyYW0ge1JlZ0V4cH0gcGF0dGVyblxuICogQHJldHVybiB7c3RyaW5nW119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXIgKGFycmF5LCBwYXR0ZXJuKSB7XG5cdHJldHVybiBhcnJheS5maWx0ZXIoZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiAhbWF0Y2godmFsdWUsIHBhdHRlcm4pIH0pXG59XG4iLCJpbXBvcnQge2Zyb20sIHRyaW0sIGNoYXJhdCwgc3RybGVuLCBzdWJzdHIsIGFwcGVuZCwgYXNzaWdufSBmcm9tICcuL1V0aWxpdHkuanMnXG5cbmV4cG9ydCB2YXIgbGluZSA9IDFcbmV4cG9ydCB2YXIgY29sdW1uID0gMVxuZXhwb3J0IHZhciBsZW5ndGggPSAwXG5leHBvcnQgdmFyIHBvc2l0aW9uID0gMFxuZXhwb3J0IHZhciBjaGFyYWN0ZXIgPSAwXG5leHBvcnQgdmFyIGNoYXJhY3RlcnMgPSAnJ1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3QgfCBudWxsfSByb290XG4gKiBAcGFyYW0ge29iamVjdCB8IG51bGx9IHBhcmVudFxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nW10gfCBzdHJpbmd9IHByb3BzXG4gKiBAcGFyYW0ge29iamVjdFtdIHwgc3RyaW5nfSBjaGlsZHJlblxuICogQHBhcmFtIHtvYmplY3RbXX0gc2libGluZ3NcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vZGUgKHZhbHVlLCByb290LCBwYXJlbnQsIHR5cGUsIHByb3BzLCBjaGlsZHJlbiwgbGVuZ3RoLCBzaWJsaW5ncykge1xuXHRyZXR1cm4ge3ZhbHVlOiB2YWx1ZSwgcm9vdDogcm9vdCwgcGFyZW50OiBwYXJlbnQsIHR5cGU6IHR5cGUsIHByb3BzOiBwcm9wcywgY2hpbGRyZW46IGNoaWxkcmVuLCBsaW5lOiBsaW5lLCBjb2x1bW46IGNvbHVtbiwgbGVuZ3RoOiBsZW5ndGgsIHJldHVybjogJycsIHNpYmxpbmdzOiBzaWJsaW5nc31cbn1cblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb3B5IChyb290LCBwcm9wcykge1xuXHRyZXR1cm4gYXNzaWduKG5vZGUoJycsIG51bGwsIG51bGwsICcnLCBudWxsLCBudWxsLCAwLCByb290LnNpYmxpbmdzKSwgcm9vdCwge2xlbmd0aDogLXJvb3QubGVuZ3RofSwgcHJvcHMpXG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxpZnQgKHJvb3QpIHtcblx0d2hpbGUgKHJvb3Qucm9vdClcblx0XHRyb290ID0gY29weShyb290LnJvb3QsIHtjaGlsZHJlbjogW3Jvb3RdfSlcblxuXHRhcHBlbmQocm9vdCwgcm9vdC5zaWJsaW5ncylcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGFyICgpIHtcblx0cmV0dXJuIGNoYXJhY3RlclxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByZXYgKCkge1xuXHRjaGFyYWN0ZXIgPSBwb3NpdGlvbiA+IDAgPyBjaGFyYXQoY2hhcmFjdGVycywgLS1wb3NpdGlvbikgOiAwXG5cblx0aWYgKGNvbHVtbi0tLCBjaGFyYWN0ZXIgPT09IDEwKVxuXHRcdGNvbHVtbiA9IDEsIGxpbmUtLVxuXG5cdHJldHVybiBjaGFyYWN0ZXJcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBuZXh0ICgpIHtcblx0Y2hhcmFjdGVyID0gcG9zaXRpb24gPCBsZW5ndGggPyBjaGFyYXQoY2hhcmFjdGVycywgcG9zaXRpb24rKykgOiAwXG5cblx0aWYgKGNvbHVtbisrLCBjaGFyYWN0ZXIgPT09IDEwKVxuXHRcdGNvbHVtbiA9IDEsIGxpbmUrK1xuXG5cdHJldHVybiBjaGFyYWN0ZXJcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwZWVrICgpIHtcblx0cmV0dXJuIGNoYXJhdChjaGFyYWN0ZXJzLCBwb3NpdGlvbilcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYXJldCAoKSB7XG5cdHJldHVybiBwb3NpdGlvblxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBiZWdpblxuICogQHBhcmFtIHtudW1iZXJ9IGVuZFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2xpY2UgKGJlZ2luLCBlbmQpIHtcblx0cmV0dXJuIHN1YnN0cihjaGFyYWN0ZXJzLCBiZWdpbiwgZW5kKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b2tlbiAodHlwZSkge1xuXHRzd2l0Y2ggKHR5cGUpIHtcblx0XHQvLyBcXDAgXFx0IFxcbiBcXHIgXFxzIHdoaXRlc3BhY2UgdG9rZW5cblx0XHRjYXNlIDA6IGNhc2UgOTogY2FzZSAxMDogY2FzZSAxMzogY2FzZSAzMjpcblx0XHRcdHJldHVybiA1XG5cdFx0Ly8gISArICwgLyA+IEAgfiBpc29sYXRlIHRva2VuXG5cdFx0Y2FzZSAzMzogY2FzZSA0MzogY2FzZSA0NDogY2FzZSA0NzogY2FzZSA2MjogY2FzZSA2NDogY2FzZSAxMjY6XG5cdFx0Ly8gOyB7IH0gYnJlYWtwb2ludCB0b2tlblxuXHRcdGNhc2UgNTk6IGNhc2UgMTIzOiBjYXNlIDEyNTpcblx0XHRcdHJldHVybiA0XG5cdFx0Ly8gOiBhY2NvbXBhbmllZCB0b2tlblxuXHRcdGNhc2UgNTg6XG5cdFx0XHRyZXR1cm4gM1xuXHRcdC8vIFwiICcgKCBbIG9wZW5pbmcgZGVsaW1pdCB0b2tlblxuXHRcdGNhc2UgMzQ6IGNhc2UgMzk6IGNhc2UgNDA6IGNhc2UgOTE6XG5cdFx0XHRyZXR1cm4gMlxuXHRcdC8vICkgXSBjbG9zaW5nIGRlbGltaXQgdG9rZW5cblx0XHRjYXNlIDQxOiBjYXNlIDkzOlxuXHRcdFx0cmV0dXJuIDFcblx0fVxuXG5cdHJldHVybiAwXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHthbnlbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFsbG9jICh2YWx1ZSkge1xuXHRyZXR1cm4gbGluZSA9IGNvbHVtbiA9IDEsIGxlbmd0aCA9IHN0cmxlbihjaGFyYWN0ZXJzID0gdmFsdWUpLCBwb3NpdGlvbiA9IDAsIFtdXG59XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKiBAcmV0dXJuIHthbnl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWFsbG9jICh2YWx1ZSkge1xuXHRyZXR1cm4gY2hhcmFjdGVycyA9ICcnLCB2YWx1ZVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWxpbWl0ICh0eXBlKSB7XG5cdHJldHVybiB0cmltKHNsaWNlKHBvc2l0aW9uIC0gMSwgZGVsaW1pdGVyKHR5cGUgPT09IDkxID8gdHlwZSArIDIgOiB0eXBlID09PSA0MCA/IHR5cGUgKyAxIDogdHlwZSkpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7c3RyaW5nW119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b2tlbml6ZSAodmFsdWUpIHtcblx0cmV0dXJuIGRlYWxsb2ModG9rZW5pemVyKGFsbG9jKHZhbHVlKSkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdoaXRlc3BhY2UgKHR5cGUpIHtcblx0d2hpbGUgKGNoYXJhY3RlciA9IHBlZWsoKSlcblx0XHRpZiAoY2hhcmFjdGVyIDwgMzMpXG5cdFx0XHRuZXh0KClcblx0XHRlbHNlXG5cdFx0XHRicmVha1xuXG5cdHJldHVybiB0b2tlbih0eXBlKSA+IDIgfHwgdG9rZW4oY2hhcmFjdGVyKSA+IDMgPyAnJyA6ICcgJ1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nW119IGNoaWxkcmVuXG4gKiBAcmV0dXJuIHtzdHJpbmdbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRva2VuaXplciAoY2hpbGRyZW4pIHtcblx0d2hpbGUgKG5leHQoKSlcblx0XHRzd2l0Y2ggKHRva2VuKGNoYXJhY3RlcikpIHtcblx0XHRcdGNhc2UgMDogYXBwZW5kKGlkZW50aWZpZXIocG9zaXRpb24gLSAxKSwgY2hpbGRyZW4pXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHRjYXNlIDI6IGFwcGVuZChkZWxpbWl0KGNoYXJhY3RlciksIGNoaWxkcmVuKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0ZGVmYXVsdDogYXBwZW5kKGZyb20oY2hhcmFjdGVyKSwgY2hpbGRyZW4pXG5cdFx0fVxuXG5cdHJldHVybiBjaGlsZHJlblxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtudW1iZXJ9IGNvdW50XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGluZyAoaW5kZXgsIGNvdW50KSB7XG5cdHdoaWxlICgtLWNvdW50ICYmIG5leHQoKSlcblx0XHQvLyBub3QgMC05IEEtRiBhLWZcblx0XHRpZiAoY2hhcmFjdGVyIDwgNDggfHwgY2hhcmFjdGVyID4gMTAyIHx8IChjaGFyYWN0ZXIgPiA1NyAmJiBjaGFyYWN0ZXIgPCA2NSkgfHwgKGNoYXJhY3RlciA+IDcwICYmIGNoYXJhY3RlciA8IDk3KSlcblx0XHRcdGJyZWFrXG5cblx0cmV0dXJuIHNsaWNlKGluZGV4LCBjYXJldCgpICsgKGNvdW50IDwgNiAmJiBwZWVrKCkgPT0gMzIgJiYgbmV4dCgpID09IDMyKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZVxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVsaW1pdGVyICh0eXBlKSB7XG5cdHdoaWxlIChuZXh0KCkpXG5cdFx0c3dpdGNoIChjaGFyYWN0ZXIpIHtcblx0XHRcdC8vIF0gKSBcIiAnXG5cdFx0XHRjYXNlIHR5cGU6XG5cdFx0XHRcdHJldHVybiBwb3NpdGlvblxuXHRcdFx0Ly8gXCIgJ1xuXHRcdFx0Y2FzZSAzNDogY2FzZSAzOTpcblx0XHRcdFx0aWYgKHR5cGUgIT09IDM0ICYmIHR5cGUgIT09IDM5KVxuXHRcdFx0XHRcdGRlbGltaXRlcihjaGFyYWN0ZXIpXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyAoXG5cdFx0XHRjYXNlIDQwOlxuXHRcdFx0XHRpZiAodHlwZSA9PT0gNDEpXG5cdFx0XHRcdFx0ZGVsaW1pdGVyKHR5cGUpXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyBcXFxuXHRcdFx0Y2FzZSA5Mjpcblx0XHRcdFx0bmV4dCgpXG5cdFx0XHRcdGJyZWFrXG5cdFx0fVxuXG5cdHJldHVybiBwb3NpdGlvblxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbW1lbnRlciAodHlwZSwgaW5kZXgpIHtcblx0d2hpbGUgKG5leHQoKSlcblx0XHQvLyAvL1xuXHRcdGlmICh0eXBlICsgY2hhcmFjdGVyID09PSA0NyArIDEwKVxuXHRcdFx0YnJlYWtcblx0XHQvLyAvKlxuXHRcdGVsc2UgaWYgKHR5cGUgKyBjaGFyYWN0ZXIgPT09IDQyICsgNDIgJiYgcGVlaygpID09PSA0Nylcblx0XHRcdGJyZWFrXG5cblx0cmV0dXJuICcvKicgKyBzbGljZShpbmRleCwgcG9zaXRpb24gLSAxKSArICcqJyArIGZyb20odHlwZSA9PT0gNDcgPyB0eXBlIDogbmV4dCgpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpZmllciAoaW5kZXgpIHtcblx0d2hpbGUgKCF0b2tlbihwZWVrKCkpKVxuXHRcdG5leHQoKVxuXG5cdHJldHVybiBzbGljZShpbmRleCwgcG9zaXRpb24pXG59XG4iLCJpbXBvcnQge0lNUE9SVCwgTEFZRVIsIENPTU1FTlQsIFJVTEVTRVQsIERFQ0xBUkFUSU9OLCBLRVlGUkFNRVN9IGZyb20gJy4vRW51bS5qcydcbmltcG9ydCB7c3RybGVufSBmcm9tICcuL1V0aWxpdHkuanMnXG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3RbXX0gY2hpbGRyZW5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemUgKGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHR2YXIgb3V0cHV0ID0gJydcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKVxuXHRcdG91dHB1dCArPSBjYWxsYmFjayhjaGlsZHJlbltpXSwgaSwgY2hpbGRyZW4sIGNhbGxiYWNrKSB8fCAnJ1xuXG5cdHJldHVybiBvdXRwdXRcbn1cblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZWxlbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge29iamVjdFtdfSBjaGlsZHJlblxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeSAoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHRzd2l0Y2ggKGVsZW1lbnQudHlwZSkge1xuXHRcdGNhc2UgTEFZRVI6IGlmIChlbGVtZW50LmNoaWxkcmVuLmxlbmd0aCkgYnJlYWtcblx0XHRjYXNlIElNUE9SVDogY2FzZSBERUNMQVJBVElPTjogcmV0dXJuIGVsZW1lbnQucmV0dXJuID0gZWxlbWVudC5yZXR1cm4gfHwgZWxlbWVudC52YWx1ZVxuXHRcdGNhc2UgQ09NTUVOVDogcmV0dXJuICcnXG5cdFx0Y2FzZSBLRVlGUkFNRVM6IHJldHVybiBlbGVtZW50LnJldHVybiA9IGVsZW1lbnQudmFsdWUgKyAneycgKyBzZXJpYWxpemUoZWxlbWVudC5jaGlsZHJlbiwgY2FsbGJhY2spICsgJ30nXG5cdFx0Y2FzZSBSVUxFU0VUOiBpZiAoIXN0cmxlbihlbGVtZW50LnZhbHVlID0gZWxlbWVudC5wcm9wcy5qb2luKCcsJykpKSByZXR1cm4gJydcblx0fVxuXG5cdHJldHVybiBzdHJsZW4oY2hpbGRyZW4gPSBzZXJpYWxpemUoZWxlbWVudC5jaGlsZHJlbiwgY2FsbGJhY2spKSA/IGVsZW1lbnQucmV0dXJuID0gZWxlbWVudC52YWx1ZSArICd7JyArIGNoaWxkcmVuICsgJ30nIDogJydcbn1cbiIsImltcG9ydCB7TVMsIE1PWiwgV0VCS0lUfSBmcm9tICcuL0VudW0uanMnXG5pbXBvcnQge2hhc2gsIGNoYXJhdCwgc3RybGVuLCBpbmRleG9mLCByZXBsYWNlLCBzdWJzdHIsIG1hdGNofSBmcm9tICcuL1V0aWxpdHkuanMnXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKiBAcGFyYW0ge29iamVjdFtdfSBjaGlsZHJlblxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJlZml4ICh2YWx1ZSwgbGVuZ3RoLCBjaGlsZHJlbikge1xuXHRzd2l0Y2ggKGhhc2godmFsdWUsIGxlbmd0aCkpIHtcblx0XHQvLyBjb2xvci1hZGp1c3Rcblx0XHRjYXNlIDUxMDM6XG5cdFx0XHRyZXR1cm4gV0VCS0lUICsgJ3ByaW50LScgKyB2YWx1ZSArIHZhbHVlXG5cdFx0Ly8gYW5pbWF0aW9uLCBhbmltYXRpb24tKGRlbGF5fGRpcmVjdGlvbnxkdXJhdGlvbnxmaWxsLW1vZGV8aXRlcmF0aW9uLWNvdW50fG5hbWV8cGxheS1zdGF0ZXx0aW1pbmctZnVuY3Rpb24pXG5cdFx0Y2FzZSA1NzM3OiBjYXNlIDQyMDE6IGNhc2UgMzE3NzogY2FzZSAzNDMzOiBjYXNlIDE2NDE6IGNhc2UgNDQ1NzogY2FzZSAyOTIxOlxuXHRcdC8vIHRleHQtZGVjb3JhdGlvbiwgZmlsdGVyLCBjbGlwLXBhdGgsIGJhY2tmYWNlLXZpc2liaWxpdHksIGNvbHVtbiwgYm94LWRlY29yYXRpb24tYnJlYWtcblx0XHRjYXNlIDU1NzI6IGNhc2UgNjM1NjogY2FzZSA1ODQ0OiBjYXNlIDMxOTE6IGNhc2UgNjY0NTogY2FzZSAzMDA1OlxuXHRcdC8vIG1hc2ssIG1hc2staW1hZ2UsIG1hc2stKG1vZGV8Y2xpcHxzaXplKSwgbWFzay0ocmVwZWF0fG9yaWdpbiksIG1hc2stcG9zaXRpb24sIG1hc2stY29tcG9zaXRlLFxuXHRcdGNhc2UgNjM5MTogY2FzZSA1ODc5OiBjYXNlIDU2MjM6IGNhc2UgNjEzNTogY2FzZSA0NTk5OiBjYXNlIDQ4NTU6XG5cdFx0Ly8gYmFja2dyb3VuZC1jbGlwLCBjb2x1bW5zLCBjb2x1bW4tKGNvdW50fGZpbGx8Z2FwfHJ1bGV8cnVsZS1jb2xvcnxydWxlLXN0eWxlfHJ1bGUtd2lkdGh8c3Bhbnx3aWR0aClcblx0XHRjYXNlIDQyMTU6IGNhc2UgNjM4OTogY2FzZSA1MTA5OiBjYXNlIDUzNjU6IGNhc2UgNTYyMTogY2FzZSAzODI5OlxuXHRcdFx0cmV0dXJuIFdFQktJVCArIHZhbHVlICsgdmFsdWVcblx0XHQvLyB0YWItc2l6ZVxuXHRcdGNhc2UgNDc4OTpcblx0XHRcdHJldHVybiBNT1ogKyB2YWx1ZSArIHZhbHVlXG5cdFx0Ly8gYXBwZWFyYW5jZSwgdXNlci1zZWxlY3QsIHRyYW5zZm9ybSwgaHlwaGVucywgdGV4dC1zaXplLWFkanVzdFxuXHRcdGNhc2UgNTM0OTogY2FzZSA0MjQ2OiBjYXNlIDQ4MTA6IGNhc2UgNjk2ODogY2FzZSAyNzU2OlxuXHRcdFx0cmV0dXJuIFdFQktJVCArIHZhbHVlICsgTU9aICsgdmFsdWUgKyBNUyArIHZhbHVlICsgdmFsdWVcblx0XHQvLyB3cml0aW5nLW1vZGVcblx0XHRjYXNlIDU5MzY6XG5cdFx0XHRzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgMTEpKSB7XG5cdFx0XHRcdC8vIHZlcnRpY2FsLWwocilcblx0XHRcdFx0Y2FzZSAxMTQ6XG5cdFx0XHRcdFx0cmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAvW3N2aF1cXHcrLVt0YmxyXXsyfS8sICd0YicpICsgdmFsdWVcblx0XHRcdFx0Ly8gdmVydGljYWwtcihsKVxuXHRcdFx0XHRjYXNlIDEwODpcblx0XHRcdFx0XHRyZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsIC9bc3ZoXVxcdystW3RibHJdezJ9LywgJ3RiLXJsJykgKyB2YWx1ZVxuXHRcdFx0XHQvLyBob3Jpem9udGFsKC0pdGJcblx0XHRcdFx0Y2FzZSA0NTpcblx0XHRcdFx0XHRyZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsIC9bc3ZoXVxcdystW3RibHJdezJ9LywgJ2xyJykgKyB2YWx1ZVxuXHRcdFx0XHQvLyBkZWZhdWx0OiBmYWxsdGhyb3VnaCB0byBiZWxvd1xuXHRcdFx0fVxuXHRcdC8vIGZsZXgsIGZsZXgtZGlyZWN0aW9uLCBzY3JvbGwtc25hcC10eXBlLCB3cml0aW5nLW1vZGVcblx0XHRjYXNlIDY4Mjg6IGNhc2UgNDI2ODogY2FzZSAyOTAzOlxuXHRcdFx0cmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyB2YWx1ZSArIHZhbHVlXG5cdFx0Ly8gb3JkZXJcblx0XHRjYXNlIDYxNjU6XG5cdFx0XHRyZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArICdmbGV4LScgKyB2YWx1ZSArIHZhbHVlXG5cdFx0Ly8gYWxpZ24taXRlbXNcblx0XHRjYXNlIDUxODc6XG5cdFx0XHRyZXR1cm4gV0VCS0lUICsgdmFsdWUgKyByZXBsYWNlKHZhbHVlLCAvKFxcdyspLisoOlteXSspLywgV0VCS0lUICsgJ2JveC0kMSQyJyArIE1TICsgJ2ZsZXgtJDEkMicpICsgdmFsdWVcblx0XHQvLyBhbGlnbi1zZWxmXG5cdFx0Y2FzZSA1NDQzOlxuXHRcdFx0cmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyAnZmxleC1pdGVtLScgKyByZXBsYWNlKHZhbHVlLCAvZmxleC18LXNlbGYvZywgJycpICsgKCFtYXRjaCh2YWx1ZSwgL2ZsZXgtfGJhc2VsaW5lLykgPyBNUyArICdncmlkLXJvdy0nICsgcmVwbGFjZSh2YWx1ZSwgL2ZsZXgtfC1zZWxmL2csICcnKSA6ICcnKSArIHZhbHVlXG5cdFx0Ly8gYWxpZ24tY29udGVudFxuXHRcdGNhc2UgNDY3NTpcblx0XHRcdHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgJ2ZsZXgtbGluZS1wYWNrJyArIHJlcGxhY2UodmFsdWUsIC9hbGlnbi1jb250ZW50fGZsZXgtfC1zZWxmL2csICcnKSArIHZhbHVlXG5cdFx0Ly8gZmxleC1zaHJpbmtcblx0XHRjYXNlIDU1NDg6XG5cdFx0XHRyZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsICdzaHJpbmsnLCAnbmVnYXRpdmUnKSArIHZhbHVlXG5cdFx0Ly8gZmxleC1iYXNpc1xuXHRcdGNhc2UgNTI5Mjpcblx0XHRcdHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgJ2Jhc2lzJywgJ3ByZWZlcnJlZC1zaXplJykgKyB2YWx1ZVxuXHRcdC8vIGZsZXgtZ3Jvd1xuXHRcdGNhc2UgNjA2MDpcblx0XHRcdHJldHVybiBXRUJLSVQgKyAnYm94LScgKyByZXBsYWNlKHZhbHVlLCAnLWdyb3cnLCAnJykgKyBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgJ2dyb3cnLCAncG9zaXRpdmUnKSArIHZhbHVlXG5cdFx0Ly8gdHJhbnNpdGlvblxuXHRcdGNhc2UgNDU1NDpcblx0XHRcdHJldHVybiBXRUJLSVQgKyByZXBsYWNlKHZhbHVlLCAvKFteLV0pKHRyYW5zZm9ybSkvZywgJyQxJyArIFdFQktJVCArICckMicpICsgdmFsdWVcblx0XHQvLyBjdXJzb3Jcblx0XHRjYXNlIDYxODc6XG5cdFx0XHRyZXR1cm4gcmVwbGFjZShyZXBsYWNlKHJlcGxhY2UodmFsdWUsIC8oem9vbS18Z3JhYikvLCBXRUJLSVQgKyAnJDEnKSwgLyhpbWFnZS1zZXQpLywgV0VCS0lUICsgJyQxJyksIHZhbHVlLCAnJykgKyB2YWx1ZVxuXHRcdC8vIGJhY2tncm91bmQsIGJhY2tncm91bmQtaW1hZ2Vcblx0XHRjYXNlIDU0OTU6IGNhc2UgMzk1OTpcblx0XHRcdHJldHVybiByZXBsYWNlKHZhbHVlLCAvKGltYWdlLXNldFxcKFteXSopLywgV0VCS0lUICsgJyQxJyArICckYCQxJylcblx0XHQvLyBqdXN0aWZ5LWNvbnRlbnRcblx0XHRjYXNlIDQ5Njg6XG5cdFx0XHRyZXR1cm4gcmVwbGFjZShyZXBsYWNlKHZhbHVlLCAvKC4rOikoZmxleC0pPyguKikvLCBXRUJLSVQgKyAnYm94LXBhY2s6JDMnICsgTVMgKyAnZmxleC1wYWNrOiQzJyksIC9zListYlteO10rLywgJ2p1c3RpZnknKSArIFdFQktJVCArIHZhbHVlICsgdmFsdWVcblx0XHQvLyBqdXN0aWZ5LXNlbGZcblx0XHRjYXNlIDQyMDA6XG5cdFx0XHRpZiAoIW1hdGNoKHZhbHVlLCAvZmxleC18YmFzZWxpbmUvKSkgcmV0dXJuIE1TICsgJ2dyaWQtY29sdW1uLWFsaWduJyArIHN1YnN0cih2YWx1ZSwgbGVuZ3RoKSArIHZhbHVlXG5cdFx0XHRicmVha1xuXHRcdC8vIGdyaWQtdGVtcGxhdGUtKGNvbHVtbnN8cm93cylcblx0XHRjYXNlIDI1OTI6IGNhc2UgMzM2MDpcblx0XHRcdHJldHVybiBNUyArIHJlcGxhY2UodmFsdWUsICd0ZW1wbGF0ZS0nLCAnJykgKyB2YWx1ZVxuXHRcdC8vIGdyaWQtKHJvd3xjb2x1bW4pLXN0YXJ0XG5cdFx0Y2FzZSA0Mzg0OiBjYXNlIDM2MTY6XG5cdFx0XHRpZiAoY2hpbGRyZW4gJiYgY2hpbGRyZW4uc29tZShmdW5jdGlvbiAoZWxlbWVudCwgaW5kZXgpIHsgcmV0dXJuIGxlbmd0aCA9IGluZGV4LCBtYXRjaChlbGVtZW50LnByb3BzLCAvZ3JpZC1cXHcrLWVuZC8pIH0pKSB7XG5cdFx0XHRcdHJldHVybiB+aW5kZXhvZih2YWx1ZSArIChjaGlsZHJlbiA9IGNoaWxkcmVuW2xlbmd0aF0udmFsdWUpLCAnc3BhbicpID8gdmFsdWUgOiAoTVMgKyByZXBsYWNlKHZhbHVlLCAnLXN0YXJ0JywgJycpICsgdmFsdWUgKyBNUyArICdncmlkLXJvdy1zcGFuOicgKyAofmluZGV4b2YoY2hpbGRyZW4sICdzcGFuJykgPyBtYXRjaChjaGlsZHJlbiwgL1xcZCsvKSA6ICttYXRjaChjaGlsZHJlbiwgL1xcZCsvKSAtICttYXRjaCh2YWx1ZSwgL1xcZCsvKSkgKyAnOycpXG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gTVMgKyByZXBsYWNlKHZhbHVlLCAnLXN0YXJ0JywgJycpICsgdmFsdWVcblx0XHQvLyBncmlkLShyb3d8Y29sdW1uKS1lbmRcblx0XHRjYXNlIDQ4OTY6IGNhc2UgNDEyODpcblx0XHRcdHJldHVybiAoY2hpbGRyZW4gJiYgY2hpbGRyZW4uc29tZShmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gbWF0Y2goZWxlbWVudC5wcm9wcywgL2dyaWQtXFx3Ky1zdGFydC8pIH0pKSA/IHZhbHVlIDogTVMgKyByZXBsYWNlKHJlcGxhY2UodmFsdWUsICctZW5kJywgJy1zcGFuJyksICdzcGFuICcsICcnKSArIHZhbHVlXG5cdFx0Ly8gKG1hcmdpbnxwYWRkaW5nKS1pbmxpbmUtKHN0YXJ0fGVuZClcblx0XHRjYXNlIDQwOTU6IGNhc2UgMzU4MzogY2FzZSA0MDY4OiBjYXNlIDI1MzI6XG5cdFx0XHRyZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyguKyktaW5saW5lKC4rKS8sIFdFQktJVCArICckMSQyJykgKyB2YWx1ZVxuXHRcdC8vIChtaW58bWF4KT8od2lkdGh8aGVpZ2h0fGlubGluZS1zaXplfGJsb2NrLXNpemUpXG5cdFx0Y2FzZSA4MTE2OiBjYXNlIDcwNTk6IGNhc2UgNTc1MzogY2FzZSA1NTM1OlxuXHRcdGNhc2UgNTQ0NTogY2FzZSA1NzAxOiBjYXNlIDQ5MzM6IGNhc2UgNDY3Nzpcblx0XHRjYXNlIDU1MzM6IGNhc2UgNTc4OTogY2FzZSA1MDIxOiBjYXNlIDQ3NjU6XG5cdFx0XHQvLyBzdHJldGNoLCBtYXgtY29udGVudCwgbWluLWNvbnRlbnQsIGZpbGwtYXZhaWxhYmxlXG5cdFx0XHRpZiAoc3RybGVuKHZhbHVlKSAtIDEgLSBsZW5ndGggPiA2KVxuXHRcdFx0XHRzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgMSkpIHtcblx0XHRcdFx0XHQvLyAobSlheC1jb250ZW50LCAobSlpbi1jb250ZW50XG5cdFx0XHRcdFx0Y2FzZSAxMDk6XG5cdFx0XHRcdFx0XHQvLyAtXG5cdFx0XHRcdFx0XHRpZiAoY2hhcmF0KHZhbHVlLCBsZW5ndGggKyA0KSAhPT0gNDUpXG5cdFx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gKGYpaWxsLWF2YWlsYWJsZSwgKGYpaXQtY29udGVudFxuXHRcdFx0XHRcdGNhc2UgMTAyOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlcGxhY2UodmFsdWUsIC8oLis6KSguKyktKFteXSspLywgJyQxJyArIFdFQktJVCArICckMi0kMycgKyAnJDEnICsgTU9aICsgKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgMykgPT0gMTA4ID8gJyQzJyA6ICckMi0kMycpKSArIHZhbHVlXG5cdFx0XHRcdFx0Ly8gKHMpdHJldGNoXG5cdFx0XHRcdFx0Y2FzZSAxMTU6XG5cdFx0XHRcdFx0XHRyZXR1cm4gfmluZGV4b2YodmFsdWUsICdzdHJldGNoJykgPyBwcmVmaXgocmVwbGFjZSh2YWx1ZSwgJ3N0cmV0Y2gnLCAnZmlsbC1hdmFpbGFibGUnKSwgbGVuZ3RoLCBjaGlsZHJlbikgKyB2YWx1ZSA6IHZhbHVlXG5cdFx0XHRcdH1cblx0XHRcdGJyZWFrXG5cdFx0Ly8gZ3JpZC0oY29sdW1ufHJvdylcblx0XHRjYXNlIDUxNTI6IGNhc2UgNTkyMDpcblx0XHRcdHJldHVybiByZXBsYWNlKHZhbHVlLCAvKC4rPyk6KFxcZCspKFxccypcXC9cXHMqKHNwYW4pP1xccyooXFxkKykpPyguKikvLCBmdW5jdGlvbiAoXywgYSwgYiwgYywgZCwgZSwgZikgeyByZXR1cm4gKE1TICsgYSArICc6JyArIGIgKyBmKSArIChjID8gKE1TICsgYSArICctc3BhbjonICsgKGQgPyBlIDogK2UgLSArYikpICsgZiA6ICcnKSArIHZhbHVlIH0pXG5cdFx0Ly8gcG9zaXRpb246IHN0aWNreVxuXHRcdGNhc2UgNDk0OTpcblx0XHRcdC8vIHN0aWNrKHkpP1xuXHRcdFx0aWYgKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgNikgPT09IDEyMSlcblx0XHRcdFx0cmV0dXJuIHJlcGxhY2UodmFsdWUsICc6JywgJzonICsgV0VCS0lUKSArIHZhbHVlXG5cdFx0XHRicmVha1xuXHRcdC8vIGRpc3BsYXk6IChmbGV4fGlubGluZS1mbGV4fGdyaWR8aW5saW5lLWdyaWQpXG5cdFx0Y2FzZSA2NDQ0OlxuXHRcdFx0c3dpdGNoIChjaGFyYXQodmFsdWUsIGNoYXJhdCh2YWx1ZSwgMTQpID09PSA0NSA/IDE4IDogMTEpKSB7XG5cdFx0XHRcdC8vIChpbmxpbmUtKT9mbGUoeClcblx0XHRcdFx0Y2FzZSAxMjA6XG5cdFx0XHRcdFx0cmV0dXJuIHJlcGxhY2UodmFsdWUsIC8oLis6KShbXjtcXHMhXSspKDt8KFxccyspPyEuKyk/LywgJyQxJyArIFdFQktJVCArIChjaGFyYXQodmFsdWUsIDE0KSA9PT0gNDUgPyAnaW5saW5lLScgOiAnJykgKyAnYm94JDMnICsgJyQxJyArIFdFQktJVCArICckMiQzJyArICckMScgKyBNUyArICckMmJveCQzJykgKyB2YWx1ZVxuXHRcdFx0XHQvLyAoaW5saW5lLSk/Z3JpKGQpXG5cdFx0XHRcdGNhc2UgMTAwOlxuXHRcdFx0XHRcdHJldHVybiByZXBsYWNlKHZhbHVlLCAnOicsICc6JyArIE1TKSArIHZhbHVlXG5cdFx0XHR9XG5cdFx0XHRicmVha1xuXHRcdC8vIHNjcm9sbC1tYXJnaW4sIHNjcm9sbC1tYXJnaW4tKHRvcHxyaWdodHxib3R0b218bGVmdClcblx0XHRjYXNlIDU3MTk6IGNhc2UgMjY0NzogY2FzZSAyMTM1OiBjYXNlIDM5Mjc6IGNhc2UgMjM5MTpcblx0XHRcdHJldHVybiByZXBsYWNlKHZhbHVlLCAnc2Nyb2xsLScsICdzY3JvbGwtc25hcC0nKSArIHZhbHVlXG5cdH1cblxuXHRyZXR1cm4gdmFsdWVcbn1cbiIsImltcG9ydCB7TVMsIE1PWiwgV0VCS0lULCBSVUxFU0VULCBLRVlGUkFNRVMsIERFQ0xBUkFUSU9OfSBmcm9tICcuL0VudW0uanMnXG5pbXBvcnQge21hdGNoLCBjaGFyYXQsIHN1YnN0ciwgc3RybGVuLCBzaXplb2YsIHJlcGxhY2UsIGNvbWJpbmUsIGZpbHRlciwgYXNzaWdufSBmcm9tICcuL1V0aWxpdHkuanMnXG5pbXBvcnQge2NvcHksIGxpZnQsIHRva2VuaXplfSBmcm9tICcuL1Rva2VuaXplci5qcydcbmltcG9ydCB7c2VyaWFsaXplfSBmcm9tICcuL1NlcmlhbGl6ZXIuanMnXG5pbXBvcnQge3ByZWZpeH0gZnJvbSAnLi9QcmVmaXhlci5qcydcblxuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uW119IGNvbGxlY3Rpb25cbiAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWlkZGxld2FyZSAoY29sbGVjdGlvbikge1xuXHR2YXIgbGVuZ3RoID0gc2l6ZW9mKGNvbGxlY3Rpb24pXG5cblx0cmV0dXJuIGZ1bmN0aW9uIChlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4sIGNhbGxiYWNrKSB7XG5cdFx0dmFyIG91dHB1dCA9ICcnXG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxuXHRcdFx0b3V0cHV0ICs9IGNvbGxlY3Rpb25baV0oZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykgfHwgJydcblxuXHRcdHJldHVybiBvdXRwdXRcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVzaGVldCAoY2FsbGJhY2spIHtcblx0cmV0dXJuIGZ1bmN0aW9uIChlbGVtZW50KSB7XG5cdFx0aWYgKCFlbGVtZW50LnJvb3QpXG5cdFx0XHRpZiAoZWxlbWVudCA9IGVsZW1lbnQucmV0dXJuKVxuXHRcdFx0XHRjYWxsYmFjayhlbGVtZW50KVxuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGVsZW1lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtvYmplY3RbXX0gY2hpbGRyZW5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcmVmaXhlciAoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHRpZiAoZWxlbWVudC5sZW5ndGggPiAtMSlcblx0XHRpZiAoIWVsZW1lbnQucmV0dXJuKVxuXHRcdFx0c3dpdGNoIChlbGVtZW50LnR5cGUpIHtcblx0XHRcdFx0Y2FzZSBERUNMQVJBVElPTjogZWxlbWVudC5yZXR1cm4gPSBwcmVmaXgoZWxlbWVudC52YWx1ZSwgZWxlbWVudC5sZW5ndGgsIGNoaWxkcmVuKVxuXHRcdFx0XHRcdHJldHVyblxuXHRcdFx0XHRjYXNlIEtFWUZSQU1FUzpcblx0XHRcdFx0XHRyZXR1cm4gc2VyaWFsaXplKFtjb3B5KGVsZW1lbnQsIHt2YWx1ZTogcmVwbGFjZShlbGVtZW50LnZhbHVlLCAnQCcsICdAJyArIFdFQktJVCl9KV0sIGNhbGxiYWNrKVxuXHRcdFx0XHRjYXNlIFJVTEVTRVQ6XG5cdFx0XHRcdFx0aWYgKGVsZW1lbnQubGVuZ3RoKVxuXHRcdFx0XHRcdFx0cmV0dXJuIGNvbWJpbmUoY2hpbGRyZW4gPSBlbGVtZW50LnByb3BzLCBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0XHRcdFx0c3dpdGNoIChtYXRjaCh2YWx1ZSwgY2FsbGJhY2sgPSAvKDo6cGxhY1xcdyt8OnJlYWQtXFx3KykvKSkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIDpyZWFkLShvbmx5fHdyaXRlKVxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgJzpyZWFkLW9ubHknOiBjYXNlICc6cmVhZC13cml0ZSc6XG5cdFx0XHRcdFx0XHRcdFx0XHRsaWZ0KGNvcHkoZWxlbWVudCwge3Byb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocmVhZC1cXHcrKS8sICc6JyArIE1PWiArICckMScpXX0pKVxuXHRcdFx0XHRcdFx0XHRcdFx0bGlmdChjb3B5KGVsZW1lbnQsIHtwcm9wczogW3ZhbHVlXX0pKVxuXHRcdFx0XHRcdFx0XHRcdFx0YXNzaWduKGVsZW1lbnQsIHtwcm9wczogZmlsdGVyKGNoaWxkcmVuLCBjYWxsYmFjayl9KVxuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHRcdFx0XHQvLyA6cGxhY2Vob2xkZXJcblx0XHRcdFx0XHRcdFx0XHRjYXNlICc6OnBsYWNlaG9sZGVyJzpcblx0XHRcdFx0XHRcdFx0XHRcdGxpZnQoY29weShlbGVtZW50LCB7cHJvcHM6IFtyZXBsYWNlKHZhbHVlLCAvOihwbGFjXFx3KykvLCAnOicgKyBXRUJLSVQgKyAnaW5wdXQtJDEnKV19KSlcblx0XHRcdFx0XHRcdFx0XHRcdGxpZnQoY29weShlbGVtZW50LCB7cHJvcHM6IFtyZXBsYWNlKHZhbHVlLCAvOihwbGFjXFx3KykvLCAnOicgKyBNT1ogKyAnJDEnKV19KSlcblx0XHRcdFx0XHRcdFx0XHRcdGxpZnQoY29weShlbGVtZW50LCB7cHJvcHM6IFtyZXBsYWNlKHZhbHVlLCAvOihwbGFjXFx3KykvLCBNUyArICdpbnB1dC0kMScpXX0pKVxuXHRcdFx0XHRcdFx0XHRcdFx0bGlmdChjb3B5KGVsZW1lbnQsIHtwcm9wczogW3ZhbHVlXX0pKVxuXHRcdFx0XHRcdFx0XHRcdFx0YXNzaWduKGVsZW1lbnQsIHtwcm9wczogZmlsdGVyKGNoaWxkcmVuLCBjYWxsYmFjayl9KVxuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdHJldHVybiAnJ1xuXHRcdFx0XHRcdFx0fSlcblx0XHRcdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZWxlbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge29iamVjdFtdfSBjaGlsZHJlblxuICovXG5leHBvcnQgZnVuY3Rpb24gbmFtZXNwYWNlIChlbGVtZW50KSB7XG5cdHN3aXRjaCAoZWxlbWVudC50eXBlKSB7XG5cdFx0Y2FzZSBSVUxFU0VUOlxuXHRcdFx0ZWxlbWVudC5wcm9wcyA9IGVsZW1lbnQucHJvcHMubWFwKGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0XHRyZXR1cm4gY29tYmluZSh0b2tlbml6ZSh2YWx1ZSksIGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgsIGNoaWxkcmVuKSB7XG5cdFx0XHRcdFx0c3dpdGNoIChjaGFyYXQodmFsdWUsIDApKSB7XG5cdFx0XHRcdFx0XHQvLyBcXGZcblx0XHRcdFx0XHRcdGNhc2UgMTI6XG5cdFx0XHRcdFx0XHRcdHJldHVybiBzdWJzdHIodmFsdWUsIDEsIHN0cmxlbih2YWx1ZSkpXG5cdFx0XHRcdFx0XHQvLyBcXDAgKCArID4gflxuXHRcdFx0XHRcdFx0Y2FzZSAwOiBjYXNlIDQwOiBjYXNlIDQzOiBjYXNlIDYyOiBjYXNlIDEyNjpcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlXG5cdFx0XHRcdFx0XHQvLyA6XG5cdFx0XHRcdFx0XHRjYXNlIDU4OlxuXHRcdFx0XHRcdFx0XHRpZiAoY2hpbGRyZW5bKytpbmRleF0gPT09ICdnbG9iYWwnKVxuXHRcdFx0XHRcdFx0XHRcdGNoaWxkcmVuW2luZGV4XSA9ICcnLCBjaGlsZHJlblsrK2luZGV4XSA9ICdcXGYnICsgc3Vic3RyKGNoaWxkcmVuW2luZGV4XSwgaW5kZXggPSAxLCAtMSlcblx0XHRcdFx0XHRcdC8vIFxcc1xuXHRcdFx0XHRcdFx0Y2FzZSAzMjpcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGluZGV4ID09PSAxID8gJycgOiB2YWx1ZVxuXHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0c3dpdGNoIChpbmRleCkge1xuXHRcdFx0XHRcdFx0XHRcdGNhc2UgMDogZWxlbWVudCA9IHZhbHVlXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gc2l6ZW9mKGNoaWxkcmVuKSA+IDEgPyAnJyA6IHZhbHVlXG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSBpbmRleCA9IHNpemVvZihjaGlsZHJlbikgLSAxOiBjYXNlIDI6XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gaW5kZXggPT09IDIgPyB2YWx1ZSArIGVsZW1lbnQgKyBlbGVtZW50IDogdmFsdWUgKyBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KVxuXHRcdFx0fSlcblx0fVxufVxuIiwiaW1wb3J0IHtDT01NRU5ULCBSVUxFU0VULCBERUNMQVJBVElPTn0gZnJvbSAnLi9FbnVtLmpzJ1xuaW1wb3J0IHthYnMsIGNoYXJhdCwgdHJpbSwgZnJvbSwgc2l6ZW9mLCBzdHJsZW4sIHN1YnN0ciwgYXBwZW5kLCByZXBsYWNlLCBpbmRleG9mfSBmcm9tICcuL1V0aWxpdHkuanMnXG5pbXBvcnQge25vZGUsIGNoYXIsIHByZXYsIG5leHQsIHBlZWssIGNhcmV0LCBhbGxvYywgZGVhbGxvYywgZGVsaW1pdCwgd2hpdGVzcGFjZSwgZXNjYXBpbmcsIGlkZW50aWZpZXIsIGNvbW1lbnRlcn0gZnJvbSAnLi9Ub2tlbml6ZXIuanMnXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtvYmplY3RbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBpbGUgKHZhbHVlKSB7XG5cdHJldHVybiBkZWFsbG9jKHBhcnNlKCcnLCBudWxsLCBudWxsLCBudWxsLCBbJyddLCB2YWx1ZSA9IGFsbG9jKHZhbHVlKSwgMCwgWzBdLCB2YWx1ZSkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3Q/fSBwYXJlbnRcbiAqIEBwYXJhbSB7c3RyaW5nW119IHJ1bGVcbiAqIEBwYXJhbSB7c3RyaW5nW119IHJ1bGVzXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlc2V0c1xuICogQHBhcmFtIHtudW1iZXJbXX0gcHNldWRvXG4gKiBAcGFyYW0ge251bWJlcltdfSBwb2ludHNcbiAqIEBwYXJhbSB7c3RyaW5nW119IGRlY2xhcmF0aW9uc1xuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UgKHZhbHVlLCByb290LCBwYXJlbnQsIHJ1bGUsIHJ1bGVzLCBydWxlc2V0cywgcHNldWRvLCBwb2ludHMsIGRlY2xhcmF0aW9ucykge1xuXHR2YXIgaW5kZXggPSAwXG5cdHZhciBvZmZzZXQgPSAwXG5cdHZhciBsZW5ndGggPSBwc2V1ZG9cblx0dmFyIGF0cnVsZSA9IDBcblx0dmFyIHByb3BlcnR5ID0gMFxuXHR2YXIgcHJldmlvdXMgPSAwXG5cdHZhciB2YXJpYWJsZSA9IDFcblx0dmFyIHNjYW5uaW5nID0gMVxuXHR2YXIgYW1wZXJzYW5kID0gMVxuXHR2YXIgY2hhcmFjdGVyID0gMFxuXHR2YXIgdHlwZSA9ICcnXG5cdHZhciBwcm9wcyA9IHJ1bGVzXG5cdHZhciBjaGlsZHJlbiA9IHJ1bGVzZXRzXG5cdHZhciByZWZlcmVuY2UgPSBydWxlXG5cdHZhciBjaGFyYWN0ZXJzID0gdHlwZVxuXG5cdHdoaWxlIChzY2FubmluZylcblx0XHRzd2l0Y2ggKHByZXZpb3VzID0gY2hhcmFjdGVyLCBjaGFyYWN0ZXIgPSBuZXh0KCkpIHtcblx0XHRcdC8vIChcblx0XHRcdGNhc2UgNDA6XG5cdFx0XHRcdGlmIChwcmV2aW91cyAhPSAxMDggJiYgY2hhcmF0KGNoYXJhY3RlcnMsIGxlbmd0aCAtIDEpID09IDU4KSB7XG5cdFx0XHRcdFx0aWYgKGluZGV4b2YoY2hhcmFjdGVycyArPSByZXBsYWNlKGRlbGltaXQoY2hhcmFjdGVyKSwgJyYnLCAnJlxcZicpLCAnJlxcZicpICE9IC0xKVxuXHRcdFx0XHRcdFx0YW1wZXJzYW5kID0gLTFcblx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHR9XG5cdFx0XHQvLyBcIiAnIFtcblx0XHRcdGNhc2UgMzQ6IGNhc2UgMzk6IGNhc2UgOTE6XG5cdFx0XHRcdGNoYXJhY3RlcnMgKz0gZGVsaW1pdChjaGFyYWN0ZXIpXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyBcXHQgXFxuIFxcciBcXHNcblx0XHRcdGNhc2UgOTogY2FzZSAxMDogY2FzZSAxMzogY2FzZSAzMjpcblx0XHRcdFx0Y2hhcmFjdGVycyArPSB3aGl0ZXNwYWNlKHByZXZpb3VzKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8gXFxcblx0XHRcdGNhc2UgOTI6XG5cdFx0XHRcdGNoYXJhY3RlcnMgKz0gZXNjYXBpbmcoY2FyZXQoKSAtIDEsIDcpXG5cdFx0XHRcdGNvbnRpbnVlXG5cdFx0XHQvLyAvXG5cdFx0XHRjYXNlIDQ3OlxuXHRcdFx0XHRzd2l0Y2ggKHBlZWsoKSkge1xuXHRcdFx0XHRcdGNhc2UgNDI6IGNhc2UgNDc6XG5cdFx0XHRcdFx0XHRhcHBlbmQoY29tbWVudChjb21tZW50ZXIobmV4dCgpLCBjYXJldCgpKSwgcm9vdCwgcGFyZW50LCBkZWNsYXJhdGlvbnMpLCBkZWNsYXJhdGlvbnMpXG5cdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRjaGFyYWN0ZXJzICs9ICcvJ1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyB7XG5cdFx0XHRjYXNlIDEyMyAqIHZhcmlhYmxlOlxuXHRcdFx0XHRwb2ludHNbaW5kZXgrK10gPSBzdHJsZW4oY2hhcmFjdGVycykgKiBhbXBlcnNhbmRcblx0XHRcdC8vIH0gOyBcXDBcblx0XHRcdGNhc2UgMTI1ICogdmFyaWFibGU6IGNhc2UgNTk6IGNhc2UgMDpcblx0XHRcdFx0c3dpdGNoIChjaGFyYWN0ZXIpIHtcblx0XHRcdFx0XHQvLyBcXDAgfVxuXHRcdFx0XHRcdGNhc2UgMDogY2FzZSAxMjU6IHNjYW5uaW5nID0gMFxuXHRcdFx0XHRcdC8vIDtcblx0XHRcdFx0XHRjYXNlIDU5ICsgb2Zmc2V0OiBpZiAoYW1wZXJzYW5kID09IC0xKSBjaGFyYWN0ZXJzID0gcmVwbGFjZShjaGFyYWN0ZXJzLCAvXFxmL2csICcnKVxuXHRcdFx0XHRcdFx0aWYgKHByb3BlcnR5ID4gMCAmJiAoc3RybGVuKGNoYXJhY3RlcnMpIC0gbGVuZ3RoKSlcblx0XHRcdFx0XHRcdFx0YXBwZW5kKHByb3BlcnR5ID4gMzIgPyBkZWNsYXJhdGlvbihjaGFyYWN0ZXJzICsgJzsnLCBydWxlLCBwYXJlbnQsIGxlbmd0aCAtIDEsIGRlY2xhcmF0aW9ucykgOiBkZWNsYXJhdGlvbihyZXBsYWNlKGNoYXJhY3RlcnMsICcgJywgJycpICsgJzsnLCBydWxlLCBwYXJlbnQsIGxlbmd0aCAtIDIsIGRlY2xhcmF0aW9ucyksIGRlY2xhcmF0aW9ucylcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gQCA7XG5cdFx0XHRcdFx0Y2FzZSA1OTogY2hhcmFjdGVycyArPSAnOydcblx0XHRcdFx0XHQvLyB7IHJ1bGUvYXQtcnVsZVxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRhcHBlbmQocmVmZXJlbmNlID0gcnVsZXNldChjaGFyYWN0ZXJzLCByb290LCBwYXJlbnQsIGluZGV4LCBvZmZzZXQsIHJ1bGVzLCBwb2ludHMsIHR5cGUsIHByb3BzID0gW10sIGNoaWxkcmVuID0gW10sIGxlbmd0aCwgcnVsZXNldHMpLCBydWxlc2V0cylcblxuXHRcdFx0XHRcdFx0aWYgKGNoYXJhY3RlciA9PT0gMTIzKVxuXHRcdFx0XHRcdFx0XHRpZiAob2Zmc2V0ID09PSAwKVxuXHRcdFx0XHRcdFx0XHRcdHBhcnNlKGNoYXJhY3RlcnMsIHJvb3QsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCBwcm9wcywgcnVsZXNldHMsIGxlbmd0aCwgcG9pbnRzLCBjaGlsZHJlbilcblx0XHRcdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0XHRcdHN3aXRjaCAoYXRydWxlID09PSA5OSAmJiBjaGFyYXQoY2hhcmFjdGVycywgMykgPT09IDExMCA/IDEwMCA6IGF0cnVsZSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gZCBsIG0gc1xuXHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSAxMDA6IGNhc2UgMTA4OiBjYXNlIDEwOTogY2FzZSAxMTU6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHBhcnNlKHZhbHVlLCByZWZlcmVuY2UsIHJlZmVyZW5jZSwgcnVsZSAmJiBhcHBlbmQocnVsZXNldCh2YWx1ZSwgcmVmZXJlbmNlLCByZWZlcmVuY2UsIDAsIDAsIHJ1bGVzLCBwb2ludHMsIHR5cGUsIHJ1bGVzLCBwcm9wcyA9IFtdLCBsZW5ndGgsIGNoaWxkcmVuKSwgY2hpbGRyZW4pLCBydWxlcywgY2hpbGRyZW4sIGxlbmd0aCwgcG9pbnRzLCBydWxlID8gcHJvcHMgOiBjaGlsZHJlbilcblx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHBhcnNlKGNoYXJhY3RlcnMsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCByZWZlcmVuY2UsIFsnJ10sIGNoaWxkcmVuLCAwLCBwb2ludHMsIGNoaWxkcmVuKVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGluZGV4ID0gb2Zmc2V0ID0gcHJvcGVydHkgPSAwLCB2YXJpYWJsZSA9IGFtcGVyc2FuZCA9IDEsIHR5cGUgPSBjaGFyYWN0ZXJzID0gJycsIGxlbmd0aCA9IHBzZXVkb1xuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8gOlxuXHRcdFx0Y2FzZSA1ODpcblx0XHRcdFx0bGVuZ3RoID0gMSArIHN0cmxlbihjaGFyYWN0ZXJzKSwgcHJvcGVydHkgPSBwcmV2aW91c1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0aWYgKHZhcmlhYmxlIDwgMSlcblx0XHRcdFx0XHRpZiAoY2hhcmFjdGVyID09IDEyMylcblx0XHRcdFx0XHRcdC0tdmFyaWFibGVcblx0XHRcdFx0XHRlbHNlIGlmIChjaGFyYWN0ZXIgPT0gMTI1ICYmIHZhcmlhYmxlKysgPT0gMCAmJiBwcmV2KCkgPT0gMTI1KVxuXHRcdFx0XHRcdFx0Y29udGludWVcblxuXHRcdFx0XHRzd2l0Y2ggKGNoYXJhY3RlcnMgKz0gZnJvbShjaGFyYWN0ZXIpLCBjaGFyYWN0ZXIgKiB2YXJpYWJsZSkge1xuXHRcdFx0XHRcdC8vICZcblx0XHRcdFx0XHRjYXNlIDM4OlxuXHRcdFx0XHRcdFx0YW1wZXJzYW5kID0gb2Zmc2V0ID4gMCA/IDEgOiAoY2hhcmFjdGVycyArPSAnXFxmJywgLTEpXG5cdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdC8vICxcblx0XHRcdFx0XHRjYXNlIDQ0OlxuXHRcdFx0XHRcdFx0cG9pbnRzW2luZGV4KytdID0gKHN0cmxlbihjaGFyYWN0ZXJzKSAtIDEpICogYW1wZXJzYW5kLCBhbXBlcnNhbmQgPSAxXG5cdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdC8vIEBcblx0XHRcdFx0XHRjYXNlIDY0OlxuXHRcdFx0XHRcdFx0Ly8gLVxuXHRcdFx0XHRcdFx0aWYgKHBlZWsoKSA9PT0gNDUpXG5cdFx0XHRcdFx0XHRcdGNoYXJhY3RlcnMgKz0gZGVsaW1pdChuZXh0KCkpXG5cblx0XHRcdFx0XHRcdGF0cnVsZSA9IHBlZWsoKSwgb2Zmc2V0ID0gbGVuZ3RoID0gc3RybGVuKHR5cGUgPSBjaGFyYWN0ZXJzICs9IGlkZW50aWZpZXIoY2FyZXQoKSkpLCBjaGFyYWN0ZXIrK1xuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHQvLyAtXG5cdFx0XHRcdFx0Y2FzZSA0NTpcblx0XHRcdFx0XHRcdGlmIChwcmV2aW91cyA9PT0gNDUgJiYgc3RybGVuKGNoYXJhY3RlcnMpID09IDIpXG5cdFx0XHRcdFx0XHRcdHZhcmlhYmxlID0gMFxuXHRcdFx0XHR9XG5cdFx0fVxuXG5cdHJldHVybiBydWxlc2V0c1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0P30gcGFyZW50XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAqIEBwYXJhbSB7c3RyaW5nW119IHJ1bGVzXG4gKiBAcGFyYW0ge251bWJlcltdfSBwb2ludHNcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBwcm9wc1xuICogQHBhcmFtIHtzdHJpbmdbXX0gY2hpbGRyZW5cbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqIEBwYXJhbSB7b2JqZWN0W119IHNpYmxpbmdzXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydWxlc2V0ICh2YWx1ZSwgcm9vdCwgcGFyZW50LCBpbmRleCwgb2Zmc2V0LCBydWxlcywgcG9pbnRzLCB0eXBlLCBwcm9wcywgY2hpbGRyZW4sIGxlbmd0aCwgc2libGluZ3MpIHtcblx0dmFyIHBvc3QgPSBvZmZzZXQgLSAxXG5cdHZhciBydWxlID0gb2Zmc2V0ID09PSAwID8gcnVsZXMgOiBbJyddXG5cdHZhciBzaXplID0gc2l6ZW9mKHJ1bGUpXG5cblx0Zm9yICh2YXIgaSA9IDAsIGogPSAwLCBrID0gMDsgaSA8IGluZGV4OyArK2kpXG5cdFx0Zm9yICh2YXIgeCA9IDAsIHkgPSBzdWJzdHIodmFsdWUsIHBvc3QgKyAxLCBwb3N0ID0gYWJzKGogPSBwb2ludHNbaV0pKSwgeiA9IHZhbHVlOyB4IDwgc2l6ZTsgKyt4KVxuXHRcdFx0aWYgKHogPSB0cmltKGogPiAwID8gcnVsZVt4XSArICcgJyArIHkgOiByZXBsYWNlKHksIC8mXFxmL2csIHJ1bGVbeF0pKSlcblx0XHRcdFx0cHJvcHNbaysrXSA9IHpcblxuXHRyZXR1cm4gbm9kZSh2YWx1ZSwgcm9vdCwgcGFyZW50LCBvZmZzZXQgPT09IDAgPyBSVUxFU0VUIDogdHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBsZW5ndGgsIHNpYmxpbmdzKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0P30gcGFyZW50XG4gKiBAcGFyYW0ge29iamVjdFtdfSBzaWJsaW5nc1xuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tbWVudCAodmFsdWUsIHJvb3QsIHBhcmVudCwgc2libGluZ3MpIHtcblx0cmV0dXJuIG5vZGUodmFsdWUsIHJvb3QsIHBhcmVudCwgQ09NTUVOVCwgZnJvbShjaGFyKCkpLCBzdWJzdHIodmFsdWUsIDIsIC0yKSwgMCwgc2libGluZ3MpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3Q/fSBwYXJlbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqIEBwYXJhbSB7b2JqZWN0W119IHNpYmxpbmdzXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNsYXJhdGlvbiAodmFsdWUsIHJvb3QsIHBhcmVudCwgbGVuZ3RoLCBzaWJsaW5ncykge1xuXHRyZXR1cm4gbm9kZSh2YWx1ZSwgcm9vdCwgcGFyZW50LCBERUNMQVJBVElPTiwgc3Vic3RyKHZhbHVlLCAwLCBsZW5ndGgpLCBzdWJzdHIodmFsdWUsIGxlbmd0aCArIDEsIC0xKSwgbGVuZ3RoLCBzaWJsaW5ncylcbn1cbiIsInZhciB1bml0bGVzc0tleXMgPSB7XG4gIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiAxLFxuICBhc3BlY3RSYXRpbzogMSxcbiAgYm9yZGVySW1hZ2VPdXRzZXQ6IDEsXG4gIGJvcmRlckltYWdlU2xpY2U6IDEsXG4gIGJvcmRlckltYWdlV2lkdGg6IDEsXG4gIGJveEZsZXg6IDEsXG4gIGJveEZsZXhHcm91cDogMSxcbiAgYm94T3JkaW5hbEdyb3VwOiAxLFxuICBjb2x1bW5Db3VudDogMSxcbiAgY29sdW1uczogMSxcbiAgZmxleDogMSxcbiAgZmxleEdyb3c6IDEsXG4gIGZsZXhQb3NpdGl2ZTogMSxcbiAgZmxleFNocmluazogMSxcbiAgZmxleE5lZ2F0aXZlOiAxLFxuICBmbGV4T3JkZXI6IDEsXG4gIGdyaWRSb3c6IDEsXG4gIGdyaWRSb3dFbmQ6IDEsXG4gIGdyaWRSb3dTcGFuOiAxLFxuICBncmlkUm93U3RhcnQ6IDEsXG4gIGdyaWRDb2x1bW46IDEsXG4gIGdyaWRDb2x1bW5FbmQ6IDEsXG4gIGdyaWRDb2x1bW5TcGFuOiAxLFxuICBncmlkQ29sdW1uU3RhcnQ6IDEsXG4gIG1zR3JpZFJvdzogMSxcbiAgbXNHcmlkUm93U3BhbjogMSxcbiAgbXNHcmlkQ29sdW1uOiAxLFxuICBtc0dyaWRDb2x1bW5TcGFuOiAxLFxuICBmb250V2VpZ2h0OiAxLFxuICBsaW5lSGVpZ2h0OiAxLFxuICBvcGFjaXR5OiAxLFxuICBvcmRlcjogMSxcbiAgb3JwaGFuczogMSxcbiAgdGFiU2l6ZTogMSxcbiAgd2lkb3dzOiAxLFxuICB6SW5kZXg6IDEsXG4gIHpvb206IDEsXG4gIFdlYmtpdExpbmVDbGFtcDogMSxcbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogMSxcbiAgZmxvb2RPcGFjaXR5OiAxLFxuICBzdG9wT3BhY2l0eTogMSxcbiAgc3Ryb2tlRGFzaGFycmF5OiAxLFxuICBzdHJva2VEYXNob2Zmc2V0OiAxLFxuICBzdHJva2VNaXRlcmxpbWl0OiAxLFxuICBzdHJva2VPcGFjaXR5OiAxLFxuICBzdHJva2VXaWR0aDogMVxufTtcblxuZXhwb3J0IHsgdW5pdGxlc3NLZXlzIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydHtfX3NwcmVhZEFycmF5IGFzIGUsX19hc3NpZ24gYXMgdH1mcm9tXCJ0c2xpYlwiO2ltcG9ydCBuIGZyb21cIkBlbW90aW9uL2lzLXByb3AtdmFsaWRcIjtpbXBvcnQgbyx7dXNlUmVmIGFzIHIsdXNlU3RhdGUgYXMgcyx1c2VNZW1vIGFzIGksdXNlRWZmZWN0IGFzIGEsdXNlQ29udGV4dCBhcyBjLHVzZURlYnVnVmFsdWUgYXMgbCxjcmVhdGVFbGVtZW50IGFzIHV9ZnJvbVwicmVhY3RcIjtpbXBvcnQgcCBmcm9tXCJzaGFsbG93ZXF1YWxcIjtpbXBvcnQqYXMgZCBmcm9tXCJzdHlsaXNcIjtpbXBvcnQgaCBmcm9tXCJAZW1vdGlvbi91bml0bGVzc1wiO3ZhciBmPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBwcm9jZXNzJiZ2b2lkIDAhPT1wcm9jZXNzLmVudiYmKHByb2Nlc3MuZW52LlJFQUNUX0FQUF9TQ19BVFRSfHxwcm9jZXNzLmVudi5TQ19BVFRSKXx8XCJkYXRhLXN0eWxlZFwiLG09XCI2LjAuN1wiLHk9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmXCJIVE1MRWxlbWVudFwiaW4gd2luZG93LHY9Qm9vbGVhbihcImJvb2xlYW5cIj09dHlwZW9mIFNDX0RJU0FCTEVfU1BFRURZP1NDX0RJU0FCTEVfU1BFRURZOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBwcm9jZXNzJiZ2b2lkIDAhPT1wcm9jZXNzLmVudiYmdm9pZCAwIT09cHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX1NDX0RJU0FCTEVfU1BFRURZJiZcIlwiIT09cHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX1NDX0RJU0FCTEVfU1BFRURZP1wiZmFsc2VcIiE9PXByb2Nlc3MuZW52LlJFQUNUX0FQUF9TQ19ESVNBQkxFX1NQRUVEWSYmcHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX1NDX0RJU0FCTEVfU1BFRURZOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBwcm9jZXNzJiZ2b2lkIDAhPT1wcm9jZXNzLmVudiYmdm9pZCAwIT09cHJvY2Vzcy5lbnYuU0NfRElTQUJMRV9TUEVFRFkmJlwiXCIhPT1wcm9jZXNzLmVudi5TQ19ESVNBQkxFX1NQRUVEWT9cImZhbHNlXCIhPT1wcm9jZXNzLmVudi5TQ19ESVNBQkxFX1NQRUVEWSYmcHJvY2Vzcy5lbnYuU0NfRElTQUJMRV9TUEVFRFk6XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViksZz17fSxTPS9pbnZhbGlkIGhvb2sgY2FsbC9pLHc9bmV3IFNldCxiPWZ1bmN0aW9uKHQsbil7aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVil7dmFyIG89bj8nIHdpdGggdGhlIGlkIG9mIFwiJy5jb25jYXQobiwnXCInKTpcIlwiLHM9XCJUaGUgY29tcG9uZW50IFwiLmNvbmNhdCh0KS5jb25jYXQobyxcIiBoYXMgYmVlbiBjcmVhdGVkIGR5bmFtaWNhbGx5LlxcblwiKStcIllvdSBtYXkgc2VlIHRoaXMgd2FybmluZyBiZWNhdXNlIHlvdSd2ZSBjYWxsZWQgc3R5bGVkIGluc2lkZSBhbm90aGVyIGNvbXBvbmVudC5cXG5UbyByZXNvbHZlIHRoaXMgb25seSBjcmVhdGUgbmV3IFN0eWxlZENvbXBvbmVudHMgb3V0c2lkZSBvZiBhbnkgcmVuZGVyIG1ldGhvZCBhbmQgZnVuY3Rpb24gY29tcG9uZW50LlwiLGk9Y29uc29sZS5lcnJvcjt0cnl7dmFyIGE9ITA7Y29uc29sZS5lcnJvcj1mdW5jdGlvbih0KXtmb3IodmFyIG49W10sbz0xO288YXJndW1lbnRzLmxlbmd0aDtvKyspbltvLTFdPWFyZ3VtZW50c1tvXTtTLnRlc3QodCk/KGE9ITEsdy5kZWxldGUocykpOmkuYXBwbHkodm9pZCAwLGUoW3RdLG4sITEpKX0scigpLGEmJiF3LmhhcyhzKSYmKGNvbnNvbGUud2FybihzKSx3LmFkZChzKSl9Y2F0Y2goZSl7Uy50ZXN0KGUubWVzc2FnZSkmJncuZGVsZXRlKHMpfWZpbmFsbHl7Y29uc29sZS5lcnJvcj1pfX19LEU9T2JqZWN0LmZyZWV6ZShbXSksTj1PYmplY3QuZnJlZXplKHt9KTtmdW5jdGlvbiBQKGUsdCxuKXtyZXR1cm4gdm9pZCAwPT09biYmKG49TiksZS50aGVtZSE9PW4udGhlbWUmJmUudGhlbWV8fHR8fG4udGhlbWV9dmFyIF89bmV3IFNldChbXCJhXCIsXCJhYmJyXCIsXCJhZGRyZXNzXCIsXCJhcmVhXCIsXCJhcnRpY2xlXCIsXCJhc2lkZVwiLFwiYXVkaW9cIixcImJcIixcImJhc2VcIixcImJkaVwiLFwiYmRvXCIsXCJiaWdcIixcImJsb2NrcXVvdGVcIixcImJvZHlcIixcImJyXCIsXCJidXR0b25cIixcImNhbnZhc1wiLFwiY2FwdGlvblwiLFwiY2l0ZVwiLFwiY29kZVwiLFwiY29sXCIsXCJjb2xncm91cFwiLFwiZGF0YVwiLFwiZGF0YWxpc3RcIixcImRkXCIsXCJkZWxcIixcImRldGFpbHNcIixcImRmblwiLFwiZGlhbG9nXCIsXCJkaXZcIixcImRsXCIsXCJkdFwiLFwiZW1cIixcImVtYmVkXCIsXCJmaWVsZHNldFwiLFwiZmlnY2FwdGlvblwiLFwiZmlndXJlXCIsXCJmb290ZXJcIixcImZvcm1cIixcImgxXCIsXCJoMlwiLFwiaDNcIixcImg0XCIsXCJoNVwiLFwiaDZcIixcImhlYWRcIixcImhlYWRlclwiLFwiaGdyb3VwXCIsXCJoclwiLFwiaHRtbFwiLFwiaVwiLFwiaWZyYW1lXCIsXCJpbWdcIixcImlucHV0XCIsXCJpbnNcIixcImtiZFwiLFwia2V5Z2VuXCIsXCJsYWJlbFwiLFwibGVnZW5kXCIsXCJsaVwiLFwibGlua1wiLFwibWFpblwiLFwibWFwXCIsXCJtYXJrXCIsXCJtZW51XCIsXCJtZW51aXRlbVwiLFwibWV0YVwiLFwibWV0ZXJcIixcIm5hdlwiLFwibm9zY3JpcHRcIixcIm9iamVjdFwiLFwib2xcIixcIm9wdGdyb3VwXCIsXCJvcHRpb25cIixcIm91dHB1dFwiLFwicFwiLFwicGFyYW1cIixcInBpY3R1cmVcIixcInByZVwiLFwicHJvZ3Jlc3NcIixcInFcIixcInJwXCIsXCJydFwiLFwicnVieVwiLFwic1wiLFwic2FtcFwiLFwic2NyaXB0XCIsXCJzZWN0aW9uXCIsXCJzZWxlY3RcIixcInNtYWxsXCIsXCJzb3VyY2VcIixcInNwYW5cIixcInN0cm9uZ1wiLFwic3R5bGVcIixcInN1YlwiLFwic3VtbWFyeVwiLFwic3VwXCIsXCJ0YWJsZVwiLFwidGJvZHlcIixcInRkXCIsXCJ0ZXh0YXJlYVwiLFwidGZvb3RcIixcInRoXCIsXCJ0aGVhZFwiLFwidGltZVwiLFwidGl0bGVcIixcInRyXCIsXCJ0cmFja1wiLFwidVwiLFwidWxcIixcInVzZVwiLFwidmFyXCIsXCJ2aWRlb1wiLFwid2JyXCIsXCJjaXJjbGVcIixcImNsaXBQYXRoXCIsXCJkZWZzXCIsXCJlbGxpcHNlXCIsXCJmb3JlaWduT2JqZWN0XCIsXCJnXCIsXCJpbWFnZVwiLFwibGluZVwiLFwibGluZWFyR3JhZGllbnRcIixcIm1hcmtlclwiLFwibWFza1wiLFwicGF0aFwiLFwicGF0dGVyblwiLFwicG9seWdvblwiLFwicG9seWxpbmVcIixcInJhZGlhbEdyYWRpZW50XCIsXCJyZWN0XCIsXCJzdG9wXCIsXCJzdmdcIixcInRleHRcIixcInRzcGFuXCJdKSxDPS9bIVwiIyQlJicoKSorLC4vOjs8PT4/QFtcXFxcXFxdXmB7fH1+LV0rL2csST0vKF4tfC0kKS9nO2Z1bmN0aW9uIEEoZSl7cmV0dXJuIGUucmVwbGFjZShDLFwiLVwiKS5yZXBsYWNlKEksXCJcIil9dmFyIE89LyhhKShkKS9naSxEPWZ1bmN0aW9uKGUpe3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGUrKGU+MjU/Mzk6OTcpKX07ZnVuY3Rpb24gUihlKXt2YXIgdCxuPVwiXCI7Zm9yKHQ9TWF0aC5hYnMoZSk7dD41Mjt0PXQvNTJ8MCluPUQodCU1MikrbjtyZXR1cm4oRCh0JTUyKStuKS5yZXBsYWNlKE8sXCIkMS0kMlwiKX12YXIgVCxrPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPXQubGVuZ3RoO247KWU9MzMqZV50LmNoYXJDb2RlQXQoLS1uKTtyZXR1cm4gZX0saj1mdW5jdGlvbihlKXtyZXR1cm4gayg1MzgxLGUpfTtmdW5jdGlvbiB4KGUpe3JldHVybiBSKGooZSk+Pj4wKX1mdW5jdGlvbiBWKGUpe3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJlwic3RyaW5nXCI9PXR5cGVvZiBlJiZlfHxlLmRpc3BsYXlOYW1lfHxlLm5hbWV8fFwiQ29tcG9uZW50XCJ9ZnVuY3Rpb24gTShlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZSYmKFwicHJvZHVjdGlvblwiPT09cHJvY2Vzcy5lbnYuTk9ERV9FTlZ8fGUuY2hhckF0KDApPT09ZS5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSl9dmFyIEY9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLCQ9Rj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSx6PUY/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLEI9e2NoaWxkQ29udGV4dFR5cGVzOiEwLGNvbnRleHRUeXBlOiEwLGNvbnRleHRUeXBlczohMCxkZWZhdWx0UHJvcHM6ITAsZGlzcGxheU5hbWU6ITAsZ2V0RGVmYXVsdFByb3BzOiEwLGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjohMCxnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6ITAsbWl4aW5zOiEwLHByb3BUeXBlczohMCx0eXBlOiEwfSxMPXtuYW1lOiEwLGxlbmd0aDohMCxwcm90b3R5cGU6ITAsY2FsbGVyOiEwLGNhbGxlZTohMCxhcmd1bWVudHM6ITAsYXJpdHk6ITB9LEc9eyQkdHlwZW9mOiEwLGNvbXBhcmU6ITAsZGVmYXVsdFByb3BzOiEwLGRpc3BsYXlOYW1lOiEwLHByb3BUeXBlczohMCx0eXBlOiEwfSxZPSgoVD17fSlbel09eyQkdHlwZW9mOiEwLHJlbmRlcjohMCxkZWZhdWx0UHJvcHM6ITAsZGlzcGxheU5hbWU6ITAscHJvcFR5cGVzOiEwfSxUWyRdPUcsVCk7ZnVuY3Rpb24gVyhlKXtyZXR1cm4oXCJ0eXBlXCJpbih0PWUpJiZ0LnR5cGUuJCR0eXBlb2YpPT09JD9HOlwiJCR0eXBlb2ZcImluIGU/WVtlLiQkdHlwZW9mXTpCO3ZhciB0fXZhciBxPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSxIPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzLFU9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxKPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsWD1PYmplY3QuZ2V0UHJvdG90eXBlT2YsWj1PYmplY3QucHJvdG90eXBlO2Z1bmN0aW9uIEsoZSx0LG4pe2lmKFwic3RyaW5nXCIhPXR5cGVvZiB0KXtpZihaKXt2YXIgbz1YKHQpO28mJm8hPT1aJiZLKGUsbyxuKX12YXIgcj1IKHQpO1UmJihyPXIuY29uY2F0KFUodCkpKTtmb3IodmFyIHM9VyhlKSxpPVcodCksYT0wO2E8ci5sZW5ndGg7KythKXt2YXIgYz1yW2FdO2lmKCEoYyBpbiBMfHxuJiZuW2NdfHxpJiZjIGluIGl8fHMmJmMgaW4gcykpe3ZhciBsPUoodCxjKTt0cnl7cShlLGMsbCl9Y2F0Y2goZSl7fX19fXJldHVybiBlfWZ1bmN0aW9uIFEoZSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZX1mdW5jdGlvbiBlZShlKXtyZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgZSYmXCJzdHlsZWRDb21wb25lbnRJZFwiaW4gZX1mdW5jdGlvbiB0ZShlLHQpe3JldHVybiBlJiZ0P1wiXCIuY29uY2F0KGUsXCIgXCIpLmNvbmNhdCh0KTplfHx0fHxcIlwifWZ1bmN0aW9uIG5lKGUsdCl7aWYoMD09PWUubGVuZ3RoKXJldHVyblwiXCI7Zm9yKHZhciBuPWVbMF0sbz0xO288ZS5sZW5ndGg7bysrKW4rPXQ/dCtlW29dOmVbb107cmV0dXJuIG59ZnVuY3Rpb24gb2UoZSl7cmV0dXJuIG51bGwhPT1lJiZcIm9iamVjdFwiPT10eXBlb2YgZSYmZS5jb25zdHJ1Y3Rvci5uYW1lPT09T2JqZWN0Lm5hbWUmJiEoXCJwcm9wc1wiaW4gZSYmZS4kJHR5cGVvZil9ZnVuY3Rpb24gcmUoZSx0LG4pe2lmKHZvaWQgMD09PW4mJihuPSExKSwhbiYmIW9lKGUpJiYhQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gdDtpZihBcnJheS5pc0FycmF5KHQpKWZvcih2YXIgbz0wO288dC5sZW5ndGg7bysrKWVbb109cmUoZVtvXSx0W29dKTtlbHNlIGlmKG9lKHQpKWZvcih2YXIgbyBpbiB0KWVbb109cmUoZVtvXSx0W29dKTtyZXR1cm4gZX1mdW5jdGlvbiBzZShlLHQpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwidG9TdHJpbmdcIix7dmFsdWU6dH0pfXZhciBpZT1cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP3sxOlwiQ2Fubm90IGNyZWF0ZSBzdHlsZWQtY29tcG9uZW50IGZvciBjb21wb25lbnQ6ICVzLlxcblxcblwiLDI6XCJDYW4ndCBjb2xsZWN0IHN0eWxlcyBvbmNlIHlvdSd2ZSBjb25zdW1lZCBhIGBTZXJ2ZXJTdHlsZVNoZWV0YCdzIHN0eWxlcyEgYFNlcnZlclN0eWxlU2hlZXRgIGlzIGEgb25lIG9mZiBpbnN0YW5jZSBmb3IgZWFjaCBzZXJ2ZXItc2lkZSByZW5kZXIgY3ljbGUuXFxuXFxuLSBBcmUgeW91IHRyeWluZyB0byByZXVzZSBpdCBhY3Jvc3MgcmVuZGVycz9cXG4tIEFyZSB5b3UgYWNjaWRlbnRhbGx5IGNhbGxpbmcgY29sbGVjdFN0eWxlcyB0d2ljZT9cXG5cXG5cIiwzOlwiU3RyZWFtaW5nIFNTUiBpcyBvbmx5IHN1cHBvcnRlZCBpbiBhIE5vZGUuanMgZW52aXJvbm1lbnQ7IFBsZWFzZSBkbyBub3QgdHJ5IHRvIGNhbGwgdGhpcyBtZXRob2QgaW4gdGhlIGJyb3dzZXIuXFxuXFxuXCIsNDpcIlRoZSBgU3R5bGVTaGVldE1hbmFnZXJgIGV4cGVjdHMgYSB2YWxpZCB0YXJnZXQgb3Igc2hlZXQgcHJvcCFcXG5cXG4tIERvZXMgdGhpcyBlcnJvciBvY2N1ciBvbiB0aGUgY2xpZW50IGFuZCBpcyB5b3VyIHRhcmdldCBmYWxzeT9cXG4tIERvZXMgdGhpcyBlcnJvciBvY2N1ciBvbiB0aGUgc2VydmVyIGFuZCBpcyB0aGUgc2hlZXQgZmFsc3k/XFxuXFxuXCIsNTpcIlRoZSBjbG9uZSBtZXRob2QgY2Fubm90IGJlIHVzZWQgb24gdGhlIGNsaWVudCFcXG5cXG4tIEFyZSB5b3UgcnVubmluZyBpbiBhIGNsaWVudC1saWtlIGVudmlyb25tZW50IG9uIHRoZSBzZXJ2ZXI/XFxuLSBBcmUgeW91IHRyeWluZyB0byBydW4gU1NSIG9uIHRoZSBjbGllbnQ/XFxuXFxuXCIsNjpcIlRyeWluZyB0byBpbnNlcnQgYSBuZXcgc3R5bGUgdGFnLCBidXQgdGhlIGdpdmVuIE5vZGUgaXMgdW5tb3VudGVkIVxcblxcbi0gQXJlIHlvdSB1c2luZyBhIGN1c3RvbSB0YXJnZXQgdGhhdCBpc24ndCBtb3VudGVkP1xcbi0gRG9lcyB5b3VyIGRvY3VtZW50IG5vdCBoYXZlIGEgdmFsaWQgaGVhZCBlbGVtZW50P1xcbi0gSGF2ZSB5b3UgYWNjaWRlbnRhbGx5IHJlbW92ZWQgYSBzdHlsZSB0YWcgbWFudWFsbHk/XFxuXFxuXCIsNzonVGhlbWVQcm92aWRlcjogUGxlYXNlIHJldHVybiBhbiBvYmplY3QgZnJvbSB5b3VyIFwidGhlbWVcIiBwcm9wIGZ1bmN0aW9uLCBlLmcuXFxuXFxuYGBganNcXG50aGVtZT17KCkgPT4gKHt9KX1cXG5gYGBcXG5cXG4nLDg6J1RoZW1lUHJvdmlkZXI6IFBsZWFzZSBtYWtlIHlvdXIgXCJ0aGVtZVwiIHByb3AgYW4gb2JqZWN0LlxcblxcbicsOTpcIk1pc3NpbmcgZG9jdW1lbnQgYDxoZWFkPmBcXG5cXG5cIiwxMDpcIkNhbm5vdCBmaW5kIGEgU3R5bGVTaGVldCBpbnN0YW5jZS4gVXN1YWxseSB0aGlzIGhhcHBlbnMgaWYgdGhlcmUgYXJlIG11bHRpcGxlIGNvcGllcyBvZiBzdHlsZWQtY29tcG9uZW50cyBsb2FkZWQgYXQgb25jZS4gQ2hlY2sgb3V0IHRoaXMgaXNzdWUgZm9yIGhvdyB0byB0cm91Ymxlc2hvb3QgYW5kIGZpeCB0aGUgY29tbW9uIGNhc2VzIHdoZXJlIHRoaXMgc2l0dWF0aW9uIGNhbiBoYXBwZW46IGh0dHBzOi8vZ2l0aHViLmNvbS9zdHlsZWQtY29tcG9uZW50cy9zdHlsZWQtY29tcG9uZW50cy9pc3N1ZXMvMTk0MSNpc3N1ZWNvbW1lbnQtNDE3ODYyMDIxXFxuXFxuXCIsMTE6XCJfVGhpcyBlcnJvciB3YXMgcmVwbGFjZWQgd2l0aCBhIGRldi10aW1lIHdhcm5pbmcsIGl0IHdpbGwgYmUgZGVsZXRlZCBmb3IgdjQgZmluYWwuXyBbY3JlYXRlR2xvYmFsU3R5bGVdIHJlY2VpdmVkIGNoaWxkcmVuIHdoaWNoIHdpbGwgbm90IGJlIHJlbmRlcmVkLiBQbGVhc2UgdXNlIHRoZSBjb21wb25lbnQgd2l0aG91dCBwYXNzaW5nIGNoaWxkcmVuIGVsZW1lbnRzLlxcblxcblwiLDEyOlwiSXQgc2VlbXMgeW91IGFyZSBpbnRlcnBvbGF0aW5nIGEga2V5ZnJhbWUgZGVjbGFyYXRpb24gKCVzKSBpbnRvIGFuIHVudGFnZ2VkIHN0cmluZy4gVGhpcyB3YXMgc3VwcG9ydGVkIGluIHN0eWxlZC1jb21wb25lbnRzIHYzLCBidXQgaXMgbm90IGxvbmdlciBzdXBwb3J0ZWQgaW4gdjQgYXMga2V5ZnJhbWVzIGFyZSBub3cgaW5qZWN0ZWQgb24tZGVtYW5kLiBQbGVhc2Ugd3JhcCB5b3VyIHN0cmluZyBpbiB0aGUgY3NzXFxcXGBcXFxcYCBoZWxwZXIgd2hpY2ggZW5zdXJlcyB0aGUgc3R5bGVzIGFyZSBpbmplY3RlZCBjb3JyZWN0bHkuIFNlZSBodHRwczovL3d3dy5zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9hcGkjY3NzXFxuXFxuXCIsMTM6XCIlcyBpcyBub3QgYSBzdHlsZWQgY29tcG9uZW50IGFuZCBjYW5ub3QgYmUgcmVmZXJyZWQgdG8gdmlhIGNvbXBvbmVudCBzZWxlY3Rvci4gU2VlIGh0dHBzOi8vd3d3LnN0eWxlZC1jb21wb25lbnRzLmNvbS9kb2NzL2FkdmFuY2VkI3JlZmVycmluZy10by1vdGhlci1jb21wb25lbnRzIGZvciBtb3JlIGRldGFpbHMuXFxuXFxuXCIsMTQ6J1RoZW1lUHJvdmlkZXI6IFwidGhlbWVcIiBwcm9wIGlzIHJlcXVpcmVkLlxcblxcbicsMTU6XCJBIHN0eWxpcyBwbHVnaW4gaGFzIGJlZW4gc3VwcGxpZWQgdGhhdCBpcyBub3QgbmFtZWQuIFdlIG5lZWQgYSBuYW1lIGZvciBlYWNoIHBsdWdpbiB0byBiZSBhYmxlIHRvIHByZXZlbnQgc3R5bGluZyBjb2xsaXNpb25zIGJldHdlZW4gZGlmZmVyZW50IHN0eWxpcyBjb25maWd1cmF0aW9ucyB3aXRoaW4gdGhlIHNhbWUgYXBwLiBCZWZvcmUgeW91IHBhc3MgeW91ciBwbHVnaW4gdG8gYDxTdHlsZVNoZWV0TWFuYWdlciBzdHlsaXNQbHVnaW5zPXtbXX0+YCwgcGxlYXNlIG1ha2Ugc3VyZSBlYWNoIHBsdWdpbiBpcyB1bmlxdWVseS1uYW1lZCwgZS5nLlxcblxcbmBgYGpzXFxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGltcG9ydGVkUGx1Z2luLCAnbmFtZScsIHsgdmFsdWU6ICdzb21lLXVuaXF1ZS1uYW1lJyB9KTtcXG5gYGBcXG5cXG5cIiwxNjpcIlJlYWNoZWQgdGhlIGxpbWl0IG9mIGhvdyBtYW55IHN0eWxlZCBjb21wb25lbnRzIG1heSBiZSBjcmVhdGVkIGF0IGdyb3VwICVzLlxcbllvdSBtYXkgb25seSBjcmVhdGUgdXAgdG8gMSwwNzMsNzQxLDgyNCBjb21wb25lbnRzLiBJZiB5b3UncmUgY3JlYXRpbmcgY29tcG9uZW50cyBkeW5hbWljYWxseSxcXG5hcyBmb3IgaW5zdGFuY2UgaW4geW91ciByZW5kZXIgbWV0aG9kIHRoZW4geW91IG1heSBiZSBydW5uaW5nIGludG8gdGhpcyBsaW1pdGF0aW9uLlxcblxcblwiLDE3OlwiQ1NTU3R5bGVTaGVldCBjb3VsZCBub3QgYmUgZm91bmQgb24gSFRNTFN0eWxlRWxlbWVudC5cXG5IYXMgc3R5bGVkLWNvbXBvbmVudHMnIHN0eWxlIHRhZyBiZWVuIHVubW91bnRlZCBvciBhbHRlcmVkIGJ5IGFub3RoZXIgc2NyaXB0P1xcblwiLDE4OlwiVGhlbWVQcm92aWRlcjogUGxlYXNlIG1ha2Ugc3VyZSB5b3VyIHVzZVRoZW1lIGhvb2sgaXMgd2l0aGluIGEgYDxUaGVtZVByb3ZpZGVyPmBcIn06e307ZnVuY3Rpb24gYWUoKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZVt0XT1hcmd1bWVudHNbdF07Zm9yKHZhciBuPWVbMF0sbz1bXSxyPTEscz1lLmxlbmd0aDtyPHM7cis9MSlvLnB1c2goZVtyXSk7cmV0dXJuIG8uZm9yRWFjaChmdW5jdGlvbihlKXtuPW4ucmVwbGFjZSgvJVthLXpdLyxlKX0pLG59ZnVuY3Rpb24gY2UodCl7Zm9yKHZhciBuPVtdLG89MTtvPGFyZ3VtZW50cy5sZW5ndGg7bysrKW5bby0xXT1hcmd1bWVudHNbb107cmV0dXJuXCJwcm9kdWN0aW9uXCI9PT1wcm9jZXNzLmVudi5OT0RFX0VOVj9uZXcgRXJyb3IoXCJBbiBlcnJvciBvY2N1cnJlZC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9zdHlsZWQtY29tcG9uZW50cy9zdHlsZWQtY29tcG9uZW50cy9ibG9iL21haW4vcGFja2FnZXMvc3R5bGVkLWNvbXBvbmVudHMvc3JjL3V0aWxzL2Vycm9ycy5tZCNcIi5jb25jYXQodCxcIiBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cIikuY29uY2F0KG4ubGVuZ3RoPjA/XCIgQXJnczogXCIuY29uY2F0KG4uam9pbihcIiwgXCIpKTpcIlwiKSk6bmV3IEVycm9yKGFlLmFwcGx5KHZvaWQgMCxlKFtpZVt0XV0sbiwhMSkpLnRyaW0oKSl9dmFyIGxlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt0aGlzLmdyb3VwU2l6ZXM9bmV3IFVpbnQzMkFycmF5KDUxMiksdGhpcy5sZW5ndGg9NTEyLHRoaXMudGFnPWV9cmV0dXJuIGUucHJvdG90eXBlLmluZGV4T2ZHcm91cD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9MCxuPTA7bjxlO24rKyl0Kz10aGlzLmdyb3VwU2l6ZXNbbl07cmV0dXJuIHR9LGUucHJvdG90eXBlLmluc2VydFJ1bGVzPWZ1bmN0aW9uKGUsdCl7aWYoZT49dGhpcy5ncm91cFNpemVzLmxlbmd0aCl7Zm9yKHZhciBuPXRoaXMuZ3JvdXBTaXplcyxvPW4ubGVuZ3RoLHI9bztlPj1yOylpZigocjw8PTEpPDApdGhyb3cgY2UoMTYsXCJcIi5jb25jYXQoZSkpO3RoaXMuZ3JvdXBTaXplcz1uZXcgVWludDMyQXJyYXkociksdGhpcy5ncm91cFNpemVzLnNldChuKSx0aGlzLmxlbmd0aD1yO2Zvcih2YXIgcz1vO3M8cjtzKyspdGhpcy5ncm91cFNpemVzW3NdPTB9Zm9yKHZhciBpPXRoaXMuaW5kZXhPZkdyb3VwKGUrMSksYT0ocz0wLHQubGVuZ3RoKTtzPGE7cysrKXRoaXMudGFnLmluc2VydFJ1bGUoaSx0W3NdKSYmKHRoaXMuZ3JvdXBTaXplc1tlXSsrLGkrKyl9LGUucHJvdG90eXBlLmNsZWFyR3JvdXA9ZnVuY3Rpb24oZSl7aWYoZTx0aGlzLmxlbmd0aCl7dmFyIHQ9dGhpcy5ncm91cFNpemVzW2VdLG49dGhpcy5pbmRleE9mR3JvdXAoZSksbz1uK3Q7dGhpcy5ncm91cFNpemVzW2VdPTA7Zm9yKHZhciByPW47cjxvO3IrKyl0aGlzLnRhZy5kZWxldGVSdWxlKG4pfX0sZS5wcm90b3R5cGUuZ2V0R3JvdXA9ZnVuY3Rpb24oZSl7dmFyIHQ9XCJcIjtpZihlPj10aGlzLmxlbmd0aHx8MD09PXRoaXMuZ3JvdXBTaXplc1tlXSlyZXR1cm4gdDtmb3IodmFyIG49dGhpcy5ncm91cFNpemVzW2VdLG89dGhpcy5pbmRleE9mR3JvdXAoZSkscj1vK24scz1vO3M8cjtzKyspdCs9XCJcIi5jb25jYXQodGhpcy50YWcuZ2V0UnVsZShzKSkuY29uY2F0KFwiLyohc2MqL1xcblwiKTtyZXR1cm4gdH0sZX0oKSx1ZT1uZXcgTWFwLHBlPW5ldyBNYXAsZGU9MSxoZT1mdW5jdGlvbihlKXtpZih1ZS5oYXMoZSkpcmV0dXJuIHVlLmdldChlKTtmb3IoO3BlLmhhcyhkZSk7KWRlKys7dmFyIHQ9ZGUrKztpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoKDB8dCk8MHx8dD4xMDczNzQxODI0KSl0aHJvdyBjZSgxNixcIlwiLmNvbmNhdCh0KSk7cmV0dXJuIHVlLnNldChlLHQpLHBlLnNldCh0LGUpLHR9LGZlPWZ1bmN0aW9uKGUsdCl7dWUuc2V0KGUsdCkscGUuc2V0KHQsZSl9LG1lPVwic3R5bGVbXCIuY29uY2F0KGYsXCJdW1wiKS5jb25jYXQoXCJkYXRhLXN0eWxlZC12ZXJzaW9uXCIsJz1cIicpLmNvbmNhdChcIjYuMC43XCIsJ1wiXScpLHllPW5ldyBSZWdFeHAoXCJeXCIuY29uY2F0KGYsJ1xcXFwuZyhcXFxcZCspXFxcXFtpZD1cIihbXFxcXHdcXFxcZC1dKylcIlxcXFxdLio/XCIoW15cIl0qKScpKSx2ZT1mdW5jdGlvbihlLHQsbil7Zm9yKHZhciBvLHI9bi5zcGxpdChcIixcIikscz0wLGk9ci5sZW5ndGg7czxpO3MrKykobz1yW3NdKSYmZS5yZWdpc3Rlck5hbWUodCxvKX0sZ2U9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG4sbz0obnVsbCE9PShuPXQudGV4dENvbnRlbnQpJiZ2b2lkIDAhPT1uP246XCJcIikuc3BsaXQoXCIvKiFzYyovXFxuXCIpLHI9W10scz0wLGk9by5sZW5ndGg7czxpO3MrKyl7dmFyIGE9b1tzXS50cmltKCk7aWYoYSl7dmFyIGM9YS5tYXRjaCh5ZSk7aWYoYyl7dmFyIGw9MHxwYXJzZUludChjWzFdLDEwKSx1PWNbMl07MCE9PWwmJihmZSh1LGwpLHZlKGUsdSxjWzNdKSxlLmdldFRhZygpLmluc2VydFJ1bGVzKGwscikpLHIubGVuZ3RoPTB9ZWxzZSByLnB1c2goYSl9fX07ZnVuY3Rpb24gU2UoKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgX193ZWJwYWNrX25vbmNlX18/X193ZWJwYWNrX25vbmNlX186bnVsbH12YXIgd2U9ZnVuY3Rpb24oZSl7dmFyIHQ9ZG9jdW1lbnQuaGVhZCxuPWV8fHQsbz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIikscj1mdW5jdGlvbihlKXt2YXIgdD1BcnJheS5mcm9tKGUucXVlcnlTZWxlY3RvckFsbChcInN0eWxlW1wiLmNvbmNhdChmLFwiXVwiKSkpO3JldHVybiB0W3QubGVuZ3RoLTFdfShuKSxzPXZvaWQgMCE9PXI/ci5uZXh0U2libGluZzpudWxsO28uc2V0QXR0cmlidXRlKGYsXCJhY3RpdmVcIiksby5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN0eWxlZC12ZXJzaW9uXCIsXCI2LjAuN1wiKTt2YXIgaT1TZSgpO3JldHVybiBpJiZvLnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsaSksbi5pbnNlcnRCZWZvcmUobyxzKSxvfSxiZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dGhpcy5lbGVtZW50PXdlKGUpLHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIlwiKSksdGhpcy5zaGVldD1mdW5jdGlvbihlKXtpZihlLnNoZWV0KXJldHVybiBlLnNoZWV0O2Zvcih2YXIgdD1kb2N1bWVudC5zdHlsZVNoZWV0cyxuPTAsbz10Lmxlbmd0aDtuPG87bisrKXt2YXIgcj10W25dO2lmKHIub3duZXJOb2RlPT09ZSlyZXR1cm4gcn10aHJvdyBjZSgxNyl9KHRoaXMuZWxlbWVudCksdGhpcy5sZW5ndGg9MH1yZXR1cm4gZS5wcm90b3R5cGUuaW5zZXJ0UnVsZT1mdW5jdGlvbihlLHQpe3RyeXtyZXR1cm4gdGhpcy5zaGVldC5pbnNlcnRSdWxlKHQsZSksdGhpcy5sZW5ndGgrKywhMH1jYXRjaChlKXtyZXR1cm4hMX19LGUucHJvdG90eXBlLmRlbGV0ZVJ1bGU9ZnVuY3Rpb24oZSl7dGhpcy5zaGVldC5kZWxldGVSdWxlKGUpLHRoaXMubGVuZ3RoLS19LGUucHJvdG90eXBlLmdldFJ1bGU9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5zaGVldC5jc3NSdWxlc1tlXTtyZXR1cm4gdCYmdC5jc3NUZXh0P3QuY3NzVGV4dDpcIlwifSxlfSgpLEVlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt0aGlzLmVsZW1lbnQ9d2UoZSksdGhpcy5ub2Rlcz10aGlzLmVsZW1lbnQuY2hpbGROb2Rlcyx0aGlzLmxlbmd0aD0wfXJldHVybiBlLnByb3RvdHlwZS5pbnNlcnRSdWxlPWZ1bmN0aW9uKGUsdCl7aWYoZTw9dGhpcy5sZW5ndGgmJmU+PTApe3ZhciBuPWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHQpO3JldHVybiB0aGlzLmVsZW1lbnQuaW5zZXJ0QmVmb3JlKG4sdGhpcy5ub2Rlc1tlXXx8bnVsbCksdGhpcy5sZW5ndGgrKywhMH1yZXR1cm4hMX0sZS5wcm90b3R5cGUuZGVsZXRlUnVsZT1mdW5jdGlvbihlKXt0aGlzLmVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5ub2Rlc1tlXSksdGhpcy5sZW5ndGgtLX0sZS5wcm90b3R5cGUuZ2V0UnVsZT1mdW5jdGlvbihlKXtyZXR1cm4gZTx0aGlzLmxlbmd0aD90aGlzLm5vZGVzW2VdLnRleHRDb250ZW50OlwiXCJ9LGV9KCksTmU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3RoaXMucnVsZXM9W10sdGhpcy5sZW5ndGg9MH1yZXR1cm4gZS5wcm90b3R5cGUuaW5zZXJ0UnVsZT1mdW5jdGlvbihlLHQpe3JldHVybiBlPD10aGlzLmxlbmd0aCYmKHRoaXMucnVsZXMuc3BsaWNlKGUsMCx0KSx0aGlzLmxlbmd0aCsrLCEwKX0sZS5wcm90b3R5cGUuZGVsZXRlUnVsZT1mdW5jdGlvbihlKXt0aGlzLnJ1bGVzLnNwbGljZShlLDEpLHRoaXMubGVuZ3RoLS19LGUucHJvdG90eXBlLmdldFJ1bGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGU8dGhpcy5sZW5ndGg/dGhpcy5ydWxlc1tlXTpcIlwifSxlfSgpLFBlPXksX2U9e2lzU2VydmVyOiF5LHVzZUNTU09NSW5qZWN0aW9uOiF2fSxDZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSxuLG8pe3ZvaWQgMD09PWUmJihlPU4pLHZvaWQgMD09PW4mJihuPXt9KTt2YXIgcj10aGlzO3RoaXMub3B0aW9ucz10KHQoe30sX2UpLGUpLHRoaXMuZ3M9bix0aGlzLm5hbWVzPW5ldyBNYXAobyksdGhpcy5zZXJ2ZXI9ISFlLmlzU2VydmVyLCF0aGlzLnNlcnZlciYmeSYmUGUmJihQZT0hMSxmdW5jdGlvbihlKXtmb3IodmFyIHQ9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChtZSksbj0wLG89dC5sZW5ndGg7bjxvO24rKyl7dmFyIHI9dFtuXTtyJiZcImFjdGl2ZVwiIT09ci5nZXRBdHRyaWJ1dGUoZikmJihnZShlLHIpLHIucGFyZW50Tm9kZSYmci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHIpKX19KHRoaXMpKSxzZSh0aGlzLGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1lLmdldFRhZygpLG49dC5sZW5ndGgsbz1cIlwiLHI9ZnVuY3Rpb24obil7dmFyIHI9ZnVuY3Rpb24oZSl7cmV0dXJuIHBlLmdldChlKX0obik7aWYodm9pZCAwPT09cilyZXR1cm5cImNvbnRpbnVlXCI7dmFyIHM9ZS5uYW1lcy5nZXQociksaT10LmdldEdyb3VwKG4pO2lmKHZvaWQgMD09PXN8fDA9PT1pLmxlbmd0aClyZXR1cm5cImNvbnRpbnVlXCI7dmFyIGE9XCJcIi5jb25jYXQoZixcIi5nXCIpLmNvbmNhdChuLCdbaWQ9XCInKS5jb25jYXQociwnXCJdJyksYz1cIlwiO3ZvaWQgMCE9PXMmJnMuZm9yRWFjaChmdW5jdGlvbihlKXtlLmxlbmd0aD4wJiYoYys9XCJcIi5jb25jYXQoZSxcIixcIikpfSksbys9XCJcIi5jb25jYXQoaSkuY29uY2F0KGEsJ3tjb250ZW50OlwiJykuY29uY2F0KGMsJ1wifScpLmNvbmNhdChcIi8qIXNjKi9cXG5cIil9LHM9MDtzPG47cysrKXIocyk7cmV0dXJuIG99KHIpfSl9cmV0dXJuIGUucmVnaXN0ZXJJZD1mdW5jdGlvbihlKXtyZXR1cm4gaGUoZSl9LGUucHJvdG90eXBlLnJlY29uc3RydWN0V2l0aE9wdGlvbnM9ZnVuY3Rpb24obixvKXtyZXR1cm4gdm9pZCAwPT09byYmKG89ITApLG5ldyBlKHQodCh7fSx0aGlzLm9wdGlvbnMpLG4pLHRoaXMuZ3MsbyYmdGhpcy5uYW1lc3x8dm9pZCAwKX0sZS5wcm90b3R5cGUuYWxsb2NhdGVHU0luc3RhbmNlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmdzW2VdPSh0aGlzLmdzW2VdfHwwKSsxfSxlLnByb3RvdHlwZS5nZXRUYWc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50YWd8fCh0aGlzLnRhZz0oZT1mdW5jdGlvbihlKXt2YXIgdD1lLnVzZUNTU09NSW5qZWN0aW9uLG49ZS50YXJnZXQ7cmV0dXJuIGUuaXNTZXJ2ZXI/bmV3IE5lKG4pOnQ/bmV3IGJlKG4pOm5ldyBFZShuKX0odGhpcy5vcHRpb25zKSxuZXcgbGUoZSkpKTt2YXIgZX0sZS5wcm90b3R5cGUuaGFzTmFtZUZvcklkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMubmFtZXMuaGFzKGUpJiZ0aGlzLm5hbWVzLmdldChlKS5oYXModCl9LGUucHJvdG90eXBlLnJlZ2lzdGVyTmFtZT1mdW5jdGlvbihlLHQpe2lmKGhlKGUpLHRoaXMubmFtZXMuaGFzKGUpKXRoaXMubmFtZXMuZ2V0KGUpLmFkZCh0KTtlbHNle3ZhciBuPW5ldyBTZXQ7bi5hZGQodCksdGhpcy5uYW1lcy5zZXQoZSxuKX19LGUucHJvdG90eXBlLmluc2VydFJ1bGVzPWZ1bmN0aW9uKGUsdCxuKXt0aGlzLnJlZ2lzdGVyTmFtZShlLHQpLHRoaXMuZ2V0VGFnKCkuaW5zZXJ0UnVsZXMoaGUoZSksbil9LGUucHJvdG90eXBlLmNsZWFyTmFtZXM9ZnVuY3Rpb24oZSl7dGhpcy5uYW1lcy5oYXMoZSkmJnRoaXMubmFtZXMuZ2V0KGUpLmNsZWFyKCl9LGUucHJvdG90eXBlLmNsZWFyUnVsZXM9ZnVuY3Rpb24oZSl7dGhpcy5nZXRUYWcoKS5jbGVhckdyb3VwKGhlKGUpKSx0aGlzLmNsZWFyTmFtZXMoZSl9LGUucHJvdG90eXBlLmNsZWFyVGFnPWZ1bmN0aW9uKCl7dGhpcy50YWc9dm9pZCAwfSxlfSgpLEllPS8mL2csQWU9L15cXHMqXFwvXFwvLiokL2dtO2Z1bmN0aW9uIE9lKGUsdCl7cmV0dXJuIGUubWFwKGZ1bmN0aW9uKGUpe3JldHVyblwicnVsZVwiPT09ZS50eXBlJiYoZS52YWx1ZT1cIlwiLmNvbmNhdCh0LFwiIFwiKS5jb25jYXQoZS52YWx1ZSksZS52YWx1ZT1lLnZhbHVlLnJlcGxhY2VBbGwoXCIsXCIsXCIsXCIuY29uY2F0KHQsXCIgXCIpKSxlLnByb3BzPWUucHJvcHMubWFwKGZ1bmN0aW9uKGUpe3JldHVyblwiXCIuY29uY2F0KHQsXCIgXCIpLmNvbmNhdChlKX0pKSxBcnJheS5pc0FycmF5KGUuY2hpbGRyZW4pJiZcIkBrZXlmcmFtZXNcIiE9PWUudHlwZSYmKGUuY2hpbGRyZW49T2UoZS5jaGlsZHJlbix0KSksZX0pfWZ1bmN0aW9uIERlKGUpe3ZhciB0LG4sbyxyPXZvaWQgMD09PWU/TjplLHM9ci5vcHRpb25zLGk9dm9pZCAwPT09cz9OOnMsYT1yLnBsdWdpbnMsYz12b2lkIDA9PT1hP0U6YSxsPWZ1bmN0aW9uKGUsbyxyKXtyZXR1cm4gcj09PW58fHIuc3RhcnRzV2l0aChuKSYmci5lbmRzV2l0aChuKSYmci5yZXBsYWNlQWxsKG4sXCJcIikubGVuZ3RoPjA/XCIuXCIuY29uY2F0KHQpOmV9LHU9Yy5zbGljZSgpO3UucHVzaChmdW5jdGlvbihlKXtlLnR5cGU9PT1kLlJVTEVTRVQmJmUudmFsdWUuaW5jbHVkZXMoXCImXCIpJiYoZS5wcm9wc1swXT1lLnByb3BzWzBdLnJlcGxhY2UoSWUsbikucmVwbGFjZShvLGwpKX0pLGkucHJlZml4JiZ1LnB1c2goZC5wcmVmaXhlciksdS5wdXNoKGQuc3RyaW5naWZ5KTt2YXIgcD1mdW5jdGlvbihlLHIscyxhKXt2b2lkIDA9PT1yJiYocj1cIlwiKSx2b2lkIDA9PT1zJiYocz1cIlwiKSx2b2lkIDA9PT1hJiYoYT1cIiZcIiksdD1hLG49cixvPW5ldyBSZWdFeHAoXCJcXFxcXCIuY29uY2F0KG4sXCJcXFxcYlwiKSxcImdcIik7dmFyIGM9ZS5yZXBsYWNlKEFlLFwiXCIpLGw9ZC5jb21waWxlKHN8fHI/XCJcIi5jb25jYXQocyxcIiBcIikuY29uY2F0KHIsXCIgeyBcIikuY29uY2F0KGMsXCIgfVwiKTpjKTtpLm5hbWVzcGFjZSYmKGw9T2UobCxpLm5hbWVzcGFjZSkpO3ZhciBwPVtdO3JldHVybiBkLnNlcmlhbGl6ZShsLGQubWlkZGxld2FyZSh1LmNvbmNhdChkLnJ1bGVzaGVldChmdW5jdGlvbihlKXtyZXR1cm4gcC5wdXNoKGUpfSkpKSkscH07cmV0dXJuIHAuaGFzaD1jLmxlbmd0aD9jLnJlZHVjZShmdW5jdGlvbihlLHQpe3JldHVybiB0Lm5hbWV8fGNlKDE1KSxrKGUsdC5uYW1lKX0sNTM4MSkudG9TdHJpbmcoKTpcIlwiLHB9dmFyIFJlPW5ldyBDZSxUZT1EZSgpLGtlPW8uY3JlYXRlQ29udGV4dCh7c2hvdWxkRm9yd2FyZFByb3A6dm9pZCAwLHN0eWxlU2hlZXQ6UmUsc3R5bGlzOlRlfSksamU9a2UuQ29uc3VtZXIseGU9by5jcmVhdGVDb250ZXh0KHZvaWQgMCk7ZnVuY3Rpb24gVmUoKXtyZXR1cm4gYyhrZSl9ZnVuY3Rpb24gTWUoZSl7dmFyIHQ9cyhlLnN0eWxpc1BsdWdpbnMpLG49dFswXSxyPXRbMV0sYz1WZSgpLnN0eWxlU2hlZXQsbD1pKGZ1bmN0aW9uKCl7dmFyIHQ9YztyZXR1cm4gZS5zaGVldD90PWUuc2hlZXQ6ZS50YXJnZXQmJih0PXQucmVjb25zdHJ1Y3RXaXRoT3B0aW9ucyh7dGFyZ2V0OmUudGFyZ2V0fSwhMSkpLGUuZGlzYWJsZUNTU09NSW5qZWN0aW9uJiYodD10LnJlY29uc3RydWN0V2l0aE9wdGlvbnMoe3VzZUNTU09NSW5qZWN0aW9uOiExfSkpLHR9LFtlLmRpc2FibGVDU1NPTUluamVjdGlvbixlLnNoZWV0LGUudGFyZ2V0LGNdKSx1PWkoZnVuY3Rpb24oKXtyZXR1cm4gRGUoe29wdGlvbnM6e25hbWVzcGFjZTplLm5hbWVzcGFjZSxwcmVmaXg6ZS5lbmFibGVWZW5kb3JQcmVmaXhlc30scGx1Z2luczpufSl9LFtlLmVuYWJsZVZlbmRvclByZWZpeGVzLGUubmFtZXNwYWNlLG5dKTtyZXR1cm4gYShmdW5jdGlvbigpe3AobixlLnN0eWxpc1BsdWdpbnMpfHxyKGUuc3R5bGlzUGx1Z2lucyl9LFtlLnN0eWxpc1BsdWdpbnNdKSxvLmNyZWF0ZUVsZW1lbnQoa2UuUHJvdmlkZXIse3ZhbHVlOntzaG91bGRGb3J3YXJkUHJvcDplLnNob3VsZEZvcndhcmRQcm9wLHN0eWxlU2hlZXQ6bCxzdHlsaXM6dX19LG8uY3JlYXRlRWxlbWVudCh4ZS5Qcm92aWRlcix7dmFsdWU6dX0sZS5jaGlsZHJlbikpfXZhciBGZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXt2YXIgbj10aGlzO3RoaXMuaW5qZWN0PWZ1bmN0aW9uKGUsdCl7dm9pZCAwPT09dCYmKHQ9VGUpO3ZhciBvPW4ubmFtZSt0Lmhhc2g7ZS5oYXNOYW1lRm9ySWQobi5pZCxvKXx8ZS5pbnNlcnRSdWxlcyhuLmlkLG8sdChuLnJ1bGVzLG8sXCJAa2V5ZnJhbWVzXCIpKX0sdGhpcy5uYW1lPWUsdGhpcy5pZD1cInNjLWtleWZyYW1lcy1cIi5jb25jYXQoZSksdGhpcy5ydWxlcz10LHNlKHRoaXMsZnVuY3Rpb24oKXt0aHJvdyBjZSgxMixTdHJpbmcobi5uYW1lKSl9KX1yZXR1cm4gZS5wcm90b3R5cGUuZ2V0TmFtZT1mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9VGUpLHRoaXMubmFtZStlLmhhc2h9LGV9KCksJGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGU+PVwiQVwiJiZlPD1cIlpcIn07ZnVuY3Rpb24gemUoZSl7Zm9yKHZhciB0PVwiXCIsbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgbz1lW25dO2lmKDE9PT1uJiZcIi1cIj09PW8mJlwiLVwiPT09ZVswXSlyZXR1cm4gZTskZShvKT90Kz1cIi1cIitvLnRvTG93ZXJDYXNlKCk6dCs9b31yZXR1cm4gdC5zdGFydHNXaXRoKFwibXMtXCIpP1wiLVwiK3Q6dH12YXIgQmU9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWV8fCExPT09ZXx8XCJcIj09PWV9LExlPWZ1bmN0aW9uKHQpe3ZhciBuLG8scj1bXTtmb3IodmFyIHMgaW4gdCl7dmFyIGk9dFtzXTt0Lmhhc093blByb3BlcnR5KHMpJiYhQmUoaSkmJihBcnJheS5pc0FycmF5KGkpJiZpLmlzQ3NzfHxRKGkpP3IucHVzaChcIlwiLmNvbmNhdCh6ZShzKSxcIjpcIiksaSxcIjtcIik6b2UoaSk/ci5wdXNoLmFwcGx5KHIsZShlKFtcIlwiLmNvbmNhdChzLFwiIHtcIildLExlKGkpLCExKSxbXCJ9XCJdLCExKSk6ci5wdXNoKFwiXCIuY29uY2F0KHplKHMpLFwiOiBcIikuY29uY2F0KChuPXMsbnVsbD09KG89aSl8fFwiYm9vbGVhblwiPT10eXBlb2Ygb3x8XCJcIj09PW8/XCJcIjpcIm51bWJlclwiIT10eXBlb2Ygb3x8MD09PW98fG4gaW4gaHx8bi5zdGFydHNXaXRoKFwiLS1cIik/U3RyaW5nKG8pLnRyaW0oKTpcIlwiLmNvbmNhdChvLFwicHhcIikpLFwiO1wiKSkpfXJldHVybiByfTtmdW5jdGlvbiBHZShlLHQsbixvKXtpZihCZShlKSlyZXR1cm5bXTtpZihlZShlKSlyZXR1cm5bXCIuXCIuY29uY2F0KGUuc3R5bGVkQ29tcG9uZW50SWQpXTtpZihRKGUpKXtpZighUShzPWUpfHxzLnByb3RvdHlwZSYmcy5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudHx8IXQpcmV0dXJuW2VdO3ZhciByPWUodCk7cmV0dXJuXCJwcm9kdWN0aW9uXCI9PT1wcm9jZXNzLmVudi5OT0RFX0VOVnx8XCJvYmplY3RcIiE9dHlwZW9mIHJ8fEFycmF5LmlzQXJyYXkocil8fHIgaW5zdGFuY2VvZiBGZXx8b2Uocil8fG51bGw9PT1yfHxjb25zb2xlLmVycm9yKFwiXCIuY29uY2F0KFYoZSksXCIgaXMgbm90IGEgc3R5bGVkIGNvbXBvbmVudCBhbmQgY2Fubm90IGJlIHJlZmVycmVkIHRvIHZpYSBjb21wb25lbnQgc2VsZWN0b3IuIFNlZSBodHRwczovL3d3dy5zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9hZHZhbmNlZCNyZWZlcnJpbmctdG8tb3RoZXItY29tcG9uZW50cyBmb3IgbW9yZSBkZXRhaWxzLlwiKSksR2Uocix0LG4sbyl9dmFyIHM7cmV0dXJuIGUgaW5zdGFuY2VvZiBGZT9uPyhlLmluamVjdChuLG8pLFtlLmdldE5hbWUobyldKTpbZV06b2UoZSk/TGUoZSk6QXJyYXkuaXNBcnJheShlKT9BcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KEUsZS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIEdlKGUsdCxuLG8pfSkpOltlLnRvU3RyaW5nKCldfWZ1bmN0aW9uIFllKGUpe2Zvcih2YXIgdD0wO3Q8ZS5sZW5ndGg7dCs9MSl7dmFyIG49ZVt0XTtpZihRKG4pJiYhZWUobikpcmV0dXJuITF9cmV0dXJuITB9dmFyIFdlPWooXCI2LjAuN1wiKSxxZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0LG4pe3RoaXMucnVsZXM9ZSx0aGlzLnN0YXRpY1J1bGVzSWQ9XCJcIix0aGlzLmlzU3RhdGljPVwicHJvZHVjdGlvblwiPT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJih2b2lkIDA9PT1ufHxuLmlzU3RhdGljKSYmWWUoZSksdGhpcy5jb21wb25lbnRJZD10LHRoaXMuYmFzZUhhc2g9ayhXZSx0KSx0aGlzLmJhc2VTdHlsZT1uLENlLnJlZ2lzdGVySWQodCl9cmV0dXJuIGUucHJvdG90eXBlLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzPWZ1bmN0aW9uKGUsdCxuKXt2YXIgbz10aGlzLmJhc2VTdHlsZT90aGlzLmJhc2VTdHlsZS5nZW5lcmF0ZUFuZEluamVjdFN0eWxlcyhlLHQsbik6XCJcIjtpZih0aGlzLmlzU3RhdGljJiYhbi5oYXNoKWlmKHRoaXMuc3RhdGljUnVsZXNJZCYmdC5oYXNOYW1lRm9ySWQodGhpcy5jb21wb25lbnRJZCx0aGlzLnN0YXRpY1J1bGVzSWQpKW89dGUobyx0aGlzLnN0YXRpY1J1bGVzSWQpO2Vsc2V7dmFyIHI9bmUoR2UodGhpcy5ydWxlcyxlLHQsbikpLHM9UihrKHRoaXMuYmFzZUhhc2gscik+Pj4wKTtpZighdC5oYXNOYW1lRm9ySWQodGhpcy5jb21wb25lbnRJZCxzKSl7dmFyIGk9bihyLFwiLlwiLmNvbmNhdChzKSx2b2lkIDAsdGhpcy5jb21wb25lbnRJZCk7dC5pbnNlcnRSdWxlcyh0aGlzLmNvbXBvbmVudElkLHMsaSl9bz10ZShvLHMpLHRoaXMuc3RhdGljUnVsZXNJZD1zfWVsc2V7Zm9yKHZhciBhPWsodGhpcy5iYXNlSGFzaCxuLmhhc2gpLGM9XCJcIixsPTA7bDx0aGlzLnJ1bGVzLmxlbmd0aDtsKyspe3ZhciB1PXRoaXMucnVsZXNbbF07aWYoXCJzdHJpbmdcIj09dHlwZW9mIHUpYys9dSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoYT1rKGEsdSkpO2Vsc2UgaWYodSl7dmFyIHA9bmUoR2UodSxlLHQsbikpO2E9ayhhLHApLGMrPXB9fWlmKGMpe3ZhciBkPVIoYT4+PjApO3QuaGFzTmFtZUZvcklkKHRoaXMuY29tcG9uZW50SWQsZCl8fHQuaW5zZXJ0UnVsZXModGhpcy5jb21wb25lbnRJZCxkLG4oYyxcIi5cIi5jb25jYXQoZCksdm9pZCAwLHRoaXMuY29tcG9uZW50SWQpKSxvPXRlKG8sZCl9fXJldHVybiBvfSxlfSgpLEhlPW8uY3JlYXRlQ29udGV4dCh2b2lkIDApLFVlPUhlLkNvbnN1bWVyO2Z1bmN0aW9uIEplKCl7dmFyIGU9YyhIZSk7aWYoIWUpdGhyb3cgY2UoMTgpO3JldHVybiBlfWZ1bmN0aW9uIFhlKGUpe3ZhciBuPW8udXNlQ29udGV4dChIZSkscj1pKGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUsbil7aWYoIWUpdGhyb3cgY2UoMTQpO2lmKFEoZSkpe3ZhciBvPWUobik7aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKG51bGw9PT1vfHxBcnJheS5pc0FycmF5KG8pfHxcIm9iamVjdFwiIT10eXBlb2YgbykpdGhyb3cgY2UoNyk7cmV0dXJuIG99aWYoQXJyYXkuaXNBcnJheShlKXx8XCJvYmplY3RcIiE9dHlwZW9mIGUpdGhyb3cgY2UoOCk7cmV0dXJuIG4/dCh0KHt9LG4pLGUpOmV9KGUudGhlbWUsbil9LFtlLnRoZW1lLG5dKTtyZXR1cm4gZS5jaGlsZHJlbj9vLmNyZWF0ZUVsZW1lbnQoSGUuUHJvdmlkZXIse3ZhbHVlOnJ9LGUuY2hpbGRyZW4pOm51bGx9dmFyIFplPXt9LEtlPW5ldyBTZXQ7ZnVuY3Rpb24gUWUoZSxyLHMpe3ZhciBpPWVlKGUpLGE9ZSxjPSFNKGUpLHA9ci5hdHRycyxkPXZvaWQgMD09PXA/RTpwLGg9ci5jb21wb25lbnRJZCxmPXZvaWQgMD09PWg/ZnVuY3Rpb24oZSx0KXt2YXIgbj1cInN0cmluZ1wiIT10eXBlb2YgZT9cInNjXCI6QShlKTtaZVtuXT0oWmVbbl18fDApKzE7dmFyIG89XCJcIi5jb25jYXQobixcIi1cIikuY29uY2F0KHgoXCI2LjAuN1wiK24rWmVbbl0pKTtyZXR1cm4gdD9cIlwiLmNvbmNhdCh0LFwiLVwiKS5jb25jYXQobyk6b30oci5kaXNwbGF5TmFtZSxyLnBhcmVudENvbXBvbmVudElkKTpoLG09ci5kaXNwbGF5TmFtZSx5PXZvaWQgMD09PW0/ZnVuY3Rpb24oZSl7cmV0dXJuIE0oZSk/XCJzdHlsZWQuXCIuY29uY2F0KGUpOlwiU3R5bGVkKFwiLmNvbmNhdChWKGUpLFwiKVwiKX0oZSk6bSx2PXIuZGlzcGxheU5hbWUmJnIuY29tcG9uZW50SWQ/XCJcIi5jb25jYXQoQShyLmRpc3BsYXlOYW1lKSxcIi1cIikuY29uY2F0KHIuY29tcG9uZW50SWQpOnIuY29tcG9uZW50SWR8fGYsZz1pJiZhLmF0dHJzP2EuYXR0cnMuY29uY2F0KGQpLmZpbHRlcihCb29sZWFuKTpkLFM9ci5zaG91bGRGb3J3YXJkUHJvcDtpZihpJiZhLnNob3VsZEZvcndhcmRQcm9wKXt2YXIgdz1hLnNob3VsZEZvcndhcmRQcm9wO2lmKHIuc2hvdWxkRm9yd2FyZFByb3Ape3ZhciBDPXIuc2hvdWxkRm9yd2FyZFByb3A7Uz1mdW5jdGlvbihlLHQpe3JldHVybiB3KGUsdCkmJkMoZSx0KX19ZWxzZSBTPXd9dmFyIEk9bmV3IHFlKHMsdixpP2EuY29tcG9uZW50U3R5bGU6dm9pZCAwKTtmdW5jdGlvbiBPKGUscil7cmV0dXJuIGZ1bmN0aW9uKGUscixzKXt2YXIgaT1lLmF0dHJzLGE9ZS5jb21wb25lbnRTdHlsZSxjPWUuZGVmYXVsdFByb3BzLHA9ZS5mb2xkZWRDb21wb25lbnRJZHMsZD1lLnN0eWxlZENvbXBvbmVudElkLGg9ZS50YXJnZXQsZj1vLnVzZUNvbnRleHQoSGUpLG09VmUoKSx5PWUuc2hvdWxkRm9yd2FyZFByb3B8fG0uc2hvdWxkRm9yd2FyZFByb3A7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmbChkKTt2YXIgdj1mdW5jdGlvbihlLG4sbyl7Zm9yKHZhciByLHM9dCh0KHt9LG4pLHtjbGFzc05hbWU6dm9pZCAwLHRoZW1lOm99KSxpPTA7aTxlLmxlbmd0aDtpKz0xKXt2YXIgYT1RKHI9ZVtpXSk/cihzKTpyO2Zvcih2YXIgYyBpbiBhKXNbY109XCJjbGFzc05hbWVcIj09PWM/dGUoc1tjXSxhW2NdKTpcInN0eWxlXCI9PT1jP3QodCh7fSxzW2NdKSxhW2NdKTphW2NdfXJldHVybiBuLmNsYXNzTmFtZSYmKHMuY2xhc3NOYW1lPXRlKHMuY2xhc3NOYW1lLG4uY2xhc3NOYW1lKSksc30oaSxyLFAocixmLGMpfHxOKSxnPXYuYXN8fGgsUz17fTtmb3IodmFyIHcgaW4gdil2b2lkIDA9PT12W3ddfHxcIiRcIj09PXdbMF18fFwiYXNcIj09PXd8fFwidGhlbWVcIj09PXd8fChcImZvcndhcmRlZEFzXCI9PT13P1MuYXM9di5mb3J3YXJkZWRBczp5JiYheSh3LGcpfHwoU1t3XT12W3ddLHl8fFwiZGV2ZWxvcG1lbnRcIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WfHxuKHcpfHxLZS5oYXModyl8fCFfLmhhcyhnKXx8KEtlLmFkZCh3KSxjb25zb2xlLndhcm4oJ3N0eWxlZC1jb21wb25lbnRzOiBpdCBsb29rcyBsaWtlIGFuIHVua25vd24gcHJvcCBcIicuY29uY2F0KHcsJ1wiIGlzIGJlaW5nIHNlbnQgdGhyb3VnaCB0byB0aGUgRE9NLCB3aGljaCB3aWxsIGxpa2VseSB0cmlnZ2VyIGEgUmVhY3QgY29uc29sZSBlcnJvci4gSWYgeW91IHdvdWxkIGxpa2UgYXV0b21hdGljIGZpbHRlcmluZyBvZiB1bmtub3duIHByb3BzLCB5b3UgY2FuIG9wdC1pbnRvIHRoYXQgYmVoYXZpb3IgdmlhIGA8U3R5bGVTaGVldE1hbmFnZXIgc2hvdWxkRm9yd2FyZFByb3A9ey4uLn0+YCAoY29ubmVjdCBhbiBBUEkgbGlrZSBgQGVtb3Rpb24vaXMtcHJvcC12YWxpZGApIG9yIGNvbnNpZGVyIHVzaW5nIHRyYW5zaWVudCBwcm9wcyAoYCRgIHByZWZpeCBmb3IgYXV0b21hdGljIGZpbHRlcmluZy4pJykpKSkpO3ZhciBiPWZ1bmN0aW9uKGUsdCl7dmFyIG49VmUoKSxvPWUuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXModCxuLnN0eWxlU2hlZXQsbi5zdHlsaXMpO3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmwobyksb30oYSx2KTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZlLndhcm5Ub29NYW55Q2xhc3NlcyYmZS53YXJuVG9vTWFueUNsYXNzZXMoYik7dmFyIEU9dGUocCxkKTtyZXR1cm4gYiYmKEUrPVwiIFwiK2IpLHYuY2xhc3NOYW1lJiYoRSs9XCIgXCIrdi5jbGFzc05hbWUpLFNbTShnKSYmIV8uaGFzKGcpP1wiY2xhc3NcIjpcImNsYXNzTmFtZVwiXT1FLFMucmVmPXMsdShnLFMpfShELGUscil9XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKE8uZGlzcGxheU5hbWU9eSk7dmFyIEQ9by5mb3J3YXJkUmVmKE8pO3JldHVybiBELmF0dHJzPWcsRC5jb21wb25lbnRTdHlsZT1JLEQuc2hvdWxkRm9yd2FyZFByb3A9UyxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoRC5kaXNwbGF5TmFtZT15KSxELmZvbGRlZENvbXBvbmVudElkcz1pP3RlKGEuZm9sZGVkQ29tcG9uZW50SWRzLGEuc3R5bGVkQ29tcG9uZW50SWQpOlwiXCIsRC5zdHlsZWRDb21wb25lbnRJZD12LEQudGFyZ2V0PWk/YS50YXJnZXQ6ZSxPYmplY3QuZGVmaW5lUHJvcGVydHkoRCxcImRlZmF1bHRQcm9wc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZm9sZGVkRGVmYXVsdFByb3BzfSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5fZm9sZGVkRGVmYXVsdFByb3BzPWk/ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVtdLG49MTtuPGFyZ3VtZW50cy5sZW5ndGg7bisrKXRbbi0xXT1hcmd1bWVudHNbbl07Zm9yKHZhciBvPTAscj10O288ci5sZW5ndGg7bysrKXJlKGUscltvXSwhMCk7cmV0dXJuIGV9KHt9LGEuZGVmYXVsdFByb3BzLGUpOmV9fSksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKGIoeSx2KSxELndhcm5Ub29NYW55Q2xhc3Nlcz1mdW5jdGlvbihlLHQpe3ZhciBuPXt9LG89ITE7cmV0dXJuIGZ1bmN0aW9uKHIpe2lmKCFvJiYobltyXT0hMCxPYmplY3Qua2V5cyhuKS5sZW5ndGg+PTIwMCkpe3ZhciBzPXQ/JyB3aXRoIHRoZSBpZCBvZiBcIicuY29uY2F0KHQsJ1wiJyk6XCJcIjtjb25zb2xlLndhcm4oXCJPdmVyIFwiLmNvbmNhdCgyMDAsXCIgY2xhc3NlcyB3ZXJlIGdlbmVyYXRlZCBmb3IgY29tcG9uZW50IFwiKS5jb25jYXQoZSkuY29uY2F0KHMsXCIuXFxuXCIpK1wiQ29uc2lkZXIgdXNpbmcgdGhlIGF0dHJzIG1ldGhvZCwgdG9nZXRoZXIgd2l0aCBhIHN0eWxlIG9iamVjdCBmb3IgZnJlcXVlbnRseSBjaGFuZ2VkIHN0eWxlcy5cXG5FeGFtcGxlOlxcbiAgY29uc3QgQ29tcG9uZW50ID0gc3R5bGVkLmRpdi5hdHRycyhwcm9wcyA9PiAoe1xcbiAgICBzdHlsZToge1xcbiAgICAgIGJhY2tncm91bmQ6IHByb3BzLmJhY2tncm91bmQsXFxuICAgIH0sXFxuICB9KSlgd2lkdGg6IDEwMCU7YFxcblxcbiAgPENvbXBvbmVudCAvPlwiKSxvPSEwLG49e319fX0oeSx2KSksc2UoRCxmdW5jdGlvbigpe3JldHVyblwiLlwiLmNvbmNhdChELnN0eWxlZENvbXBvbmVudElkKX0pLGMmJksoRCxlLHthdHRyczohMCxjb21wb25lbnRTdHlsZTohMCxkaXNwbGF5TmFtZTohMCxmb2xkZWRDb21wb25lbnRJZHM6ITAsc2hvdWxkRm9yd2FyZFByb3A6ITAsc3R5bGVkQ29tcG9uZW50SWQ6ITAsdGFyZ2V0OiEwfSksRH1mdW5jdGlvbiBldChlLHQpe2Zvcih2YXIgbj1bZVswXV0sbz0wLHI9dC5sZW5ndGg7bzxyO28rPTEpbi5wdXNoKHRbb10sZVtvKzFdKTtyZXR1cm4gbn12YXIgdHQ9ZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdC5hc3NpZ24oZSx7aXNDc3M6ITB9KX07ZnVuY3Rpb24gbnQodCl7Zm9yKHZhciBuPVtdLG89MTtvPGFyZ3VtZW50cy5sZW5ndGg7bysrKW5bby0xXT1hcmd1bWVudHNbb107aWYoUSh0KXx8b2UodCkpe3ZhciByPXQ7cmV0dXJuIHR0KEdlKGV0KEUsZShbcl0sbiwhMCkpKSl9dmFyIHM9dDtyZXR1cm4gMD09PW4ubGVuZ3RoJiYxPT09cy5sZW5ndGgmJlwic3RyaW5nXCI9PXR5cGVvZiBzWzBdP0dlKHMpOnR0KEdlKGV0KHMsbikpKX1mdW5jdGlvbiBvdChuLG8scil7aWYodm9pZCAwPT09ciYmKHI9TiksIW8pdGhyb3cgY2UoMSxvKTt2YXIgcz1mdW5jdGlvbih0KXtmb3IodmFyIHM9W10saT0xO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspc1tpLTFdPWFyZ3VtZW50c1tpXTtyZXR1cm4gbihvLHIsbnQuYXBwbHkodm9pZCAwLGUoW3RdLHMsITEpKSl9O3JldHVybiBzLmF0dHJzPWZ1bmN0aW9uKGUpe3JldHVybiBvdChuLG8sdCh0KHt9LHIpLHthdHRyczpBcnJheS5wcm90b3R5cGUuY29uY2F0KHIuYXR0cnMsZSkuZmlsdGVyKEJvb2xlYW4pfSkpfSxzLndpdGhDb25maWc9ZnVuY3Rpb24oZSl7cmV0dXJuIG90KG4sbyx0KHQoe30sciksZSkpfSxzfXZhciBydD1mdW5jdGlvbihlKXtyZXR1cm4gb3QoUWUsZSl9LHN0PXJ0O18uZm9yRWFjaChmdW5jdGlvbihlKXtzdFtlXT1ydChlKX0pO3ZhciBpdD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXt0aGlzLnJ1bGVzPWUsdGhpcy5jb21wb25lbnRJZD10LHRoaXMuaXNTdGF0aWM9WWUoZSksQ2UucmVnaXN0ZXJJZCh0aGlzLmNvbXBvbmVudElkKzEpfXJldHVybiBlLnByb3RvdHlwZS5jcmVhdGVTdHlsZXM9ZnVuY3Rpb24oZSx0LG4sbyl7dmFyIHI9byhuZShHZSh0aGlzLnJ1bGVzLHQsbixvKSksXCJcIikscz10aGlzLmNvbXBvbmVudElkK2U7bi5pbnNlcnRSdWxlcyhzLHMscil9LGUucHJvdG90eXBlLnJlbW92ZVN0eWxlcz1mdW5jdGlvbihlLHQpe3QuY2xlYXJSdWxlcyh0aGlzLmNvbXBvbmVudElkK2UpfSxlLnByb3RvdHlwZS5yZW5kZXJTdHlsZXM9ZnVuY3Rpb24oZSx0LG4sbyl7ZT4yJiZDZS5yZWdpc3RlcklkKHRoaXMuY29tcG9uZW50SWQrZSksdGhpcy5yZW1vdmVTdHlsZXMoZSxuKSx0aGlzLmNyZWF0ZVN0eWxlcyhlLHQsbixvKX0sZX0oKTtmdW5jdGlvbiBhdChuKXtmb3IodmFyIHI9W10scz0xO3M8YXJndW1lbnRzLmxlbmd0aDtzKyspcltzLTFdPWFyZ3VtZW50c1tzXTt2YXIgaT1udC5hcHBseSh2b2lkIDAsZShbbl0sciwhMSkpLGE9XCJzYy1nbG9iYWwtXCIuY29uY2F0KHgoSlNPTi5zdHJpbmdpZnkoaSkpKSxjPW5ldyBpdChpLGEpO1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmIoYSk7dmFyIGw9ZnVuY3Rpb24oZSl7dmFyIHQ9VmUoKSxuPW8udXNlQ29udGV4dChIZSkscj1vLnVzZVJlZih0LnN0eWxlU2hlZXQuYWxsb2NhdGVHU0luc3RhbmNlKGEpKS5jdXJyZW50O3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJm8uQ2hpbGRyZW4uY291bnQoZS5jaGlsZHJlbikmJmNvbnNvbGUud2FybihcIlRoZSBnbG9iYWwgc3R5bGUgY29tcG9uZW50IFwiLmNvbmNhdChhLFwiIHdhcyBnaXZlbiBjaGlsZCBKU1guIGNyZWF0ZUdsb2JhbFN0eWxlIGRvZXMgbm90IHJlbmRlciBjaGlsZHJlbi5cIikpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmkuc29tZShmdW5jdGlvbihlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZSYmLTEhPT1lLmluZGV4T2YoXCJAaW1wb3J0XCIpfSkmJmNvbnNvbGUud2FybihcIlBsZWFzZSBkbyBub3QgdXNlIEBpbXBvcnQgQ1NTIHN5bnRheCBpbiBjcmVhdGVHbG9iYWxTdHlsZSBhdCB0aGlzIHRpbWUsIGFzIHRoZSBDU1NPTSBBUElzIHdlIHVzZSBpbiBwcm9kdWN0aW9uIGRvIG5vdCBoYW5kbGUgaXQgd2VsbC4gSW5zdGVhZCwgd2UgcmVjb21tZW5kIHVzaW5nIGEgbGlicmFyeSBzdWNoIGFzIHJlYWN0LWhlbG1ldCB0byBpbmplY3QgYSB0eXBpY2FsIDxsaW5rPiBtZXRhIHRhZyB0byB0aGUgc3R5bGVzaGVldCwgb3Igc2ltcGx5IGVtYmVkZGluZyBpdCBtYW51YWxseSBpbiB5b3VyIGluZGV4Lmh0bWwgPGhlYWQ+IHNlY3Rpb24gZm9yIGEgc2ltcGxlciBhcHAuXCIpLHQuc3R5bGVTaGVldC5zZXJ2ZXImJnUocixlLHQuc3R5bGVTaGVldCxuLHQuc3R5bGlzKSxvLnVzZUxheW91dEVmZmVjdChmdW5jdGlvbigpe2lmKCF0LnN0eWxlU2hlZXQuc2VydmVyKXJldHVybiB1KHIsZSx0LnN0eWxlU2hlZXQsbix0LnN0eWxpcyksZnVuY3Rpb24oKXtyZXR1cm4gYy5yZW1vdmVTdHlsZXMocix0LnN0eWxlU2hlZXQpfX0sW3IsZSx0LnN0eWxlU2hlZXQsbix0LnN0eWxpc10pLG51bGx9O2Z1bmN0aW9uIHUoZSxuLG8scixzKXtpZihjLmlzU3RhdGljKWMucmVuZGVyU3R5bGVzKGUsZyxvLHMpO2Vsc2V7dmFyIGk9dCh0KHt9LG4pLHt0aGVtZTpQKG4scixsLmRlZmF1bHRQcm9wcyl9KTtjLnJlbmRlclN0eWxlcyhlLGksbyxzKX19cmV0dXJuIG8ubWVtbyhsKX1mdW5jdGlvbiBjdCh0KXtmb3IodmFyIG49W10sbz0xO288YXJndW1lbnRzLmxlbmd0aDtvKyspbltvLTFdPWFyZ3VtZW50c1tvXTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbmF2aWdhdG9yJiZcIlJlYWN0TmF0aXZlXCI9PT1uYXZpZ2F0b3IucHJvZHVjdCYmY29uc29sZS53YXJuKFwiYGtleWZyYW1lc2AgY2Fubm90IGJlIHVzZWQgb24gUmVhY3ROYXRpdmUsIG9ubHkgb24gdGhlIHdlYi4gVG8gZG8gYW5pbWF0aW9uIGluIFJlYWN0TmF0aXZlIHBsZWFzZSB1c2UgQW5pbWF0ZWQuXCIpO3ZhciByPW5lKG50LmFwcGx5KHZvaWQgMCxlKFt0XSxuLCExKSkpLHM9eChyKTtyZXR1cm4gbmV3IEZlKHMscil9ZnVuY3Rpb24gbHQoZSl7dmFyIG49by5mb3J3YXJkUmVmKGZ1bmN0aW9uKG4scil7dmFyIHM9UChuLG8udXNlQ29udGV4dChIZSksZS5kZWZhdWx0UHJvcHMpO3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJnZvaWQgMD09PXMmJmNvbnNvbGUud2FybignW3dpdGhUaGVtZV0gWW91IGFyZSBub3QgdXNpbmcgYSBUaGVtZVByb3ZpZGVyIG5vciBwYXNzaW5nIGEgdGhlbWUgcHJvcCBvciBhIHRoZW1lIGluIGRlZmF1bHRQcm9wcyBpbiBjb21wb25lbnQgY2xhc3MgXCInLmNvbmNhdChWKGUpLCdcIicpKSxvLmNyZWF0ZUVsZW1lbnQoZSx0KHt9LG4se3RoZW1lOnMscmVmOnJ9KSl9KTtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYobi5kaXNwbGF5TmFtZT1cIldpdGhUaGVtZShcIi5jb25jYXQoVihlKSxcIilcIikpLEsobixlKX12YXIgdXQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7dmFyIGU9dGhpczt0aGlzLl9lbWl0U2hlZXRDU1M9ZnVuY3Rpb24oKXt2YXIgdD1lLmluc3RhbmNlLnRvU3RyaW5nKCksbj1TZSgpLG89bmUoW24mJidub25jZT1cIicuY29uY2F0KG4sJ1wiJyksXCJcIi5jb25jYXQoZiwnPVwidHJ1ZVwiJyksXCJcIi5jb25jYXQoXCJkYXRhLXN0eWxlZC12ZXJzaW9uXCIsJz1cIicpLmNvbmNhdChcIjYuMC43XCIsJ1wiJyldLmZpbHRlcihCb29sZWFuKSxcIiBcIik7cmV0dXJuXCI8c3R5bGUgXCIuY29uY2F0KG8sXCI+XCIpLmNvbmNhdCh0LFwiPC9zdHlsZT5cIil9LHRoaXMuZ2V0U3R5bGVUYWdzPWZ1bmN0aW9uKCl7aWYoZS5zZWFsZWQpdGhyb3cgY2UoMik7cmV0dXJuIGUuX2VtaXRTaGVldENTUygpfSx0aGlzLmdldFN0eWxlRWxlbWVudD1mdW5jdGlvbigpe3ZhciBuO2lmKGUuc2VhbGVkKXRocm93IGNlKDIpO3ZhciByPSgobj17fSlbZl09XCJcIixuW1wiZGF0YS1zdHlsZWQtdmVyc2lvblwiXT1cIjYuMC43XCIsbi5kYW5nZXJvdXNseVNldElubmVySFRNTD17X19odG1sOmUuaW5zdGFuY2UudG9TdHJpbmcoKX0sbikscz1TZSgpO3JldHVybiBzJiYoci5ub25jZT1zKSxbby5jcmVhdGVFbGVtZW50KFwic3R5bGVcIix0KHt9LHIse2tleTpcInNjLTAtMFwifSkpXX0sdGhpcy5zZWFsPWZ1bmN0aW9uKCl7ZS5zZWFsZWQ9ITB9LHRoaXMuaW5zdGFuY2U9bmV3IENlKHtpc1NlcnZlcjohMH0pLHRoaXMuc2VhbGVkPSExfXJldHVybiBlLnByb3RvdHlwZS5jb2xsZWN0U3R5bGVzPWZ1bmN0aW9uKGUpe2lmKHRoaXMuc2VhbGVkKXRocm93IGNlKDIpO3JldHVybiBvLmNyZWF0ZUVsZW1lbnQoTWUse3NoZWV0OnRoaXMuaW5zdGFuY2V9LGUpfSxlLnByb3RvdHlwZS5pbnRlcmxlYXZlV2l0aE5vZGVTdHJlYW09ZnVuY3Rpb24oZSl7dGhyb3cgY2UoMyl9LGV9KCkscHQ9e1N0eWxlU2hlZXQ6Q2UsbWFpblNoZWV0OlJlfTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbmF2aWdhdG9yJiZcIlJlYWN0TmF0aXZlXCI9PT1uYXZpZ2F0b3IucHJvZHVjdCYmY29uc29sZS53YXJuKFwiSXQgbG9va3MgbGlrZSB5b3UndmUgaW1wb3J0ZWQgJ3N0eWxlZC1jb21wb25lbnRzJyBvbiBSZWFjdCBOYXRpdmUuXFxuUGVyaGFwcyB5b3UncmUgbG9va2luZyB0byBpbXBvcnQgJ3N0eWxlZC1jb21wb25lbnRzL25hdGl2ZSc/XFxuUmVhZCBtb3JlIGFib3V0IHRoaXMgYXQgaHR0cHM6Ly93d3cuc3R5bGVkLWNvbXBvbmVudHMuY29tL2RvY3MvYmFzaWNzI3JlYWN0LW5hdGl2ZVwiKTt2YXIgZHQ9XCJfX3NjLVwiLmNvbmNhdChmLFwiX19cIik7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmXCJ0ZXN0XCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmKHdpbmRvd1tkdF18fCh3aW5kb3dbZHRdPTApLDE9PT13aW5kb3dbZHRdJiZjb25zb2xlLndhcm4oXCJJdCBsb29rcyBsaWtlIHRoZXJlIGFyZSBzZXZlcmFsIGluc3RhbmNlcyBvZiAnc3R5bGVkLWNvbXBvbmVudHMnIGluaXRpYWxpemVkIGluIHRoaXMgYXBwbGljYXRpb24uIFRoaXMgbWF5IGNhdXNlIGR5bmFtaWMgc3R5bGVzIHRvIG5vdCByZW5kZXIgcHJvcGVybHksIGVycm9ycyBkdXJpbmcgdGhlIHJlaHlkcmF0aW9uIHByb2Nlc3MsIGEgbWlzc2luZyB0aGVtZSBwcm9wLCBhbmQgbWFrZXMgeW91ciBhcHBsaWNhdGlvbiBiaWdnZXIgd2l0aG91dCBnb29kIHJlYXNvbi5cXG5cXG5TZWUgaHR0cHM6Ly9zLWMuc2gvMkJBWHplZCBmb3IgbW9yZSBpbmZvLlwiKSx3aW5kb3dbZHRdKz0xKTtleHBvcnR7dXQgYXMgU2VydmVyU3R5bGVTaGVldCxqZSBhcyBTdHlsZVNoZWV0Q29uc3VtZXIsa2UgYXMgU3R5bGVTaGVldENvbnRleHQsTWUgYXMgU3R5bGVTaGVldE1hbmFnZXIsVWUgYXMgVGhlbWVDb25zdW1lcixIZSBhcyBUaGVtZUNvbnRleHQsWGUgYXMgVGhlbWVQcm92aWRlcixwdCBhcyBfX1BSSVZBVEVfXyxhdCBhcyBjcmVhdGVHbG9iYWxTdHlsZSxudCBhcyBjc3Msc3QgYXMgZGVmYXVsdCxlZSBhcyBpc1N0eWxlZENvbXBvbmVudCxjdCBhcyBrZXlmcmFtZXMsc3QgYXMgc3R5bGVkLEplIGFzIHVzZVRoZW1lLG0gYXMgdmVyc2lvbixsdCBhcyB3aXRoVGhlbWV9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3R5bGVkLWNvbXBvbmVudHMuYnJvd3Nlci5lc20uanMubWFwXG4iLCJ2YXIgb3duID0ge30uaGFzT3duUHJvcGVydHlcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlzdCcpLk5vZGV9IE5vZGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaXN0JykuUG9zaXRpb259IFBvc2l0aW9uXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlzdCcpLlBvaW50fSBQb2ludFxuICovXG5cbi8qKlxuICogU3RyaW5naWZ5IG9uZSBwb2ludCwgYSBwb3NpdGlvbiAoc3RhcnQgYW5kIGVuZCBwb2ludHMpLCBvciBhIG5vZGXigJlzXG4gKiBwb3NpdGlvbmFsIGluZm9ybWF0aW9uLlxuICpcbiAqIEBwYXJhbSB7Tm9kZXxQb3NpdGlvbnxQb2ludH0gW3ZhbHVlXVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeVBvc2l0aW9uKHZhbHVlKSB7XG4gIC8vIE5vdGhpbmcuXG4gIGlmICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLy8gTm9kZS5cbiAgaWYgKG93bi5jYWxsKHZhbHVlLCAncG9zaXRpb24nKSB8fCBvd24uY2FsbCh2YWx1ZSwgJ3R5cGUnKSkge1xuICAgIC8vIEB0cy1pZ25vcmUgbG9va3MgbGlrZSBhIG5vZGUuXG4gICAgcmV0dXJuIHBvc2l0aW9uKHZhbHVlLnBvc2l0aW9uKVxuICB9XG5cbiAgLy8gUG9zaXRpb24uXG4gIGlmIChvd24uY2FsbCh2YWx1ZSwgJ3N0YXJ0JykgfHwgb3duLmNhbGwodmFsdWUsICdlbmQnKSkge1xuICAgIC8vIEB0cy1pZ25vcmUgbG9va3MgbGlrZSBhIHBvc2l0aW9uLlxuICAgIHJldHVybiBwb3NpdGlvbih2YWx1ZSlcbiAgfVxuXG4gIC8vIFBvaW50LlxuICBpZiAob3duLmNhbGwodmFsdWUsICdsaW5lJykgfHwgb3duLmNhbGwodmFsdWUsICdjb2x1bW4nKSkge1xuICAgIC8vIEB0cy1pZ25vcmUgbG9va3MgbGlrZSBhIHBvaW50LlxuICAgIHJldHVybiBwb2ludCh2YWx1ZSlcbiAgfVxuXG4gIC8vID9cbiAgcmV0dXJuICcnXG59XG5cbi8qKlxuICogQHBhcmFtIHtQb2ludH0gcG9pbnRcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHBvaW50KHBvaW50KSB7XG4gIHJldHVybiBpbmRleChwb2ludCAmJiBwb2ludC5saW5lKSArICc6JyArIGluZGV4KHBvaW50ICYmIHBvaW50LmNvbHVtbilcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1Bvc2l0aW9ufSBwb3NcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHBvc2l0aW9uKHBvcykge1xuICByZXR1cm4gcG9pbnQocG9zICYmIHBvcy5zdGFydCkgKyAnLScgKyBwb2ludChwb3MgJiYgcG9zLmVuZClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGluZGV4KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInID8gdmFsdWUgOiAxXG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaXN0JykuTm9kZX0gTm9kZVxuICogQHR5cGVkZWYge2ltcG9ydCgndW5pc3QnKS5Qb3NpdGlvbn0gUG9zaXRpb25cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaXN0JykuUG9pbnR9IFBvaW50XG4gKi9cblxuaW1wb3J0IHtzdHJpbmdpZnlQb3NpdGlvbn0gZnJvbSAndW5pc3QtdXRpbC1zdHJpbmdpZnktcG9zaXRpb24nXG5cbmV4cG9ydCBjbGFzcyBWRmlsZU1lc3NhZ2UgZXh0ZW5kcyBFcnJvciB7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvciBvZiBhIG1lc3NhZ2UgZm9yIGByZWFzb25gIGF0IGBwbGFjZWAgZnJvbSBgb3JpZ2luYC5cbiAgICogV2hlbiBhbiBlcnJvciBpcyBwYXNzZWQgaW4gYXMgYHJlYXNvbmAsIGNvcGllcyB0aGUgYHN0YWNrYC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8RXJyb3J9IHJlYXNvbiBSZWFzb24gZm9yIG1lc3NhZ2UgKGBzdHJpbmdgIG9yIGBFcnJvcmApLiBVc2VzIHRoZSBzdGFjayBhbmQgbWVzc2FnZSBvZiB0aGUgZXJyb3IgaWYgZ2l2ZW4uXG4gICAqIEBwYXJhbSB7Tm9kZXxQb3NpdGlvbnxQb2ludH0gW3BsYWNlXSBQbGFjZSBhdCB3aGljaCB0aGUgbWVzc2FnZSBvY2N1cnJlZCBpbiBhIGZpbGUgKGBOb2RlYCwgYFBvc2l0aW9uYCwgb3IgYFBvaW50YCwgb3B0aW9uYWwpLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29yaWdpbl0gUGxhY2UgaW4gY29kZSB0aGUgbWVzc2FnZSBvcmlnaW5hdGVzIGZyb20gKGBzdHJpbmdgLCBvcHRpb25hbCkuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihyZWFzb24sIHBsYWNlLCBvcmlnaW4pIHtcbiAgICAvKiogQHR5cGUge1tzdHJpbmc/LCBzdHJpbmc/XX0gKi9cbiAgICB2YXIgcGFydHMgPSBbbnVsbCwgbnVsbF1cbiAgICAvKiogQHR5cGUge1Bvc2l0aW9ufSAqL1xuICAgIHZhciBwb3NpdGlvbiA9IHtcbiAgICAgIHN0YXJ0OiB7bGluZTogbnVsbCwgY29sdW1uOiBudWxsfSxcbiAgICAgIGVuZDoge2xpbmU6IG51bGwsIGNvbHVtbjogbnVsbH1cbiAgICB9XG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgdmFyIGluZGV4XG5cbiAgICBzdXBlcigpXG5cbiAgICBpZiAodHlwZW9mIHBsYWNlID09PSAnc3RyaW5nJykge1xuICAgICAgb3JpZ2luID0gcGxhY2VcbiAgICAgIHBsYWNlID0gbnVsbFxuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb3JpZ2luID09PSAnc3RyaW5nJykge1xuICAgICAgaW5kZXggPSBvcmlnaW4uaW5kZXhPZignOicpXG5cbiAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgcGFydHNbMV0gPSBvcmlnaW5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnRzWzBdID0gb3JpZ2luLnNsaWNlKDAsIGluZGV4KVxuICAgICAgICBwYXJ0c1sxXSA9IG9yaWdpbi5zbGljZShpbmRleCArIDEpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBsYWNlKSB7XG4gICAgICAvLyBOb2RlLlxuICAgICAgaWYgKCd0eXBlJyBpbiBwbGFjZSB8fCAncG9zaXRpb24nIGluIHBsYWNlKSB7XG4gICAgICAgIGlmIChwbGFjZS5wb3NpdGlvbikge1xuICAgICAgICAgIHBvc2l0aW9uID0gcGxhY2UucG9zaXRpb25cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gUG9zaXRpb24uXG4gICAgICBlbHNlIGlmICgnc3RhcnQnIGluIHBsYWNlIHx8ICdlbmQnIGluIHBsYWNlKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgTG9va3MgbGlrZSBhIHBvc2l0aW9uLlxuICAgICAgICBwb3NpdGlvbiA9IHBsYWNlXG4gICAgICB9XG4gICAgICAvLyBQb2ludC5cbiAgICAgIGVsc2UgaWYgKCdsaW5lJyBpbiBwbGFjZSB8fCAnY29sdW1uJyBpbiBwbGFjZSkge1xuICAgICAgICAvLyBAdHMtaWdub3JlIExvb2tzIGxpa2UgYSBwb2ludC5cbiAgICAgICAgcG9zaXRpb24uc3RhcnQgPSBwbGFjZVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZpZWxkcyBmcm9tIGBFcnJvcmBcbiAgICB0aGlzLm5hbWUgPSBzdHJpbmdpZnlQb3NpdGlvbihwbGFjZSkgfHwgJzE6MSdcbiAgICB0aGlzLm1lc3NhZ2UgPSB0eXBlb2YgcmVhc29uID09PSAnb2JqZWN0JyA/IHJlYXNvbi5tZXNzYWdlIDogcmVhc29uXG4gICAgdGhpcy5zdGFjayA9IHR5cGVvZiByZWFzb24gPT09ICdvYmplY3QnID8gcmVhc29uLnN0YWNrIDogJydcblxuICAgIC8qKlxuICAgICAqIFJlYXNvbiBmb3IgbWVzc2FnZS5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMucmVhc29uID0gdGhpcy5tZXNzYWdlXG4gICAgLyoqXG4gICAgICogU3RhcnRpbmcgbGluZSBvZiBlcnJvci5cbiAgICAgKiBAdHlwZSB7bnVtYmVyP31cbiAgICAgKi9cbiAgICB0aGlzLmxpbmUgPSBwb3NpdGlvbi5zdGFydC5saW5lXG4gICAgLyoqXG4gICAgICogU3RhcnRpbmcgY29sdW1uIG9mIGVycm9yLlxuICAgICAqIEB0eXBlIHtudW1iZXI/fVxuICAgICAqL1xuICAgIHRoaXMuY29sdW1uID0gcG9zaXRpb24uc3RhcnQuY29sdW1uXG4gICAgLyoqXG4gICAgICogTmFtZXNwYWNlIG9mIHdhcm5pbmcuXG4gICAgICogQHR5cGUge3N0cmluZz99XG4gICAgICovXG4gICAgdGhpcy5zb3VyY2UgPSBwYXJ0c1swXVxuICAgIC8qKlxuICAgICAqIENhdGVnb3J5IG9mIG1lc3NhZ2UuXG4gICAgICogQHR5cGUge3N0cmluZz99XG4gICAgICovXG4gICAgdGhpcy5ydWxlSWQgPSBwYXJ0c1sxXVxuICAgIC8qKlxuICAgICAqIEZ1bGwgcmFuZ2UgaW5mb3JtYXRpb24sIHdoZW4gYXZhaWxhYmxlLlxuICAgICAqIEhhcyBzdGFydCBhbmQgZW5kIHByb3BlcnRpZXMsIGJvdGggc2V0IHRvIGFuIG9iamVjdCB3aXRoIGxpbmUgYW5kIGNvbHVtbiwgc2V0IHRvIG51bWJlcj8uXG4gICAgICogQHR5cGUge1Bvc2l0aW9uP31cbiAgICAgKi9cbiAgICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb25cblxuICAgIC8vIFRoZSBmb2xsb3dpbmcgZmllbGRzIGFyZSDigJx3ZWxsIGtub3du4oCdLlxuICAgIC8vIE5vdCBzdGFuZGFyZC5cbiAgICAvLyBGZWVsIGZyZWUgdG8gYWRkIG90aGVyIG5vbi1zdGFuZGFyZCBmaWVsZHMgdG8geW91ciBtZXNzYWdlcy5cblxuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC1leHByZXNzaW9ucyAqL1xuICAgIC8qKlxuICAgICAqIFlvdSBtYXkgYWRkIGEgZmlsZSBwcm9wZXJ0eSB3aXRoIGEgcGF0aCBvZiBhIGZpbGUgKHVzZWQgdGhyb3VnaG91dCB0aGUgVkZpbGUgZWNvc3lzdGVtKS5cbiAgICAgKiBAdHlwZSB7c3RyaW5nP31cbiAgICAgKi9cbiAgICB0aGlzLmZpbGVcbiAgICAvKipcbiAgICAgKiBJZiB0cnVlLCBtYXJrcyBhc3NvY2lhdGVkIGZpbGUgYXMgbm8gbG9uZ2VyIHByb2Nlc3NhYmxlLlxuICAgICAqIEB0eXBlIHtib29sZWFuP31cbiAgICAgKi9cbiAgICB0aGlzLmZhdGFsXG4gICAgLyoqXG4gICAgICogWW91IG1heSBhZGQgYSB1cmwgcHJvcGVydHkgd2l0aCBhIGxpbmsgdG8gZG9jdW1lbnRhdGlvbiBmb3IgdGhlIG1lc3NhZ2UuXG4gICAgICogQHR5cGUge3N0cmluZz99XG4gICAgICovXG4gICAgdGhpcy51cmxcbiAgICAvKipcbiAgICAgKiBZb3UgbWF5IGFkZCBhIG5vdGUgcHJvcGVydHkgd2l0aCBhIGxvbmcgZm9ybSBkZXNjcmlwdGlvbiBvZiB0aGUgbWVzc2FnZSAoc3VwcG9ydGVkIGJ5IHZmaWxlLXJlcG9ydGVyKS5cbiAgICAgKiBAdHlwZSB7c3RyaW5nP31cbiAgICAgKi9cbiAgICB0aGlzLm5vdGVcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC1leHByZXNzaW9ucyAqL1xuICB9XG59XG5cblZGaWxlTWVzc2FnZS5wcm90b3R5cGUuZmlsZSA9ICcnXG5WRmlsZU1lc3NhZ2UucHJvdG90eXBlLm5hbWUgPSAnJ1xuVkZpbGVNZXNzYWdlLnByb3RvdHlwZS5yZWFzb24gPSAnJ1xuVkZpbGVNZXNzYWdlLnByb3RvdHlwZS5tZXNzYWdlID0gJydcblZGaWxlTWVzc2FnZS5wcm90b3R5cGUuc3RhY2sgPSAnJ1xuVkZpbGVNZXNzYWdlLnByb3RvdHlwZS5mYXRhbCA9IG51bGxcblZGaWxlTWVzc2FnZS5wcm90b3R5cGUuY29sdW1uID0gbnVsbFxuVkZpbGVNZXNzYWdlLnByb3RvdHlwZS5saW5lID0gbnVsbFxuVkZpbGVNZXNzYWdlLnByb3RvdHlwZS5zb3VyY2UgPSBudWxsXG5WRmlsZU1lc3NhZ2UucHJvdG90eXBlLnJ1bGVJZCA9IG51bGxcblZGaWxlTWVzc2FnZS5wcm90b3R5cGUucG9zaXRpb24gPSBudWxsXG4iLCIvLyBBIGRlcml2YXRpdmUgd29yayBiYXNlZCBvbjpcbi8vIDxodHRwczovL2dpdGh1Yi5jb20vYnJvd3NlcmlmeS9wYXRoLWJyb3dzZXJpZnk+LlxuLy8gV2hpY2ggaXMgbGljZW5zZWQ6XG4vL1xuLy8gTUlUIExpY2Vuc2Vcbi8vXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTMgSmFtZXMgSGFsbGlkYXlcbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mXG4vLyB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluXG4vLyB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvXG4vLyB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZlxuLy8gdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxuLy8gc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4vLyBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTXG4vLyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1Jcbi8vIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUlxuLy8gSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU5cbi8vIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4vLyBBIGRlcml2YXRpdmUgd29yayBiYXNlZCBvbjpcbi8vXG4vLyBQYXJ0cyBvZiB0aGF0IGFyZSBleHRyYWN0ZWQgZnJvbSBOb2Rl4oCZcyBpbnRlcm5hbCBgcGF0aGAgbW9kdWxlOlxuLy8gPGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9ibG9iL21hc3Rlci9saWIvcGF0aC5qcz4uXG4vLyBXaGljaCBpcyBsaWNlbnNlZDpcbi8vXG4vLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuZXhwb3J0IGNvbnN0IHBhdGggPSB7YmFzZW5hbWUsIGRpcm5hbWUsIGV4dG5hbWUsIGpvaW4sIHNlcDogJy8nfVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtZGVwdGgsIGNvbXBsZXhpdHkgKi9cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aFxuICogQHBhcmFtIHtzdHJpbmd9IFtleHRdXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBiYXNlbmFtZShwYXRoLCBleHQpIHtcbiAgaWYgKGV4dCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBleHQgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJleHRcIiBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJylcbiAgfVxuXG4gIGFzc2VydFBhdGgocGF0aClcbiAgbGV0IHN0YXJ0ID0gMFxuICBsZXQgZW5kID0gLTFcbiAgbGV0IGluZGV4ID0gcGF0aC5sZW5ndGhcbiAgLyoqIEB0eXBlIHtib29sZWFufHVuZGVmaW5lZH0gKi9cbiAgbGV0IHNlZW5Ob25TbGFzaFxuXG4gIGlmIChleHQgPT09IHVuZGVmaW5lZCB8fCBleHQubGVuZ3RoID09PSAwIHx8IGV4dC5sZW5ndGggPiBwYXRoLmxlbmd0aCkge1xuICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICBpZiAocGF0aC5jaGFyQ29kZUF0KGluZGV4KSA9PT0gNDcgLyogYC9gICovKSB7XG4gICAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSBwYXRoIHNlcGFyYXRvciB0aGF0IHdhcyBub3QgcGFydCBvZiBhIHNldCBvZiBwYXRoXG4gICAgICAgIC8vIHNlcGFyYXRvcnMgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCBzdG9wIG5vdy5cbiAgICAgICAgaWYgKHNlZW5Ob25TbGFzaCkge1xuICAgICAgICAgIHN0YXJ0ID0gaW5kZXggKyAxXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChlbmQgPCAwKSB7XG4gICAgICAgIC8vIFdlIHNhdyB0aGUgZmlyc3Qgbm9uLXBhdGggc2VwYXJhdG9yLCBtYXJrIHRoaXMgYXMgdGhlIGVuZCBvZiBvdXJcbiAgICAgICAgLy8gcGF0aCBjb21wb25lbnQuXG4gICAgICAgIHNlZW5Ob25TbGFzaCA9IHRydWVcbiAgICAgICAgZW5kID0gaW5kZXggKyAxXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuZCA8IDAgPyAnJyA6IHBhdGguc2xpY2Uoc3RhcnQsIGVuZClcbiAgfVxuXG4gIGlmIChleHQgPT09IHBhdGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGxldCBmaXJzdE5vblNsYXNoRW5kID0gLTFcbiAgbGV0IGV4dEluZGV4ID0gZXh0Lmxlbmd0aCAtIDFcblxuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIGlmIChwYXRoLmNoYXJDb2RlQXQoaW5kZXgpID09PSA0NyAvKiBgL2AgKi8pIHtcbiAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSBwYXRoIHNlcGFyYXRvciB0aGF0IHdhcyBub3QgcGFydCBvZiBhIHNldCBvZiBwYXRoXG4gICAgICAvLyBzZXBhcmF0b3JzIGF0IHRoZSBlbmQgb2YgdGhlIHN0cmluZywgc3RvcCBub3cuXG4gICAgICBpZiAoc2Vlbk5vblNsYXNoKSB7XG4gICAgICAgIHN0YXJ0ID0gaW5kZXggKyAxXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChmaXJzdE5vblNsYXNoRW5kIDwgMCkge1xuICAgICAgICAvLyBXZSBzYXcgdGhlIGZpcnN0IG5vbi1wYXRoIHNlcGFyYXRvciwgcmVtZW1iZXIgdGhpcyBpbmRleCBpbiBjYXNlXG4gICAgICAgIC8vIHdlIG5lZWQgaXQgaWYgdGhlIGV4dGVuc2lvbiBlbmRzIHVwIG5vdCBtYXRjaGluZy5cbiAgICAgICAgc2Vlbk5vblNsYXNoID0gdHJ1ZVxuICAgICAgICBmaXJzdE5vblNsYXNoRW5kID0gaW5kZXggKyAxXG4gICAgICB9XG5cbiAgICAgIGlmIChleHRJbmRleCA+IC0xKSB7XG4gICAgICAgIC8vIFRyeSB0byBtYXRjaCB0aGUgZXhwbGljaXQgZXh0ZW5zaW9uLlxuICAgICAgICBpZiAocGF0aC5jaGFyQ29kZUF0KGluZGV4KSA9PT0gZXh0LmNoYXJDb2RlQXQoZXh0SW5kZXgtLSkpIHtcbiAgICAgICAgICBpZiAoZXh0SW5kZXggPCAwKSB7XG4gICAgICAgICAgICAvLyBXZSBtYXRjaGVkIHRoZSBleHRlbnNpb24sIHNvIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91ciBwYXRoXG4gICAgICAgICAgICAvLyBjb21wb25lbnRcbiAgICAgICAgICAgIGVuZCA9IGluZGV4XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEV4dGVuc2lvbiBkb2VzIG5vdCBtYXRjaCwgc28gb3VyIHJlc3VsdCBpcyB0aGUgZW50aXJlIHBhdGhcbiAgICAgICAgICAvLyBjb21wb25lbnRcbiAgICAgICAgICBleHRJbmRleCA9IC0xXG4gICAgICAgICAgZW5kID0gZmlyc3ROb25TbGFzaEVuZFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSBlbmQpIHtcbiAgICBlbmQgPSBmaXJzdE5vblNsYXNoRW5kXG4gIH0gZWxzZSBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCA9IHBhdGgubGVuZ3RoXG4gIH1cblxuICByZXR1cm4gcGF0aC5zbGljZShzdGFydCwgZW5kKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBkaXJuYW1lKHBhdGgpIHtcbiAgYXNzZXJ0UGF0aChwYXRoKVxuXG4gIGlmIChwYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnLidcbiAgfVxuXG4gIGxldCBlbmQgPSAtMVxuICBsZXQgaW5kZXggPSBwYXRoLmxlbmd0aFxuICAvKiogQHR5cGUge2Jvb2xlYW58dW5kZWZpbmVkfSAqL1xuICBsZXQgdW5tYXRjaGVkU2xhc2hcblxuICAvLyBQcmVmaXggYC0tYCBpcyBpbXBvcnRhbnQgdG8gbm90IHJ1biBvbiBgMGAuXG4gIHdoaWxlICgtLWluZGV4KSB7XG4gICAgaWYgKHBhdGguY2hhckNvZGVBdChpbmRleCkgPT09IDQ3IC8qIGAvYCAqLykge1xuICAgICAgaWYgKHVubWF0Y2hlZFNsYXNoKSB7XG4gICAgICAgIGVuZCA9IGluZGV4XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghdW5tYXRjaGVkU2xhc2gpIHtcbiAgICAgIC8vIFdlIHNhdyB0aGUgZmlyc3Qgbm9uLXBhdGggc2VwYXJhdG9yXG4gICAgICB1bm1hdGNoZWRTbGFzaCA9IHRydWVcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZW5kIDwgMFxuICAgID8gcGF0aC5jaGFyQ29kZUF0KDApID09PSA0NyAvKiBgL2AgKi9cbiAgICAgID8gJy8nXG4gICAgICA6ICcuJ1xuICAgIDogZW5kID09PSAxICYmIHBhdGguY2hhckNvZGVBdCgwKSA9PT0gNDcgLyogYC9gICovXG4gICAgPyAnLy8nXG4gICAgOiBwYXRoLnNsaWNlKDAsIGVuZClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXh0bmFtZShwYXRoKSB7XG4gIGFzc2VydFBhdGgocGF0aClcblxuICBsZXQgaW5kZXggPSBwYXRoLmxlbmd0aFxuXG4gIGxldCBlbmQgPSAtMVxuICBsZXQgc3RhcnRQYXJ0ID0gMFxuICBsZXQgc3RhcnREb3QgPSAtMVxuICAvLyBUcmFjayB0aGUgc3RhdGUgb2YgY2hhcmFjdGVycyAoaWYgYW55KSB3ZSBzZWUgYmVmb3JlIG91ciBmaXJzdCBkb3QgYW5kXG4gIC8vIGFmdGVyIGFueSBwYXRoIHNlcGFyYXRvciB3ZSBmaW5kLlxuICBsZXQgcHJlRG90U3RhdGUgPSAwXG4gIC8qKiBAdHlwZSB7Ym9vbGVhbnx1bmRlZmluZWR9ICovXG4gIGxldCB1bm1hdGNoZWRTbGFzaFxuXG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgY29uc3QgY29kZSA9IHBhdGguY2hhckNvZGVBdChpbmRleClcblxuICAgIGlmIChjb2RlID09PSA0NyAvKiBgL2AgKi8pIHtcbiAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSBwYXRoIHNlcGFyYXRvciB0aGF0IHdhcyBub3QgcGFydCBvZiBhIHNldCBvZiBwYXRoXG4gICAgICAvLyBzZXBhcmF0b3JzIGF0IHRoZSBlbmQgb2YgdGhlIHN0cmluZywgc3RvcCBub3cuXG4gICAgICBpZiAodW5tYXRjaGVkU2xhc2gpIHtcbiAgICAgICAgc3RhcnRQYXJ0ID0gaW5kZXggKyAxXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgaWYgKGVuZCA8IDApIHtcbiAgICAgIC8vIFdlIHNhdyB0aGUgZmlyc3Qgbm9uLXBhdGggc2VwYXJhdG9yLCBtYXJrIHRoaXMgYXMgdGhlIGVuZCBvZiBvdXJcbiAgICAgIC8vIGV4dGVuc2lvbi5cbiAgICAgIHVubWF0Y2hlZFNsYXNoID0gdHJ1ZVxuICAgICAgZW5kID0gaW5kZXggKyAxXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IDQ2IC8qIGAuYCAqLykge1xuICAgICAgLy8gSWYgdGhpcyBpcyBvdXIgZmlyc3QgZG90LCBtYXJrIGl0IGFzIHRoZSBzdGFydCBvZiBvdXIgZXh0ZW5zaW9uLlxuICAgICAgaWYgKHN0YXJ0RG90IDwgMCkge1xuICAgICAgICBzdGFydERvdCA9IGluZGV4XG4gICAgICB9IGVsc2UgaWYgKHByZURvdFN0YXRlICE9PSAxKSB7XG4gICAgICAgIHByZURvdFN0YXRlID0gMVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc3RhcnREb3QgPiAtMSkge1xuICAgICAgLy8gV2Ugc2F3IGEgbm9uLWRvdCBhbmQgbm9uLXBhdGggc2VwYXJhdG9yIGJlZm9yZSBvdXIgZG90LCBzbyB3ZSBzaG91bGRcbiAgICAgIC8vIGhhdmUgYSBnb29kIGNoYW5jZSBhdCBoYXZpbmcgYSBub24tZW1wdHkgZXh0ZW5zaW9uLlxuICAgICAgcHJlRG90U3RhdGUgPSAtMVxuICAgIH1cbiAgfVxuXG4gIGlmIChcbiAgICBzdGFydERvdCA8IDAgfHxcbiAgICBlbmQgPCAwIHx8XG4gICAgLy8gV2Ugc2F3IGEgbm9uLWRvdCBjaGFyYWN0ZXIgaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBkb3QuXG4gICAgcHJlRG90U3RhdGUgPT09IDAgfHxcbiAgICAvLyBUaGUgKHJpZ2h0LW1vc3QpIHRyaW1tZWQgcGF0aCBjb21wb25lbnQgaXMgZXhhY3RseSBgLi5gLlxuICAgIChwcmVEb3RTdGF0ZSA9PT0gMSAmJiBzdGFydERvdCA9PT0gZW5kIC0gMSAmJiBzdGFydERvdCA9PT0gc3RhcnRQYXJ0ICsgMSlcbiAgKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICByZXR1cm4gcGF0aC5zbGljZShzdGFydERvdCwgZW5kKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZz59IHNlZ21lbnRzXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBqb2luKC4uLnNlZ21lbnRzKSB7XG4gIGxldCBpbmRleCA9IC0xXG4gIC8qKiBAdHlwZSB7c3RyaW5nfHVuZGVmaW5lZH0gKi9cbiAgbGV0IGpvaW5lZFxuXG4gIHdoaWxlICgrK2luZGV4IDwgc2VnbWVudHMubGVuZ3RoKSB7XG4gICAgYXNzZXJ0UGF0aChzZWdtZW50c1tpbmRleF0pXG5cbiAgICBpZiAoc2VnbWVudHNbaW5kZXhdKSB7XG4gICAgICBqb2luZWQgPVxuICAgICAgICBqb2luZWQgPT09IHVuZGVmaW5lZCA/IHNlZ21lbnRzW2luZGV4XSA6IGpvaW5lZCArICcvJyArIHNlZ21lbnRzW2luZGV4XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBqb2luZWQgPT09IHVuZGVmaW5lZCA/ICcuJyA6IG5vcm1hbGl6ZShqb2luZWQpXG59XG5cbi8qKlxuICogTm90ZTogYG5vcm1hbGl6ZWAgaXMgbm90IGV4cG9zZWQgYXMgYHBhdGgubm9ybWFsaXplYCwgc28gc29tZSBjb2RlIGlzXG4gKiBtYW51YWxseSByZW1vdmVkIGZyb20gaXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGhcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZShwYXRoKSB7XG4gIGFzc2VydFBhdGgocGF0aClcblxuICBjb25zdCBhYnNvbHV0ZSA9IHBhdGguY2hhckNvZGVBdCgwKSA9PT0gNDcgLyogYC9gICovXG5cbiAgLy8gTm9ybWFsaXplIHRoZSBwYXRoIGFjY29yZGluZyB0byBQT1NJWCBydWxlcy5cbiAgbGV0IHZhbHVlID0gbm9ybWFsaXplU3RyaW5nKHBhdGgsICFhYnNvbHV0ZSlcblxuICBpZiAodmFsdWUubGVuZ3RoID09PSAwICYmICFhYnNvbHV0ZSkge1xuICAgIHZhbHVlID0gJy4nXG4gIH1cblxuICBpZiAodmFsdWUubGVuZ3RoID4gMCAmJiBwYXRoLmNoYXJDb2RlQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gNDcgLyogLyAqLykge1xuICAgIHZhbHVlICs9ICcvJ1xuICB9XG5cbiAgcmV0dXJuIGFic29sdXRlID8gJy8nICsgdmFsdWUgOiB2YWx1ZVxufVxuXG4vKipcbiAqIFJlc29sdmUgYC5gIGFuZCBgLi5gIGVsZW1lbnRzIGluIGEgcGF0aCB3aXRoIGRpcmVjdG9yeSBuYW1lcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aFxuICogQHBhcmFtIHtib29sZWFufSBhbGxvd0Fib3ZlUm9vdFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplU3RyaW5nKHBhdGgsIGFsbG93QWJvdmVSb290KSB7XG4gIGxldCByZXN1bHQgPSAnJ1xuICBsZXQgbGFzdFNlZ21lbnRMZW5ndGggPSAwXG4gIGxldCBsYXN0U2xhc2ggPSAtMVxuICBsZXQgZG90cyA9IDBcbiAgbGV0IGluZGV4ID0gLTFcbiAgLyoqIEB0eXBlIHtudW1iZXJ8dW5kZWZpbmVkfSAqL1xuICBsZXQgY29kZVxuICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgbGV0IGxhc3RTbGFzaEluZGV4XG5cbiAgd2hpbGUgKCsraW5kZXggPD0gcGF0aC5sZW5ndGgpIHtcbiAgICBpZiAoaW5kZXggPCBwYXRoLmxlbmd0aCkge1xuICAgICAgY29kZSA9IHBhdGguY2hhckNvZGVBdChpbmRleClcbiAgICB9IGVsc2UgaWYgKGNvZGUgPT09IDQ3IC8qIGAvYCAqLykge1xuICAgICAgYnJlYWtcbiAgICB9IGVsc2Uge1xuICAgICAgY29kZSA9IDQ3IC8qIGAvYCAqL1xuICAgIH1cblxuICAgIGlmIChjb2RlID09PSA0NyAvKiBgL2AgKi8pIHtcbiAgICAgIGlmIChsYXN0U2xhc2ggPT09IGluZGV4IC0gMSB8fCBkb3RzID09PSAxKSB7XG4gICAgICAgIC8vIEVtcHR5LlxuICAgICAgfSBlbHNlIGlmIChsYXN0U2xhc2ggIT09IGluZGV4IC0gMSAmJiBkb3RzID09PSAyKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICByZXN1bHQubGVuZ3RoIDwgMiB8fFxuICAgICAgICAgIGxhc3RTZWdtZW50TGVuZ3RoICE9PSAyIHx8XG4gICAgICAgICAgcmVzdWx0LmNoYXJDb2RlQXQocmVzdWx0Lmxlbmd0aCAtIDEpICE9PSA0NiAvKiBgLmAgKi8gfHxcbiAgICAgICAgICByZXN1bHQuY2hhckNvZGVBdChyZXN1bHQubGVuZ3RoIC0gMikgIT09IDQ2IC8qIGAuYCAqL1xuICAgICAgICApIHtcbiAgICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgIGxhc3RTbGFzaEluZGV4ID0gcmVzdWx0Lmxhc3RJbmRleE9mKCcvJylcblxuICAgICAgICAgICAgaWYgKGxhc3RTbGFzaEluZGV4ICE9PSByZXN1bHQubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICBpZiAobGFzdFNsYXNoSW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gJydcbiAgICAgICAgICAgICAgICBsYXN0U2VnbWVudExlbmd0aCA9IDBcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgbGFzdFNsYXNoSW5kZXgpXG4gICAgICAgICAgICAgICAgbGFzdFNlZ21lbnRMZW5ndGggPSByZXN1bHQubGVuZ3RoIC0gMSAtIHJlc3VsdC5sYXN0SW5kZXhPZignLycpXG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBsYXN0U2xhc2ggPSBpbmRleFxuICAgICAgICAgICAgICBkb3RzID0gMFxuICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJlc3VsdCA9ICcnXG4gICAgICAgICAgICBsYXN0U2VnbWVudExlbmd0aCA9IDBcbiAgICAgICAgICAgIGxhc3RTbGFzaCA9IGluZGV4XG4gICAgICAgICAgICBkb3RzID0gMFxuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWxsb3dBYm92ZVJvb3QpIHtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQubGVuZ3RoID4gMCA/IHJlc3VsdCArICcvLi4nIDogJy4uJ1xuICAgICAgICAgIGxhc3RTZWdtZW50TGVuZ3RoID0gMlxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICByZXN1bHQgKz0gJy8nICsgcGF0aC5zbGljZShsYXN0U2xhc2ggKyAxLCBpbmRleClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQgPSBwYXRoLnNsaWNlKGxhc3RTbGFzaCArIDEsIGluZGV4KVxuICAgICAgICB9XG5cbiAgICAgICAgbGFzdFNlZ21lbnRMZW5ndGggPSBpbmRleCAtIGxhc3RTbGFzaCAtIDFcbiAgICAgIH1cblxuICAgICAgbGFzdFNsYXNoID0gaW5kZXhcbiAgICAgIGRvdHMgPSAwXG4gICAgfSBlbHNlIGlmIChjb2RlID09PSA0NiAvKiBgLmAgKi8gJiYgZG90cyA+IC0xKSB7XG4gICAgICBkb3RzKytcbiAgICB9IGVsc2Uge1xuICAgICAgZG90cyA9IC0xXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFBhdGgocGF0aCkge1xuICBpZiAodHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdQYXRoIG11c3QgYmUgYSBzdHJpbmcuIFJlY2VpdmVkICcgKyBKU09OLnN0cmluZ2lmeShwYXRoKVxuICAgIClcbiAgfVxufVxuXG4vKiBlc2xpbnQtZW5hYmxlIG1heC1kZXB0aCwgY29tcGxleGl0eSAqL1xuIiwiLy8gU29tZXdoYXQgYmFzZWQgb246XG4vLyA8aHR0cHM6Ly9naXRodWIuY29tL2RlZnVuY3R6b21iaWUvbm9kZS1wcm9jZXNzL2Jsb2IvbWFzdGVyL2Jyb3dzZXIuanM+LlxuLy8gQnV0IEkgZG9u4oCZdCB0aGluayBvbmUgdGlueSBsaW5lIG9mIGNvZGUgY2FuIGJlIGNvcHlyaWdodGVkLiDwn5iFXG5leHBvcnQgY29uc3QgcHJvYyA9IHtjd2R9XG5cbmZ1bmN0aW9uIGN3ZCgpIHtcbiAgcmV0dXJuICcvJ1xufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiBVUkxcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBoYXNoXG4gKiBAcHJvcGVydHkge3N0cmluZ30gaG9zdFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGhvc3RuYW1lXG4gKiBAcHJvcGVydHkge3N0cmluZ30gaHJlZlxuICogQHByb3BlcnR5IHtzdHJpbmd9IG9yaWdpblxuICogQHByb3BlcnR5IHtzdHJpbmd9IHBhc3N3b3JkXG4gKiBAcHJvcGVydHkge3N0cmluZ30gcGF0aG5hbWVcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBwb3J0XG4gKiBAcHJvcGVydHkge3N0cmluZ30gcHJvdG9jb2xcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzZWFyY2hcbiAqIEBwcm9wZXJ0eSB7YW55fSBzZWFyY2hQYXJhbXNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB1c2VybmFtZVxuICogQHByb3BlcnR5IHsoKSA9PiBzdHJpbmd9IHRvU3RyaW5nXG4gKiBAcHJvcGVydHkgeygpID0+IHN0cmluZ30gdG9KU09OXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge3Vua25vd259IGZpbGVVUkxPclBhdGhcbiAqIEByZXR1cm5zIHtmaWxlVVJMT3JQYXRoIGlzIFVSTH1cbiAqL1xuLy8gRnJvbTogPGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9ibG9iL2ZjZjhiYTQvbGliL2ludGVybmFsL3VybC5qcyNMMTUwMT5cbmV4cG9ydCBmdW5jdGlvbiBpc1VybChmaWxlVVJMT3JQYXRoKSB7XG4gIHJldHVybiAoXG4gICAgZmlsZVVSTE9yUGF0aCAhPT0gbnVsbCAmJlxuICAgIHR5cGVvZiBmaWxlVVJMT3JQYXRoID09PSAnb2JqZWN0JyAmJlxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IGluZGV4YWJsZS5cbiAgICBmaWxlVVJMT3JQYXRoLmhyZWYgJiZcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBpbmRleGFibGUuXG4gICAgZmlsZVVSTE9yUGF0aC5vcmlnaW5cbiAgKVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlzdCcpLk5vZGV9IE5vZGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaXN0JykuUG9zaXRpb259IFBvc2l0aW9uXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlzdCcpLlBvaW50fSBQb2ludFxuICogQHR5cGVkZWYge2ltcG9ydCgnLi9taW51cmwuc2hhcmVkLmpzJykuVVJMfSBVUkxcbiAqXG4gKiBAdHlwZWRlZiB7J2FzY2lpJ3wndXRmOCd8J3V0Zi04J3wndXRmMTZsZSd8J3VjczInfCd1Y3MtMid8J2Jhc2U2NCd8J2xhdGluMSd8J2JpbmFyeSd8J2hleCd9IEJ1ZmZlckVuY29kaW5nXG4gKiAgIEVuY29kaW5ncyBzdXBwb3J0ZWQgYnkgdGhlIGJ1ZmZlciBjbGFzcy5cbiAqICAgVGhpcyBpcyBhIGNvcHkgb2YgdGhlIHR5cGluZyBmcm9tIE5vZGUsIGNvcGllZCB0byBwcmV2ZW50IE5vZGUgZ2xvYmFscyBmcm9tXG4gKiAgIGJlaW5nIG5lZWRlZC5cbiAqICAgQ29waWVkIGZyb206IDxodHRwczovL2dpdGh1Yi5jb20vRGVmaW5pdGVseVR5cGVkL0RlZmluaXRlbHlUeXBlZC9ibG9iL2EyYmMxZDgvdHlwZXMvbm9kZS9nbG9iYWxzLmQudHMjTDE3ND5cbiAqXG4gKiBAdHlwZWRlZiB7c3RyaW5nfFVpbnQ4QXJyYXl9IFZGaWxlVmFsdWVcbiAqICAgQ29udGVudHMgb2YgdGhlIGZpbGUuXG4gKiAgIENhbiBlaXRoZXIgYmUgdGV4dCwgb3IgYSBCdWZmZXIgbGlrZSBzdHJ1Y3R1cmUuXG4gKiAgIFRoaXMgZG9lcyBub3QgZGlyZWN0bHkgdXNlIHR5cGUgYEJ1ZmZlcmAsIGJlY2F1c2UgaXQgY2FuIGFsc28gYmUgdXNlZCBpbiBhXG4gKiAgIGJyb3dzZXIgY29udGV4dC5cbiAqICAgSW5zdGVhZCB0aGlzIGxldmVyYWdlcyBgVWludDhBcnJheWAgd2hpY2ggaXMgdGhlIGJhc2UgdHlwZSBmb3IgYEJ1ZmZlcmAsXG4gKiAgIGFuZCBhIG5hdGl2ZSBKYXZhU2NyaXB0IGNvbnN0cnVjdC5cbiAqXG4gKiBAdHlwZWRlZiB7VkZpbGVWYWx1ZXxWRmlsZU9wdGlvbnN8VkZpbGV8VVJMfSBWRmlsZUNvbXBhdGlibGVcbiAqICAgVGhpbmdzIHRoYXQgY2FuIGJlIHBhc3NlZCB0byB0aGUgY29uc3RydWN0b3IuXG4gKlxuICogQHR5cGVkZWYgVkZpbGVDb3JlT3B0aW9uc1xuICogQHByb3BlcnR5IHtWRmlsZVZhbHVlfSBbdmFsdWVdXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2N3ZF1cbiAqIEBwcm9wZXJ0eSB7QXJyYXkuPHN0cmluZz59IFtoaXN0b3J5XVxuICogQHByb3BlcnR5IHtzdHJpbmd8VVJMfSBbcGF0aF1cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbYmFzZW5hbWVdXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3N0ZW1dXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2V4dG5hbWVdXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2Rpcm5hbWVdXG4gKiBAcHJvcGVydHkge09iamVjdC48c3RyaW5nLCB1bmtub3duPn0gW2RhdGFdXG4gKlxuICogQHR5cGVkZWYge3tba2V5OiBzdHJpbmddOiB1bmtub3dufSAmIFZGaWxlQ29yZU9wdGlvbnN9IFZGaWxlT3B0aW9uc1xuICogICBDb25maWd1cmF0aW9uOiBhIGJ1bmNoIG9mIGtleXMgdGhhdCB3aWxsIGJlIHNoYWxsb3cgY29waWVkIG92ZXIgdG8gdGhlIG5ld1xuICogICBmaWxlLlxuICpcbiAqIEB0eXBlZGVmIHtPYmplY3QuPHN0cmluZywgdW5rbm93bj59IFZGaWxlUmVwb3J0ZXJTZXR0aW5nc1xuICogQHR5cGVkZWYgezxUID0gVkZpbGVSZXBvcnRlclNldHRpbmdzPihmaWxlczogVkZpbGVbXSwgb3B0aW9uczogVCkgPT4gc3RyaW5nfSBWRmlsZVJlcG9ydGVyXG4gKi9cblxuaW1wb3J0IGJ1ZmZlciBmcm9tICdpcy1idWZmZXInXG5pbXBvcnQge1ZGaWxlTWVzc2FnZX0gZnJvbSAndmZpbGUtbWVzc2FnZSdcbmltcG9ydCB7cGF0aH0gZnJvbSAnLi9taW5wYXRoLmpzJ1xuaW1wb3J0IHtwcm9jfSBmcm9tICcuL21pbnByb2MuanMnXG5pbXBvcnQge3VybFRvUGF0aCwgaXNVcmx9IGZyb20gJy4vbWludXJsLmpzJ1xuXG4vLyBPcmRlciBvZiBzZXR0aW5nIChsZWFzdCBzcGVjaWZpYyB0byBtb3N0KSwgd2UgbmVlZCB0aGlzIGJlY2F1c2Ugb3RoZXJ3aXNlXG4vLyBge3N0ZW06ICdhJywgcGF0aDogJ34vYi5qcyd9YCB3b3VsZCB0aHJvdywgYXMgYSBwYXRoIGlzIG5lZWRlZCBiZWZvcmUgYVxuLy8gc3RlbSBjYW4gYmUgc2V0LlxuY29uc3Qgb3JkZXIgPSBbJ2hpc3RvcnknLCAncGF0aCcsICdiYXNlbmFtZScsICdzdGVtJywgJ2V4dG5hbWUnLCAnZGlybmFtZSddXG5cbmV4cG9ydCBjbGFzcyBWRmlsZSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgdmlydHVhbCBmaWxlLlxuICAgKlxuICAgKiBJZiBgb3B0aW9uc2AgaXMgYHN0cmluZ2Agb3IgYEJ1ZmZlcmAsIHRyZWF0cyBpdCBhcyBge3ZhbHVlOiBvcHRpb25zfWAuXG4gICAqIElmIGBvcHRpb25zYCBpcyBhIGBWRmlsZWAsIHNoYWxsb3cgY29waWVzIGl0cyBkYXRhIG92ZXIgdG8gdGhlIG5ldyBmaWxlLlxuICAgKiBBbGwgb3RoZXIgZ2l2ZW4gZmllbGRzIGFyZSBzZXQgb24gdGhlIG5ld2x5IGNyZWF0ZWQgYFZGaWxlYC5cbiAgICpcbiAgICogUGF0aCByZWxhdGVkIHByb3BlcnRpZXMgYXJlIHNldCBpbiB0aGUgZm9sbG93aW5nIG9yZGVyIChsZWFzdCBzcGVjaWZpYyB0b1xuICAgKiBtb3N0IHNwZWNpZmljKTogYGhpc3RvcnlgLCBgcGF0aGAsIGBiYXNlbmFtZWAsIGBzdGVtYCwgYGV4dG5hbWVgLFxuICAgKiBgZGlybmFtZWAuXG4gICAqXG4gICAqIEl04oCZcyBub3QgcG9zc2libGUgdG8gc2V0IGVpdGhlciBgZGlybmFtZWAgb3IgYGV4dG5hbWVgIHdpdGhvdXQgc2V0dGluZ1xuICAgKiBlaXRoZXIgYGhpc3RvcnlgLCBgcGF0aGAsIGBiYXNlbmFtZWAsIG9yIGBzdGVtYCBhcyB3ZWxsLlxuICAgKlxuICAgKiBAcGFyYW0ge1ZGaWxlQ29tcGF0aWJsZX0gW3ZhbHVlXVxuICAgKi9cbiAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICAvKiogQHR5cGUge1ZGaWxlT3B0aW9uc30gKi9cbiAgICBsZXQgb3B0aW9uc1xuXG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgb3B0aW9ucyA9IHt9XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IGJ1ZmZlcih2YWx1ZSkpIHtcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgTG9va3MgbGlrZSBhIGJ1ZmZlci5cbiAgICAgIG9wdGlvbnMgPSB7dmFsdWV9XG4gICAgfSBlbHNlIGlmIChpc1VybCh2YWx1ZSkpIHtcbiAgICAgIG9wdGlvbnMgPSB7cGF0aDogdmFsdWV9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgTG9va3MgbGlrZSBmaWxlIG9yIG9wdGlvbnMuXG4gICAgICBvcHRpb25zID0gdmFsdWVcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQbGFjZSB0byBzdG9yZSBjdXN0b20gaW5mb3JtYXRpb24uXG4gICAgICogSXTigJlzIE9LIHRvIHN0b3JlIGN1c3RvbSBkYXRhIGRpcmVjdGx5IG9uIHRoZSBmaWxlLCBtb3ZpbmcgaXQgdG8gYGRhdGFgXG4gICAgICogZ2l2ZXMgYSBsaXR0bGUgbW9yZSBwcml2YWN5LlxuICAgICAqIEB0eXBlIHtPYmplY3QuPHN0cmluZywgdW5rbm93bj59XG4gICAgICovXG4gICAgdGhpcy5kYXRhID0ge31cblxuICAgIC8qKlxuICAgICAqIExpc3Qgb2YgbWVzc2FnZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBmaWxlLlxuICAgICAqIEB0eXBlIHtBcnJheS48VkZpbGVNZXNzYWdlPn1cbiAgICAgKi9cbiAgICB0aGlzLm1lc3NhZ2VzID0gW11cblxuICAgIC8qKlxuICAgICAqIExpc3Qgb2YgZmlsZSBwYXRocyB0aGUgZmlsZSBtb3ZlZCBiZXR3ZWVuLlxuICAgICAqIEB0eXBlIHtBcnJheS48c3RyaW5nPn1cbiAgICAgKi9cbiAgICB0aGlzLmhpc3RvcnkgPSBbXVxuXG4gICAgLyoqXG4gICAgICogQmFzZSBvZiBgcGF0aGAuXG4gICAgICogRGVmYXVsdHMgdG8gYHByb2Nlc3MuY3dkKClgIChgL2AgaW4gYnJvd3NlcnMpLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5jd2QgPSBwcm9jLmN3ZCgpXG5cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtZXhwcmVzc2lvbnMgKi9cbiAgICAvKipcbiAgICAgKiBSYXcgdmFsdWUuXG4gICAgICogQHR5cGUge1ZGaWxlVmFsdWV9XG4gICAgICovXG4gICAgdGhpcy52YWx1ZVxuXG4gICAgLy8gVGhlIGJlbG93IGFyZSBub24tc3RhbmRhcmQsIHRoZXkgYXJlIOKAnHdlbGwta25vd27igJ0uXG4gICAgLy8gQXMgaW4sIHVzZWQgaW4gc2V2ZXJhbCB0b29scy5cblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgYSBmaWxlIHdhcyBzYXZlZCB0byBkaXNrLlxuICAgICAqIFRoaXMgaXMgdXNlZCBieSB2ZmlsZSByZXBvcnRlcnMuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5zdG9yZWRcblxuICAgIC8qKlxuICAgICAqIFNvbWV0aW1lcyBmaWxlcyBoYXZlIGEgbm9uLXN0cmluZyByZXByZXNlbnRhdGlvbi5cbiAgICAgKiBUaGlzIGNhbiBiZSBzdG9yZWQgaW4gdGhlIGByZXN1bHRgIGZpZWxkLlxuICAgICAqIE9uZSBleGFtcGxlIGlzIHdoZW4gdHVybmluZyBtYXJrZG93biBpbnRvIFJlYWN0IG5vZGVzLlxuICAgICAqIFRoaXMgaXMgdXNlZCBieSB1bmlmaWVkIHRvIHN0b3JlIG5vbi1zdHJpbmcgcmVzdWx0cy5cbiAgICAgKiBAdHlwZSB7dW5rbm93bn1cbiAgICAgKi9cbiAgICB0aGlzLnJlc3VsdFxuXG4gICAgLyoqXG4gICAgICogU29tZXRpbWVzIGZpbGVzIGhhdmUgYSBzb3VyY2UgbWFwIGFzc29jaWF0ZWQgd2l0aCB0aGVtLlxuICAgICAqIFRoaXMgY2FuIGJlIHN0b3JlZCBpbiB0aGUgYG1hcGAgZmllbGQuXG4gICAgICogVGhpcyBzaG91bGQgYmUgYSBgUmF3U291cmNlTWFwYCB0eXBlIGZyb20gdGhlIGBzb3VyY2UtbWFwYCBtb2R1bGUuXG4gICAgICogQHR5cGUge3Vua25vd259XG4gICAgICovXG4gICAgdGhpcy5tYXBcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC1leHByZXNzaW9ucyAqL1xuXG4gICAgLy8gU2V0IHBhdGggcmVsYXRlZCBwcm9wZXJ0aWVzIGluIHRoZSBjb3JyZWN0IG9yZGVyLlxuICAgIGxldCBpbmRleCA9IC0xXG5cbiAgICB3aGlsZSAoKytpbmRleCA8IG9yZGVyLmxlbmd0aCkge1xuICAgICAgY29uc3QgcHJvcCA9IG9yZGVyW2luZGV4XVxuXG4gICAgICAvLyBOb3RlOiB3ZSBzcGVjaWZpY2FsbHkgdXNlIGBpbmAgaW5zdGVhZCBvZiBgaGFzT3duUHJvcGVydHlgIHRvIGFjY2VwdFxuICAgICAgLy8gYHZmaWxlYHMgdG9vLlxuICAgICAgaWYgKHByb3AgaW4gb3B0aW9ucyAmJiBvcHRpb25zW3Byb3BdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogVFMgaXMgY29uZnVzZWQgYnkgdGhlIGRpZmZlcmVudCB0eXBlcyBmb3IgYGhpc3RvcnlgLlxuICAgICAgICB0aGlzW3Byb3BdID0gcHJvcCA9PT0gJ2hpc3RvcnknID8gWy4uLm9wdGlvbnNbcHJvcF1dIDogb3B0aW9uc1twcm9wXVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgIGxldCBwcm9wXG5cbiAgICAvLyBTZXQgbm9uLXBhdGggcmVsYXRlZCBwcm9wZXJ0aWVzLlxuICAgIGZvciAocHJvcCBpbiBvcHRpb25zKSB7XG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBmaW5lIHRvIHNldCBvdGhlciB0aGluZ3MuXG4gICAgICBpZiAoIW9yZGVyLmluY2x1ZGVzKHByb3ApKSB0aGlzW3Byb3BdID0gb3B0aW9uc1twcm9wXVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBY2Nlc3MgZnVsbCBwYXRoIChgfi9pbmRleC5taW4uanNgKS5cbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIGdldCBwYXRoKCkge1xuICAgIHJldHVybiB0aGlzLmhpc3RvcnlbdGhpcy5oaXN0b3J5Lmxlbmd0aCAtIDFdXG4gIH1cblxuICAvKipcbiAgICogU2V0IGZ1bGwgcGF0aCAoYH4vaW5kZXgubWluLmpzYCkuXG4gICAqIENhbm5vdCBiZSBudWxsaWZpZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfFVSTH0gcGF0aFxuICAgKi9cbiAgc2V0IHBhdGgocGF0aCkge1xuICAgIGlmIChpc1VybChwYXRoKSkge1xuICAgICAgcGF0aCA9IHVybFRvUGF0aChwYXRoKVxuICAgIH1cblxuICAgIGFzc2VydE5vbkVtcHR5KHBhdGgsICdwYXRoJylcblxuICAgIGlmICh0aGlzLnBhdGggIT09IHBhdGgpIHtcbiAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKHBhdGgpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFjY2VzcyBwYXJlbnQgcGF0aCAoYH5gKS5cbiAgICovXG4gIGdldCBkaXJuYW1lKCkge1xuICAgIHJldHVybiB0eXBlb2YgdGhpcy5wYXRoID09PSAnc3RyaW5nJyA/IHBhdGguZGlybmFtZSh0aGlzLnBhdGgpIDogdW5kZWZpbmVkXG4gIH1cblxuICAvKipcbiAgICogU2V0IHBhcmVudCBwYXRoIChgfmApLlxuICAgKiBDYW5ub3QgYmUgc2V0IGlmIHRoZXJlJ3Mgbm8gYHBhdGhgIHlldC5cbiAgICovXG4gIHNldCBkaXJuYW1lKGRpcm5hbWUpIHtcbiAgICBhc3NlcnRQYXRoKHRoaXMuYmFzZW5hbWUsICdkaXJuYW1lJylcbiAgICB0aGlzLnBhdGggPSBwYXRoLmpvaW4oZGlybmFtZSB8fCAnJywgdGhpcy5iYXNlbmFtZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBBY2Nlc3MgYmFzZW5hbWUgKGluY2x1ZGluZyBleHRuYW1lKSAoYGluZGV4Lm1pbi5qc2ApLlxuICAgKi9cbiAgZ2V0IGJhc2VuYW1lKCkge1xuICAgIHJldHVybiB0eXBlb2YgdGhpcy5wYXRoID09PSAnc3RyaW5nJyA/IHBhdGguYmFzZW5hbWUodGhpcy5wYXRoKSA6IHVuZGVmaW5lZFxuICB9XG5cbiAgLyoqXG4gICAqIFNldCBiYXNlbmFtZSAoYGluZGV4Lm1pbi5qc2ApLlxuICAgKiBDYW5ub3QgY29udGFpbiBwYXRoIHNlcGFyYXRvcnMuXG4gICAqIENhbm5vdCBiZSBudWxsaWZpZWQgZWl0aGVyICh1c2UgYGZpbGUucGF0aCA9IGZpbGUuZGlybmFtZWAgaW5zdGVhZCkuXG4gICAqL1xuICBzZXQgYmFzZW5hbWUoYmFzZW5hbWUpIHtcbiAgICBhc3NlcnROb25FbXB0eShiYXNlbmFtZSwgJ2Jhc2VuYW1lJylcbiAgICBhc3NlcnRQYXJ0KGJhc2VuYW1lLCAnYmFzZW5hbWUnKVxuICAgIHRoaXMucGF0aCA9IHBhdGguam9pbih0aGlzLmRpcm5hbWUgfHwgJycsIGJhc2VuYW1lKVxuICB9XG5cbiAgLyoqXG4gICAqIEFjY2VzcyBleHRuYW1lIChpbmNsdWRpbmcgZG90KSAoYC5qc2ApLlxuICAgKi9cbiAgZ2V0IGV4dG5hbWUoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLnBhdGggPT09ICdzdHJpbmcnID8gcGF0aC5leHRuYW1lKHRoaXMucGF0aCkgOiB1bmRlZmluZWRcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgZXh0bmFtZSAoaW5jbHVkaW5nIGRvdCkgKGAuanNgKS5cbiAgICogQ2Fubm90IGJlIHNldCBpZiB0aGVyZSdzIG5vIGBwYXRoYCB5ZXQgYW5kIGNhbm5vdCBjb250YWluIHBhdGggc2VwYXJhdG9ycy5cbiAgICovXG4gIHNldCBleHRuYW1lKGV4dG5hbWUpIHtcbiAgICBhc3NlcnRQYXJ0KGV4dG5hbWUsICdleHRuYW1lJylcbiAgICBhc3NlcnRQYXRoKHRoaXMuZGlybmFtZSwgJ2V4dG5hbWUnKVxuXG4gICAgaWYgKGV4dG5hbWUpIHtcbiAgICAgIGlmIChleHRuYW1lLmNoYXJDb2RlQXQoMCkgIT09IDQ2IC8qIGAuYCAqLykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BleHRuYW1lYCBtdXN0IHN0YXJ0IHdpdGggYC5gJylcbiAgICAgIH1cblxuICAgICAgaWYgKGV4dG5hbWUuaW5jbHVkZXMoJy4nLCAxKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BleHRuYW1lYCBjYW5ub3QgY29udGFpbiBtdWx0aXBsZSBkb3RzJylcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnBhdGggPSBwYXRoLmpvaW4odGhpcy5kaXJuYW1lLCB0aGlzLnN0ZW0gKyAoZXh0bmFtZSB8fCAnJykpXG4gIH1cblxuICAvKipcbiAgICogQWNjZXNzIHN0ZW0gKHcvbyBleHRuYW1lKSAoYGluZGV4Lm1pbmApLlxuICAgKi9cbiAgZ2V0IHN0ZW0oKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLnBhdGggPT09ICdzdHJpbmcnXG4gICAgICA/IHBhdGguYmFzZW5hbWUodGhpcy5wYXRoLCB0aGlzLmV4dG5hbWUpXG4gICAgICA6IHVuZGVmaW5lZFxuICB9XG5cbiAgLyoqXG4gICAqIFNldCBzdGVtICh3L28gZXh0bmFtZSkgKGBpbmRleC5taW5gKS5cbiAgICogQ2Fubm90IGJlIG51bGxpZmllZCwgYW5kIGNhbm5vdCBjb250YWluIHBhdGggc2VwYXJhdG9ycy5cbiAgICovXG4gIHNldCBzdGVtKHN0ZW0pIHtcbiAgICBhc3NlcnROb25FbXB0eShzdGVtLCAnc3RlbScpXG4gICAgYXNzZXJ0UGFydChzdGVtLCAnc3RlbScpXG4gICAgdGhpcy5wYXRoID0gcGF0aC5qb2luKHRoaXMuZGlybmFtZSB8fCAnJywgc3RlbSArICh0aGlzLmV4dG5hbWUgfHwgJycpKVxuICB9XG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZSB0aGUgZmlsZS5cbiAgICpcbiAgICogQHBhcmFtIHtCdWZmZXJFbmNvZGluZ30gW2VuY29kaW5nPSd1dGY4J10gSWYgYGZpbGUudmFsdWVgIGlzIGEgYnVmZmVyLCBgZW5jb2RpbmdgIGlzIHVzZWQgdG8gc2VyaWFsaXplIGJ1ZmZlcnMuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICB0b1N0cmluZyhlbmNvZGluZykge1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3Igc3RyaW5n4oCZcyBkb27igJl0IGFjY2VwdCB0aGUgcGFyYW1ldGVyLCBidXQgYnVmZmVycyBkby5cbiAgICByZXR1cm4gKHRoaXMudmFsdWUgfHwgJycpLnRvU3RyaW5nKGVuY29kaW5nKVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG1lc3NhZ2UgYW5kIGFzc29jaWF0ZXMgaXQgdy8gdGhlIGZpbGUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfEVycm9yfSByZWFzb24gUmVhc29uIGZvciBtZXNzYWdlIChgc3RyaW5nYCBvciBgRXJyb3JgKS4gVXNlcyB0aGUgc3RhY2sgYW5kIG1lc3NhZ2Ugb2YgdGhlIGVycm9yIGlmIGdpdmVuLlxuICAgKiBAcGFyYW0ge05vZGV8UG9zaXRpb258UG9pbnR9IFtwbGFjZV0gUGxhY2UgYXQgd2hpY2ggdGhlIG1lc3NhZ2Ugb2NjdXJyZWQgaW4gYSBmaWxlIChgTm9kZWAsIGBQb3NpdGlvbmAsIG9yIGBQb2ludGAsIG9wdGlvbmFsKS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcmlnaW5dIFBsYWNlIGluIGNvZGUgdGhlIG1lc3NhZ2Ugb3JpZ2luYXRlcyBmcm9tIChgc3RyaW5nYCwgb3B0aW9uYWwpLlxuICAgKiBAcmV0dXJucyB7VkZpbGVNZXNzYWdlfVxuICAgKi9cbiAgbWVzc2FnZShyZWFzb24sIHBsYWNlLCBvcmlnaW4pIHtcbiAgICBjb25zdCBtZXNzYWdlID0gbmV3IFZGaWxlTWVzc2FnZShyZWFzb24sIHBsYWNlLCBvcmlnaW4pXG5cbiAgICBpZiAodGhpcy5wYXRoKSB7XG4gICAgICBtZXNzYWdlLm5hbWUgPSB0aGlzLnBhdGggKyAnOicgKyBtZXNzYWdlLm5hbWVcbiAgICAgIG1lc3NhZ2UuZmlsZSA9IHRoaXMucGF0aFxuICAgIH1cblxuICAgIG1lc3NhZ2UuZmF0YWwgPSBmYWxzZVxuXG4gICAgdGhpcy5tZXNzYWdlcy5wdXNoKG1lc3NhZ2UpXG5cbiAgICByZXR1cm4gbWVzc2FnZVxuICB9XG5cbiAgLyoqXG4gICAqIEluZm86IGNyZWF0ZSBhIG1lc3NhZ2UsIGFzc29jaWF0ZSBpdCB3aXRoIHRoZSBmaWxlLCBhbmQgbWFyayB0aGUgZmF0YWxpdHlcbiAgICogYXMgYG51bGxgLlxuICAgKiBDYWxscyBgbWVzc2FnZSgpYCBpbnRlcm5hbGx5LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xFcnJvcn0gcmVhc29uIFJlYXNvbiBmb3IgbWVzc2FnZSAoYHN0cmluZ2Agb3IgYEVycm9yYCkuIFVzZXMgdGhlIHN0YWNrIGFuZCBtZXNzYWdlIG9mIHRoZSBlcnJvciBpZiBnaXZlbi5cbiAgICogQHBhcmFtIHtOb2RlfFBvc2l0aW9ufFBvaW50fSBbcGxhY2VdIFBsYWNlIGF0IHdoaWNoIHRoZSBtZXNzYWdlIG9jY3VycmVkIGluIGEgZmlsZSAoYE5vZGVgLCBgUG9zaXRpb25gLCBvciBgUG9pbnRgLCBvcHRpb25hbCkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3JpZ2luXSBQbGFjZSBpbiBjb2RlIHRoZSBtZXNzYWdlIG9yaWdpbmF0ZXMgZnJvbSAoYHN0cmluZ2AsIG9wdGlvbmFsKS5cbiAgICogQHJldHVybnMge1ZGaWxlTWVzc2FnZX1cbiAgICovXG4gIGluZm8ocmVhc29uLCBwbGFjZSwgb3JpZ2luKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IHRoaXMubWVzc2FnZShyZWFzb24sIHBsYWNlLCBvcmlnaW4pXG5cbiAgICBtZXNzYWdlLmZhdGFsID0gbnVsbFxuXG4gICAgcmV0dXJuIG1lc3NhZ2VcbiAgfVxuXG4gIC8qKlxuICAgKiBGYWlsOiBjcmVhdGUgYSBtZXNzYWdlLCBhc3NvY2lhdGUgaXQgd2l0aCB0aGUgZmlsZSwgbWFyayB0aGUgZmF0YWxpdHkgYXNcbiAgICogYHRydWVgLlxuICAgKiBOb3RlOiBmYXRhbCBlcnJvcnMgbWVhbiBhIGZpbGUgaXMgbm8gbG9uZ2VyIHByb2Nlc3NhYmxlLlxuICAgKiBDYWxscyBgbWVzc2FnZSgpYCBpbnRlcm5hbGx5LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xFcnJvcn0gcmVhc29uIFJlYXNvbiBmb3IgbWVzc2FnZSAoYHN0cmluZ2Agb3IgYEVycm9yYCkuIFVzZXMgdGhlIHN0YWNrIGFuZCBtZXNzYWdlIG9mIHRoZSBlcnJvciBpZiBnaXZlbi5cbiAgICogQHBhcmFtIHtOb2RlfFBvc2l0aW9ufFBvaW50fSBbcGxhY2VdIFBsYWNlIGF0IHdoaWNoIHRoZSBtZXNzYWdlIG9jY3VycmVkIGluIGEgZmlsZSAoYE5vZGVgLCBgUG9zaXRpb25gLCBvciBgUG9pbnRgLCBvcHRpb25hbCkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3JpZ2luXSBQbGFjZSBpbiBjb2RlIHRoZSBtZXNzYWdlIG9yaWdpbmF0ZXMgZnJvbSAoYHN0cmluZ2AsIG9wdGlvbmFsKS5cbiAgICogQHJldHVybnMge25ldmVyfVxuICAgKi9cbiAgZmFpbChyZWFzb24sIHBsYWNlLCBvcmlnaW4pIHtcbiAgICBjb25zdCBtZXNzYWdlID0gdGhpcy5tZXNzYWdlKHJlYXNvbiwgcGxhY2UsIG9yaWdpbilcblxuICAgIG1lc3NhZ2UuZmF0YWwgPSB0cnVlXG5cbiAgICB0aHJvdyBtZXNzYWdlXG4gIH1cbn1cblxuLyoqXG4gKiBBc3NlcnQgdGhhdCBgcGFydGAgaXMgbm90IGEgcGF0aCAoYXMgaW4sIGRvZXMgbm90IGNvbnRhaW4gYHBhdGguc2VwYCkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8dW5kZWZpbmVkfSBwYXJ0XG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIGFzc2VydFBhcnQocGFydCwgbmFtZSkge1xuICBpZiAocGFydCAmJiBwYXJ0LmluY2x1ZGVzKHBhdGguc2VwKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdgJyArIG5hbWUgKyAnYCBjYW5ub3QgYmUgYSBwYXRoOiBkaWQgbm90IGV4cGVjdCBgJyArIHBhdGguc2VwICsgJ2AnXG4gICAgKVxuICB9XG59XG5cbi8qKlxuICogQXNzZXJ0IHRoYXQgYHBhcnRgIGlzIG5vdCBlbXB0eS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3x1bmRlZmluZWR9IHBhcnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJucyB7YXNzZXJ0cyBwYXJ0IGlzIHN0cmluZ31cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0Tm9uRW1wdHkocGFydCwgbmFtZSkge1xuICBpZiAoIXBhcnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2AnICsgbmFtZSArICdgIGNhbm5vdCBiZSBlbXB0eScpXG4gIH1cbn1cblxuLyoqXG4gKiBBc3NlcnQgYHBhdGhgIGV4aXN0cy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3x1bmRlZmluZWR9IHBhdGhcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJucyB7YXNzZXJ0cyBwYXRoIGlzIHN0cmluZ31cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0UGF0aChwYXRoLCBuYW1lKSB7XG4gIGlmICghcGF0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcignU2V0dGluZyBgJyArIG5hbWUgKyAnYCByZXF1aXJlcyBgcGF0aGAgdG8gYmUgc2V0IHRvbycpXG4gIH1cbn1cbiIsIi8vLyA8cmVmZXJlbmNlIGxpYj1cImRvbVwiIC8+XG5cbmltcG9ydCB7aXNVcmx9IGZyb20gJy4vbWludXJsLnNoYXJlZC5qcydcblxuZXhwb3J0IHtpc1VybH1cblxuLy8gU2VlOiA8aHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2Jsb2IvZmNmOGJhNC9saWIvaW50ZXJuYWwvdXJsLmpzPlxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfFVSTH0gcGF0aFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXJsVG9QYXRoKHBhdGgpIHtcbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIHBhdGggPSBuZXcgVVJMKHBhdGgpXG4gIH0gZWxzZSBpZiAoIWlzVXJsKHBhdGgpKSB7XG4gICAgLyoqIEB0eXBlIHtOb2RlSlMuRXJybm9FeGNlcHRpb259ICovXG4gICAgY29uc3QgZXJyb3IgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcInBhdGhcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nIG9yIGFuIGluc3RhbmNlIG9mIFVSTC4gUmVjZWl2ZWQgYCcgK1xuICAgICAgICBwYXRoICtcbiAgICAgICAgJ2AnXG4gICAgKVxuICAgIGVycm9yLmNvZGUgPSAnRVJSX0lOVkFMSURfQVJHX1RZUEUnXG4gICAgdGhyb3cgZXJyb3JcbiAgfVxuXG4gIGlmIChwYXRoLnByb3RvY29sICE9PSAnZmlsZTonKSB7XG4gICAgLyoqIEB0eXBlIHtOb2RlSlMuRXJybm9FeGNlcHRpb259ICovXG4gICAgY29uc3QgZXJyb3IgPSBuZXcgVHlwZUVycm9yKCdUaGUgVVJMIG11c3QgYmUgb2Ygc2NoZW1lIGZpbGUnKVxuICAgIGVycm9yLmNvZGUgPSAnRVJSX0lOVkFMSURfVVJMX1NDSEVNRSdcbiAgICB0aHJvdyBlcnJvclxuICB9XG5cbiAgcmV0dXJuIGdldFBhdGhGcm9tVVJMUG9zaXgocGF0aClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VSTH0gdXJsXG4gKi9cbmZ1bmN0aW9uIGdldFBhdGhGcm9tVVJMUG9zaXgodXJsKSB7XG4gIGlmICh1cmwuaG9zdG5hbWUgIT09ICcnKSB7XG4gICAgLyoqIEB0eXBlIHtOb2RlSlMuRXJybm9FeGNlcHRpb259ICovXG4gICAgY29uc3QgZXJyb3IgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgJ0ZpbGUgVVJMIGhvc3QgbXVzdCBiZSBcImxvY2FsaG9zdFwiIG9yIGVtcHR5IG9uIGRhcndpbidcbiAgICApXG4gICAgZXJyb3IuY29kZSA9ICdFUlJfSU5WQUxJRF9GSUxFX1VSTF9IT1NUJ1xuICAgIHRocm93IGVycm9yXG4gIH1cblxuICBjb25zdCBwYXRobmFtZSA9IHVybC5wYXRobmFtZVxuICBsZXQgaW5kZXggPSAtMVxuXG4gIHdoaWxlICgrK2luZGV4IDwgcGF0aG5hbWUubGVuZ3RoKSB7XG4gICAgaWYgKFxuICAgICAgcGF0aG5hbWUuY2hhckNvZGVBdChpbmRleCkgPT09IDM3IC8qIGAlYCAqLyAmJlxuICAgICAgcGF0aG5hbWUuY2hhckNvZGVBdChpbmRleCArIDEpID09PSA1MCAvKiBgMmAgKi9cbiAgICApIHtcbiAgICAgIGNvbnN0IHRoaXJkID0gcGF0aG5hbWUuY2hhckNvZGVBdChpbmRleCArIDIpXG4gICAgICBpZiAodGhpcmQgPT09IDcwIC8qIGBGYCAqLyB8fCB0aGlyZCA9PT0gMTAyIC8qIGBmYCAqLykge1xuICAgICAgICAvKiogQHR5cGUge05vZGVKUy5FcnJub0V4Y2VwdGlvbn0gKi9cbiAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICdGaWxlIFVSTCBwYXRoIG11c3Qgbm90IGluY2x1ZGUgZW5jb2RlZCAvIGNoYXJhY3RlcnMnXG4gICAgICAgIClcbiAgICAgICAgZXJyb3IuY29kZSA9ICdFUlJfSU5WQUxJRF9GSUxFX1VSTF9QQVRIJ1xuICAgICAgICB0aHJvdyBlcnJvclxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQocGF0aG5hbWUpXG59XG4iLCIvKipcbiAqIFRocm93IGEgZ2l2ZW4gZXJyb3IuXG4gKlxuICogQHBhcmFtIHtFcnJvciB8IG51bGwgfCB1bmRlZmluZWR9IFtlcnJvcl1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJhaWwoZXJyb3IpIHtcbiAgaWYgKGVycm9yKSB7XG4gICAgdGhyb3cgZXJyb3JcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuXHRpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRjb25zdCBwcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpO1xuXHRyZXR1cm4gcHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZTtcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgndW5pc3QnKS5Ob2RlfSBOb2RlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd2ZmlsZScpLlZGaWxlQ29tcGF0aWJsZX0gVkZpbGVDb21wYXRpYmxlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd2ZmlsZScpLlZGaWxlVmFsdWV9IFZGaWxlVmFsdWVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uJykuUHJvY2Vzc29yfSBQcm9jZXNzb3JcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uJykuUGx1Z2lufSBQbHVnaW5cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uJykuUHJlc2V0fSBQcmVzZXRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uJykuUGx1Z2dhYmxlfSBQbHVnZ2FibGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uJykuUGx1Z2dhYmxlTGlzdH0gUGx1Z2dhYmxlTGlzdFxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4nKS5UcmFuc2Zvcm1lcn0gVHJhbnNmb3JtZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uJykuUGFyc2VyfSBQYXJzZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uJykuQ29tcGlsZXJ9IENvbXBpbGVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLicpLlJ1bkNhbGxiYWNrfSBSdW5DYWxsYmFja1xuICogQHR5cGVkZWYge2ltcG9ydCgnLi4nKS5Qcm9jZXNzQ2FsbGJhY2t9IFByb2Nlc3NDYWxsYmFja1xuICpcbiAqIEB0eXBlZGVmIENvbnRleHRcbiAqIEBwcm9wZXJ0eSB7Tm9kZX0gdHJlZVxuICogQHByb3BlcnR5IHtWRmlsZX0gZmlsZVxuICovXG5cbmltcG9ydCB7YmFpbH0gZnJvbSAnYmFpbCdcbmltcG9ydCBpc0J1ZmZlciBmcm9tICdpcy1idWZmZXInXG5pbXBvcnQgZXh0ZW5kIGZyb20gJ2V4dGVuZCdcbmltcG9ydCBpc1BsYWluT2JqIGZyb20gJ2lzLXBsYWluLW9iaidcbmltcG9ydCB7dHJvdWdofSBmcm9tICd0cm91Z2gnXG5pbXBvcnQge1ZGaWxlfSBmcm9tICd2ZmlsZSdcblxuLy8gRXhwb3NlIGEgZnJvemVuIHByb2Nlc3Nvci5cbmV4cG9ydCBjb25zdCB1bmlmaWVkID0gYmFzZSgpLmZyZWV6ZSgpXG5cbmNvbnN0IG93biA9IHt9Lmhhc093blByb3BlcnR5XG5cbi8vIEZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgZmlyc3QgcHJvY2Vzc29yLlxuLyoqXG4gKiBAcmV0dXJucyB7UHJvY2Vzc29yfVxuICovXG5mdW5jdGlvbiBiYXNlKCkge1xuICBjb25zdCB0cmFuc2Zvcm1lcnMgPSB0cm91Z2goKVxuICAvKiogQHR5cGUge1Byb2Nlc3NvclsnYXR0YWNoZXJzJ119ICovXG4gIGNvbnN0IGF0dGFjaGVycyA9IFtdXG4gIC8qKiBAdHlwZSB7UmVjb3JkPHN0cmluZywgdW5rbm93bj59ICovXG4gIGxldCBuYW1lc3BhY2UgPSB7fVxuICAvKiogQHR5cGUge2Jvb2xlYW58dW5kZWZpbmVkfSAqL1xuICBsZXQgZnJvemVuXG4gIGxldCBmcmVlemVJbmRleCA9IC0xXG5cbiAgLy8gRGF0YSBtYW5hZ2VtZW50LlxuICAvLyBAdHMtZXhwZWN0LWVycm9yOiBvdmVybG9hZHMgYXJlIGhhbmRsZWQuXG4gIHByb2Nlc3Nvci5kYXRhID0gZGF0YVxuICBwcm9jZXNzb3IuUGFyc2VyID0gdW5kZWZpbmVkXG4gIHByb2Nlc3Nvci5Db21waWxlciA9IHVuZGVmaW5lZFxuXG4gIC8vIExvY2suXG4gIHByb2Nlc3Nvci5mcmVlemUgPSBmcmVlemVcblxuICAvLyBQbHVnaW5zLlxuICBwcm9jZXNzb3IuYXR0YWNoZXJzID0gYXR0YWNoZXJzXG4gIC8vIEB0cy1leHBlY3QtZXJyb3I6IG92ZXJsb2FkcyBhcmUgaGFuZGxlZC5cbiAgcHJvY2Vzc29yLnVzZSA9IHVzZVxuXG4gIC8vIEFQSS5cbiAgcHJvY2Vzc29yLnBhcnNlID0gcGFyc2VcbiAgcHJvY2Vzc29yLnN0cmluZ2lmeSA9IHN0cmluZ2lmeVxuICAvLyBAdHMtZXhwZWN0LWVycm9yOiBvdmVybG9hZHMgYXJlIGhhbmRsZWQuXG4gIHByb2Nlc3Nvci5ydW4gPSBydW5cbiAgcHJvY2Vzc29yLnJ1blN5bmMgPSBydW5TeW5jXG4gIC8vIEB0cy1leHBlY3QtZXJyb3I6IG92ZXJsb2FkcyBhcmUgaGFuZGxlZC5cbiAgcHJvY2Vzc29yLnByb2Nlc3MgPSBwcm9jZXNzXG4gIHByb2Nlc3Nvci5wcm9jZXNzU3luYyA9IHByb2Nlc3NTeW5jXG5cbiAgLy8gRXhwb3NlLlxuICByZXR1cm4gcHJvY2Vzc29yXG5cbiAgLy8gQ3JlYXRlIGEgbmV3IHByb2Nlc3NvciBiYXNlZCBvbiB0aGUgcHJvY2Vzc29yIGluIHRoZSBjdXJyZW50IHNjb3BlLlxuICAvKiogQHR5cGUge1Byb2Nlc3Nvcn0gKi9cbiAgZnVuY3Rpb24gcHJvY2Vzc29yKCkge1xuICAgIGNvbnN0IGRlc3RpbmF0aW9uID0gYmFzZSgpXG4gICAgbGV0IGluZGV4ID0gLTFcblxuICAgIHdoaWxlICgrK2luZGV4IDwgYXR0YWNoZXJzLmxlbmd0aCkge1xuICAgICAgZGVzdGluYXRpb24udXNlKC4uLmF0dGFjaGVyc1tpbmRleF0pXG4gICAgfVxuXG4gICAgZGVzdGluYXRpb24uZGF0YShleHRlbmQodHJ1ZSwge30sIG5hbWVzcGFjZSkpXG5cbiAgICByZXR1cm4gZGVzdGluYXRpb25cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xSZWNvcmQ8c3RyaW5nLCB1bmtub3duPn0gW2tleV1cbiAgICogQHBhcmFtIHt1bmtub3dufSBbdmFsdWVdXG4gICAqIEByZXR1cm5zIHt1bmtub3dufVxuICAgKi9cbiAgZnVuY3Rpb24gZGF0YShrZXksIHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBTZXQgYGtleWAuXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICBhc3NlcnRVbmZyb3plbignZGF0YScsIGZyb3plbilcbiAgICAgICAgbmFtZXNwYWNlW2tleV0gPSB2YWx1ZVxuICAgICAgICByZXR1cm4gcHJvY2Vzc29yXG4gICAgICB9XG5cbiAgICAgIC8vIEdldCBga2V5YC5cbiAgICAgIHJldHVybiAob3duLmNhbGwobmFtZXNwYWNlLCBrZXkpICYmIG5hbWVzcGFjZVtrZXldKSB8fCBudWxsXG4gICAgfVxuXG4gICAgLy8gU2V0IHNwYWNlLlxuICAgIGlmIChrZXkpIHtcbiAgICAgIGFzc2VydFVuZnJvemVuKCdkYXRhJywgZnJvemVuKVxuICAgICAgbmFtZXNwYWNlID0ga2V5XG4gICAgICByZXR1cm4gcHJvY2Vzc29yXG4gICAgfVxuXG4gICAgLy8gR2V0IHNwYWNlLlxuICAgIHJldHVybiBuYW1lc3BhY2VcbiAgfVxuXG4gIC8qKiBAdHlwZSB7UHJvY2Vzc29yWydmcmVlemUnXX0gKi9cbiAgZnVuY3Rpb24gZnJlZXplKCkge1xuICAgIGlmIChmcm96ZW4pIHtcbiAgICAgIHJldHVybiBwcm9jZXNzb3JcbiAgICB9XG5cbiAgICB3aGlsZSAoKytmcmVlemVJbmRleCA8IGF0dGFjaGVycy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IFthdHRhY2hlciwgLi4ub3B0aW9uc10gPSBhdHRhY2hlcnNbZnJlZXplSW5kZXhdXG5cbiAgICAgIGlmIChvcHRpb25zWzBdID09PSBmYWxzZSkge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9uc1swXSA9PT0gdHJ1ZSkge1xuICAgICAgICBvcHRpb25zWzFdID0gdW5kZWZpbmVkXG4gICAgICB9XG5cbiAgICAgIC8qKiBAdHlwZSB7VHJhbnNmb3JtZXJ8dm9pZH0gKi9cbiAgICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gYXR0YWNoZXIuY2FsbChwcm9jZXNzb3IsIC4uLm9wdGlvbnMpXG5cbiAgICAgIGlmICh0eXBlb2YgdHJhbnNmb3JtZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdHJhbnNmb3JtZXJzLnVzZSh0cmFuc2Zvcm1lcilcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmcm96ZW4gPSB0cnVlXG4gICAgZnJlZXplSW5kZXggPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFlcblxuICAgIHJldHVybiBwcm9jZXNzb3JcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1BsdWdnYWJsZXxudWxsfHVuZGVmaW5lZH0gW3ZhbHVlXVxuICAgKiBAcGFyYW0gey4uLnVua25vd259IG9wdGlvbnNcbiAgICogQHJldHVybnMge1Byb2Nlc3Nvcn1cbiAgICovXG4gIGZ1bmN0aW9uIHVzZSh2YWx1ZSwgLi4ub3B0aW9ucykge1xuICAgIC8qKiBAdHlwZSB7UmVjb3JkPHN0cmluZywgdW5rbm93bj58dW5kZWZpbmVkfSAqL1xuICAgIGxldCBzZXR0aW5nc1xuXG4gICAgYXNzZXJ0VW5mcm96ZW4oJ3VzZScsIGZyb3plbilcblxuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBFbXB0eS5cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYWRkUGx1Z2luKHZhbHVlLCAuLi5vcHRpb25zKVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGFkZExpc3QodmFsdWUpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhZGRQcmVzZXQodmFsdWUpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHVzYWJsZSB2YWx1ZSwgbm90IGAnICsgdmFsdWUgKyAnYCcpXG4gICAgfVxuXG4gICAgaWYgKHNldHRpbmdzKSB7XG4gICAgICBuYW1lc3BhY2Uuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKG5hbWVzcGFjZS5zZXR0aW5ncyB8fCB7fSwgc2V0dGluZ3MpXG4gICAgfVxuXG4gICAgcmV0dXJuIHByb2Nlc3NvclxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtpbXBvcnQoJy4uJykuUGx1Z2dhYmxlPHVua25vd25bXT59IHZhbHVlXG4gICAgICogQHJldHVybnMge3ZvaWR9XG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGFkZFBsdWdpbih2YWx1ZSlcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICBjb25zdCBbcGx1Z2luLCAuLi5vcHRpb25zXSA9IHZhbHVlXG4gICAgICAgICAgYWRkUGx1Z2luKHBsdWdpbiwgLi4ub3B0aW9ucylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRQcmVzZXQodmFsdWUpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHVzYWJsZSB2YWx1ZSwgbm90IGAnICsgdmFsdWUgKyAnYCcpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtQcmVzZXR9IHJlc3VsdFxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZFByZXNldChyZXN1bHQpIHtcbiAgICAgIGFkZExpc3QocmVzdWx0LnBsdWdpbnMpXG5cbiAgICAgIGlmIChyZXN1bHQuc2V0dGluZ3MpIHtcbiAgICAgICAgc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHNldHRpbmdzIHx8IHt9LCByZXN1bHQuc2V0dGluZ3MpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtQbHVnZ2FibGVMaXN0fG51bGx8dW5kZWZpbmVkfSBbcGx1Z2luc11cbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZGRMaXN0KHBsdWdpbnMpIHtcbiAgICAgIGxldCBpbmRleCA9IC0xXG5cbiAgICAgIGlmIChwbHVnaW5zID09PSBudWxsIHx8IHBsdWdpbnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBFbXB0eS5cbiAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShwbHVnaW5zKSkge1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IHBsdWdpbnMubGVuZ3RoKSB7XG4gICAgICAgICAgY29uc3QgdGhpbmcgPSBwbHVnaW5zW2luZGV4XVxuICAgICAgICAgIGFkZCh0aGluZylcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYSBsaXN0IG9mIHBsdWdpbnMsIG5vdCBgJyArIHBsdWdpbnMgKyAnYCcpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtQbHVnaW59IHBsdWdpblxuICAgICAqIEBwYXJhbSB7Li4udW5rbm93bn0gW3ZhbHVlXVxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZFBsdWdpbihwbHVnaW4sIHZhbHVlKSB7XG4gICAgICBsZXQgaW5kZXggPSAtMVxuICAgICAgLyoqIEB0eXBlIHtQcm9jZXNzb3JbJ2F0dGFjaGVycyddW251bWJlcl18dW5kZWZpbmVkfSAqL1xuICAgICAgbGV0IGVudHJ5XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgYXR0YWNoZXJzLmxlbmd0aCkge1xuICAgICAgICBpZiAoYXR0YWNoZXJzW2luZGV4XVswXSA9PT0gcGx1Z2luKSB7XG4gICAgICAgICAgZW50cnkgPSBhdHRhY2hlcnNbaW5kZXhdXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgaWYgKGlzUGxhaW5PYmooZW50cnlbMV0pICYmIGlzUGxhaW5PYmoodmFsdWUpKSB7XG4gICAgICAgICAgdmFsdWUgPSBleHRlbmQodHJ1ZSwgZW50cnlbMV0sIHZhbHVlKVxuICAgICAgICB9XG5cbiAgICAgICAgZW50cnlbMV0gPSB2YWx1ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogZmluZS5cbiAgICAgICAgYXR0YWNoZXJzLnB1c2goWy4uLmFyZ3VtZW50c10pXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqIEB0eXBlIHtQcm9jZXNzb3JbJ3BhcnNlJ119ICovXG4gIGZ1bmN0aW9uIHBhcnNlKGRvYykge1xuICAgIHByb2Nlc3Nvci5mcmVlemUoKVxuICAgIGNvbnN0IGZpbGUgPSB2ZmlsZShkb2MpXG4gICAgY29uc3QgUGFyc2VyID0gcHJvY2Vzc29yLlBhcnNlclxuICAgIGFzc2VydFBhcnNlcigncGFyc2UnLCBQYXJzZXIpXG5cbiAgICBpZiAobmV3YWJsZShQYXJzZXIsICdwYXJzZScpKSB7XG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBgbmV3YWJsZWAgY2hlY2tzIHRoaXMuXG4gICAgICByZXR1cm4gbmV3IFBhcnNlcihTdHJpbmcoZmlsZSksIGZpbGUpLnBhcnNlKClcbiAgICB9XG5cbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBgbmV3YWJsZWAgY2hlY2tzIHRoaXMuXG4gICAgcmV0dXJuIFBhcnNlcihTdHJpbmcoZmlsZSksIGZpbGUpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbmV3LWNhcFxuICB9XG5cbiAgLyoqIEB0eXBlIHtQcm9jZXNzb3JbJ3N0cmluZ2lmeSddfSAqL1xuICBmdW5jdGlvbiBzdHJpbmdpZnkobm9kZSwgZG9jKSB7XG4gICAgcHJvY2Vzc29yLmZyZWV6ZSgpXG4gICAgY29uc3QgZmlsZSA9IHZmaWxlKGRvYylcbiAgICBjb25zdCBDb21waWxlciA9IHByb2Nlc3Nvci5Db21waWxlclxuICAgIGFzc2VydENvbXBpbGVyKCdzdHJpbmdpZnknLCBDb21waWxlcilcbiAgICBhc3NlcnROb2RlKG5vZGUpXG5cbiAgICBpZiAobmV3YWJsZShDb21waWxlciwgJ2NvbXBpbGUnKSkge1xuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogYG5ld2FibGVgIGNoZWNrcyB0aGlzLlxuICAgICAgcmV0dXJuIG5ldyBDb21waWxlcihub2RlLCBmaWxlKS5jb21waWxlKClcbiAgICB9XG5cbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBgbmV3YWJsZWAgY2hlY2tzIHRoaXMuXG4gICAgcmV0dXJuIENvbXBpbGVyKG5vZGUsIGZpbGUpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbmV3LWNhcFxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICAgKiBAcGFyYW0ge1ZGaWxlQ29tcGF0aWJsZXxSdW5DYWxsYmFja30gW2RvY11cbiAgICogQHBhcmFtIHtSdW5DYWxsYmFja30gW2NhbGxiYWNrXVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxOb2RlPnx2b2lkfVxuICAgKi9cbiAgZnVuY3Rpb24gcnVuKG5vZGUsIGRvYywgY2FsbGJhY2spIHtcbiAgICBhc3NlcnROb2RlKG5vZGUpXG4gICAgcHJvY2Vzc29yLmZyZWV6ZSgpXG5cbiAgICBpZiAoIWNhbGxiYWNrICYmIHR5cGVvZiBkb2MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNhbGxiYWNrID0gZG9jXG4gICAgICBkb2MgPSB1bmRlZmluZWRcbiAgICB9XG5cbiAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZXhlY3V0b3IpXG4gICAgfVxuXG4gICAgZXhlY3V0b3IobnVsbCwgY2FsbGJhY2spXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge251bGx8KChub2RlOiBOb2RlKSA9PiB2b2lkKX0gcmVzb2x2ZVxuICAgICAqIEBwYXJhbSB7KGVycm9yOiBFcnJvcikgPT4gdm9pZH0gcmVqZWN0XG4gICAgICogQHJldHVybnMge3ZvaWR9XG4gICAgICovXG4gICAgZnVuY3Rpb24gZXhlY3V0b3IocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBgZG9jYCBjYW7igJl0IGJlIGEgY2FsbGJhY2sgYW55bW9yZSwgd2UgY2hlY2tlZC5cbiAgICAgIHRyYW5zZm9ybWVycy5ydW4obm9kZSwgdmZpbGUoZG9jKSwgZG9uZSlcblxuICAgICAgLyoqXG4gICAgICAgKiBAcGFyYW0ge0Vycm9yfG51bGx9IGVycm9yXG4gICAgICAgKiBAcGFyYW0ge05vZGV9IHRyZWVcbiAgICAgICAqIEBwYXJhbSB7VkZpbGV9IGZpbGVcbiAgICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBkb25lKGVycm9yLCB0cmVlLCBmaWxlKSB7XG4gICAgICAgIHRyZWUgPSB0cmVlIHx8IG5vZGVcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgcmVqZWN0KGVycm9yKVxuICAgICAgICB9IGVsc2UgaWYgKHJlc29sdmUpIHtcbiAgICAgICAgICByZXNvbHZlKHRyZWUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogYGNhbGxiYWNrYCBpcyBkZWZpbmVkIGlmIGByZXNvbHZlYCBpcyBub3QuXG4gICAgICAgICAgY2FsbGJhY2sobnVsbCwgdHJlZSwgZmlsZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKiBAdHlwZSB7UHJvY2Vzc29yWydydW5TeW5jJ119ICovXG4gIGZ1bmN0aW9uIHJ1blN5bmMobm9kZSwgZmlsZSkge1xuICAgIC8qKiBAdHlwZSB7Tm9kZXx1bmRlZmluZWR9ICovXG4gICAgbGV0IHJlc3VsdFxuICAgIC8qKiBAdHlwZSB7Ym9vbGVhbnx1bmRlZmluZWR9ICovXG4gICAgbGV0IGNvbXBsZXRlXG5cbiAgICBwcm9jZXNzb3IucnVuKG5vZGUsIGZpbGUsIGRvbmUpXG5cbiAgICBhc3NlcnREb25lKCdydW5TeW5jJywgJ3J1bicsIGNvbXBsZXRlKVxuXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogd2UgZWl0aGVyIGJhaWxlZCBvbiBhbiBlcnJvciBvciBoYXZlIGEgdHJlZS5cbiAgICByZXR1cm4gcmVzdWx0XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0Vycm9yfG51bGx9IFtlcnJvcl1cbiAgICAgKiBAcGFyYW0ge05vZGV9IFt0cmVlXVxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRvbmUoZXJyb3IsIHRyZWUpIHtcbiAgICAgIGJhaWwoZXJyb3IpXG4gICAgICByZXN1bHQgPSB0cmVlXG4gICAgICBjb21wbGV0ZSA9IHRydWVcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtWRmlsZUNvbXBhdGlibGV9IGRvY1xuICAgKiBAcGFyYW0ge1Byb2Nlc3NDYWxsYmFja30gW2NhbGxiYWNrXVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxWRmlsZT58dW5kZWZpbmVkfVxuICAgKi9cbiAgZnVuY3Rpb24gcHJvY2Vzcyhkb2MsIGNhbGxiYWNrKSB7XG4gICAgcHJvY2Vzc29yLmZyZWV6ZSgpXG4gICAgYXNzZXJ0UGFyc2VyKCdwcm9jZXNzJywgcHJvY2Vzc29yLlBhcnNlcilcbiAgICBhc3NlcnRDb21waWxlcigncHJvY2VzcycsIHByb2Nlc3Nvci5Db21waWxlcilcblxuICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShleGVjdXRvcilcbiAgICB9XG5cbiAgICBleGVjdXRvcihudWxsLCBjYWxsYmFjaylcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7bnVsbHwoKGZpbGU6IFZGaWxlKSA9PiB2b2lkKX0gcmVzb2x2ZVxuICAgICAqIEBwYXJhbSB7KGVycm9yPzogRXJyb3J8bnVsbHx1bmRlZmluZWQpID0+IHZvaWR9IHJlamVjdFxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGV4ZWN1dG9yKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgY29uc3QgZmlsZSA9IHZmaWxlKGRvYylcblxuICAgICAgcHJvY2Vzc29yLnJ1bihwcm9jZXNzb3IucGFyc2UoZmlsZSksIGZpbGUsIChlcnJvciwgdHJlZSwgZmlsZSkgPT4ge1xuICAgICAgICBpZiAoZXJyb3IgfHwgIXRyZWUgfHwgIWZpbGUpIHtcbiAgICAgICAgICBkb25lKGVycm9yKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8qKiBAdHlwZSB7dW5rbm93bn0gKi9cbiAgICAgICAgICBjb25zdCByZXN1bHQgPSBwcm9jZXNzb3Iuc3RyaW5naWZ5KHRyZWUsIGZpbGUpXG5cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQgfHwgcmVzdWx0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBFbXB0eS5cbiAgICAgICAgICB9IGVsc2UgaWYgKGxvb2tzTGlrZUFWRmlsZVZhbHVlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIGZpbGUudmFsdWUgPSByZXN1bHRcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZmlsZS5yZXN1bHQgPSByZXN1bHRcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb25lKGVycm9yLCBmaWxlKVxuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgICAvKipcbiAgICAgICAqIEBwYXJhbSB7RXJyb3J8bnVsbHx1bmRlZmluZWR9IFtlcnJvcl1cbiAgICAgICAqIEBwYXJhbSB7VkZpbGV8dW5kZWZpbmVkfSBbZmlsZV1cbiAgICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBkb25lKGVycm9yLCBmaWxlKSB7XG4gICAgICAgIGlmIChlcnJvciB8fCAhZmlsZSkge1xuICAgICAgICAgIHJlamVjdChlcnJvcilcbiAgICAgICAgfSBlbHNlIGlmIChyZXNvbHZlKSB7XG4gICAgICAgICAgcmVzb2x2ZShmaWxlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IGBjYWxsYmFja2AgaXMgZGVmaW5lZCBpZiBgcmVzb2x2ZWAgaXMgbm90LlxuICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGZpbGUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKiogQHR5cGUge1Byb2Nlc3NvclsncHJvY2Vzc1N5bmMnXX0gKi9cbiAgZnVuY3Rpb24gcHJvY2Vzc1N5bmMoZG9jKSB7XG4gICAgLyoqIEB0eXBlIHtib29sZWFufHVuZGVmaW5lZH0gKi9cbiAgICBsZXQgY29tcGxldGVcblxuICAgIHByb2Nlc3Nvci5mcmVlemUoKVxuICAgIGFzc2VydFBhcnNlcigncHJvY2Vzc1N5bmMnLCBwcm9jZXNzb3IuUGFyc2VyKVxuICAgIGFzc2VydENvbXBpbGVyKCdwcm9jZXNzU3luYycsIHByb2Nlc3Nvci5Db21waWxlcilcblxuICAgIGNvbnN0IGZpbGUgPSB2ZmlsZShkb2MpXG5cbiAgICBwcm9jZXNzb3IucHJvY2VzcyhmaWxlLCBkb25lKVxuXG4gICAgYXNzZXJ0RG9uZSgncHJvY2Vzc1N5bmMnLCAncHJvY2VzcycsIGNvbXBsZXRlKVxuXG4gICAgcmV0dXJuIGZpbGVcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7RXJyb3J8bnVsbHx1bmRlZmluZWR9IFtlcnJvcl1cbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkb25lKGVycm9yKSB7XG4gICAgICBjb21wbGV0ZSA9IHRydWVcbiAgICAgIGJhaWwoZXJyb3IpXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYHZhbHVlYCBpcyBhIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7dW5rbm93bn0gdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gbmV3YWJsZSh2YWx1ZSwgbmFtZSkge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIC8vIFByb3RvdHlwZXMgZG8gZXhpc3QuXG4gICAgLy8gdHlwZS1jb3ZlcmFnZTppZ25vcmUtbmV4dC1saW5lXG4gICAgdmFsdWUucHJvdG90eXBlICYmXG4gICAgLy8gQSBmdW5jdGlvbiB3aXRoIGtleXMgaW4gaXRzIHByb3RvdHlwZSBpcyBwcm9iYWJseSBhIGNvbnN0cnVjdG9yLlxuICAgIC8vIENsYXNzZXPigJkgcHJvdG90eXBlIG1ldGhvZHMgYXJlIG5vdCBlbnVtZXJhYmxlLCBzbyB3ZSBjaGVjayBpZiBzb21lIHZhbHVlXG4gICAgLy8gZXhpc3RzIGluIHRoZSBwcm90b3R5cGUuXG4gICAgLy8gdHlwZS1jb3ZlcmFnZTppZ25vcmUtbmV4dC1saW5lXG4gICAgKGtleXModmFsdWUucHJvdG90eXBlKSB8fCBuYW1lIGluIHZhbHVlLnByb3RvdHlwZSlcbiAgKVxufVxuXG4vKipcbiAqIENoZWNrIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0IHdpdGgga2V5cy5cbiAqXG4gKiBAcGFyYW0ge1JlY29yZDxzdHJpbmcsIHVua25vd24+fSB2YWx1ZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGtleXModmFsdWUpIHtcbiAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gIGxldCBrZXlcblxuICBmb3IgKGtleSBpbiB2YWx1ZSkge1xuICAgIGlmIChvd24uY2FsbCh2YWx1ZSwga2V5KSkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyoqXG4gKiBBc3NlcnQgYSBwYXJzZXIgaXMgYXZhaWxhYmxlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge3Vua25vd259IHZhbHVlXG4gKiBAcmV0dXJucyB7YXNzZXJ0cyB2YWx1ZSBpcyBQYXJzZXJ9XG4gKi9cbmZ1bmN0aW9uIGFzc2VydFBhcnNlcihuYW1lLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGAnICsgbmFtZSArICdgIHdpdGhvdXQgYFBhcnNlcmAnKVxuICB9XG59XG5cbi8qKlxuICogQXNzZXJ0IGEgY29tcGlsZXIgaXMgYXZhaWxhYmxlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge3Vua25vd259IHZhbHVlXG4gKiBAcmV0dXJucyB7YXNzZXJ0cyB2YWx1ZSBpcyBDb21waWxlcn1cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0Q29tcGlsZXIobmFtZSwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBgJyArIG5hbWUgKyAnYCB3aXRob3V0IGBDb21waWxlcmAnKVxuICB9XG59XG5cbi8qKlxuICogQXNzZXJ0IHRoZSBwcm9jZXNzb3IgaXMgbm90IGZyb3plbi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHt1bmtub3dufSBmcm96ZW5cbiAqIEByZXR1cm5zIHthc3NlcnRzIGZyb3plbiBpcyBmYWxzZX1cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0VW5mcm96ZW4obmFtZSwgZnJvemVuKSB7XG4gIGlmIChmcm96ZW4pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQ2Fubm90IGNhbGwgYCcgK1xuICAgICAgICBuYW1lICtcbiAgICAgICAgJ2Agb24gYSBmcm96ZW4gcHJvY2Vzc29yLlxcbkNyZWF0ZSBhIG5ldyBwcm9jZXNzb3IgZmlyc3QsIGJ5IGNhbGxpbmcgaXQ6IHVzZSBgcHJvY2Vzc29yKClgIGluc3RlYWQgb2YgYHByb2Nlc3NvcmAuJ1xuICAgIClcbiAgfVxufVxuXG4vKipcbiAqIEFzc2VydCBgbm9kZWAgaXMgYSB1bmlzdCBub2RlLlxuICpcbiAqIEBwYXJhbSB7dW5rbm93bn0gbm9kZVxuICogQHJldHVybnMge2Fzc2VydHMgbm9kZSBpcyBOb2RlfVxuICovXG5mdW5jdGlvbiBhc3NlcnROb2RlKG5vZGUpIHtcbiAgLy8gYGlzUGxhaW5PYmpgIHVuZm9ydHVuYXRlbHkgdXNlcyBgYW55YCBpbnN0ZWFkIG9mIGB1bmtub3duYC5cbiAgLy8gdHlwZS1jb3ZlcmFnZTppZ25vcmUtbmV4dC1saW5lXG4gIGlmICghaXNQbGFpbk9iaihub2RlKSB8fCB0eXBlb2Ygbm9kZS50eXBlICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIG5vZGUsIGdvdCBgJyArIG5vZGUgKyAnYCcpXG4gICAgLy8gRmluZS5cbiAgfVxufVxuXG4vKipcbiAqIEFzc2VydCB0aGF0IGBjb21wbGV0ZWAgaXMgYHRydWVgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gYXN5bmNOYW1lXG4gKiBAcGFyYW0ge3Vua25vd259IGNvbXBsZXRlXG4gKiBAcmV0dXJucyB7YXNzZXJ0cyBjb21wbGV0ZSBpcyB0cnVlfVxuICovXG5mdW5jdGlvbiBhc3NlcnREb25lKG5hbWUsIGFzeW5jTmFtZSwgY29tcGxldGUpIHtcbiAgaWYgKCFjb21wbGV0ZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdgJyArIG5hbWUgKyAnYCBmaW5pc2hlZCBhc3luYy4gVXNlIGAnICsgYXN5bmNOYW1lICsgJ2AgaW5zdGVhZCdcbiAgICApXG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1ZGaWxlQ29tcGF0aWJsZX0gW3ZhbHVlXVxuICogQHJldHVybnMge1ZGaWxlfVxuICovXG5mdW5jdGlvbiB2ZmlsZSh2YWx1ZSkge1xuICByZXR1cm4gbG9va3NMaWtlQVZGaWxlKHZhbHVlKSA/IHZhbHVlIDogbmV3IFZGaWxlKHZhbHVlKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VkZpbGVDb21wYXRpYmxlfSBbdmFsdWVdXG4gKiBAcmV0dXJucyB7dmFsdWUgaXMgVkZpbGV9XG4gKi9cbmZ1bmN0aW9uIGxvb2tzTGlrZUFWRmlsZSh2YWx1ZSkge1xuICByZXR1cm4gQm9vbGVhbihcbiAgICB2YWx1ZSAmJlxuICAgICAgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuICAgICAgJ21lc3NhZ2UnIGluIHZhbHVlICYmXG4gICAgICAnbWVzc2FnZXMnIGluIHZhbHVlXG4gIClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3Vua25vd259IFt2YWx1ZV1cbiAqIEByZXR1cm5zIHt2YWx1ZSBpcyBWRmlsZVZhbHVlfVxuICovXG5mdW5jdGlvbiBsb29rc0xpa2VBVkZpbGVWYWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCBpc0J1ZmZlcih2YWx1ZSlcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYgeyhlcnJvcj86IEVycm9yfG51bGx8dW5kZWZpbmVkLCAuLi5vdXRwdXQ6IGFueVtdKSA9PiB2b2lkfSBDYWxsYmFja1xuICogQHR5cGVkZWYgeyguLi5pbnB1dDogYW55W10pID0+IGFueX0gTWlkZGxld2FyZVxuICpcbiAqIEB0eXBlZGVmIHsoLi4uaW5wdXQ6IGFueVtdKSA9PiB2b2lkfSBSdW4gQ2FsbCBhbGwgbWlkZGxld2FyZS5cbiAqIEB0eXBlZGVmIHsoZm46IE1pZGRsZXdhcmUpID0+IFBpcGVsaW5lfSBVc2UgQWRkIGBmbmAgKG1pZGRsZXdhcmUpIHRvIHRoZSBsaXN0LlxuICogQHR5cGVkZWYge3tydW46IFJ1biwgdXNlOiBVc2V9fSBQaXBlbGluZVxuICovXG5cbi8qKlxuICogQ3JlYXRlIG5ldyBtaWRkbGV3YXJlLlxuICpcbiAqIEByZXR1cm5zIHtQaXBlbGluZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyb3VnaCgpIHtcbiAgLyoqIEB0eXBlIHtNaWRkbGV3YXJlW119ICovXG4gIGNvbnN0IGZucyA9IFtdXG4gIC8qKiBAdHlwZSB7UGlwZWxpbmV9ICovXG4gIGNvbnN0IHBpcGVsaW5lID0ge3J1biwgdXNlfVxuXG4gIHJldHVybiBwaXBlbGluZVxuXG4gIC8qKiBAdHlwZSB7UnVufSAqL1xuICBmdW5jdGlvbiBydW4oLi4udmFsdWVzKSB7XG4gICAgbGV0IG1pZGRsZXdhcmVJbmRleCA9IC0xXG4gICAgLyoqIEB0eXBlIHtDYWxsYmFja30gKi9cbiAgICBjb25zdCBjYWxsYmFjayA9IHZhbHVlcy5wb3AoKVxuXG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgZnVuY3Rpb24gYXMgbGFzdCBhcmd1bWVudCwgbm90ICcgKyBjYWxsYmFjaylcbiAgICB9XG5cbiAgICBuZXh0KG51bGwsIC4uLnZhbHVlcylcblxuICAgIC8qKlxuICAgICAqIFJ1biB0aGUgbmV4dCBgZm5gLCBvciB3ZeKAmXJlIGRvbmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Vycm9yfG51bGx8dW5kZWZpbmVkfSBlcnJvclxuICAgICAqIEBwYXJhbSB7YW55W119IG91dHB1dFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5leHQoZXJyb3IsIC4uLm91dHB1dCkge1xuICAgICAgY29uc3QgZm4gPSBmbnNbKyttaWRkbGV3YXJlSW5kZXhdXG4gICAgICBsZXQgaW5kZXggPSAtMVxuXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY2FsbGJhY2soZXJyb3IpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICAvLyBDb3B5IG5vbi1udWxsaXNoIGlucHV0IGludG8gdmFsdWVzLlxuICAgICAgd2hpbGUgKCsraW5kZXggPCB2YWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgIGlmIChvdXRwdXRbaW5kZXhdID09PSBudWxsIHx8IG91dHB1dFtpbmRleF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG91dHB1dFtpbmRleF0gPSB2YWx1ZXNbaW5kZXhdXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gU2F2ZSB0aGUgbmV3bHkgY3JlYXRlZCBgb3V0cHV0YCBmb3IgdGhlIG5leHQgY2FsbC5cbiAgICAgIHZhbHVlcyA9IG91dHB1dFxuXG4gICAgICAvLyBOZXh0IG9yIGRvbmUuXG4gICAgICBpZiAoZm4pIHtcbiAgICAgICAgd3JhcChmbiwgbmV4dCkoLi4ub3V0cHV0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgLi4ub3V0cHV0KVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKiBAdHlwZSB7VXNlfSAqL1xuICBmdW5jdGlvbiB1c2UobWlkZGVsd2FyZSkge1xuICAgIGlmICh0eXBlb2YgbWlkZGVsd2FyZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgJ0V4cGVjdGVkIGBtaWRkZWx3YXJlYCB0byBiZSBhIGZ1bmN0aW9uLCBub3QgJyArIG1pZGRlbHdhcmVcbiAgICAgIClcbiAgICB9XG5cbiAgICBmbnMucHVzaChtaWRkZWx3YXJlKVxuICAgIHJldHVybiBwaXBlbGluZVxuICB9XG59XG5cbi8qKlxuICogV3JhcCBgbWlkZGxld2FyZWAuXG4gKiBDYW4gYmUgc3luYyBvciBhc3luYzsgcmV0dXJuIGEgcHJvbWlzZSwgcmVjZWl2ZSBhIGNhbGxiYWNrLCBvciByZXR1cm4gbmV3XG4gKiB2YWx1ZXMgYW5kIGVycm9ycy5cbiAqXG4gKiBAcGFyYW0ge01pZGRsZXdhcmV9IG1pZGRsZXdhcmVcbiAqIEBwYXJhbSB7Q2FsbGJhY2t9IGNhbGxiYWNrXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3cmFwKG1pZGRsZXdhcmUsIGNhbGxiYWNrKSB7XG4gIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cbiAgbGV0IGNhbGxlZFxuXG4gIHJldHVybiB3cmFwcGVkXG5cbiAgLyoqXG4gICAqIENhbGwgYG1pZGRsZXdhcmVgLlxuICAgKiBAcGFyYW0ge2FueVtdfSBwYXJhbWV0ZXJzXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgZnVuY3Rpb24gd3JhcHBlZCguLi5wYXJhbWV0ZXJzKSB7XG4gICAgY29uc3QgZm5FeHBlY3RzQ2FsbGJhY2sgPSBtaWRkbGV3YXJlLmxlbmd0aCA+IHBhcmFtZXRlcnMubGVuZ3RoXG4gICAgLyoqIEB0eXBlIHthbnl9ICovXG4gICAgbGV0IHJlc3VsdFxuXG4gICAgaWYgKGZuRXhwZWN0c0NhbGxiYWNrKSB7XG4gICAgICBwYXJhbWV0ZXJzLnB1c2goZG9uZSlcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gbWlkZGxld2FyZSguLi5wYXJhbWV0ZXJzKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvKiogQHR5cGUge0Vycm9yfSAqL1xuICAgICAgY29uc3QgZXhjZXB0aW9uID0gZXJyb3JcblxuICAgICAgLy8gV2VsbCwgdGhpcyBpcyBxdWl0ZSB0aGUgcGlja2xlLlxuICAgICAgLy8gYG1pZGRsZXdhcmVgIHJlY2VpdmVkIGEgY2FsbGJhY2sgYW5kIGNhbGxlZCBpdCBzeW5jaHJvbm91c2x5LCBidXQgdGhhdFxuICAgICAgLy8gdGhyZXcgYW4gZXJyb3IuXG4gICAgICAvLyBUaGUgb25seSB0aGluZyBsZWZ0IHRvIGRvIGlzIHRvIHRocm93IHRoZSB0aGluZyBpbnN0ZWFkLlxuICAgICAgaWYgKGZuRXhwZWN0c0NhbGxiYWNrICYmIGNhbGxlZCkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb25cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRvbmUoZXhjZXB0aW9uKVxuICAgIH1cblxuICAgIGlmICghZm5FeHBlY3RzQ2FsbGJhY2spIHtcbiAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgIHJlc3VsdC50aGVuKHRoZW4sIGRvbmUpXG4gICAgICB9IGVsc2UgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIGRvbmUocmVzdWx0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhlbihyZXN1bHQpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGwgYGNhbGxiYWNrYCwgb25seSBvbmNlLlxuICAgKiBAdHlwZSB7Q2FsbGJhY2t9XG4gICAqL1xuICBmdW5jdGlvbiBkb25lKGVycm9yLCAuLi5vdXRwdXQpIHtcbiAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgY2FsbGVkID0gdHJ1ZVxuICAgICAgY2FsbGJhY2soZXJyb3IsIC4uLm91dHB1dClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsbCBgZG9uZWAgd2l0aCBvbmUgdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSB7YW55fSBbdmFsdWVdXG4gICAqL1xuICBmdW5jdGlvbiB0aGVuKHZhbHVlKSB7XG4gICAgZG9uZShudWxsLCB2YWx1ZSlcbiAgfVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiBPcHRpb25zXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtpbmNsdWRlSW1hZ2VBbHQ9dHJ1ZV1cbiAqL1xuXG4vKipcbiAqIEdldCB0aGUgdGV4dCBjb250ZW50IG9mIGEgbm9kZS5cbiAqIFByZWZlciB0aGUgbm9kZeKAmXMgcGxhaW4tdGV4dCBmaWVsZHMsIG90aGVyd2lzZSBzZXJpYWxpemUgaXRzIGNoaWxkcmVuLFxuICogYW5kIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhbiBhcnJheSwgc2VyaWFsaXplIHRoZSBub2RlcyBpbiBpdC5cbiAqXG4gKiBAcGFyYW0ge3Vua25vd259IG5vZGVcbiAqIEBwYXJhbSB7T3B0aW9uc30gW29wdGlvbnNdXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9TdHJpbmcobm9kZSwgb3B0aW9ucykge1xuICB2YXIge2luY2x1ZGVJbWFnZUFsdCA9IHRydWV9ID0gb3B0aW9ucyB8fCB7fVxuICByZXR1cm4gb25lKG5vZGUsIGluY2x1ZGVJbWFnZUFsdClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3Vua25vd259IG5vZGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5jbHVkZUltYWdlQWx0XG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBvbmUobm9kZSwgaW5jbHVkZUltYWdlQWx0KSB7XG4gIHJldHVybiAoXG4gICAgKG5vZGUgJiZcbiAgICAgIHR5cGVvZiBub2RlID09PSAnb2JqZWN0JyAmJlxuICAgICAgLy8gQHRzLWlnbm9yZSBsb29rcyBsaWtlIGEgbGl0ZXJhbC5cbiAgICAgIChub2RlLnZhbHVlIHx8XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgbG9va3MgbGlrZSBhbiBpbWFnZS5cbiAgICAgICAgKGluY2x1ZGVJbWFnZUFsdCA/IG5vZGUuYWx0IDogJycpIHx8XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgbG9va3MgbGlrZSBhIHBhcmVudC5cbiAgICAgICAgKCdjaGlsZHJlbicgaW4gbm9kZSAmJiBhbGwobm9kZS5jaGlsZHJlbiwgaW5jbHVkZUltYWdlQWx0KSkgfHxcbiAgICAgICAgKEFycmF5LmlzQXJyYXkobm9kZSkgJiYgYWxsKG5vZGUsIGluY2x1ZGVJbWFnZUFsdCkpKSkgfHxcbiAgICAnJ1xuICApXG59XG5cbi8qKlxuICogQHBhcmFtIHtBcnJheS48dW5rbm93bj59IHZhbHVlc1xuICogQHBhcmFtIHtib29sZWFufSBpbmNsdWRlSW1hZ2VBbHRcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGFsbCh2YWx1ZXMsIGluY2x1ZGVJbWFnZUFsdCkge1xuICAvKiogQHR5cGUge0FycmF5LjxzdHJpbmc+fSAqL1xuICB2YXIgcmVzdWx0ID0gW11cbiAgdmFyIGluZGV4ID0gLTFcblxuICB3aGlsZSAoKytpbmRleCA8IHZhbHVlcy5sZW5ndGgpIHtcbiAgICByZXN1bHRbaW5kZXhdID0gb25lKHZhbHVlc1tpbmRleF0sIGluY2x1ZGVJbWFnZUFsdClcbiAgfVxuXG4gIHJldHVybiByZXN1bHQuam9pbignJylcbn1cbiIsIi8qKlxuICogTGlrZSBgQXJyYXkjc3BsaWNlYCwgYnV0IHNtYXJ0ZXIgZm9yIGdpYW50IGFycmF5cy5cbiAqXG4gKiBgQXJyYXkjc3BsaWNlYCB0YWtlcyBhbGwgaXRlbXMgdG8gYmUgaW5zZXJ0ZWQgYXMgaW5kaXZpZHVhbCBhcmd1bWVudCB3aGljaFxuICogY2F1c2VzIGEgc3RhY2sgb3ZlcmZsb3cgaW4gVjggd2hlbiB0cnlpbmcgdG8gaW5zZXJ0IDEwMGsgaXRlbXMgZm9yIGluc3RhbmNlLlxuICpcbiAqIE90aGVyd2lzZSwgdGhpcyBkb2VzIG5vdCByZXR1cm4gdGhlIHJlbW92ZWQgaXRlbXMsIGFuZCB0YWtlcyBgaXRlbXNgIGFzIGFuXG4gKiBhcnJheSBpbnN0ZWFkIG9mIHJlc3QgcGFyYW1ldGVycy5cbiAqXG4gKiBAdGVtcGxhdGUge3Vua25vd259IFRcbiAqIEBwYXJhbSB7VFtdfSBsaXN0XG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnRcbiAqIEBwYXJhbSB7bnVtYmVyfSByZW1vdmVcbiAqIEBwYXJhbSB7VFtdfSBpdGVtc1xuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzcGxpY2UobGlzdCwgc3RhcnQsIHJlbW92ZSwgaXRlbXMpIHtcbiAgY29uc3QgZW5kID0gbGlzdC5sZW5ndGhcbiAgbGV0IGNodW5rU3RhcnQgPSAwXG4gIC8qKiBAdHlwZSB7dW5rbm93bltdfSAqL1xuXG4gIGxldCBwYXJhbWV0ZXJzIC8vIE1ha2Ugc3RhcnQgYmV0d2VlbiB6ZXJvIGFuZCBgZW5kYCAoaW5jbHVkZWQpLlxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IC1zdGFydCA+IGVuZCA/IDAgOiBlbmQgKyBzdGFydFxuICB9IGVsc2Uge1xuICAgIHN0YXJ0ID0gc3RhcnQgPiBlbmQgPyBlbmQgOiBzdGFydFxuICB9XG5cbiAgcmVtb3ZlID0gcmVtb3ZlID4gMCA/IHJlbW92ZSA6IDAgLy8gTm8gbmVlZCB0byBjaHVuayB0aGUgaXRlbXMgaWYgdGhlcmXigJlzIG9ubHkgYSBjb3VwbGUgKDEwaykgaXRlbXMuXG5cbiAgaWYgKGl0ZW1zLmxlbmd0aCA8IDEwMDAwKSB7XG4gICAgcGFyYW1ldGVycyA9IEFycmF5LmZyb20oaXRlbXMpXG4gICAgcGFyYW1ldGVycy51bnNoaWZ0KHN0YXJ0LCByZW1vdmUpIC8vIEB0cy1leHBlY3QtZXJyb3IgSHVzaCwgaXTigJlzIGZpbmUuXG4gICAgO1tdLnNwbGljZS5hcHBseShsaXN0LCBwYXJhbWV0ZXJzKVxuICB9IGVsc2Uge1xuICAgIC8vIERlbGV0ZSBgcmVtb3ZlYCBpdGVtcyBzdGFydGluZyBmcm9tIGBzdGFydGBcbiAgICBpZiAocmVtb3ZlKSBbXS5zcGxpY2UuYXBwbHkobGlzdCwgW3N0YXJ0LCByZW1vdmVdKSAvLyBJbnNlcnQgdGhlIGl0ZW1zIGluIGNodW5rcyB0byBub3QgY2F1c2Ugc3RhY2sgb3ZlcmZsb3dzLlxuXG4gICAgd2hpbGUgKGNodW5rU3RhcnQgPCBpdGVtcy5sZW5ndGgpIHtcbiAgICAgIHBhcmFtZXRlcnMgPSBpdGVtcy5zbGljZShjaHVua1N0YXJ0LCBjaHVua1N0YXJ0ICsgMTAwMDApXG4gICAgICBwYXJhbWV0ZXJzLnVuc2hpZnQoc3RhcnQsIDApIC8vIEB0cy1leHBlY3QtZXJyb3IgSHVzaCwgaXTigJlzIGZpbmUuXG4gICAgICA7W10uc3BsaWNlLmFwcGx5KGxpc3QsIHBhcmFtZXRlcnMpXG4gICAgICBjaHVua1N0YXJ0ICs9IDEwMDAwXG4gICAgICBzdGFydCArPSAxMDAwMFxuICAgIH1cbiAgfVxufVxuLyoqXG4gKiBBcHBlbmQgYGl0ZW1zYCAoYW4gYXJyYXkpIGF0IHRoZSBlbmQgb2YgYGxpc3RgIChhbm90aGVyIGFycmF5KS5cbiAqIFdoZW4gYGxpc3RgIHdhcyBlbXB0eSwgcmV0dXJucyBgaXRlbXNgIGluc3RlYWQuXG4gKlxuICogVGhpcyBwcmV2ZW50cyBhIHBvdGVudGlhbGx5IGV4cGVuc2l2ZSBvcGVyYXRpb24gd2hlbiBgbGlzdGAgaXMgZW1wdHksXG4gKiBhbmQgYWRkcyBpdGVtcyBpbiBiYXRjaGVzIHRvIHByZXZlbnQgVjggZnJvbSBoYW5naW5nLlxuICpcbiAqIEB0ZW1wbGF0ZSB7dW5rbm93bn0gVFxuICogQHBhcmFtIHtUW119IGxpc3RcbiAqIEBwYXJhbSB7VFtdfSBpdGVtc1xuICogQHJldHVybnMge1RbXX1cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcHVzaChsaXN0LCBpdGVtcykge1xuICBpZiAobGlzdC5sZW5ndGggPiAwKSB7XG4gICAgc3BsaWNlKGxpc3QsIGxpc3QubGVuZ3RoLCAwLCBpdGVtcylcbiAgICByZXR1cm4gbGlzdFxuICB9XG5cbiAgcmV0dXJuIGl0ZW1zXG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuTm9ybWFsaXplZEV4dGVuc2lvbn0gTm9ybWFsaXplZEV4dGVuc2lvblxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5FeHRlbnNpb259IEV4dGVuc2lvblxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db25zdHJ1Y3R9IENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5IdG1sRXh0ZW5zaW9ufSBIdG1sRXh0ZW5zaW9uXG4gKi9cblxuaW1wb3J0IHtzcGxpY2V9IGZyb20gJ21pY3JvbWFyay11dGlsLWNodW5rZWQnXG5cbmNvbnN0IGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHlcblxuLyoqXG4gKiBDb21iaW5lIHNldmVyYWwgc3ludGF4IGV4dGVuc2lvbnMgaW50byBvbmUuXG4gKlxuICogQHBhcmFtIHtFeHRlbnNpb25bXX0gZXh0ZW5zaW9ucyBMaXN0IG9mIHN5bnRheCBleHRlbnNpb25zLlxuICogQHJldHVybnMge05vcm1hbGl6ZWRFeHRlbnNpb259IEEgc2luZ2xlIGNvbWJpbmVkIGV4dGVuc2lvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbWJpbmVFeHRlbnNpb25zKGV4dGVuc2lvbnMpIHtcbiAgLyoqIEB0eXBlIHtOb3JtYWxpemVkRXh0ZW5zaW9ufSAqL1xuICBjb25zdCBhbGwgPSB7fVxuICBsZXQgaW5kZXggPSAtMVxuXG4gIHdoaWxlICgrK2luZGV4IDwgZXh0ZW5zaW9ucy5sZW5ndGgpIHtcbiAgICBzeW50YXhFeHRlbnNpb24oYWxsLCBleHRlbnNpb25zW2luZGV4XSlcbiAgfVxuXG4gIHJldHVybiBhbGxcbn1cblxuLyoqXG4gKiBNZXJnZSBgZXh0ZW5zaW9uYCBpbnRvIGBhbGxgLlxuICpcbiAqIEBwYXJhbSB7Tm9ybWFsaXplZEV4dGVuc2lvbn0gYWxsIEV4dGVuc2lvbiB0byBtZXJnZSBpbnRvLlxuICogQHBhcmFtIHtFeHRlbnNpb259IGV4dGVuc2lvbiBFeHRlbnNpb24gdG8gbWVyZ2UuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gc3ludGF4RXh0ZW5zaW9uKGFsbCwgZXh0ZW5zaW9uKSB7XG4gIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICBsZXQgaG9va1xuXG4gIGZvciAoaG9vayBpbiBleHRlbnNpb24pIHtcbiAgICBjb25zdCBtYXliZSA9IGhhc093blByb3BlcnR5LmNhbGwoYWxsLCBob29rKSA/IGFsbFtob29rXSA6IHVuZGVmaW5lZFxuICAgIGNvbnN0IGxlZnQgPSBtYXliZSB8fCAoYWxsW2hvb2tdID0ge30pXG4gICAgY29uc3QgcmlnaHQgPSBleHRlbnNpb25baG9va11cbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICBsZXQgY29kZVxuXG4gICAgZm9yIChjb2RlIGluIHJpZ2h0KSB7XG4gICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwobGVmdCwgY29kZSkpIGxlZnRbY29kZV0gPSBbXVxuICAgICAgY29uc3QgdmFsdWUgPSByaWdodFtjb2RlXVxuICAgICAgY29uc3RydWN0cyhcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBMb29rcyBsaWtlIGEgbGlzdC5cbiAgICAgICAgbGVmdFtjb2RlXSxcbiAgICAgICAgQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IHZhbHVlID8gW3ZhbHVlXSA6IFtdXG4gICAgICApXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogTWVyZ2UgYGxpc3RgIGludG8gYGV4aXN0aW5nYCAoYm90aCBsaXN0cyBvZiBjb25zdHJ1Y3RzKS5cbiAqIE11dGF0ZXMgYGV4aXN0aW5nYC5cbiAqXG4gKiBAcGFyYW0ge3Vua25vd25bXX0gZXhpc3RpbmdcbiAqIEBwYXJhbSB7dW5rbm93bltdfSBsaXN0XG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gY29uc3RydWN0cyhleGlzdGluZywgbGlzdCkge1xuICBsZXQgaW5kZXggPSAtMVxuICAvKiogQHR5cGUge3Vua25vd25bXX0gKi9cbiAgY29uc3QgYmVmb3JlID0gW11cblxuICB3aGlsZSAoKytpbmRleCA8IGxpc3QubGVuZ3RoKSB7XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBMb29rcyBsaWtlIGFuIG9iamVjdC5cbiAgICA7KGxpc3RbaW5kZXhdLmFkZCA9PT0gJ2FmdGVyJyA/IGV4aXN0aW5nIDogYmVmb3JlKS5wdXNoKGxpc3RbaW5kZXhdKVxuICB9XG5cbiAgc3BsaWNlKGV4aXN0aW5nLCAwLCAwLCBiZWZvcmUpXG59XG5cbi8qKlxuICogQ29tYmluZSBzZXZlcmFsIEhUTUwgZXh0ZW5zaW9ucyBpbnRvIG9uZS5cbiAqXG4gKiBAcGFyYW0ge0h0bWxFeHRlbnNpb25bXX0gaHRtbEV4dGVuc2lvbnMgTGlzdCBvZiBIVE1MIGV4dGVuc2lvbnMuXG4gKiBAcmV0dXJucyB7SHRtbEV4dGVuc2lvbn0gQSBzaW5nbGUgY29tYmluZWQgZXh0ZW5zaW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tYmluZUh0bWxFeHRlbnNpb25zKGh0bWxFeHRlbnNpb25zKSB7XG4gIC8qKiBAdHlwZSB7SHRtbEV4dGVuc2lvbn0gKi9cbiAgY29uc3QgaGFuZGxlcnMgPSB7fVxuICBsZXQgaW5kZXggPSAtMVxuXG4gIHdoaWxlICgrK2luZGV4IDwgaHRtbEV4dGVuc2lvbnMubGVuZ3RoKSB7XG4gICAgaHRtbEV4dGVuc2lvbihoYW5kbGVycywgaHRtbEV4dGVuc2lvbnNbaW5kZXhdKVxuICB9XG5cbiAgcmV0dXJuIGhhbmRsZXJzXG59XG5cbi8qKlxuICogTWVyZ2UgYGV4dGVuc2lvbmAgaW50byBgYWxsYC5cbiAqXG4gKiBAcGFyYW0ge0h0bWxFeHRlbnNpb259IGFsbCBFeHRlbnNpb24gdG8gbWVyZ2UgaW50by5cbiAqIEBwYXJhbSB7SHRtbEV4dGVuc2lvbn0gZXh0ZW5zaW9uIEV4dGVuc2lvbiB0byBtZXJnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiBodG1sRXh0ZW5zaW9uKGFsbCwgZXh0ZW5zaW9uKSB7XG4gIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICBsZXQgaG9va1xuXG4gIGZvciAoaG9vayBpbiBleHRlbnNpb24pIHtcbiAgICBjb25zdCBtYXliZSA9IGhhc093blByb3BlcnR5LmNhbGwoYWxsLCBob29rKSA/IGFsbFtob29rXSA6IHVuZGVmaW5lZFxuICAgIGNvbnN0IGxlZnQgPSBtYXliZSB8fCAoYWxsW2hvb2tdID0ge30pXG4gICAgY29uc3QgcmlnaHQgPSBleHRlbnNpb25baG9va11cbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICBsZXQgdHlwZVxuXG4gICAgaWYgKHJpZ2h0KSB7XG4gICAgICBmb3IgKHR5cGUgaW4gcmlnaHQpIHtcbiAgICAgICAgbGVmdFt0eXBlXSA9IHJpZ2h0W3R5cGVdXG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCIvLyBUaGlzIG1vZHVsZSBpcyBnZW5lcmF0ZWQgYnkgYHNjcmlwdC9gLlxuLy9cbi8vIENvbW1vbk1hcmsgaGFuZGxlcyBhdHRlbnRpb24gKGVtcGhhc2lzLCBzdHJvbmcpIG1hcmtlcnMgYmFzZWQgb24gd2hhdCBjb21lc1xuLy8gYmVmb3JlIG9yIGFmdGVyIHRoZW0uXG4vLyBPbmUgc3VjaCBkaWZmZXJlbmNlIGlzIGlmIHRob3NlIGNoYXJhY3RlcnMgYXJlIFVuaWNvZGUgcHVuY3R1YXRpb24uXG4vLyBUaGlzIHNjcmlwdCBpcyBnZW5lcmF0ZWQgZnJvbSB0aGUgVW5pY29kZSBkYXRhLlxuZXhwb3J0IGNvbnN0IHVuaWNvZGVQdW5jdHVhdGlvblJlZ2V4ID1cbiAgL1shLS86LUBbLWB7LX5cXHUwMEExXFx1MDBBN1xcdTAwQUJcXHUwMEI2XFx1MDBCN1xcdTAwQkJcXHUwMEJGXFx1MDM3RVxcdTAzODdcXHUwNTVBLVxcdTA1NUZcXHUwNTg5XFx1MDU4QVxcdTA1QkVcXHUwNUMwXFx1MDVDM1xcdTA1QzZcXHUwNUYzXFx1MDVGNFxcdTA2MDlcXHUwNjBBXFx1MDYwQ1xcdTA2MERcXHUwNjFCXFx1MDYxRVxcdTA2MUZcXHUwNjZBLVxcdTA2NkRcXHUwNkQ0XFx1MDcwMC1cXHUwNzBEXFx1MDdGNy1cXHUwN0Y5XFx1MDgzMC1cXHUwODNFXFx1MDg1RVxcdTA5NjRcXHUwOTY1XFx1MDk3MFxcdTA5RkRcXHUwQTc2XFx1MEFGMFxcdTBDNzdcXHUwQzg0XFx1MERGNFxcdTBFNEZcXHUwRTVBXFx1MEU1QlxcdTBGMDQtXFx1MEYxMlxcdTBGMTRcXHUwRjNBLVxcdTBGM0RcXHUwRjg1XFx1MEZEMC1cXHUwRkQ0XFx1MEZEOVxcdTBGREFcXHUxMDRBLVxcdTEwNEZcXHUxMEZCXFx1MTM2MC1cXHUxMzY4XFx1MTQwMFxcdTE2NkVcXHUxNjlCXFx1MTY5Q1xcdTE2RUItXFx1MTZFRFxcdTE3MzVcXHUxNzM2XFx1MTdENC1cXHUxN0Q2XFx1MTdEOC1cXHUxN0RBXFx1MTgwMC1cXHUxODBBXFx1MTk0NFxcdTE5NDVcXHUxQTFFXFx1MUExRlxcdTFBQTAtXFx1MUFBNlxcdTFBQTgtXFx1MUFBRFxcdTFCNUEtXFx1MUI2MFxcdTFCRkMtXFx1MUJGRlxcdTFDM0ItXFx1MUMzRlxcdTFDN0VcXHUxQzdGXFx1MUNDMC1cXHUxQ0M3XFx1MUNEM1xcdTIwMTAtXFx1MjAyN1xcdTIwMzAtXFx1MjA0M1xcdTIwNDUtXFx1MjA1MVxcdTIwNTMtXFx1MjA1RVxcdTIwN0RcXHUyMDdFXFx1MjA4RFxcdTIwOEVcXHUyMzA4LVxcdTIzMEJcXHUyMzI5XFx1MjMyQVxcdTI3NjgtXFx1Mjc3NVxcdTI3QzVcXHUyN0M2XFx1MjdFNi1cXHUyN0VGXFx1Mjk4My1cXHUyOTk4XFx1MjlEOC1cXHUyOURCXFx1MjlGQ1xcdTI5RkRcXHUyQ0Y5LVxcdTJDRkNcXHUyQ0ZFXFx1MkNGRlxcdTJENzBcXHUyRTAwLVxcdTJFMkVcXHUyRTMwLVxcdTJFNEZcXHUyRTUyXFx1MzAwMS1cXHUzMDAzXFx1MzAwOC1cXHUzMDExXFx1MzAxNC1cXHUzMDFGXFx1MzAzMFxcdTMwM0RcXHUzMEEwXFx1MzBGQlxcdUE0RkVcXHVBNEZGXFx1QTYwRC1cXHVBNjBGXFx1QTY3M1xcdUE2N0VcXHVBNkYyLVxcdUE2RjdcXHVBODc0LVxcdUE4NzdcXHVBOENFXFx1QThDRlxcdUE4RjgtXFx1QThGQVxcdUE4RkNcXHVBOTJFXFx1QTkyRlxcdUE5NUZcXHVBOUMxLVxcdUE5Q0RcXHVBOURFXFx1QTlERlxcdUFBNUMtXFx1QUE1RlxcdUFBREVcXHVBQURGXFx1QUFGMFxcdUFBRjFcXHVBQkVCXFx1RkQzRVxcdUZEM0ZcXHVGRTEwLVxcdUZFMTlcXHVGRTMwLVxcdUZFNTJcXHVGRTU0LVxcdUZFNjFcXHVGRTYzXFx1RkU2OFxcdUZFNkFcXHVGRTZCXFx1RkYwMS1cXHVGRjAzXFx1RkYwNS1cXHVGRjBBXFx1RkYwQy1cXHVGRjBGXFx1RkYxQVxcdUZGMUJcXHVGRjFGXFx1RkYyMFxcdUZGM0ItXFx1RkYzRFxcdUZGM0ZcXHVGRjVCXFx1RkY1RFxcdUZGNUYtXFx1RkY2NV0vXG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ29kZX0gQ29kZVxuICovXG5pbXBvcnQge3VuaWNvZGVQdW5jdHVhdGlvblJlZ2V4fSBmcm9tICcuL2xpYi91bmljb2RlLXB1bmN0dWF0aW9uLXJlZ2V4LmpzJ1xuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHRoZSBjaGFyYWN0ZXIgY29kZSByZXByZXNlbnRzIGFuIEFTQ0lJIGFscGhhIChgYWAgdGhyb3VnaCBgemAsXG4gKiBjYXNlIGluc2Vuc2l0aXZlKS5cbiAqXG4gKiBBbiAqKkFTQ0lJIGFscGhhKiogaXMgYW4gQVNDSUkgdXBwZXIgYWxwaGEgb3IgQVNDSUkgbG93ZXIgYWxwaGEuXG4gKlxuICogQW4gKipBU0NJSSB1cHBlciBhbHBoYSoqIGlzIGEgY2hhcmFjdGVyIGluIHRoZSBpbmNsdXNpdmUgcmFuZ2UgVSswMDQxIChgQWApXG4gKiB0byBVKzAwNUEgKGBaYCkuXG4gKlxuICogQW4gKipBU0NJSSBsb3dlciBhbHBoYSoqIGlzIGEgY2hhcmFjdGVyIGluIHRoZSBpbmNsdXNpdmUgcmFuZ2UgVSswMDYxIChgYWApXG4gKiB0byBVKzAwN0EgKGB6YCkuXG4gKi9cblxuZXhwb3J0IGNvbnN0IGFzY2lpQWxwaGEgPSByZWdleENoZWNrKC9bQS1aYS16XS8pXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgdGhlIGNoYXJhY3RlciBjb2RlIHJlcHJlc2VudHMgYW4gQVNDSUkgZGlnaXQgKGAwYCB0aHJvdWdoIGA5YCkuXG4gKlxuICogQW4gKipBU0NJSSBkaWdpdCoqIGlzIGEgY2hhcmFjdGVyIGluIHRoZSBpbmNsdXNpdmUgcmFuZ2UgVSswMDMwIChgMGApIHRvXG4gKiBVKzAwMzkgKGA5YCkuXG4gKi9cblxuZXhwb3J0IGNvbnN0IGFzY2lpRGlnaXQgPSByZWdleENoZWNrKC9cXGQvKVxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHRoZSBjaGFyYWN0ZXIgY29kZSByZXByZXNlbnRzIGFuIEFTQ0lJIGhleCBkaWdpdCAoYGFgIHRocm91Z2hcbiAqIGBmYCwgY2FzZSBpbnNlbnNpdGl2ZSwgb3IgYDBgIHRocm91Z2ggYDlgKS5cbiAqXG4gKiBBbiAqKkFTQ0lJIGhleCBkaWdpdCoqIGlzIGFuIEFTQ0lJIGRpZ2l0IChzZWUgYGFzY2lpRGlnaXRgKSwgQVNDSUkgdXBwZXIgaGV4XG4gKiBkaWdpdCwgb3IgYW4gQVNDSUkgbG93ZXIgaGV4IGRpZ2l0LlxuICpcbiAqIEFuICoqQVNDSUkgdXBwZXIgaGV4IGRpZ2l0KiogaXMgYSBjaGFyYWN0ZXIgaW4gdGhlIGluY2x1c2l2ZSByYW5nZSBVKzAwNDFcbiAqIChgQWApIHRvIFUrMDA0NiAoYEZgKS5cbiAqXG4gKiBBbiAqKkFTQ0lJIGxvd2VyIGhleCBkaWdpdCoqIGlzIGEgY2hhcmFjdGVyIGluIHRoZSBpbmNsdXNpdmUgcmFuZ2UgVSswMDYxXG4gKiAoYGFgKSB0byBVKzAwNjYgKGBmYCkuXG4gKi9cblxuZXhwb3J0IGNvbnN0IGFzY2lpSGV4RGlnaXQgPSByZWdleENoZWNrKC9bXFxkQS1GYS1mXS8pXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgdGhlIGNoYXJhY3RlciBjb2RlIHJlcHJlc2VudHMgYW4gQVNDSUkgYWxwaGFudW1lcmljIChgYWBcbiAqIHRocm91Z2ggYHpgLCBjYXNlIGluc2Vuc2l0aXZlLCBvciBgMGAgdGhyb3VnaCBgOWApLlxuICpcbiAqIEFuICoqQVNDSUkgYWxwaGFudW1lcmljKiogaXMgYW4gQVNDSUkgZGlnaXQgKHNlZSBgYXNjaWlEaWdpdGApIG9yIEFTQ0lJIGFscGhhXG4gKiAoc2VlIGBhc2NpaUFscGhhYCkuXG4gKi9cblxuZXhwb3J0IGNvbnN0IGFzY2lpQWxwaGFudW1lcmljID0gcmVnZXhDaGVjaygvW1xcZEEtWmEtel0vKVxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHRoZSBjaGFyYWN0ZXIgY29kZSByZXByZXNlbnRzIEFTQ0lJIHB1bmN0dWF0aW9uLlxuICpcbiAqIEFuICoqQVNDSUkgcHVuY3R1YXRpb24qKiBpcyBhIGNoYXJhY3RlciBpbiB0aGUgaW5jbHVzaXZlIHJhbmdlcyBVKzAwMjFcbiAqIEVYQ0xBTUFUSU9OIE1BUksgKGAhYCkgdG8gVSswMDJGIFNMQVNIIChgL2ApLCBVKzAwM0EgQ09MT04gKGA6YCkgdG8gVSswMDQwIEFUXG4gKiBTSUdOIChgQGApLCBVKzAwNUIgTEVGVCBTUVVBUkUgQlJBQ0tFVCAoYFtgKSB0byBVKzAwNjAgR1JBVkUgQUNDRU5UXG4gKiAoYGAgYCBgYCksIG9yIFUrMDA3QiBMRUZUIENVUkxZIEJSQUNFIChge2ApIHRvIFUrMDA3RSBUSUxERSAoYH5gKS5cbiAqL1xuXG5leHBvcnQgY29uc3QgYXNjaWlQdW5jdHVhdGlvbiA9IHJlZ2V4Q2hlY2soL1shLS86LUBbLWB7LX5dLylcbi8qKlxuICogQ2hlY2sgd2hldGhlciB0aGUgY2hhcmFjdGVyIGNvZGUgcmVwcmVzZW50cyBhbiBBU0NJSSBhdGV4dC5cbiAqXG4gKiBhdGV4dCBpcyBhbiBBU0NJSSBhbHBoYW51bWVyaWMgKHNlZSBgYXNjaWlBbHBoYW51bWVyaWNgKSwgb3IgYSBjaGFyYWN0ZXIgaW5cbiAqIHRoZSBpbmNsdXNpdmUgcmFuZ2VzIFUrMDAyMyBOVU1CRVIgU0lHTiAoYCNgKSB0byBVKzAwMjcgQVBPU1RST1BIRSAoYCdgKSxcbiAqIFUrMDAyQSBBU1RFUklTSyAoYCpgKSwgVSswMDJCIFBMVVMgU0lHTiAoYCtgKSwgVSswMDJEIERBU0ggKGAtYCksIFUrMDAyRlxuICogU0xBU0ggKGAvYCksIFUrMDAzRCBFUVVBTFMgVE8gKGA9YCksIFUrMDAzRiBRVUVTVElPTiBNQVJLIChgP2ApLCBVKzAwNUVcbiAqIENBUkVUIChgXmApIHRvIFUrMDA2MCBHUkFWRSBBQ0NFTlQgKGBgIGAgYGApLCBvciBVKzAwN0IgTEVGVCBDVVJMWSBCUkFDRVxuICogKGB7YCkgdG8gVSswMDdFIFRJTERFIChgfmApLlxuICpcbiAqIFNlZTpcbiAqICoqXFxbUkZDNTMyMl0qKjpcbiAqIFtJbnRlcm5ldCBNZXNzYWdlIEZvcm1hdF0oaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzUzMjIpLlxuICogUC4gUmVzbmljay5cbiAqIElFVEYuXG4gKi9cblxuZXhwb3J0IGNvbnN0IGFzY2lpQXRleHQgPSByZWdleENoZWNrKC9bIy0nKitcXC0tOT0/QS1aXi1+XS8pXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgYSBjaGFyYWN0ZXIgY29kZSBpcyBhbiBBU0NJSSBjb250cm9sIGNoYXJhY3Rlci5cbiAqXG4gKiBBbiAqKkFTQ0lJIGNvbnRyb2wqKiBpcyBhIGNoYXJhY3RlciBpbiB0aGUgaW5jbHVzaXZlIHJhbmdlIFUrMDAwMCBOVUxMIChOVUwpXG4gKiB0byBVKzAwMUYgKFVTKSwgb3IgVSswMDdGIChERUwpLlxuICpcbiAqIEBwYXJhbSB7Q29kZX0gY29kZVxuICogQHJldHVybnMge2NvZGUgaXMgbnVtYmVyfVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhc2NpaUNvbnRyb2woY29kZSkge1xuICByZXR1cm4gKFxuICAgIC8vIFNwZWNpYWwgd2hpdGVzcGFjZSBjb2RlcyAod2hpY2ggaGF2ZSBuZWdhdGl2ZSB2YWx1ZXMpLCBDMCBhbmQgQ29udHJvbFxuICAgIC8vIGNoYXJhY3RlciBERUxcbiAgICBjb2RlICE9PSBudWxsICYmIChjb2RlIDwgMzIgfHwgY29kZSA9PT0gMTI3KVxuICApXG59XG4vKipcbiAqIENoZWNrIHdoZXRoZXIgYSBjaGFyYWN0ZXIgY29kZSBpcyBhIG1hcmtkb3duIGxpbmUgZW5kaW5nIChzZWVcbiAqIGBtYXJrZG93bkxpbmVFbmRpbmdgKSBvciBtYXJrZG93biBzcGFjZSAoc2VlIGBtYXJrZG93blNwYWNlYCkuXG4gKlxuICogQHBhcmFtIHtDb2RlfSBjb2RlXG4gKiBAcmV0dXJucyB7Y29kZSBpcyBudW1iZXJ9XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcmtkb3duTGluZUVuZGluZ09yU3BhY2UoY29kZSkge1xuICByZXR1cm4gY29kZSAhPT0gbnVsbCAmJiAoY29kZSA8IDAgfHwgY29kZSA9PT0gMzIpXG59XG4vKipcbiAqIENoZWNrIHdoZXRoZXIgYSBjaGFyYWN0ZXIgY29kZSBpcyBhIG1hcmtkb3duIGxpbmUgZW5kaW5nLlxuICpcbiAqIEEgKiptYXJrZG93biBsaW5lIGVuZGluZyoqIGlzIHRoZSB2aXJ0dWFsIGNoYXJhY3RlcnMgTS0wMDAzIENBUlJJQUdFIFJFVFVSTlxuICogTElORSBGRUVEIChDUkxGKSwgTS0wMDA0IExJTkUgRkVFRCAoTEYpIGFuZCBNLTAwMDUgQ0FSUklBR0UgUkVUVVJOIChDUikuXG4gKlxuICogSW4gbWljcm9tYXJrLCB0aGUgYWN0dWFsIGNoYXJhY3RlciBVKzAwMEEgTElORSBGRUVEIChMRikgYW5kIFUrMDAwRCBDQVJSSUFHRVxuICogUkVUVVJOIChDUikgYXJlIHJlcGxhY2VkIGJ5IHRoZXNlIHZpcnR1YWwgY2hhcmFjdGVycyBkZXBlbmRpbmcgb24gd2hldGhlclxuICogdGhleSBvY2N1cnJlZCB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge0NvZGV9IGNvZGVcbiAqIEByZXR1cm5zIHtjb2RlIGlzIG51bWJlcn1cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpIHtcbiAgcmV0dXJuIGNvZGUgIT09IG51bGwgJiYgY29kZSA8IC0yXG59XG4vKipcbiAqIENoZWNrIHdoZXRoZXIgYSBjaGFyYWN0ZXIgY29kZSBpcyBhIG1hcmtkb3duIHNwYWNlLlxuICpcbiAqIEEgKiptYXJrZG93biBzcGFjZSoqIGlzIHRoZSBjb25jcmV0ZSBjaGFyYWN0ZXIgVSswMDIwIFNQQUNFIChTUCkgYW5kIHRoZVxuICogdmlydHVhbCBjaGFyYWN0ZXJzIE0tMDAwMSBWSVJUVUFMIFNQQUNFIChWUykgYW5kIE0tMDAwMiBIT1JJWk9OVEFMIFRBQiAoSFQpLlxuICpcbiAqIEluIG1pY3JvbWFyaywgdGhlIGFjdHVhbCBjaGFyYWN0ZXIgVSswMDA5IENIQVJBQ1RFUiBUQUJVTEFUSU9OIChIVCkgaXNcbiAqIHJlcGxhY2VkIGJ5IG9uZSBNLTAwMDIgSE9SSVpPTlRBTCBUQUIgKEhUKSBhbmQgYmV0d2VlbiAwIGFuZCAzIE0tMDAwMSBWSVJUVUFMXG4gKiBTUEFDRSAoVlMpIGNoYXJhY3RlcnMsIGRlcGVuZGluZyBvbiB0aGUgY29sdW1uIGF0IHdoaWNoIHRoZSB0YWIgb2NjdXJyZWQuXG4gKlxuICogQHBhcmFtIHtDb2RlfSBjb2RlXG4gKiBAcmV0dXJucyB7Y29kZSBpcyBudW1iZXJ9XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcmtkb3duU3BhY2UoY29kZSkge1xuICByZXR1cm4gY29kZSA9PT0gLTIgfHwgY29kZSA9PT0gLTEgfHwgY29kZSA9PT0gMzJcbn1cbi8qKlxuICogQ2hlY2sgd2hldGhlciB0aGUgY2hhcmFjdGVyIGNvZGUgcmVwcmVzZW50cyBVbmljb2RlIHdoaXRlc3BhY2UuXG4gKlxuICogTm90ZSB0aGF0IHRoaXMgZG9lcyBoYW5kbGUgbWljcm9tYXJrIHNwZWNpZmljIG1hcmtkb3duIHdoaXRlc3BhY2UgY2hhcmFjdGVycy5cbiAqIFNlZSBgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZWAgdG8gY2hlY2sgdGhhdC5cbiAqXG4gKiBBICoqVW5pY29kZSB3aGl0ZXNwYWNlKiogaXMgYSBjaGFyYWN0ZXIgaW4gdGhlIFVuaWNvZGUgYFpzYCAoU2VwYXJhdG9yLFxuICogU3BhY2UpIGNhdGVnb3J5LCBvciBVKzAwMDkgQ0hBUkFDVEVSIFRBQlVMQVRJT04gKEhUKSwgVSswMDBBIExJTkUgRkVFRCAoTEYpLFxuICogVSswMDBDIChGRiksIG9yIFUrMDAwRCBDQVJSSUFHRSBSRVRVUk4gKENSKSAoKipcXFtVTklDT0RFXSoqKS5cbiAqXG4gKiBTZWU6XG4gKiAqKlxcW1VOSUNPREVdKio6XG4gKiBbVGhlIFVuaWNvZGUgU3RhbmRhcmRdKGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3ZlcnNpb25zLykuXG4gKiBVbmljb2RlIENvbnNvcnRpdW0uXG4gKi9cblxuZXhwb3J0IGNvbnN0IHVuaWNvZGVXaGl0ZXNwYWNlID0gcmVnZXhDaGVjaygvXFxzLylcbi8qKlxuICogQ2hlY2sgd2hldGhlciB0aGUgY2hhcmFjdGVyIGNvZGUgcmVwcmVzZW50cyBVbmljb2RlIHB1bmN0dWF0aW9uLlxuICpcbiAqIEEgKipVbmljb2RlIHB1bmN0dWF0aW9uKiogaXMgYSBjaGFyYWN0ZXIgaW4gdGhlIFVuaWNvZGUgYFBjYCAoUHVuY3R1YXRpb24sXG4gKiBDb25uZWN0b3IpLCBgUGRgIChQdW5jdHVhdGlvbiwgRGFzaCksIGBQZWAgKFB1bmN0dWF0aW9uLCBDbG9zZSksIGBQZmBcbiAqIChQdW5jdHVhdGlvbiwgRmluYWwgcXVvdGUpLCBgUGlgIChQdW5jdHVhdGlvbiwgSW5pdGlhbCBxdW90ZSksIGBQb2BcbiAqIChQdW5jdHVhdGlvbiwgT3RoZXIpLCBvciBgUHNgIChQdW5jdHVhdGlvbiwgT3BlbikgY2F0ZWdvcmllcywgb3IgYW4gQVNDSUlcbiAqIHB1bmN0dWF0aW9uIChzZWUgYGFzY2lpUHVuY3R1YXRpb25gKS5cbiAqXG4gKiBTZWU6XG4gKiAqKlxcW1VOSUNPREVdKio6XG4gKiBbVGhlIFVuaWNvZGUgU3RhbmRhcmRdKGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3ZlcnNpb25zLykuXG4gKiBVbmljb2RlIENvbnNvcnRpdW0uXG4gKi9cbi8vIFNpemUgbm90ZTogcmVtb3ZpbmcgQVNDSUkgZnJvbSB0aGUgcmVnZXggYW5kIHVzaW5nIGBhc2NpaVB1bmN0dWF0aW9uYCBoZXJlXG4vLyBJbiBmYWN0IGFkZHMgdG8gdGhlIGJ1bmRsZSBzaXplLlxuXG5leHBvcnQgY29uc3QgdW5pY29kZVB1bmN0dWF0aW9uID0gcmVnZXhDaGVjayh1bmljb2RlUHVuY3R1YXRpb25SZWdleClcbi8qKlxuICogQ3JlYXRlIGEgY29kZSBjaGVjayBmcm9tIGEgcmVnZXguXG4gKlxuICogQHBhcmFtIHtSZWdFeHB9IHJlZ2V4XG4gKiBAcmV0dXJucyB7KGNvZGU6IENvZGUpID0+IGNvZGUgaXMgbnVtYmVyfVxuICovXG5cbmZ1bmN0aW9uIHJlZ2V4Q2hlY2socmVnZXgpIHtcbiAgcmV0dXJuIGNoZWNrXG4gIC8qKlxuICAgKiBDaGVjayB3aGV0aGVyIGEgY29kZSBtYXRjaGVzIHRoZSBib3VuZCByZWdleC5cbiAgICpcbiAgICogQHBhcmFtIHtDb2RlfSBjb2RlIENoYXJhY3RlciBjb2RlXG4gICAqIEByZXR1cm5zIHtjb2RlIGlzIG51bWJlcn0gV2hldGhlciB0aGUgY2hhcmFjdGVyIGNvZGUgbWF0Y2hlcyB0aGUgYm91bmQgcmVnZXhcbiAgICovXG5cbiAgZnVuY3Rpb24gY2hlY2soY29kZSkge1xuICAgIHJldHVybiBjb2RlICE9PSBudWxsICYmIHJlZ2V4LnRlc3QoU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKSlcbiAgfVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkVmZmVjdHN9IEVmZmVjdHNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuU3RhdGV9IFN0YXRlXG4gKi9cbmltcG9ydCB7bWFya2Rvd25TcGFjZX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuLyoqXG4gKiBAcGFyYW0ge0VmZmVjdHN9IGVmZmVjdHNcbiAqIEBwYXJhbSB7U3RhdGV9IG9rXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtudW1iZXJ9IFttYXg9SW5maW5pdHldXG4gKiBAcmV0dXJucyB7U3RhdGV9XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZhY3RvcnlTcGFjZShlZmZlY3RzLCBvaywgdHlwZSwgbWF4KSB7XG4gIGNvbnN0IGxpbWl0ID0gbWF4ID8gbWF4IC0gMSA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWVxuICBsZXQgc2l6ZSA9IDBcbiAgcmV0dXJuIHN0YXJ0XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGlmIChtYXJrZG93blNwYWNlKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKHR5cGUpXG4gICAgICByZXR1cm4gcHJlZml4KGNvZGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIG9rKGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBwcmVmaXgoY29kZSkge1xuICAgIGlmIChtYXJrZG93blNwYWNlKGNvZGUpICYmIHNpemUrKyA8IGxpbWl0KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBwcmVmaXhcbiAgICB9XG5cbiAgICBlZmZlY3RzLmV4aXQodHlwZSlcbiAgICByZXR1cm4gb2soY29kZSlcbiAgfVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkluaXRpYWxDb25zdHJ1Y3R9IEluaXRpYWxDb25zdHJ1Y3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuSW5pdGlhbGl6ZXJ9IEluaXRpYWxpemVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlRva2VufSBUb2tlblxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuaW1wb3J0IHtmYWN0b3J5U3BhY2V9IGZyb20gJ21pY3JvbWFyay1mYWN0b3J5LXNwYWNlJ1xuaW1wb3J0IHttYXJrZG93bkxpbmVFbmRpbmd9IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3RlcidcblxuLyoqIEB0eXBlIHtJbml0aWFsQ29uc3RydWN0fSAqL1xuZXhwb3J0IGNvbnN0IGNvbnRlbnQgPSB7XG4gIHRva2VuaXplOiBpbml0aWFsaXplQ29udGVudFxufVxuLyoqIEB0eXBlIHtJbml0aWFsaXplcn0gKi9cblxuZnVuY3Rpb24gaW5pdGlhbGl6ZUNvbnRlbnQoZWZmZWN0cykge1xuICBjb25zdCBjb250ZW50U3RhcnQgPSBlZmZlY3RzLmF0dGVtcHQoXG4gICAgdGhpcy5wYXJzZXIuY29uc3RydWN0cy5jb250ZW50SW5pdGlhbCxcbiAgICBhZnRlckNvbnRlbnRTdGFydENvbnN0cnVjdCxcbiAgICBwYXJhZ3JhcGhJbml0aWFsXG4gIClcbiAgLyoqIEB0eXBlIHtUb2tlbn0gKi9cblxuICBsZXQgcHJldmlvdXNcbiAgcmV0dXJuIGNvbnRlbnRTdGFydFxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGFmdGVyQ29udGVudFN0YXJ0Q29uc3RydWN0KGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBlZmZlY3RzLmVudGVyKCdsaW5lRW5kaW5nJylcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICBlZmZlY3RzLmV4aXQoJ2xpbmVFbmRpbmcnKVxuICAgIHJldHVybiBmYWN0b3J5U3BhY2UoZWZmZWN0cywgY29udGVudFN0YXJ0LCAnbGluZVByZWZpeCcpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBwYXJhZ3JhcGhJbml0aWFsKGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKCdwYXJhZ3JhcGgnKVxuICAgIHJldHVybiBsaW5lU3RhcnQoY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGxpbmVTdGFydChjb2RlKSB7XG4gICAgY29uc3QgdG9rZW4gPSBlZmZlY3RzLmVudGVyKCdjaHVua1RleHQnLCB7XG4gICAgICBjb250ZW50VHlwZTogJ3RleHQnLFxuICAgICAgcHJldmlvdXNcbiAgICB9KVxuXG4gICAgaWYgKHByZXZpb3VzKSB7XG4gICAgICBwcmV2aW91cy5uZXh0ID0gdG9rZW5cbiAgICB9XG5cbiAgICBwcmV2aW91cyA9IHRva2VuXG4gICAgcmV0dXJuIGRhdGEoY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGRhdGEoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBudWxsKSB7XG4gICAgICBlZmZlY3RzLmV4aXQoJ2NodW5rVGV4dCcpXG4gICAgICBlZmZlY3RzLmV4aXQoJ3BhcmFncmFwaCcpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KCdjaHVua1RleHQnKVxuICAgICAgcmV0dXJuIGxpbmVTdGFydFxuICAgIH0gLy8gRGF0YS5cblxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiBkYXRhXG4gIH1cbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Jbml0aWFsQ29uc3RydWN0fSBJbml0aWFsQ29uc3RydWN0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkluaXRpYWxpemVyfSBJbml0aWFsaXplclxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db25zdHJ1Y3R9IENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbml6ZUNvbnRleHR9IFRva2VuaXplQ29udGV4dFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbml6ZXJ9IFRva2VuaXplclxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbn0gVG9rZW5cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuU3RhdGV9IFN0YXRlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlBvaW50fSBQb2ludFxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge1JlY29yZDxzdHJpbmcsIHVua25vd24+fSBTdGFja1N0YXRlXG4gKiBAdHlwZWRlZiB7W0NvbnN0cnVjdCwgU3RhY2tTdGF0ZV19IFN0YWNrSXRlbVxuICovXG5pbXBvcnQge2ZhY3RvcnlTcGFjZX0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UnXG5pbXBvcnQge21hcmtkb3duTGluZUVuZGluZ30gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuaW1wb3J0IHtzcGxpY2V9IGZyb20gJ21pY3JvbWFyay11dGlsLWNodW5rZWQnXG4vKiogQHR5cGUge0luaXRpYWxDb25zdHJ1Y3R9ICovXG5cbmV4cG9ydCBjb25zdCBkb2N1bWVudCA9IHtcbiAgdG9rZW5pemU6IGluaXRpYWxpemVEb2N1bWVudFxufVxuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5cbmNvbnN0IGNvbnRhaW5lckNvbnN0cnVjdCA9IHtcbiAgdG9rZW5pemU6IHRva2VuaXplQ29udGFpbmVyXG59XG4vKiogQHR5cGUge0luaXRpYWxpemVyfSAqL1xuXG5mdW5jdGlvbiBpbml0aWFsaXplRG9jdW1lbnQoZWZmZWN0cykge1xuICBjb25zdCBzZWxmID0gdGhpc1xuICAvKiogQHR5cGUge1N0YWNrSXRlbVtdfSAqL1xuXG4gIGNvbnN0IHN0YWNrID0gW11cbiAgbGV0IGNvbnRpbnVlZCA9IDBcbiAgLyoqIEB0eXBlIHtUb2tlbml6ZUNvbnRleHR8dW5kZWZpbmVkfSAqL1xuXG4gIGxldCBjaGlsZEZsb3dcbiAgLyoqIEB0eXBlIHtUb2tlbnx1bmRlZmluZWR9ICovXG5cbiAgbGV0IGNoaWxkVG9rZW5cbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG5cbiAgbGV0IGxpbmVTdGFydE9mZnNldFxuICByZXR1cm4gc3RhcnRcbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgLy8gRmlyc3Qgd2UgaXRlcmF0ZSB0aHJvdWdoIHRoZSBvcGVuIGJsb2Nrcywgc3RhcnRpbmcgd2l0aCB0aGUgcm9vdFxuICAgIC8vIGRvY3VtZW50LCBhbmQgZGVzY2VuZGluZyB0aHJvdWdoIGxhc3QgY2hpbGRyZW4gZG93biB0byB0aGUgbGFzdCBvcGVuXG4gICAgLy8gYmxvY2suXG4gICAgLy8gRWFjaCBibG9jayBpbXBvc2VzIGEgY29uZGl0aW9uIHRoYXQgdGhlIGxpbmUgbXVzdCBzYXRpc2Z5IGlmIHRoZSBibG9jayBpc1xuICAgIC8vIHRvIHJlbWFpbiBvcGVuLlxuICAgIC8vIEZvciBleGFtcGxlLCBhIGJsb2NrIHF1b3RlIHJlcXVpcmVzIGEgYD5gIGNoYXJhY3Rlci5cbiAgICAvLyBBIHBhcmFncmFwaCByZXF1aXJlcyBhIG5vbi1ibGFuayBsaW5lLlxuICAgIC8vIEluIHRoaXMgcGhhc2Ugd2UgbWF5IG1hdGNoIGFsbCBvciBqdXN0IHNvbWUgb2YgdGhlIG9wZW4gYmxvY2tzLlxuICAgIC8vIEJ1dCB3ZSBjYW5ub3QgY2xvc2UgdW5tYXRjaGVkIGJsb2NrcyB5ZXQsIGJlY2F1c2Ugd2UgbWF5IGhhdmUgYSBsYXp5XG4gICAgLy8gY29udGludWF0aW9uIGxpbmUuXG4gICAgaWYgKGNvbnRpbnVlZCA8IHN0YWNrLmxlbmd0aCkge1xuICAgICAgY29uc3QgaXRlbSA9IHN0YWNrW2NvbnRpbnVlZF1cbiAgICAgIHNlbGYuY29udGFpbmVyU3RhdGUgPSBpdGVtWzFdXG4gICAgICByZXR1cm4gZWZmZWN0cy5hdHRlbXB0KFxuICAgICAgICBpdGVtWzBdLmNvbnRpbnVhdGlvbixcbiAgICAgICAgZG9jdW1lbnRDb250aW51ZSxcbiAgICAgICAgY2hlY2tOZXdDb250YWluZXJzXG4gICAgICApKGNvZGUpXG4gICAgfSAvLyBEb25lLlxuXG4gICAgcmV0dXJuIGNoZWNrTmV3Q29udGFpbmVycyhjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gZG9jdW1lbnRDb250aW51ZShjb2RlKSB7XG4gICAgY29udGludWVkKysgLy8gTm90ZTogdGhpcyBmaWVsZCBpcyBjYWxsZWQgYF9jbG9zZUZsb3dgIGJ1dCBpdCBhbHNvIGNsb3NlcyBjb250YWluZXJzLlxuICAgIC8vIFBlcmhhcHMgYSBnb29kIGlkZWEgdG8gcmVuYW1lIGl0IGJ1dCBpdOKAmXMgYWxyZWFkeSB1c2VkIGluIHRoZSB3aWxkIGJ5XG4gICAgLy8gZXh0ZW5zaW9ucy5cblxuICAgIGlmIChzZWxmLmNvbnRhaW5lclN0YXRlLl9jbG9zZUZsb3cpIHtcbiAgICAgIHNlbGYuY29udGFpbmVyU3RhdGUuX2Nsb3NlRmxvdyA9IHVuZGVmaW5lZFxuXG4gICAgICBpZiAoY2hpbGRGbG93KSB7XG4gICAgICAgIGNsb3NlRmxvdygpXG4gICAgICB9IC8vIE5vdGU6IHRoaXMgYWxnb3JpdGhtIGZvciBtb3ZpbmcgZXZlbnRzIGFyb3VuZCBpcyBzaW1pbGFyIHRvIHRoZVxuICAgICAgLy8gYWxnb3JpdGhtIHdoZW4gZGVhbGluZyB3aXRoIGxhenkgbGluZXMgaW4gYHdyaXRlVG9DaGlsZGAuXG5cbiAgICAgIGNvbnN0IGluZGV4QmVmb3JlRXhpdHMgPSBzZWxmLmV2ZW50cy5sZW5ndGhcbiAgICAgIGxldCBpbmRleEJlZm9yZUZsb3cgPSBpbmRleEJlZm9yZUV4aXRzXG4gICAgICAvKiogQHR5cGUge1BvaW50fHVuZGVmaW5lZH0gKi9cblxuICAgICAgbGV0IHBvaW50IC8vIEZpbmQgdGhlIGZsb3cgY2h1bmsuXG5cbiAgICAgIHdoaWxlIChpbmRleEJlZm9yZUZsb3ctLSkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgc2VsZi5ldmVudHNbaW5kZXhCZWZvcmVGbG93XVswXSA9PT0gJ2V4aXQnICYmXG4gICAgICAgICAgc2VsZi5ldmVudHNbaW5kZXhCZWZvcmVGbG93XVsxXS50eXBlID09PSAnY2h1bmtGbG93J1xuICAgICAgICApIHtcbiAgICAgICAgICBwb2ludCA9IHNlbGYuZXZlbnRzW2luZGV4QmVmb3JlRmxvd11bMV0uZW5kXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBleGl0Q29udGFpbmVycyhjb250aW51ZWQpIC8vIEZpeCBwb3NpdGlvbnMuXG5cbiAgICAgIGxldCBpbmRleCA9IGluZGV4QmVmb3JlRXhpdHNcblxuICAgICAgd2hpbGUgKGluZGV4IDwgc2VsZi5ldmVudHMubGVuZ3RoKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzW2luZGV4XVsxXS5lbmQgPSBPYmplY3QuYXNzaWduKHt9LCBwb2ludClcbiAgICAgICAgaW5kZXgrK1xuICAgICAgfSAvLyBJbmplY3QgdGhlIGV4aXRzIGVhcmxpZXIgKHRoZXnigJlyZSBzdGlsbCBhbHNvIGF0IHRoZSBlbmQpLlxuXG4gICAgICBzcGxpY2UoXG4gICAgICAgIHNlbGYuZXZlbnRzLFxuICAgICAgICBpbmRleEJlZm9yZUZsb3cgKyAxLFxuICAgICAgICAwLFxuICAgICAgICBzZWxmLmV2ZW50cy5zbGljZShpbmRleEJlZm9yZUV4aXRzKVxuICAgICAgKSAvLyBEaXNjYXJkIHRoZSBkdXBsaWNhdGUgZXhpdHMuXG5cbiAgICAgIHNlbGYuZXZlbnRzLmxlbmd0aCA9IGluZGV4XG4gICAgICByZXR1cm4gY2hlY2tOZXdDb250YWluZXJzKGNvZGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIHN0YXJ0KGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBjaGVja05ld0NvbnRhaW5lcnMoY29kZSkge1xuICAgIC8vIE5leHQsIGFmdGVyIGNvbnN1bWluZyB0aGUgY29udGludWF0aW9uIG1hcmtlcnMgZm9yIGV4aXN0aW5nIGJsb2Nrcywgd2VcbiAgICAvLyBsb29rIGZvciBuZXcgYmxvY2sgc3RhcnRzIChlLmcuIGA+YCBmb3IgYSBibG9jayBxdW90ZSkuXG4gICAgLy8gSWYgd2UgZW5jb3VudGVyIGEgbmV3IGJsb2NrIHN0YXJ0LCB3ZSBjbG9zZSBhbnkgYmxvY2tzIHVubWF0Y2hlZCBpblxuICAgIC8vIHN0ZXAgMSBiZWZvcmUgY3JlYXRpbmcgdGhlIG5ldyBibG9jayBhcyBhIGNoaWxkIG9mIHRoZSBsYXN0IG1hdGNoZWRcbiAgICAvLyBibG9jay5cbiAgICBpZiAoY29udGludWVkID09PSBzdGFjay5sZW5ndGgpIHtcbiAgICAgIC8vIE5vIG5lZWQgdG8gYGNoZWNrYCB3aGV0aGVyIHRoZXJl4oCZcyBhIGNvbnRhaW5lciwgb2YgYGV4aXRDb250YWluZXJzYFxuICAgICAgLy8gd291bGQgYmUgbW9vdC5cbiAgICAgIC8vIFdlIGNhbiBpbnN0ZWFkIGltbWVkaWF0ZWx5IGBhdHRlbXB0YCB0byBwYXJzZSBvbmUuXG4gICAgICBpZiAoIWNoaWxkRmxvdykge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnRDb250aW51ZWQoY29kZSlcbiAgICAgIH0gLy8gSWYgd2UgaGF2ZSBjb25jcmV0ZSBjb250ZW50LCBzdWNoIGFzIGJsb2NrIEhUTUwgb3IgZmVuY2VkIGNvZGUsXG4gICAgICAvLyB3ZSBjYW7igJl0IGhhdmUgY29udGFpbmVycyDigJxwaWVyY2XigJ0gaW50byB0aGVtLCBzbyB3ZSBjYW4gaW1tZWRpYXRlbHlcbiAgICAgIC8vIHN0YXJ0LlxuXG4gICAgICBpZiAoY2hpbGRGbG93LmN1cnJlbnRDb25zdHJ1Y3QgJiYgY2hpbGRGbG93LmN1cnJlbnRDb25zdHJ1Y3QuY29uY3JldGUpIHtcbiAgICAgICAgcmV0dXJuIGZsb3dTdGFydChjb2RlKVxuICAgICAgfSAvLyBJZiB3ZSBkbyBoYXZlIGZsb3csIGl0IGNvdWxkIHN0aWxsIGJlIGEgYmxhbmsgbGluZSxcbiAgICAgIC8vIGJ1dCB3ZeKAmWQgYmUgaW50ZXJydXB0aW5nIGl0IHcvIGEgbmV3IGNvbnRhaW5lciBpZiB0aGVyZeKAmXMgYSBjdXJyZW50XG4gICAgICAvLyBjb25zdHJ1Y3QuXG5cbiAgICAgIHNlbGYuaW50ZXJydXB0ID0gQm9vbGVhbihjaGlsZEZsb3cuY3VycmVudENvbnN0cnVjdClcbiAgICB9IC8vIENoZWNrIGlmIHRoZXJlIGlzIGEgbmV3IGNvbnRhaW5lci5cblxuICAgIHNlbGYuY29udGFpbmVyU3RhdGUgPSB7fVxuICAgIHJldHVybiBlZmZlY3RzLmNoZWNrKFxuICAgICAgY29udGFpbmVyQ29uc3RydWN0LFxuICAgICAgdGhlcmVJc0FOZXdDb250YWluZXIsXG4gICAgICB0aGVyZUlzTm9OZXdDb250YWluZXJcbiAgICApKGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiB0aGVyZUlzQU5ld0NvbnRhaW5lcihjb2RlKSB7XG4gICAgaWYgKGNoaWxkRmxvdykgY2xvc2VGbG93KClcbiAgICBleGl0Q29udGFpbmVycyhjb250aW51ZWQpXG4gICAgcmV0dXJuIGRvY3VtZW50Q29udGludWVkKGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiB0aGVyZUlzTm9OZXdDb250YWluZXIoY29kZSkge1xuICAgIHNlbGYucGFyc2VyLmxhenlbc2VsZi5ub3coKS5saW5lXSA9IGNvbnRpbnVlZCAhPT0gc3RhY2subGVuZ3RoXG4gICAgbGluZVN0YXJ0T2Zmc2V0ID0gc2VsZi5ub3coKS5vZmZzZXRcbiAgICByZXR1cm4gZmxvd1N0YXJ0KGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBkb2N1bWVudENvbnRpbnVlZChjb2RlKSB7XG4gICAgLy8gVHJ5IG5ldyBjb250YWluZXJzLlxuICAgIHNlbGYuY29udGFpbmVyU3RhdGUgPSB7fVxuICAgIHJldHVybiBlZmZlY3RzLmF0dGVtcHQoXG4gICAgICBjb250YWluZXJDb25zdHJ1Y3QsXG4gICAgICBjb250YWluZXJDb250aW51ZSxcbiAgICAgIGZsb3dTdGFydFxuICAgICkoY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGNvbnRhaW5lckNvbnRpbnVlKGNvZGUpIHtcbiAgICBjb250aW51ZWQrK1xuICAgIHN0YWNrLnB1c2goW3NlbGYuY3VycmVudENvbnN0cnVjdCwgc2VsZi5jb250YWluZXJTdGF0ZV0pIC8vIFRyeSBhbm90aGVyLlxuXG4gICAgcmV0dXJuIGRvY3VtZW50Q29udGludWVkKGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBmbG93U3RhcnQoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBudWxsKSB7XG4gICAgICBpZiAoY2hpbGRGbG93KSBjbG9zZUZsb3coKVxuICAgICAgZXhpdENvbnRhaW5lcnMoMClcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY2hpbGRGbG93ID0gY2hpbGRGbG93IHx8IHNlbGYucGFyc2VyLmZsb3coc2VsZi5ub3coKSlcbiAgICBlZmZlY3RzLmVudGVyKCdjaHVua0Zsb3cnLCB7XG4gICAgICBjb250ZW50VHlwZTogJ2Zsb3cnLFxuICAgICAgcHJldmlvdXM6IGNoaWxkVG9rZW4sXG4gICAgICBfdG9rZW5pemVyOiBjaGlsZEZsb3dcbiAgICB9KVxuICAgIHJldHVybiBmbG93Q29udGludWUoY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGZsb3dDb250aW51ZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG51bGwpIHtcbiAgICAgIHdyaXRlVG9DaGlsZChlZmZlY3RzLmV4aXQoJ2NodW5rRmxvdycpLCB0cnVlKVxuICAgICAgZXhpdENvbnRhaW5lcnMoMClcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICB3cml0ZVRvQ2hpbGQoZWZmZWN0cy5leGl0KCdjaHVua0Zsb3cnKSkgLy8gR2V0IHJlYWR5IGZvciB0aGUgbmV4dCBsaW5lLlxuXG4gICAgICBjb250aW51ZWQgPSAwXG4gICAgICBzZWxmLmludGVycnVwdCA9IHVuZGVmaW5lZFxuICAgICAgcmV0dXJuIHN0YXJ0XG4gICAgfVxuXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIGZsb3dDb250aW51ZVxuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0ge1Rva2VufSB0b2tlblxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtlb2ZdXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cblxuICBmdW5jdGlvbiB3cml0ZVRvQ2hpbGQodG9rZW4sIGVvZikge1xuICAgIGNvbnN0IHN0cmVhbSA9IHNlbGYuc2xpY2VTdHJlYW0odG9rZW4pXG4gICAgaWYgKGVvZikgc3RyZWFtLnB1c2gobnVsbClcbiAgICB0b2tlbi5wcmV2aW91cyA9IGNoaWxkVG9rZW5cbiAgICBpZiAoY2hpbGRUb2tlbikgY2hpbGRUb2tlbi5uZXh0ID0gdG9rZW5cbiAgICBjaGlsZFRva2VuID0gdG9rZW5cbiAgICBjaGlsZEZsb3cuZGVmaW5lU2tpcCh0b2tlbi5zdGFydClcbiAgICBjaGlsZEZsb3cud3JpdGUoc3RyZWFtKSAvLyBBbHJpZ2h0LCBzbyB3ZSBqdXN0IGFkZGVkIGEgbGF6eSBsaW5lOlxuICAgIC8vXG4gICAgLy8gYGBgbWFya2Rvd25cbiAgICAvLyA+IGFcbiAgICAvLyBiLlxuICAgIC8vXG4gICAgLy8gT3I6XG4gICAgLy9cbiAgICAvLyA+IH5+fmNcbiAgICAvLyBkXG4gICAgLy9cbiAgICAvLyBPcjpcbiAgICAvL1xuICAgIC8vID4gfCBlIHxcbiAgICAvLyBmXG4gICAgLy8gYGBgXG4gICAgLy9cbiAgICAvLyBUaGUgY29uc3RydWN0IGluIHRoZSBzZWNvbmQgZXhhbXBsZSAoZmVuY2VkIGNvZGUpIGRvZXMgbm90IGFjY2VwdCBsYXp5XG4gICAgLy8gbGluZXMsIHNvIGl0IG1hcmtlZCBpdHNlbGYgYXMgZG9uZSBhdCB0aGUgZW5kIG9mIGl0cyBmaXJzdCBsaW5lLCBhbmRcbiAgICAvLyB0aGVuIHRoZSBjb250ZW50IGNvbnN0cnVjdCBwYXJzZXMgYGRgLlxuICAgIC8vIE1vc3QgY29uc3RydWN0cyBpbiBtYXJrZG93biBtYXRjaCBvbiB0aGUgZmlyc3QgbGluZTogaWYgdGhlIGZpcnN0IGxpbmVcbiAgICAvLyBmb3JtcyBhIGNvbnN0cnVjdCwgYSBub24tbGF6eSBsaW5lIGNhbuKAmXQg4oCcdW5tYWtl4oCdIGl0LlxuICAgIC8vXG4gICAgLy8gVGhlIGNvbnN0cnVjdCBpbiB0aGUgdGhpcmQgZXhhbXBsZSBpcyBwb3RlbnRpYWxseSBhIEdGTSB0YWJsZSwgYW5kXG4gICAgLy8gdGhvc2UgYXJlICp3ZWlyZCouXG4gICAgLy8gSXQgKmNvdWxkKiBiZSBhIHRhYmxlLCBmcm9tIHRoZSBmaXJzdCBsaW5lLCBpZiB0aGUgZm9sbG93aW5nIGxpbmVcbiAgICAvLyBtYXRjaGVzIGEgY29uZGl0aW9uLlxuICAgIC8vIEluIHRoaXMgY2FzZSwgdGhhdCBzZWNvbmQgbGluZSBpcyBsYXp5LCB3aGljaCDigJx1bm1ha2Vz4oCdIHRoZSBmaXJzdCBsaW5lXG4gICAgLy8gYW5kIHR1cm5zIHRoZSB3aG9sZSBpbnRvIG9uZSBjb250ZW50IGJsb2NrLlxuICAgIC8vXG4gICAgLy8gV2XigJl2ZSBub3cgcGFyc2VkIHRoZSBub24tbGF6eSBhbmQgdGhlIGxhenkgbGluZSwgYW5kIGNhbiBmaWd1cmUgb3V0XG4gICAgLy8gd2hldGhlciB0aGUgbGF6eSBsaW5lIHN0YXJ0ZWQgYSBuZXcgZmxvdyBibG9jay5cbiAgICAvLyBJZiBpdCBkaWQsIHdlIGV4aXQgdGhlIGN1cnJlbnQgY29udGFpbmVycyBiZXR3ZWVuIHRoZSB0d28gZmxvdyBibG9ja3MuXG5cbiAgICBpZiAoc2VsZi5wYXJzZXIubGF6eVt0b2tlbi5zdGFydC5saW5lXSkge1xuICAgICAgbGV0IGluZGV4ID0gY2hpbGRGbG93LmV2ZW50cy5sZW5ndGhcblxuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIC8vIFRoZSB0b2tlbiBzdGFydHMgYmVmb3JlIHRoZSBsaW5lIGVuZGluZ+KAplxuICAgICAgICAgIGNoaWxkRmxvdy5ldmVudHNbaW5kZXhdWzFdLnN0YXJ0Lm9mZnNldCA8IGxpbmVTdGFydE9mZnNldCAmJlxuICAgICAgICAgICghY2hpbGRGbG93LmV2ZW50c1tpbmRleF1bMV0uZW5kIHx8IC8vIOKApm9yIGVuZHMgYWZ0ZXIgaXQuXG4gICAgICAgICAgICBjaGlsZEZsb3cuZXZlbnRzW2luZGV4XVsxXS5lbmQub2Zmc2V0ID4gbGluZVN0YXJ0T2Zmc2V0KVxuICAgICAgICApIHtcbiAgICAgICAgICAvLyBFeGl0OiB0aGVyZeKAmXMgc3RpbGwgc29tZXRoaW5nIG9wZW4sIHdoaWNoIG1lYW5zIGl04oCZcyBhIGxhenkgbGluZVxuICAgICAgICAgIC8vIHBhcnQgb2Ygc29tZXRoaW5nLlxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICB9IC8vIE5vdGU6IHRoaXMgYWxnb3JpdGhtIGZvciBtb3ZpbmcgZXZlbnRzIGFyb3VuZCBpcyBzaW1pbGFyIHRvIHRoZVxuICAgICAgLy8gYWxnb3JpdGhtIHdoZW4gY2xvc2luZyBmbG93IGluIGBkb2N1bWVudENvbnRpbnVlYC5cblxuICAgICAgY29uc3QgaW5kZXhCZWZvcmVFeGl0cyA9IHNlbGYuZXZlbnRzLmxlbmd0aFxuICAgICAgbGV0IGluZGV4QmVmb3JlRmxvdyA9IGluZGV4QmVmb3JlRXhpdHNcbiAgICAgIC8qKiBAdHlwZSB7Ym9vbGVhbnx1bmRlZmluZWR9ICovXG5cbiAgICAgIGxldCBzZWVuXG4gICAgICAvKiogQHR5cGUge1BvaW50fHVuZGVmaW5lZH0gKi9cblxuICAgICAgbGV0IHBvaW50IC8vIEZpbmQgdGhlIHByZXZpb3VzIGNodW5rICh0aGUgb25lIGJlZm9yZSB0aGUgbGF6eSBsaW5lKS5cblxuICAgICAgd2hpbGUgKGluZGV4QmVmb3JlRmxvdy0tKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBzZWxmLmV2ZW50c1tpbmRleEJlZm9yZUZsb3ddWzBdID09PSAnZXhpdCcgJiZcbiAgICAgICAgICBzZWxmLmV2ZW50c1tpbmRleEJlZm9yZUZsb3ddWzFdLnR5cGUgPT09ICdjaHVua0Zsb3cnXG4gICAgICAgICkge1xuICAgICAgICAgIGlmIChzZWVuKSB7XG4gICAgICAgICAgICBwb2ludCA9IHNlbGYuZXZlbnRzW2luZGV4QmVmb3JlRmxvd11bMV0uZW5kXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNlZW4gPSB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZXhpdENvbnRhaW5lcnMoY29udGludWVkKSAvLyBGaXggcG9zaXRpb25zLlxuXG4gICAgICBpbmRleCA9IGluZGV4QmVmb3JlRXhpdHNcblxuICAgICAgd2hpbGUgKGluZGV4IDwgc2VsZi5ldmVudHMubGVuZ3RoKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzW2luZGV4XVsxXS5lbmQgPSBPYmplY3QuYXNzaWduKHt9LCBwb2ludClcbiAgICAgICAgaW5kZXgrK1xuICAgICAgfSAvLyBJbmplY3QgdGhlIGV4aXRzIGVhcmxpZXIgKHRoZXnigJlyZSBzdGlsbCBhbHNvIGF0IHRoZSBlbmQpLlxuXG4gICAgICBzcGxpY2UoXG4gICAgICAgIHNlbGYuZXZlbnRzLFxuICAgICAgICBpbmRleEJlZm9yZUZsb3cgKyAxLFxuICAgICAgICAwLFxuICAgICAgICBzZWxmLmV2ZW50cy5zbGljZShpbmRleEJlZm9yZUV4aXRzKVxuICAgICAgKSAvLyBEaXNjYXJkIHRoZSBkdXBsaWNhdGUgZXhpdHMuXG5cbiAgICAgIHNlbGYuZXZlbnRzLmxlbmd0aCA9IGluZGV4XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2l6ZVxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG5cbiAgZnVuY3Rpb24gZXhpdENvbnRhaW5lcnMoc2l6ZSkge1xuICAgIGxldCBpbmRleCA9IHN0YWNrLmxlbmd0aCAvLyBFeGl0IG9wZW4gY29udGFpbmVycy5cblxuICAgIHdoaWxlIChpbmRleC0tID4gc2l6ZSkge1xuICAgICAgY29uc3QgZW50cnkgPSBzdGFja1tpbmRleF1cbiAgICAgIHNlbGYuY29udGFpbmVyU3RhdGUgPSBlbnRyeVsxXVxuICAgICAgZW50cnlbMF0uZXhpdC5jYWxsKHNlbGYsIGVmZmVjdHMpXG4gICAgfVxuXG4gICAgc3RhY2subGVuZ3RoID0gc2l6ZVxuICB9XG5cbiAgZnVuY3Rpb24gY2xvc2VGbG93KCkge1xuICAgIGNoaWxkRmxvdy53cml0ZShbbnVsbF0pXG4gICAgY2hpbGRUb2tlbiA9IHVuZGVmaW5lZFxuICAgIGNoaWxkRmxvdyA9IHVuZGVmaW5lZFxuICAgIHNlbGYuY29udGFpbmVyU3RhdGUuX2Nsb3NlRmxvdyA9IHVuZGVmaW5lZFxuICB9XG59XG4vKiogQHR5cGUge1Rva2VuaXplcn0gKi9cblxuZnVuY3Rpb24gdG9rZW5pemVDb250YWluZXIoZWZmZWN0cywgb2ssIG5vaykge1xuICByZXR1cm4gZmFjdG9yeVNwYWNlKFxuICAgIGVmZmVjdHMsXG4gICAgZWZmZWN0cy5hdHRlbXB0KHRoaXMucGFyc2VyLmNvbnN0cnVjdHMuZG9jdW1lbnQsIG9rLCBub2spLFxuICAgICdsaW5lUHJlZml4JyxcbiAgICB0aGlzLnBhcnNlci5jb25zdHJ1Y3RzLmRpc2FibGUubnVsbC5pbmNsdWRlcygnY29kZUluZGVudGVkJykgPyB1bmRlZmluZWQgOiA0XG4gIClcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db25zdHJ1Y3R9IENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbml6ZXJ9IFRva2VuaXplclxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuaW1wb3J0IHtmYWN0b3J5U3BhY2V9IGZyb20gJ21pY3JvbWFyay1mYWN0b3J5LXNwYWNlJ1xuaW1wb3J0IHttYXJrZG93bkxpbmVFbmRpbmd9IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3RlcidcblxuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5leHBvcnQgY29uc3QgYmxhbmtMaW5lID0ge1xuICB0b2tlbml6ZTogdG9rZW5pemVCbGFua0xpbmUsXG4gIHBhcnRpYWw6IHRydWVcbn1cbi8qKiBAdHlwZSB7VG9rZW5pemVyfSAqL1xuXG5mdW5jdGlvbiB0b2tlbml6ZUJsYW5rTGluZShlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHJldHVybiBmYWN0b3J5U3BhY2UoZWZmZWN0cywgYWZ0ZXJXaGl0ZXNwYWNlLCAnbGluZVByZWZpeCcpXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gYWZ0ZXJXaGl0ZXNwYWNlKGNvZGUpIHtcbiAgICByZXR1cm4gY29kZSA9PT0gbnVsbCB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkgPyBvayhjb2RlKSA6IG5vayhjb2RlKVxuICB9XG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuVG9rZW59IFRva2VuXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkNodW5rfSBDaHVua1xuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5FdmVudH0gRXZlbnRcbiAqL1xuaW1wb3J0IHtzcGxpY2V9IGZyb20gJ21pY3JvbWFyay11dGlsLWNodW5rZWQnXG5cbi8qKlxuICogVG9rZW5pemUgc3ViY29udGVudC5cbiAqXG4gKiBAcGFyYW0ge0V2ZW50W119IGV2ZW50c1xuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdWJ0b2tlbml6ZShldmVudHMpIHtcbiAgLyoqIEB0eXBlIHtSZWNvcmQ8c3RyaW5nLCBudW1iZXI+fSAqL1xuICBjb25zdCBqdW1wcyA9IHt9XG4gIGxldCBpbmRleCA9IC0xXG4gIC8qKiBAdHlwZSB7RXZlbnR9ICovXG5cbiAgbGV0IGV2ZW50XG4gIC8qKiBAdHlwZSB7bnVtYmVyfHVuZGVmaW5lZH0gKi9cblxuICBsZXQgbGluZUluZGV4XG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuXG4gIGxldCBvdGhlckluZGV4XG4gIC8qKiBAdHlwZSB7RXZlbnR9ICovXG5cbiAgbGV0IG90aGVyRXZlbnRcbiAgLyoqIEB0eXBlIHtFdmVudFtdfSAqL1xuXG4gIGxldCBwYXJhbWV0ZXJzXG4gIC8qKiBAdHlwZSB7RXZlbnRbXX0gKi9cblxuICBsZXQgc3ViZXZlbnRzXG4gIC8qKiBAdHlwZSB7Ym9vbGVhbnx1bmRlZmluZWR9ICovXG5cbiAgbGV0IG1vcmVcblxuICB3aGlsZSAoKytpbmRleCA8IGV2ZW50cy5sZW5ndGgpIHtcbiAgICB3aGlsZSAoaW5kZXggaW4ganVtcHMpIHtcbiAgICAgIGluZGV4ID0ganVtcHNbaW5kZXhdXG4gICAgfVxuXG4gICAgZXZlbnQgPSBldmVudHNbaW5kZXhdIC8vIEFkZCBhIGhvb2sgZm9yIHRoZSBHRk0gdGFza2xpc3QgZXh0ZW5zaW9uLCB3aGljaCBuZWVkcyB0byBrbm93IGlmIHRleHRcbiAgICAvLyBpcyBpbiB0aGUgZmlyc3QgY29udGVudCBvZiBhIGxpc3QgaXRlbS5cblxuICAgIGlmIChcbiAgICAgIGluZGV4ICYmXG4gICAgICBldmVudFsxXS50eXBlID09PSAnY2h1bmtGbG93JyAmJlxuICAgICAgZXZlbnRzW2luZGV4IC0gMV1bMV0udHlwZSA9PT0gJ2xpc3RJdGVtUHJlZml4J1xuICAgICkge1xuICAgICAgc3ViZXZlbnRzID0gZXZlbnRbMV0uX3Rva2VuaXplci5ldmVudHNcbiAgICAgIG90aGVySW5kZXggPSAwXG5cbiAgICAgIGlmIChcbiAgICAgICAgb3RoZXJJbmRleCA8IHN1YmV2ZW50cy5sZW5ndGggJiZcbiAgICAgICAgc3ViZXZlbnRzW290aGVySW5kZXhdWzFdLnR5cGUgPT09ICdsaW5lRW5kaW5nQmxhbmsnXG4gICAgICApIHtcbiAgICAgICAgb3RoZXJJbmRleCArPSAyXG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgb3RoZXJJbmRleCA8IHN1YmV2ZW50cy5sZW5ndGggJiZcbiAgICAgICAgc3ViZXZlbnRzW290aGVySW5kZXhdWzFdLnR5cGUgPT09ICdjb250ZW50J1xuICAgICAgKSB7XG4gICAgICAgIHdoaWxlICgrK290aGVySW5kZXggPCBzdWJldmVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKHN1YmV2ZW50c1tvdGhlckluZGV4XVsxXS50eXBlID09PSAnY29udGVudCcpIHtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHN1YmV2ZW50c1tvdGhlckluZGV4XVsxXS50eXBlID09PSAnY2h1bmtUZXh0Jykge1xuICAgICAgICAgICAgc3ViZXZlbnRzW290aGVySW5kZXhdWzFdLl9pc0luRmlyc3RDb250ZW50T2ZMaXN0SXRlbSA9IHRydWVcbiAgICAgICAgICAgIG90aGVySW5kZXgrK1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gLy8gRW50ZXIuXG5cbiAgICBpZiAoZXZlbnRbMF0gPT09ICdlbnRlcicpIHtcbiAgICAgIGlmIChldmVudFsxXS5jb250ZW50VHlwZSkge1xuICAgICAgICBPYmplY3QuYXNzaWduKGp1bXBzLCBzdWJjb250ZW50KGV2ZW50cywgaW5kZXgpKVxuICAgICAgICBpbmRleCA9IGp1bXBzW2luZGV4XVxuICAgICAgICBtb3JlID0gdHJ1ZVxuICAgICAgfVxuICAgIH0gLy8gRXhpdC5cbiAgICBlbHNlIGlmIChldmVudFsxXS5fY29udGFpbmVyKSB7XG4gICAgICBvdGhlckluZGV4ID0gaW5kZXhcbiAgICAgIGxpbmVJbmRleCA9IHVuZGVmaW5lZFxuXG4gICAgICB3aGlsZSAob3RoZXJJbmRleC0tKSB7XG4gICAgICAgIG90aGVyRXZlbnQgPSBldmVudHNbb3RoZXJJbmRleF1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgb3RoZXJFdmVudFsxXS50eXBlID09PSAnbGluZUVuZGluZycgfHxcbiAgICAgICAgICBvdGhlckV2ZW50WzFdLnR5cGUgPT09ICdsaW5lRW5kaW5nQmxhbmsnXG4gICAgICAgICkge1xuICAgICAgICAgIGlmIChvdGhlckV2ZW50WzBdID09PSAnZW50ZXInKSB7XG4gICAgICAgICAgICBpZiAobGluZUluZGV4KSB7XG4gICAgICAgICAgICAgIGV2ZW50c1tsaW5lSW5kZXhdWzFdLnR5cGUgPSAnbGluZUVuZGluZ0JsYW5rJ1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvdGhlckV2ZW50WzFdLnR5cGUgPSAnbGluZUVuZGluZydcbiAgICAgICAgICAgIGxpbmVJbmRleCA9IG90aGVySW5kZXhcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobGluZUluZGV4KSB7XG4gICAgICAgIC8vIEZpeCBwb3NpdGlvbi5cbiAgICAgICAgZXZlbnRbMV0uZW5kID0gT2JqZWN0LmFzc2lnbih7fSwgZXZlbnRzW2xpbmVJbmRleF1bMV0uc3RhcnQpIC8vIFN3aXRjaCBjb250YWluZXIgZXhpdCB3LyBsaW5lIGVuZGluZ3MuXG5cbiAgICAgICAgcGFyYW1ldGVycyA9IGV2ZW50cy5zbGljZShsaW5lSW5kZXgsIGluZGV4KVxuICAgICAgICBwYXJhbWV0ZXJzLnVuc2hpZnQoZXZlbnQpXG4gICAgICAgIHNwbGljZShldmVudHMsIGxpbmVJbmRleCwgaW5kZXggLSBsaW5lSW5kZXggKyAxLCBwYXJhbWV0ZXJzKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAhbW9yZVxufVxuLyoqXG4gKiBUb2tlbml6ZSBlbWJlZGRlZCB0b2tlbnMuXG4gKlxuICogQHBhcmFtIHtFdmVudFtdfSBldmVudHNcbiAqIEBwYXJhbSB7bnVtYmVyfSBldmVudEluZGV4XG4gKiBAcmV0dXJucyB7UmVjb3JkPHN0cmluZywgbnVtYmVyPn1cbiAqL1xuXG5mdW5jdGlvbiBzdWJjb250ZW50KGV2ZW50cywgZXZlbnRJbmRleCkge1xuICBjb25zdCB0b2tlbiA9IGV2ZW50c1tldmVudEluZGV4XVsxXVxuICBjb25zdCBjb250ZXh0ID0gZXZlbnRzW2V2ZW50SW5kZXhdWzJdXG4gIGxldCBzdGFydFBvc2l0aW9uID0gZXZlbnRJbmRleCAtIDFcbiAgLyoqIEB0eXBlIHtudW1iZXJbXX0gKi9cblxuICBjb25zdCBzdGFydFBvc2l0aW9ucyA9IFtdXG4gIGNvbnN0IHRva2VuaXplciA9XG4gICAgdG9rZW4uX3Rva2VuaXplciB8fCBjb250ZXh0LnBhcnNlclt0b2tlbi5jb250ZW50VHlwZV0odG9rZW4uc3RhcnQpXG4gIGNvbnN0IGNoaWxkRXZlbnRzID0gdG9rZW5pemVyLmV2ZW50c1xuICAvKiogQHR5cGUge1tudW1iZXIsIG51bWJlcl1bXX0gKi9cblxuICBjb25zdCBqdW1wcyA9IFtdXG4gIC8qKiBAdHlwZSB7UmVjb3JkPHN0cmluZywgbnVtYmVyPn0gKi9cblxuICBjb25zdCBnYXBzID0ge31cbiAgLyoqIEB0eXBlIHtDaHVua1tdfSAqL1xuXG4gIGxldCBzdHJlYW1cbiAgLyoqIEB0eXBlIHtUb2tlbnx1bmRlZmluZWR9ICovXG5cbiAgbGV0IHByZXZpb3VzXG4gIGxldCBpbmRleCA9IC0xXG4gIC8qKiBAdHlwZSB7VG9rZW58dW5kZWZpbmVkfSAqL1xuXG4gIGxldCBjdXJyZW50ID0gdG9rZW5cbiAgbGV0IGFkanVzdCA9IDBcbiAgbGV0IHN0YXJ0ID0gMFxuICBjb25zdCBicmVha3MgPSBbc3RhcnRdIC8vIExvb3AgZm9yd2FyZCB0aHJvdWdoIHRoZSBsaW5rZWQgdG9rZW5zIHRvIHBhc3MgdGhlbSBpbiBvcmRlciB0byB0aGVcbiAgLy8gc3VidG9rZW5pemVyLlxuXG4gIHdoaWxlIChjdXJyZW50KSB7XG4gICAgLy8gRmluZCB0aGUgcG9zaXRpb24gb2YgdGhlIGV2ZW50IGZvciB0aGlzIHRva2VuLlxuICAgIHdoaWxlIChldmVudHNbKytzdGFydFBvc2l0aW9uXVsxXSAhPT0gY3VycmVudCkge1xuICAgICAgLy8gRW1wdHkuXG4gICAgfVxuXG4gICAgc3RhcnRQb3NpdGlvbnMucHVzaChzdGFydFBvc2l0aW9uKVxuXG4gICAgaWYgKCFjdXJyZW50Ll90b2tlbml6ZXIpIHtcbiAgICAgIHN0cmVhbSA9IGNvbnRleHQuc2xpY2VTdHJlYW0oY3VycmVudClcblxuICAgICAgaWYgKCFjdXJyZW50Lm5leHQpIHtcbiAgICAgICAgc3RyZWFtLnB1c2gobnVsbClcbiAgICAgIH1cblxuICAgICAgaWYgKHByZXZpb3VzKSB7XG4gICAgICAgIHRva2VuaXplci5kZWZpbmVTa2lwKGN1cnJlbnQuc3RhcnQpXG4gICAgICB9XG5cbiAgICAgIGlmIChjdXJyZW50Ll9pc0luRmlyc3RDb250ZW50T2ZMaXN0SXRlbSkge1xuICAgICAgICB0b2tlbml6ZXIuX2dmbVRhc2tsaXN0Rmlyc3RDb250ZW50T2ZMaXN0SXRlbSA9IHRydWVcbiAgICAgIH1cblxuICAgICAgdG9rZW5pemVyLndyaXRlKHN0cmVhbSlcblxuICAgICAgaWYgKGN1cnJlbnQuX2lzSW5GaXJzdENvbnRlbnRPZkxpc3RJdGVtKSB7XG4gICAgICAgIHRva2VuaXplci5fZ2ZtVGFza2xpc3RGaXJzdENvbnRlbnRPZkxpc3RJdGVtID0gdW5kZWZpbmVkXG4gICAgICB9XG4gICAgfSAvLyBVbnJhdmVsIHRoZSBuZXh0IHRva2VuLlxuXG4gICAgcHJldmlvdXMgPSBjdXJyZW50XG4gICAgY3VycmVudCA9IGN1cnJlbnQubmV4dFxuICB9IC8vIE5vdywgbG9vcCBiYWNrIHRocm91Z2ggYWxsIGV2ZW50cyAoYW5kIGxpbmtlZCB0b2tlbnMpLCB0byBmaWd1cmUgb3V0IHdoaWNoXG4gIC8vIHBhcnRzIGJlbG9uZyB3aGVyZS5cblxuICBjdXJyZW50ID0gdG9rZW5cblxuICB3aGlsZSAoKytpbmRleCA8IGNoaWxkRXZlbnRzLmxlbmd0aCkge1xuICAgIGlmIChcbiAgICAgIC8vIEZpbmQgYSB2b2lkIHRva2VuIHRoYXQgaW5jbHVkZXMgYSBicmVhay5cbiAgICAgIGNoaWxkRXZlbnRzW2luZGV4XVswXSA9PT0gJ2V4aXQnICYmXG4gICAgICBjaGlsZEV2ZW50c1tpbmRleCAtIDFdWzBdID09PSAnZW50ZXInICYmXG4gICAgICBjaGlsZEV2ZW50c1tpbmRleF1bMV0udHlwZSA9PT0gY2hpbGRFdmVudHNbaW5kZXggLSAxXVsxXS50eXBlICYmXG4gICAgICBjaGlsZEV2ZW50c1tpbmRleF1bMV0uc3RhcnQubGluZSAhPT0gY2hpbGRFdmVudHNbaW5kZXhdWzFdLmVuZC5saW5lXG4gICAgKSB7XG4gICAgICBzdGFydCA9IGluZGV4ICsgMVxuICAgICAgYnJlYWtzLnB1c2goc3RhcnQpIC8vIEhlbHAgR0MuXG5cbiAgICAgIGN1cnJlbnQuX3Rva2VuaXplciA9IHVuZGVmaW5lZFxuICAgICAgY3VycmVudC5wcmV2aW91cyA9IHVuZGVmaW5lZFxuICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dFxuICAgIH1cbiAgfSAvLyBIZWxwIEdDLlxuXG4gIHRva2VuaXplci5ldmVudHMgPSBbXSAvLyBJZiB0aGVyZeKAmXMgb25lIG1vcmUgdG9rZW4gKHdoaWNoIGlzIHRoZSBjYXNlcyBmb3IgbGluZXMgdGhhdCBlbmQgaW4gYW5cbiAgLy8gRU9GKSwgdGhhdOKAmXMgcGVyZmVjdDogdGhlIGxhc3QgcG9pbnQgd2UgZm91bmQgc3RhcnRzIGl0LlxuICAvLyBJZiB0aGVyZSBpc27igJl0IHRoZW4gbWFrZSBzdXJlIGFueSByZW1haW5pbmcgY29udGVudCBpcyBhZGRlZCB0byBpdC5cblxuICBpZiAoY3VycmVudCkge1xuICAgIC8vIEhlbHAgR0MuXG4gICAgY3VycmVudC5fdG9rZW5pemVyID0gdW5kZWZpbmVkXG4gICAgY3VycmVudC5wcmV2aW91cyA9IHVuZGVmaW5lZFxuICB9IGVsc2Uge1xuICAgIGJyZWFrcy5wb3AoKVxuICB9IC8vIE5vdyBzcGxpY2UgdGhlIGV2ZW50cyBmcm9tIHRoZSBzdWJ0b2tlbml6ZXIgaW50byB0aGUgY3VycmVudCBldmVudHMsXG4gIC8vIG1vdmluZyBiYWNrIHRvIGZyb250IHNvIHRoYXQgc3BsaWNlIGluZGljZXMgYXJlbuKAmXQgYWZmZWN0ZWQuXG5cbiAgaW5kZXggPSBicmVha3MubGVuZ3RoXG5cbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICBjb25zdCBzbGljZSA9IGNoaWxkRXZlbnRzLnNsaWNlKGJyZWFrc1tpbmRleF0sIGJyZWFrc1tpbmRleCArIDFdKVxuICAgIGNvbnN0IHN0YXJ0ID0gc3RhcnRQb3NpdGlvbnMucG9wKClcbiAgICBqdW1wcy51bnNoaWZ0KFtzdGFydCwgc3RhcnQgKyBzbGljZS5sZW5ndGggLSAxXSlcbiAgICBzcGxpY2UoZXZlbnRzLCBzdGFydCwgMiwgc2xpY2UpXG4gIH1cblxuICBpbmRleCA9IC0xXG5cbiAgd2hpbGUgKCsraW5kZXggPCBqdW1wcy5sZW5ndGgpIHtcbiAgICBnYXBzW2FkanVzdCArIGp1bXBzW2luZGV4XVswXV0gPSBhZGp1c3QgKyBqdW1wc1tpbmRleF1bMV1cbiAgICBhZGp1c3QgKz0ganVtcHNbaW5kZXhdWzFdIC0ganVtcHNbaW5kZXhdWzBdIC0gMVxuICB9XG5cbiAgcmV0dXJuIGdhcHNcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db25zdHJ1Y3R9IENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5SZXNvbHZlcn0gUmVzb2x2ZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuVG9rZW5pemVyfSBUb2tlbml6ZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuVG9rZW59IFRva2VuXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlN0YXRlfSBTdGF0ZVxuICovXG5pbXBvcnQge2ZhY3RvcnlTcGFjZX0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UnXG5pbXBvcnQge21hcmtkb3duTGluZUVuZGluZ30gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuaW1wb3J0IHtzdWJ0b2tlbml6ZX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3VidG9rZW5pemUnXG5cbi8qKlxuICogTm8gbmFtZSBiZWNhdXNlIGl0IG11c3Qgbm90IGJlIHR1cm5lZCBvZmYuXG4gKiBAdHlwZSB7Q29uc3RydWN0fVxuICovXG5leHBvcnQgY29uc3QgY29udGVudCA9IHtcbiAgdG9rZW5pemU6IHRva2VuaXplQ29udGVudCxcbiAgcmVzb2x2ZTogcmVzb2x2ZUNvbnRlbnRcbn1cbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuXG5jb25zdCBjb250aW51YXRpb25Db25zdHJ1Y3QgPSB7XG4gIHRva2VuaXplOiB0b2tlbml6ZUNvbnRpbnVhdGlvbixcbiAgcGFydGlhbDogdHJ1ZVxufVxuLyoqXG4gKiBDb250ZW50IGlzIHRyYW5zcGFyZW50OiBpdOKAmXMgcGFyc2VkIHJpZ2h0IG5vdy4gVGhhdCB3YXksIGRlZmluaXRpb25zIGFyZSBhbHNvXG4gKiBwYXJzZWQgcmlnaHQgbm93OiBiZWZvcmUgdGV4dCBpbiBwYXJhZ3JhcGhzIChzcGVjaWZpY2FsbHksIG1lZGlhKSBhcmUgcGFyc2VkLlxuICpcbiAqIEB0eXBlIHtSZXNvbHZlcn1cbiAqL1xuXG5mdW5jdGlvbiByZXNvbHZlQ29udGVudChldmVudHMpIHtcbiAgc3VidG9rZW5pemUoZXZlbnRzKVxuICByZXR1cm4gZXZlbnRzXG59XG4vKiogQHR5cGUge1Rva2VuaXplcn0gKi9cblxuZnVuY3Rpb24gdG9rZW5pemVDb250ZW50KGVmZmVjdHMsIG9rKSB7XG4gIC8qKiBAdHlwZSB7VG9rZW59ICovXG4gIGxldCBwcmV2aW91c1xuICByZXR1cm4gc3RhcnRcbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgZWZmZWN0cy5lbnRlcignY29udGVudCcpXG4gICAgcHJldmlvdXMgPSBlZmZlY3RzLmVudGVyKCdjaHVua0NvbnRlbnQnLCB7XG4gICAgICBjb250ZW50VHlwZTogJ2NvbnRlbnQnXG4gICAgfSlcbiAgICByZXR1cm4gZGF0YShjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gZGF0YShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBjb250ZW50RW5kKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgcmV0dXJuIGVmZmVjdHMuY2hlY2soXG4gICAgICAgIGNvbnRpbnVhdGlvbkNvbnN0cnVjdCxcbiAgICAgICAgY29udGVudENvbnRpbnVlLFxuICAgICAgICBjb250ZW50RW5kXG4gICAgICApKGNvZGUpXG4gICAgfSAvLyBEYXRhLlxuXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIGRhdGFcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGNvbnRlbnRFbmQoY29kZSkge1xuICAgIGVmZmVjdHMuZXhpdCgnY2h1bmtDb250ZW50JylcbiAgICBlZmZlY3RzLmV4aXQoJ2NvbnRlbnQnKVxuICAgIHJldHVybiBvayhjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gY29udGVudENvbnRpbnVlKGNvZGUpIHtcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICBlZmZlY3RzLmV4aXQoJ2NodW5rQ29udGVudCcpXG4gICAgcHJldmlvdXMubmV4dCA9IGVmZmVjdHMuZW50ZXIoJ2NodW5rQ29udGVudCcsIHtcbiAgICAgIGNvbnRlbnRUeXBlOiAnY29udGVudCcsXG4gICAgICBwcmV2aW91c1xuICAgIH0pXG4gICAgcHJldmlvdXMgPSBwcmV2aW91cy5uZXh0XG4gICAgcmV0dXJuIGRhdGFcbiAgfVxufVxuLyoqIEB0eXBlIHtUb2tlbml6ZXJ9ICovXG5cbmZ1bmN0aW9uIHRva2VuaXplQ29udGludWF0aW9uKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgcmV0dXJuIHN0YXJ0TG9va2FoZWFkXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gc3RhcnRMb29rYWhlYWQoY29kZSkge1xuICAgIGVmZmVjdHMuZXhpdCgnY2h1bmtDb250ZW50JylcbiAgICBlZmZlY3RzLmVudGVyKCdsaW5lRW5kaW5nJylcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICBlZmZlY3RzLmV4aXQoJ2xpbmVFbmRpbmcnKVxuICAgIHJldHVybiBmYWN0b3J5U3BhY2UoZWZmZWN0cywgcHJlZml4ZWQsICdsaW5lUHJlZml4JylcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIHByZWZpeGVkKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIHJldHVybiBub2soY29kZSlcbiAgICB9XG5cbiAgICBjb25zdCB0YWlsID0gc2VsZi5ldmVudHNbc2VsZi5ldmVudHMubGVuZ3RoIC0gMV1cblxuICAgIGlmIChcbiAgICAgICFzZWxmLnBhcnNlci5jb25zdHJ1Y3RzLmRpc2FibGUubnVsbC5pbmNsdWRlcygnY29kZUluZGVudGVkJykgJiZcbiAgICAgIHRhaWwgJiZcbiAgICAgIHRhaWxbMV0udHlwZSA9PT0gJ2xpbmVQcmVmaXgnICYmXG4gICAgICB0YWlsWzJdLnNsaWNlU2VyaWFsaXplKHRhaWxbMV0sIHRydWUpLmxlbmd0aCA+PSA0XG4gICAgKSB7XG4gICAgICByZXR1cm4gb2soY29kZSlcbiAgICB9XG5cbiAgICByZXR1cm4gZWZmZWN0cy5pbnRlcnJ1cHQoc2VsZi5wYXJzZXIuY29uc3RydWN0cy5mbG93LCBub2ssIG9rKShjb2RlKVxuICB9XG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuSW5pdGlhbENvbnN0cnVjdH0gSW5pdGlhbENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Jbml0aWFsaXplcn0gSW5pdGlhbGl6ZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuU3RhdGV9IFN0YXRlXG4gKi9cbmltcG9ydCB7YmxhbmtMaW5lLCBjb250ZW50fSBmcm9tICdtaWNyb21hcmstY29yZS1jb21tb25tYXJrJ1xuaW1wb3J0IHtmYWN0b3J5U3BhY2V9IGZyb20gJ21pY3JvbWFyay1mYWN0b3J5LXNwYWNlJ1xuaW1wb3J0IHttYXJrZG93bkxpbmVFbmRpbmd9IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3RlcidcblxuLyoqIEB0eXBlIHtJbml0aWFsQ29uc3RydWN0fSAqL1xuZXhwb3J0IGNvbnN0IGZsb3cgPSB7XG4gIHRva2VuaXplOiBpbml0aWFsaXplRmxvd1xufVxuLyoqIEB0eXBlIHtJbml0aWFsaXplcn0gKi9cblxuZnVuY3Rpb24gaW5pdGlhbGl6ZUZsb3coZWZmZWN0cykge1xuICBjb25zdCBzZWxmID0gdGhpc1xuICBjb25zdCBpbml0aWFsID0gZWZmZWN0cy5hdHRlbXB0KFxuICAgIC8vIFRyeSB0byBwYXJzZSBhIGJsYW5rIGxpbmUuXG4gICAgYmxhbmtMaW5lLFxuICAgIGF0QmxhbmtFbmRpbmcsIC8vIFRyeSB0byBwYXJzZSBpbml0aWFsIGZsb3cgKGVzc2VudGlhbGx5LCBvbmx5IGNvZGUpLlxuICAgIGVmZmVjdHMuYXR0ZW1wdChcbiAgICAgIHRoaXMucGFyc2VyLmNvbnN0cnVjdHMuZmxvd0luaXRpYWwsXG4gICAgICBhZnRlckNvbnN0cnVjdCxcbiAgICAgIGZhY3RvcnlTcGFjZShcbiAgICAgICAgZWZmZWN0cyxcbiAgICAgICAgZWZmZWN0cy5hdHRlbXB0KFxuICAgICAgICAgIHRoaXMucGFyc2VyLmNvbnN0cnVjdHMuZmxvdyxcbiAgICAgICAgICBhZnRlckNvbnN0cnVjdCxcbiAgICAgICAgICBlZmZlY3RzLmF0dGVtcHQoY29udGVudCwgYWZ0ZXJDb25zdHJ1Y3QpXG4gICAgICAgICksXG4gICAgICAgICdsaW5lUHJlZml4J1xuICAgICAgKVxuICAgIClcbiAgKVxuICByZXR1cm4gaW5pdGlhbFxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGF0QmxhbmtFbmRpbmcoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBudWxsKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGVmZmVjdHMuZW50ZXIoJ2xpbmVFbmRpbmdCbGFuaycpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgZWZmZWN0cy5leGl0KCdsaW5lRW5kaW5nQmxhbmsnKVxuICAgIHNlbGYuY3VycmVudENvbnN0cnVjdCA9IHVuZGVmaW5lZFxuICAgIHJldHVybiBpbml0aWFsXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBhZnRlckNvbnN0cnVjdChjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG51bGwpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZWZmZWN0cy5lbnRlcignbGluZUVuZGluZycpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgZWZmZWN0cy5leGl0KCdsaW5lRW5kaW5nJylcbiAgICBzZWxmLmN1cnJlbnRDb25zdHJ1Y3QgPSB1bmRlZmluZWRcbiAgICByZXR1cm4gaW5pdGlhbFxuICB9XG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuUmVzb2x2ZXJ9IFJlc29sdmVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkluaXRpYWxpemVyfSBJbml0aWFsaXplclxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db25zdHJ1Y3R9IENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Jbml0aWFsQ29uc3RydWN0fSBJbml0aWFsQ29uc3RydWN0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlN0YXRlfSBTdGF0ZVxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db2RlfSBDb2RlXG4gKi9cbmV4cG9ydCBjb25zdCByZXNvbHZlciA9IHtcbiAgcmVzb2x2ZUFsbDogY3JlYXRlUmVzb2x2ZXIoKVxufVxuZXhwb3J0IGNvbnN0IHN0cmluZyA9IGluaXRpYWxpemVGYWN0b3J5KCdzdHJpbmcnKVxuZXhwb3J0IGNvbnN0IHRleHQgPSBpbml0aWFsaXplRmFjdG9yeSgndGV4dCcpXG4vKipcbiAqIEBwYXJhbSB7J3N0cmluZyd8J3RleHQnfSBmaWVsZFxuICogQHJldHVybnMge0luaXRpYWxDb25zdHJ1Y3R9XG4gKi9cblxuZnVuY3Rpb24gaW5pdGlhbGl6ZUZhY3RvcnkoZmllbGQpIHtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbml6ZTogaW5pdGlhbGl6ZVRleHQsXG4gICAgcmVzb2x2ZUFsbDogY3JlYXRlUmVzb2x2ZXIoXG4gICAgICBmaWVsZCA9PT0gJ3RleHQnID8gcmVzb2x2ZUFsbExpbmVTdWZmaXhlcyA6IHVuZGVmaW5lZFxuICAgIClcbiAgfVxuICAvKiogQHR5cGUge0luaXRpYWxpemVyfSAqL1xuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemVUZXh0KGVmZmVjdHMpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpc1xuICAgIGNvbnN0IGNvbnN0cnVjdHMgPSB0aGlzLnBhcnNlci5jb25zdHJ1Y3RzW2ZpZWxkXVxuICAgIGNvbnN0IHRleHQgPSBlZmZlY3RzLmF0dGVtcHQoY29uc3RydWN0cywgc3RhcnQsIG5vdFRleHQpXG4gICAgcmV0dXJuIHN0YXJ0XG4gICAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICAgIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICAgIHJldHVybiBhdEJyZWFrKGNvZGUpID8gdGV4dChjb2RlKSA6IG5vdFRleHQoY29kZSlcbiAgICB9XG4gICAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICAgIGZ1bmN0aW9uIG5vdFRleHQoY29kZSkge1xuICAgICAgaWYgKGNvZGUgPT09IG51bGwpIHtcbiAgICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBlZmZlY3RzLmVudGVyKCdkYXRhJylcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGRhdGFcbiAgICB9XG4gICAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICAgIGZ1bmN0aW9uIGRhdGEoY29kZSkge1xuICAgICAgaWYgKGF0QnJlYWsoY29kZSkpIHtcbiAgICAgICAgZWZmZWN0cy5leGl0KCdkYXRhJylcbiAgICAgICAgcmV0dXJuIHRleHQoY29kZSlcbiAgICAgIH0gLy8gRGF0YS5cblxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gZGF0YVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0NvZGV9IGNvZGVcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cblxuICAgIGZ1bmN0aW9uIGF0QnJlYWsoY29kZSkge1xuICAgICAgaWYgKGNvZGUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cblxuICAgICAgY29uc3QgbGlzdCA9IGNvbnN0cnVjdHNbY29kZV1cbiAgICAgIGxldCBpbmRleCA9IC0xXG5cbiAgICAgIGlmIChsaXN0KSB7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGlzdC5sZW5ndGgpIHtcbiAgICAgICAgICBjb25zdCBpdGVtID0gbGlzdFtpbmRleF1cblxuICAgICAgICAgIGlmICghaXRlbS5wcmV2aW91cyB8fCBpdGVtLnByZXZpb3VzLmNhbGwoc2VsZiwgc2VsZi5wcmV2aW91cykpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxufVxuLyoqXG4gKiBAcGFyYW0ge1Jlc29sdmVyfSBbZXh0cmFSZXNvbHZlcl1cbiAqIEByZXR1cm5zIHtSZXNvbHZlcn1cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVSZXNvbHZlcihleHRyYVJlc29sdmVyKSB7XG4gIHJldHVybiByZXNvbHZlQWxsVGV4dFxuICAvKiogQHR5cGUge1Jlc29sdmVyfSAqL1xuXG4gIGZ1bmN0aW9uIHJlc29sdmVBbGxUZXh0KGV2ZW50cywgY29udGV4dCkge1xuICAgIGxldCBpbmRleCA9IC0xXG4gICAgLyoqIEB0eXBlIHtudW1iZXJ8dW5kZWZpbmVkfSAqL1xuXG4gICAgbGV0IGVudGVyIC8vIEEgcmF0aGVyIGJvcmluZyBjb21wdXRhdGlvbiAodG8gbWVyZ2UgYWRqYWNlbnQgYGRhdGFgIGV2ZW50cykgd2hpY2hcbiAgICAvLyBpbXByb3ZlcyBtbSBwZXJmb3JtYW5jZSBieSAyOSUuXG5cbiAgICB3aGlsZSAoKytpbmRleCA8PSBldmVudHMubGVuZ3RoKSB7XG4gICAgICBpZiAoZW50ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoZXZlbnRzW2luZGV4XSAmJiBldmVudHNbaW5kZXhdWzFdLnR5cGUgPT09ICdkYXRhJykge1xuICAgICAgICAgIGVudGVyID0gaW5kZXhcbiAgICAgICAgICBpbmRleCsrXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIWV2ZW50c1tpbmRleF0gfHwgZXZlbnRzW2luZGV4XVsxXS50eXBlICE9PSAnZGF0YScpIHtcbiAgICAgICAgLy8gRG9u4oCZdCBkbyBhbnl0aGluZyBpZiB0aGVyZSBpcyBvbmUgZGF0YSB0b2tlbi5cbiAgICAgICAgaWYgKGluZGV4ICE9PSBlbnRlciArIDIpIHtcbiAgICAgICAgICBldmVudHNbZW50ZXJdWzFdLmVuZCA9IGV2ZW50c1tpbmRleCAtIDFdWzFdLmVuZFxuICAgICAgICAgIGV2ZW50cy5zcGxpY2UoZW50ZXIgKyAyLCBpbmRleCAtIGVudGVyIC0gMilcbiAgICAgICAgICBpbmRleCA9IGVudGVyICsgMlxuICAgICAgICB9XG5cbiAgICAgICAgZW50ZXIgPSB1bmRlZmluZWRcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZXh0cmFSZXNvbHZlciA/IGV4dHJhUmVzb2x2ZXIoZXZlbnRzLCBjb250ZXh0KSA6IGV2ZW50c1xuICB9XG59XG4vKipcbiAqIEEgcmF0aGVyIHVnbHkgc2V0IG9mIGluc3RydWN0aW9ucyB3aGljaCBhZ2FpbiBsb29rcyBhdCBjaHVua3MgaW4gdGhlIGlucHV0XG4gKiBzdHJlYW0uXG4gKiBUaGUgcmVhc29uIHRvIGRvIHRoaXMgaGVyZSBpcyB0aGF0IGl0IGlzICptdWNoKiBmYXN0ZXIgdG8gcGFyc2UgaW4gcmV2ZXJzZS5cbiAqIEFuZCB0aGF0IHdlIGNhbuKAmXQgaG9vayBpbnRvIGBudWxsYCB0byBzcGxpdCB0aGUgbGluZSBzdWZmaXggYmVmb3JlIGFuIEVPRi5cbiAqIFRvIGRvOiBmaWd1cmUgb3V0IGlmIHdlIGNhbiBtYWtlIHRoaXMgaW50byBhIGNsZWFuIHV0aWxpdHksIG9yIGV2ZW4gaW4gY29yZS5cbiAqIEFzIGl0IHdpbGwgYmUgdXNlZnVsIGZvciBHRk1zIGxpdGVyYWwgYXV0b2xpbmsgZXh0ZW5zaW9uIChhbmQgbWF5YmUgZXZlblxuICogdGFibGVzPylcbiAqXG4gKiBAdHlwZSB7UmVzb2x2ZXJ9XG4gKi9cblxuZnVuY3Rpb24gcmVzb2x2ZUFsbExpbmVTdWZmaXhlcyhldmVudHMsIGNvbnRleHQpIHtcbiAgbGV0IGV2ZW50SW5kZXggPSAtMVxuXG4gIHdoaWxlICgrK2V2ZW50SW5kZXggPD0gZXZlbnRzLmxlbmd0aCkge1xuICAgIGlmIChcbiAgICAgIChldmVudEluZGV4ID09PSBldmVudHMubGVuZ3RoIHx8XG4gICAgICAgIGV2ZW50c1tldmVudEluZGV4XVsxXS50eXBlID09PSAnbGluZUVuZGluZycpICYmXG4gICAgICBldmVudHNbZXZlbnRJbmRleCAtIDFdWzFdLnR5cGUgPT09ICdkYXRhJ1xuICAgICkge1xuICAgICAgY29uc3QgZGF0YSA9IGV2ZW50c1tldmVudEluZGV4IC0gMV1bMV1cbiAgICAgIGNvbnN0IGNodW5rcyA9IGNvbnRleHQuc2xpY2VTdHJlYW0oZGF0YSlcbiAgICAgIGxldCBpbmRleCA9IGNodW5rcy5sZW5ndGhcbiAgICAgIGxldCBidWZmZXJJbmRleCA9IC0xXG4gICAgICBsZXQgc2l6ZSA9IDBcbiAgICAgIC8qKiBAdHlwZSB7Ym9vbGVhbnx1bmRlZmluZWR9ICovXG5cbiAgICAgIGxldCB0YWJzXG5cbiAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgIGNvbnN0IGNodW5rID0gY2h1bmtzW2luZGV4XVxuXG4gICAgICAgIGlmICh0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgYnVmZmVySW5kZXggPSBjaHVuay5sZW5ndGhcblxuICAgICAgICAgIHdoaWxlIChjaHVuay5jaGFyQ29kZUF0KGJ1ZmZlckluZGV4IC0gMSkgPT09IDMyKSB7XG4gICAgICAgICAgICBzaXplKytcbiAgICAgICAgICAgIGJ1ZmZlckluZGV4LS1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoYnVmZmVySW5kZXgpIGJyZWFrXG4gICAgICAgICAgYnVmZmVySW5kZXggPSAtMVxuICAgICAgICB9IC8vIE51bWJlclxuICAgICAgICBlbHNlIGlmIChjaHVuayA9PT0gLTIpIHtcbiAgICAgICAgICB0YWJzID0gdHJ1ZVxuICAgICAgICAgIHNpemUrK1xuICAgICAgICB9IGVsc2UgaWYgKGNodW5rID09PSAtMSkge1xuICAgICAgICAgIC8vIEVtcHR5XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gUmVwbGFjZW1lbnQgY2hhcmFjdGVyLCBleGl0LlxuICAgICAgICAgIGluZGV4KytcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzaXplKSB7XG4gICAgICAgIGNvbnN0IHRva2VuID0ge1xuICAgICAgICAgIHR5cGU6XG4gICAgICAgICAgICBldmVudEluZGV4ID09PSBldmVudHMubGVuZ3RoIHx8IHRhYnMgfHwgc2l6ZSA8IDJcbiAgICAgICAgICAgICAgPyAnbGluZVN1ZmZpeCdcbiAgICAgICAgICAgICAgOiAnaGFyZEJyZWFrVHJhaWxpbmcnLFxuICAgICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgICBsaW5lOiBkYXRhLmVuZC5saW5lLFxuICAgICAgICAgICAgY29sdW1uOiBkYXRhLmVuZC5jb2x1bW4gLSBzaXplLFxuICAgICAgICAgICAgb2Zmc2V0OiBkYXRhLmVuZC5vZmZzZXQgLSBzaXplLFxuICAgICAgICAgICAgX2luZGV4OiBkYXRhLnN0YXJ0Ll9pbmRleCArIGluZGV4LFxuICAgICAgICAgICAgX2J1ZmZlckluZGV4OiBpbmRleFxuICAgICAgICAgICAgICA/IGJ1ZmZlckluZGV4XG4gICAgICAgICAgICAgIDogZGF0YS5zdGFydC5fYnVmZmVySW5kZXggKyBidWZmZXJJbmRleFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZW5kOiBPYmplY3QuYXNzaWduKHt9LCBkYXRhLmVuZClcbiAgICAgICAgfVxuICAgICAgICBkYXRhLmVuZCA9IE9iamVjdC5hc3NpZ24oe30sIHRva2VuLnN0YXJ0KVxuXG4gICAgICAgIGlmIChkYXRhLnN0YXJ0Lm9mZnNldCA9PT0gZGF0YS5lbmQub2Zmc2V0KSB7XG4gICAgICAgICAgT2JqZWN0LmFzc2lnbihkYXRhLCB0b2tlbilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBldmVudHMuc3BsaWNlKFxuICAgICAgICAgICAgZXZlbnRJbmRleCxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICBbJ2VudGVyJywgdG9rZW4sIGNvbnRleHRdLFxuICAgICAgICAgICAgWydleGl0JywgdG9rZW4sIGNvbnRleHRdXG4gICAgICAgICAgKVxuICAgICAgICAgIGV2ZW50SW5kZXggKz0gMlxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGV2ZW50SW5kZXgrK1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBldmVudHNcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbml6ZUNvbnRleHR9IFRva2VuaXplQ29udGV4dFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5FdmVudH0gRXZlbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuUmVzb2x2ZXJ9IFJlc29sdmVyXG4gKi9cblxuLyoqXG4gKiBDYWxsIGFsbCBgcmVzb2x2ZUFsbGBzLlxuICpcbiAqIEBwYXJhbSB7e3Jlc29sdmVBbGw/OiBSZXNvbHZlcn1bXX0gY29uc3RydWN0c1xuICogQHBhcmFtIHtFdmVudFtdfSBldmVudHNcbiAqIEBwYXJhbSB7VG9rZW5pemVDb250ZXh0fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7RXZlbnRbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVBbGwoY29uc3RydWN0cywgZXZlbnRzLCBjb250ZXh0KSB7XG4gIC8qKiBAdHlwZSB7UmVzb2x2ZXJbXX0gKi9cbiAgY29uc3QgY2FsbGVkID0gW11cbiAgbGV0IGluZGV4ID0gLTFcblxuICB3aGlsZSAoKytpbmRleCA8IGNvbnN0cnVjdHMubGVuZ3RoKSB7XG4gICAgY29uc3QgcmVzb2x2ZSA9IGNvbnN0cnVjdHNbaW5kZXhdLnJlc29sdmVBbGxcblxuICAgIGlmIChyZXNvbHZlICYmICFjYWxsZWQuaW5jbHVkZXMocmVzb2x2ZSkpIHtcbiAgICAgIGV2ZW50cyA9IHJlc29sdmUoZXZlbnRzLCBjb250ZXh0KVxuICAgICAgY2FsbGVkLnB1c2gocmVzb2x2ZSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZXZlbnRzXG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ29kZX0gQ29kZVxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5DaHVua30gQ2h1bmtcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuUG9pbnR9IFBvaW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlRva2VufSBUb2tlblxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5FZmZlY3RzfSBFZmZlY3RzXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlN0YXRlfSBTdGF0ZVxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db25zdHJ1Y3R9IENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Jbml0aWFsQ29uc3RydWN0fSBJbml0aWFsQ29uc3RydWN0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkNvbnN0cnVjdFJlY29yZH0gQ29uc3RydWN0UmVjb3JkXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlRva2VuaXplQ29udGV4dH0gVG9rZW5pemVDb250ZXh0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlBhcnNlQ29udGV4dH0gUGFyc2VDb250ZXh0XG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiBJbmZvXG4gKiBAcHJvcGVydHkgeygpID0+IHZvaWR9IHJlc3RvcmVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBmcm9tXG4gKlxuICogQGNhbGxiYWNrIFJldHVybkhhbmRsZVxuICogICBIYW5kbGUgYSBzdWNjZXNzZnVsIHJ1bi5cbiAqIEBwYXJhbSB7Q29uc3RydWN0fSBjb25zdHJ1Y3RcbiAqIEBwYXJhbSB7SW5mb30gaW5mb1xuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmltcG9ydCB7bWFya2Rvd25MaW5lRW5kaW5nfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInXG5pbXBvcnQge3B1c2gsIHNwbGljZX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2h1bmtlZCdcbmltcG9ydCB7cmVzb2x2ZUFsbH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtcmVzb2x2ZS1hbGwnXG5cbi8qKlxuICogQ3JlYXRlIGEgdG9rZW5pemVyLlxuICogVG9rZW5pemVycyBkZWFsIHdpdGggb25lIHR5cGUgb2YgZGF0YSAoZS5nLiwgY29udGFpbmVycywgZmxvdywgdGV4dCkuXG4gKiBUaGUgcGFyc2VyIGlzIHRoZSBvYmplY3QgZGVhbGluZyB3aXRoIGl0IGFsbC5cbiAqIGBpbml0aWFsaXplYCB3b3JrcyBsaWtlIG90aGVyIGNvbnN0cnVjdHMsIGV4Y2VwdCB0aGF0IG9ubHkgaXRzIGB0b2tlbml6ZWBcbiAqIGZ1bmN0aW9uIGlzIHVzZWQsIGluIHdoaWNoIGNhc2UgaXQgZG9lc27igJl0IHJlY2VpdmUgYW4gYG9rYCBvciBgbm9rYC5cbiAqIGBmcm9tYCBjYW4gYmUgZ2l2ZW4gdG8gc2V0IHRoZSBwb2ludCBiZWZvcmUgdGhlIGZpcnN0IGNoYXJhY3RlciwgYWx0aG91Z2hcbiAqIHdoZW4gZnVydGhlciBsaW5lcyBhcmUgaW5kZW50ZWQsIHRoZXkgbXVzdCBiZSBzZXQgd2l0aCBgZGVmaW5lU2tpcGAuXG4gKlxuICogQHBhcmFtIHtQYXJzZUNvbnRleHR9IHBhcnNlclxuICogQHBhcmFtIHtJbml0aWFsQ29uc3RydWN0fSBpbml0aWFsaXplXG4gKiBAcGFyYW0ge09taXQ8UG9pbnQsICdfaW5kZXgnfCdfYnVmZmVySW5kZXgnPn0gW2Zyb21dXG4gKiBAcmV0dXJucyB7VG9rZW5pemVDb250ZXh0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVG9rZW5pemVyKHBhcnNlciwgaW5pdGlhbGl6ZSwgZnJvbSkge1xuICAvKiogQHR5cGUge1BvaW50fSAqL1xuICBsZXQgcG9pbnQgPSBPYmplY3QuYXNzaWduKFxuICAgIGZyb21cbiAgICAgID8gT2JqZWN0LmFzc2lnbih7fSwgZnJvbSlcbiAgICAgIDoge1xuICAgICAgICAgIGxpbmU6IDEsXG4gICAgICAgICAgY29sdW1uOiAxLFxuICAgICAgICAgIG9mZnNldDogMFxuICAgICAgICB9LFxuICAgIHtcbiAgICAgIF9pbmRleDogMCxcbiAgICAgIF9idWZmZXJJbmRleDogLTFcbiAgICB9XG4gIClcbiAgLyoqIEB0eXBlIHtSZWNvcmQ8c3RyaW5nLCBudW1iZXI+fSAqL1xuXG4gIGNvbnN0IGNvbHVtblN0YXJ0ID0ge31cbiAgLyoqIEB0eXBlIHtDb25zdHJ1Y3RbXX0gKi9cblxuICBjb25zdCByZXNvbHZlQWxsQ29uc3RydWN0cyA9IFtdXG4gIC8qKiBAdHlwZSB7Q2h1bmtbXX0gKi9cblxuICBsZXQgY2h1bmtzID0gW11cbiAgLyoqIEB0eXBlIHtUb2tlbltdfSAqL1xuXG4gIGxldCBzdGFjayA9IFtdXG4gIC8qKiBAdHlwZSB7Ym9vbGVhbnx1bmRlZmluZWR9ICovXG5cbiAgbGV0IGNvbnN1bWVkID0gdHJ1ZVxuICAvKipcbiAgICogVG9vbHMgdXNlZCBmb3IgdG9rZW5pemluZy5cbiAgICpcbiAgICogQHR5cGUge0VmZmVjdHN9XG4gICAqL1xuXG4gIGNvbnN0IGVmZmVjdHMgPSB7XG4gICAgY29uc3VtZSxcbiAgICBlbnRlcixcbiAgICBleGl0LFxuICAgIGF0dGVtcHQ6IGNvbnN0cnVjdEZhY3Rvcnkob25zdWNjZXNzZnVsY29uc3RydWN0KSxcbiAgICBjaGVjazogY29uc3RydWN0RmFjdG9yeShvbnN1Y2Nlc3NmdWxjaGVjayksXG4gICAgaW50ZXJydXB0OiBjb25zdHJ1Y3RGYWN0b3J5KG9uc3VjY2Vzc2Z1bGNoZWNrLCB7XG4gICAgICBpbnRlcnJ1cHQ6IHRydWVcbiAgICB9KVxuICB9XG4gIC8qKlxuICAgKiBTdGF0ZSBhbmQgdG9vbHMgZm9yIHJlc29sdmluZyBhbmQgc2VyaWFsaXppbmcuXG4gICAqXG4gICAqIEB0eXBlIHtUb2tlbml6ZUNvbnRleHR9XG4gICAqL1xuXG4gIGNvbnN0IGNvbnRleHQgPSB7XG4gICAgcHJldmlvdXM6IG51bGwsXG4gICAgY29kZTogbnVsbCxcbiAgICBjb250YWluZXJTdGF0ZToge30sXG4gICAgZXZlbnRzOiBbXSxcbiAgICBwYXJzZXIsXG4gICAgc2xpY2VTdHJlYW0sXG4gICAgc2xpY2VTZXJpYWxpemUsXG4gICAgbm93LFxuICAgIGRlZmluZVNraXAsXG4gICAgd3JpdGVcbiAgfVxuICAvKipcbiAgICogVGhlIHN0YXRlIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV8dm9pZH1cbiAgICovXG5cbiAgbGV0IHN0YXRlID0gaW5pdGlhbGl6ZS50b2tlbml6ZS5jYWxsKGNvbnRleHQsIGVmZmVjdHMpXG4gIC8qKlxuICAgKiBUcmFjayB3aGljaCBjaGFyYWN0ZXIgd2UgZXhwZWN0IHRvIGJlIGNvbnN1bWVkLCB0byBjYXRjaCBidWdzLlxuICAgKlxuICAgKiBAdHlwZSB7Q29kZX1cbiAgICovXG5cbiAgbGV0IGV4cGVjdGVkQ29kZVxuXG4gIGlmIChpbml0aWFsaXplLnJlc29sdmVBbGwpIHtcbiAgICByZXNvbHZlQWxsQ29uc3RydWN0cy5wdXNoKGluaXRpYWxpemUpXG4gIH1cblxuICByZXR1cm4gY29udGV4dFxuICAvKiogQHR5cGUge1Rva2VuaXplQ29udGV4dFsnd3JpdGUnXX0gKi9cblxuICBmdW5jdGlvbiB3cml0ZShzbGljZSkge1xuICAgIGNodW5rcyA9IHB1c2goY2h1bmtzLCBzbGljZSlcbiAgICBtYWluKCkgLy8gRXhpdCBpZiB3ZeKAmXJlIG5vdCBkb25lLCByZXNvbHZlIG1pZ2h0IGNoYW5nZSBzdHVmZi5cblxuICAgIGlmIChjaHVua3NbY2h1bmtzLmxlbmd0aCAtIDFdICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4gW11cbiAgICB9XG5cbiAgICBhZGRSZXN1bHQoaW5pdGlhbGl6ZSwgMCkgLy8gT3RoZXJ3aXNlLCByZXNvbHZlLCBhbmQgZXhpdC5cblxuICAgIGNvbnRleHQuZXZlbnRzID0gcmVzb2x2ZUFsbChyZXNvbHZlQWxsQ29uc3RydWN0cywgY29udGV4dC5ldmVudHMsIGNvbnRleHQpXG4gICAgcmV0dXJuIGNvbnRleHQuZXZlbnRzXG4gIH0gLy9cbiAgLy8gVG9vbHMuXG4gIC8vXG5cbiAgLyoqIEB0eXBlIHtUb2tlbml6ZUNvbnRleHRbJ3NsaWNlU2VyaWFsaXplJ119ICovXG5cbiAgZnVuY3Rpb24gc2xpY2VTZXJpYWxpemUodG9rZW4sIGV4cGFuZFRhYnMpIHtcbiAgICByZXR1cm4gc2VyaWFsaXplQ2h1bmtzKHNsaWNlU3RyZWFtKHRva2VuKSwgZXhwYW5kVGFicylcbiAgfVxuICAvKiogQHR5cGUge1Rva2VuaXplQ29udGV4dFsnc2xpY2VTdHJlYW0nXX0gKi9cblxuICBmdW5jdGlvbiBzbGljZVN0cmVhbSh0b2tlbikge1xuICAgIHJldHVybiBzbGljZUNodW5rcyhjaHVua3MsIHRva2VuKVxuICB9XG4gIC8qKiBAdHlwZSB7VG9rZW5pemVDb250ZXh0Wydub3cnXX0gKi9cblxuICBmdW5jdGlvbiBub3coKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHBvaW50KVxuICB9XG4gIC8qKiBAdHlwZSB7VG9rZW5pemVDb250ZXh0WydkZWZpbmVTa2lwJ119ICovXG5cbiAgZnVuY3Rpb24gZGVmaW5lU2tpcCh2YWx1ZSkge1xuICAgIGNvbHVtblN0YXJ0W3ZhbHVlLmxpbmVdID0gdmFsdWUuY29sdW1uXG4gICAgYWNjb3VudEZvclBvdGVudGlhbFNraXAoKVxuICB9IC8vXG4gIC8vIFN0YXRlIG1hbmFnZW1lbnQuXG4gIC8vXG5cbiAgLyoqXG4gICAqIE1haW4gbG9vcCAobm90ZSB0aGF0IGBfaW5kZXhgIGFuZCBgX2J1ZmZlckluZGV4YCBpbiBgcG9pbnRgIGFyZSBtb2RpZmllZCBieVxuICAgKiBgY29uc3VtZWApLlxuICAgKiBIZXJlIGlzIHdoZXJlIHdlIHdhbGsgdGhyb3VnaCB0aGUgY2h1bmtzLCB3aGljaCBlaXRoZXIgaW5jbHVkZSBzdHJpbmdzIG9mXG4gICAqIHNldmVyYWwgY2hhcmFjdGVycywgb3IgbnVtZXJpY2FsIGNoYXJhY3RlciBjb2Rlcy5cbiAgICogVGhlIHJlYXNvbiB0byBkbyB0aGlzIGluIGEgbG9vcCBpbnN0ZWFkIG9mIGEgY2FsbCBpcyBzbyB0aGUgc3RhY2sgY2FuXG4gICAqIGRyYWluLlxuICAgKlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG5cbiAgZnVuY3Rpb24gbWFpbigpIHtcbiAgICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgICBsZXQgY2h1bmtJbmRleFxuXG4gICAgd2hpbGUgKHBvaW50Ll9pbmRleCA8IGNodW5rcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGNodW5rID0gY2h1bmtzW3BvaW50Ll9pbmRleF0gLy8gSWYgd2XigJlyZSBpbiBhIGJ1ZmZlciBjaHVuaywgbG9vcCB0aHJvdWdoIGl0LlxuXG4gICAgICBpZiAodHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgICAgICBjaHVua0luZGV4ID0gcG9pbnQuX2luZGV4XG5cbiAgICAgICAgaWYgKHBvaW50Ll9idWZmZXJJbmRleCA8IDApIHtcbiAgICAgICAgICBwb2ludC5fYnVmZmVySW5kZXggPSAwXG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAoXG4gICAgICAgICAgcG9pbnQuX2luZGV4ID09PSBjaHVua0luZGV4ICYmXG4gICAgICAgICAgcG9pbnQuX2J1ZmZlckluZGV4IDwgY2h1bmsubGVuZ3RoXG4gICAgICAgICkge1xuICAgICAgICAgIGdvKGNodW5rLmNoYXJDb2RlQXQocG9pbnQuX2J1ZmZlckluZGV4KSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ28oY2h1bmspXG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBEZWFsIHdpdGggb25lIGNvZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7Q29kZX0gY29kZVxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG5cbiAgZnVuY3Rpb24gZ28oY29kZSkge1xuICAgIGNvbnN1bWVkID0gdW5kZWZpbmVkXG4gICAgZXhwZWN0ZWRDb2RlID0gY29kZVxuICAgIHN0YXRlID0gc3RhdGUoY29kZSlcbiAgfVxuICAvKiogQHR5cGUge0VmZmVjdHNbJ2NvbnN1bWUnXX0gKi9cblxuICBmdW5jdGlvbiBjb25zdW1lKGNvZGUpIHtcbiAgICBpZiAobWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICBwb2ludC5saW5lKytcbiAgICAgIHBvaW50LmNvbHVtbiA9IDFcbiAgICAgIHBvaW50Lm9mZnNldCArPSBjb2RlID09PSAtMyA/IDIgOiAxXG4gICAgICBhY2NvdW50Rm9yUG90ZW50aWFsU2tpcCgpXG4gICAgfSBlbHNlIGlmIChjb2RlICE9PSAtMSkge1xuICAgICAgcG9pbnQuY29sdW1uKytcbiAgICAgIHBvaW50Lm9mZnNldCsrXG4gICAgfSAvLyBOb3QgaW4gYSBzdHJpbmcgY2h1bmsuXG5cbiAgICBpZiAocG9pbnQuX2J1ZmZlckluZGV4IDwgMCkge1xuICAgICAgcG9pbnQuX2luZGV4KytcbiAgICB9IGVsc2Uge1xuICAgICAgcG9pbnQuX2J1ZmZlckluZGV4KysgLy8gQXQgZW5kIG9mIHN0cmluZyBjaHVuay5cbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgUG9pbnRzIHcvIG5vbi1uZWdhdGl2ZSBgX2J1ZmZlckluZGV4YCByZWZlcmVuY2VcbiAgICAgIC8vIHN0cmluZ3MuXG5cbiAgICAgIGlmIChwb2ludC5fYnVmZmVySW5kZXggPT09IGNodW5rc1twb2ludC5faW5kZXhdLmxlbmd0aCkge1xuICAgICAgICBwb2ludC5fYnVmZmVySW5kZXggPSAtMVxuICAgICAgICBwb2ludC5faW5kZXgrK1xuICAgICAgfVxuICAgIH0gLy8gRXhwb3NlIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIuXG5cbiAgICBjb250ZXh0LnByZXZpb3VzID0gY29kZSAvLyBNYXJrIGFzIGNvbnN1bWVkLlxuXG4gICAgY29uc3VtZWQgPSB0cnVlXG4gIH1cbiAgLyoqIEB0eXBlIHtFZmZlY3RzWydlbnRlciddfSAqL1xuXG4gIGZ1bmN0aW9uIGVudGVyKHR5cGUsIGZpZWxkcykge1xuICAgIC8qKiBAdHlwZSB7VG9rZW59ICovXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBQYXRjaCBpbnN0ZWFkIG9mIGFzc2lnbiByZXF1aXJlZCBmaWVsZHMgdG8gaGVscCBHQy5cbiAgICBjb25zdCB0b2tlbiA9IGZpZWxkcyB8fCB7fVxuICAgIHRva2VuLnR5cGUgPSB0eXBlXG4gICAgdG9rZW4uc3RhcnQgPSBub3coKVxuICAgIGNvbnRleHQuZXZlbnRzLnB1c2goWydlbnRlcicsIHRva2VuLCBjb250ZXh0XSlcbiAgICBzdGFjay5wdXNoKHRva2VuKVxuICAgIHJldHVybiB0b2tlblxuICB9XG4gIC8qKiBAdHlwZSB7RWZmZWN0c1snZXhpdCddfSAqL1xuXG4gIGZ1bmN0aW9uIGV4aXQodHlwZSkge1xuICAgIGNvbnN0IHRva2VuID0gc3RhY2sucG9wKClcbiAgICB0b2tlbi5lbmQgPSBub3coKVxuICAgIGNvbnRleHQuZXZlbnRzLnB1c2goWydleGl0JywgdG9rZW4sIGNvbnRleHRdKVxuICAgIHJldHVybiB0b2tlblxuICB9XG4gIC8qKlxuICAgKiBVc2UgcmVzdWx0cy5cbiAgICpcbiAgICogQHR5cGUge1JldHVybkhhbmRsZX1cbiAgICovXG5cbiAgZnVuY3Rpb24gb25zdWNjZXNzZnVsY29uc3RydWN0KGNvbnN0cnVjdCwgaW5mbykge1xuICAgIGFkZFJlc3VsdChjb25zdHJ1Y3QsIGluZm8uZnJvbSlcbiAgfVxuICAvKipcbiAgICogRGlzY2FyZCByZXN1bHRzLlxuICAgKlxuICAgKiBAdHlwZSB7UmV0dXJuSGFuZGxlfVxuICAgKi9cblxuICBmdW5jdGlvbiBvbnN1Y2Nlc3NmdWxjaGVjayhfLCBpbmZvKSB7XG4gICAgaW5mby5yZXN0b3JlKClcbiAgfVxuICAvKipcbiAgICogRmFjdG9yeSB0byBhdHRlbXB0L2NoZWNrL2ludGVycnVwdC5cbiAgICpcbiAgICogQHBhcmFtIHtSZXR1cm5IYW5kbGV9IG9ucmV0dXJuXG4gICAqIEBwYXJhbSB7UmVjb3JkPHN0cmluZywgdW5rbm93bj59IFtmaWVsZHNdXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGNvbnN0cnVjdEZhY3Rvcnkob25yZXR1cm4sIGZpZWxkcykge1xuICAgIHJldHVybiBob29rXG4gICAgLyoqXG4gICAgICogSGFuZGxlIGVpdGhlciBhbiBvYmplY3QgbWFwcGluZyBjb2RlcyB0byBjb25zdHJ1Y3RzLCBhIGxpc3Qgb2ZcbiAgICAgKiBjb25zdHJ1Y3RzLCBvciBhIHNpbmdsZSBjb25zdHJ1Y3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0NvbnN0cnVjdHxDb25zdHJ1Y3RbXXxDb25zdHJ1Y3RSZWNvcmR9IGNvbnN0cnVjdHNcbiAgICAgKiBAcGFyYW0ge1N0YXRlfSByZXR1cm5TdGF0ZVxuICAgICAqIEBwYXJhbSB7U3RhdGV9IFtib2d1c1N0YXRlXVxuICAgICAqIEByZXR1cm5zIHtTdGF0ZX1cbiAgICAgKi9cblxuICAgIGZ1bmN0aW9uIGhvb2soY29uc3RydWN0cywgcmV0dXJuU3RhdGUsIGJvZ3VzU3RhdGUpIHtcbiAgICAgIC8qKiBAdHlwZSB7Q29uc3RydWN0W119ICovXG4gICAgICBsZXQgbGlzdE9mQ29uc3RydWN0c1xuICAgICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG5cbiAgICAgIGxldCBjb25zdHJ1Y3RJbmRleFxuICAgICAgLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5cbiAgICAgIGxldCBjdXJyZW50Q29uc3RydWN0XG4gICAgICAvKiogQHR5cGUge0luZm99ICovXG5cbiAgICAgIGxldCBpbmZvXG4gICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShjb25zdHJ1Y3RzKVxuICAgICAgICA/IC8qIGM4IGlnbm9yZSBuZXh0IDEgKi9cbiAgICAgICAgICBoYW5kbGVMaXN0T2ZDb25zdHJ1Y3RzKGNvbnN0cnVjdHMpXG4gICAgICAgIDogJ3Rva2VuaXplJyBpbiBjb25zdHJ1Y3RzIC8vIEB0cy1leHBlY3QtZXJyb3IgTG9va3MgbGlrZSBhIGNvbnN0cnVjdC5cbiAgICAgICAgPyBoYW5kbGVMaXN0T2ZDb25zdHJ1Y3RzKFtjb25zdHJ1Y3RzXSlcbiAgICAgICAgOiBoYW5kbGVNYXBPZkNvbnN0cnVjdHMoY29uc3RydWN0cylcbiAgICAgIC8qKlxuICAgICAgICogSGFuZGxlIGEgbGlzdCBvZiBjb25zdHJ1Y3QuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtDb25zdHJ1Y3RSZWNvcmR9IG1hcFxuICAgICAgICogQHJldHVybnMge1N0YXRlfVxuICAgICAgICovXG5cbiAgICAgIGZ1bmN0aW9uIGhhbmRsZU1hcE9mQ29uc3RydWN0cyhtYXApIHtcbiAgICAgICAgcmV0dXJuIHN0YXJ0XG4gICAgICAgIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgICAgICAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgICAgICAgIGNvbnN0IGRlZiA9IGNvZGUgIT09IG51bGwgJiYgbWFwW2NvZGVdXG4gICAgICAgICAgY29uc3QgYWxsID0gY29kZSAhPT0gbnVsbCAmJiBtYXAubnVsbFxuICAgICAgICAgIGNvbnN0IGxpc3QgPSBbXG4gICAgICAgICAgICAvLyBUbyBkbzogYWRkIG1vcmUgZXh0ZW5zaW9uIHRlc3RzLlxuXG4gICAgICAgICAgICAvKiBjOCBpZ25vcmUgbmV4dCAyICovXG4gICAgICAgICAgICAuLi4oQXJyYXkuaXNBcnJheShkZWYpID8gZGVmIDogZGVmID8gW2RlZl0gOiBbXSksXG4gICAgICAgICAgICAuLi4oQXJyYXkuaXNBcnJheShhbGwpID8gYWxsIDogYWxsID8gW2FsbF0gOiBbXSlcbiAgICAgICAgICBdXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZUxpc3RPZkNvbnN0cnVjdHMobGlzdCkoY29kZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBIYW5kbGUgYSBsaXN0IG9mIGNvbnN0cnVjdC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0NvbnN0cnVjdFtdfSBsaXN0XG4gICAgICAgKiBAcmV0dXJucyB7U3RhdGV9XG4gICAgICAgKi9cblxuICAgICAgZnVuY3Rpb24gaGFuZGxlTGlzdE9mQ29uc3RydWN0cyhsaXN0KSB7XG4gICAgICAgIGxpc3RPZkNvbnN0cnVjdHMgPSBsaXN0XG4gICAgICAgIGNvbnN0cnVjdEluZGV4ID0gMFxuXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBib2d1c1N0YXRlXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaGFuZGxlQ29uc3RydWN0KGxpc3RbY29uc3RydWN0SW5kZXhdKVxuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBIYW5kbGUgYSBzaW5nbGUgY29uc3RydWN0LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7Q29uc3RydWN0fSBjb25zdHJ1Y3RcbiAgICAgICAqIEByZXR1cm5zIHtTdGF0ZX1cbiAgICAgICAqL1xuXG4gICAgICBmdW5jdGlvbiBoYW5kbGVDb25zdHJ1Y3QoY29uc3RydWN0KSB7XG4gICAgICAgIHJldHVybiBzdGFydFxuICAgICAgICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gICAgICAgIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICAgICAgICAvLyBUbyBkbzogbm90IG5lZWRlZCB0byBzdG9yZSBpZiB0aGVyZSBpcyBubyBib2d1cyBzdGF0ZSwgcHJvYmFibHk/XG4gICAgICAgICAgLy8gQ3VycmVudGx5IGRvZXNu4oCZdCB3b3JrIGJlY2F1c2UgYGluc3BlY3RgIGluIGRvY3VtZW50IGRvZXMgYSBjaGVja1xuICAgICAgICAgIC8vIHcvbyBhIGJvZ3VzLCB3aGljaCBkb2VzbuKAmXQgbWFrZSBzZW5zZS4gQnV0IGl0IGRvZXMgc2VlbSB0byBoZWxwIHBlcmZcbiAgICAgICAgICAvLyBieSBub3Qgc3RvcmluZy5cbiAgICAgICAgICBpbmZvID0gc3RvcmUoKVxuICAgICAgICAgIGN1cnJlbnRDb25zdHJ1Y3QgPSBjb25zdHJ1Y3RcblxuICAgICAgICAgIGlmICghY29uc3RydWN0LnBhcnRpYWwpIHtcbiAgICAgICAgICAgIGNvbnRleHQuY3VycmVudENvbnN0cnVjdCA9IGNvbnN0cnVjdFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGNvbnN0cnVjdC5uYW1lICYmXG4gICAgICAgICAgICBjb250ZXh0LnBhcnNlci5jb25zdHJ1Y3RzLmRpc2FibGUubnVsbC5pbmNsdWRlcyhjb25zdHJ1Y3QubmFtZSlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBub2soY29kZSlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gY29uc3RydWN0LnRva2VuaXplLmNhbGwoXG4gICAgICAgICAgICAvLyBJZiB3ZSBkbyBoYXZlIGZpZWxkcywgY3JlYXRlIGFuIG9iamVjdCB3LyBgY29udGV4dGAgYXMgaXRzXG4gICAgICAgICAgICAvLyBwcm90b3R5cGUuXG4gICAgICAgICAgICAvLyBUaGlzIGFsbG93cyBhIOKAnGxpdmUgYmluZGluZ+KAnSwgd2hpY2ggaXMgbmVlZGVkIGZvciBgaW50ZXJydXB0YC5cbiAgICAgICAgICAgIGZpZWxkcyA/IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShjb250ZXh0KSwgZmllbGRzKSA6IGNvbnRleHQsXG4gICAgICAgICAgICBlZmZlY3RzLFxuICAgICAgICAgICAgb2ssXG4gICAgICAgICAgICBub2tcbiAgICAgICAgICApKGNvZGUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgICAgIGZ1bmN0aW9uIG9rKGNvZGUpIHtcbiAgICAgICAgY29uc3VtZWQgPSB0cnVlXG4gICAgICAgIG9ucmV0dXJuKGN1cnJlbnRDb25zdHJ1Y3QsIGluZm8pXG4gICAgICAgIHJldHVybiByZXR1cm5TdGF0ZVxuICAgICAgfVxuICAgICAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICAgICAgZnVuY3Rpb24gbm9rKGNvZGUpIHtcbiAgICAgICAgY29uc3VtZWQgPSB0cnVlXG4gICAgICAgIGluZm8ucmVzdG9yZSgpXG5cbiAgICAgICAgaWYgKCsrY29uc3RydWN0SW5kZXggPCBsaXN0T2ZDb25zdHJ1Y3RzLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiBoYW5kbGVDb25zdHJ1Y3QobGlzdE9mQ29uc3RydWN0c1tjb25zdHJ1Y3RJbmRleF0pXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYm9ndXNTdGF0ZVxuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHtDb25zdHJ1Y3R9IGNvbnN0cnVjdFxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbVxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG5cbiAgZnVuY3Rpb24gYWRkUmVzdWx0KGNvbnN0cnVjdCwgZnJvbSkge1xuICAgIGlmIChjb25zdHJ1Y3QucmVzb2x2ZUFsbCAmJiAhcmVzb2x2ZUFsbENvbnN0cnVjdHMuaW5jbHVkZXMoY29uc3RydWN0KSkge1xuICAgICAgcmVzb2x2ZUFsbENvbnN0cnVjdHMucHVzaChjb25zdHJ1Y3QpXG4gICAgfVxuXG4gICAgaWYgKGNvbnN0cnVjdC5yZXNvbHZlKSB7XG4gICAgICBzcGxpY2UoXG4gICAgICAgIGNvbnRleHQuZXZlbnRzLFxuICAgICAgICBmcm9tLFxuICAgICAgICBjb250ZXh0LmV2ZW50cy5sZW5ndGggLSBmcm9tLFxuICAgICAgICBjb25zdHJ1Y3QucmVzb2x2ZShjb250ZXh0LmV2ZW50cy5zbGljZShmcm9tKSwgY29udGV4dClcbiAgICAgIClcbiAgICB9XG5cbiAgICBpZiAoY29uc3RydWN0LnJlc29sdmVUbykge1xuICAgICAgY29udGV4dC5ldmVudHMgPSBjb25zdHJ1Y3QucmVzb2x2ZVRvKGNvbnRleHQuZXZlbnRzLCBjb250ZXh0KVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogU3RvcmUgc3RhdGUuXG4gICAqXG4gICAqIEByZXR1cm5zIHtJbmZvfVxuICAgKi9cblxuICBmdW5jdGlvbiBzdG9yZSgpIHtcbiAgICBjb25zdCBzdGFydFBvaW50ID0gbm93KClcbiAgICBjb25zdCBzdGFydFByZXZpb3VzID0gY29udGV4dC5wcmV2aW91c1xuICAgIGNvbnN0IHN0YXJ0Q3VycmVudENvbnN0cnVjdCA9IGNvbnRleHQuY3VycmVudENvbnN0cnVjdFxuICAgIGNvbnN0IHN0YXJ0RXZlbnRzSW5kZXggPSBjb250ZXh0LmV2ZW50cy5sZW5ndGhcbiAgICBjb25zdCBzdGFydFN0YWNrID0gQXJyYXkuZnJvbShzdGFjaylcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdG9yZSxcbiAgICAgIGZyb206IHN0YXJ0RXZlbnRzSW5kZXhcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzdG9yZSBzdGF0ZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqL1xuXG4gICAgZnVuY3Rpb24gcmVzdG9yZSgpIHtcbiAgICAgIHBvaW50ID0gc3RhcnRQb2ludFxuICAgICAgY29udGV4dC5wcmV2aW91cyA9IHN0YXJ0UHJldmlvdXNcbiAgICAgIGNvbnRleHQuY3VycmVudENvbnN0cnVjdCA9IHN0YXJ0Q3VycmVudENvbnN0cnVjdFxuICAgICAgY29udGV4dC5ldmVudHMubGVuZ3RoID0gc3RhcnRFdmVudHNJbmRleFxuICAgICAgc3RhY2sgPSBzdGFydFN0YWNrXG4gICAgICBhY2NvdW50Rm9yUG90ZW50aWFsU2tpcCgpXG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBNb3ZlIHRoZSBjdXJyZW50IHBvaW50IGEgYml0IGZvcndhcmQgaW4gdGhlIGxpbmUgd2hlbiBpdOKAmXMgb24gYSBjb2x1bW5cbiAgICogc2tpcC5cbiAgICpcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuXG4gIGZ1bmN0aW9uIGFjY291bnRGb3JQb3RlbnRpYWxTa2lwKCkge1xuICAgIGlmIChwb2ludC5saW5lIGluIGNvbHVtblN0YXJ0ICYmIHBvaW50LmNvbHVtbiA8IDIpIHtcbiAgICAgIHBvaW50LmNvbHVtbiA9IGNvbHVtblN0YXJ0W3BvaW50LmxpbmVdXG4gICAgICBwb2ludC5vZmZzZXQgKz0gY29sdW1uU3RhcnRbcG9pbnQubGluZV0gLSAxXG4gICAgfVxuICB9XG59XG4vKipcbiAqIEdldCB0aGUgY2h1bmtzIGZyb20gYSBzbGljZSBvZiBjaHVua3MgaW4gdGhlIHJhbmdlIG9mIGEgdG9rZW4uXG4gKlxuICogQHBhcmFtIHtDaHVua1tdfSBjaHVua3NcbiAqIEBwYXJhbSB7UGljazxUb2tlbiwgJ3N0YXJ0J3wnZW5kJz59IHRva2VuXG4gKiBAcmV0dXJucyB7Q2h1bmtbXX1cbiAqL1xuXG5mdW5jdGlvbiBzbGljZUNodW5rcyhjaHVua3MsIHRva2VuKSB7XG4gIGNvbnN0IHN0YXJ0SW5kZXggPSB0b2tlbi5zdGFydC5faW5kZXhcbiAgY29uc3Qgc3RhcnRCdWZmZXJJbmRleCA9IHRva2VuLnN0YXJ0Ll9idWZmZXJJbmRleFxuICBjb25zdCBlbmRJbmRleCA9IHRva2VuLmVuZC5faW5kZXhcbiAgY29uc3QgZW5kQnVmZmVySW5kZXggPSB0b2tlbi5lbmQuX2J1ZmZlckluZGV4XG4gIC8qKiBAdHlwZSB7Q2h1bmtbXX0gKi9cblxuICBsZXQgdmlld1xuXG4gIGlmIChzdGFydEluZGV4ID09PSBlbmRJbmRleCkge1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgYF9idWZmZXJJbmRleGAgaXMgdXNlZCBvbiBzdHJpbmcgY2h1bmtzLlxuICAgIHZpZXcgPSBbY2h1bmtzW3N0YXJ0SW5kZXhdLnNsaWNlKHN0YXJ0QnVmZmVySW5kZXgsIGVuZEJ1ZmZlckluZGV4KV1cbiAgfSBlbHNlIHtcbiAgICB2aWV3ID0gY2h1bmtzLnNsaWNlKHN0YXJ0SW5kZXgsIGVuZEluZGV4KVxuXG4gICAgaWYgKHN0YXJ0QnVmZmVySW5kZXggPiAtMSkge1xuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBgX2J1ZmZlckluZGV4YCBpcyB1c2VkIG9uIHN0cmluZyBjaHVua3MuXG4gICAgICB2aWV3WzBdID0gdmlld1swXS5zbGljZShzdGFydEJ1ZmZlckluZGV4KVxuICAgIH1cblxuICAgIGlmIChlbmRCdWZmZXJJbmRleCA+IDApIHtcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgYF9idWZmZXJJbmRleGAgaXMgdXNlZCBvbiBzdHJpbmcgY2h1bmtzLlxuICAgICAgdmlldy5wdXNoKGNodW5rc1tlbmRJbmRleF0uc2xpY2UoMCwgZW5kQnVmZmVySW5kZXgpKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2aWV3XG59XG4vKipcbiAqIEdldCB0aGUgc3RyaW5nIHZhbHVlIG9mIGEgc2xpY2Ugb2YgY2h1bmtzLlxuICpcbiAqIEBwYXJhbSB7Q2h1bmtbXX0gY2h1bmtzXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtleHBhbmRUYWJzPWZhbHNlXVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuXG5mdW5jdGlvbiBzZXJpYWxpemVDaHVua3MoY2h1bmtzLCBleHBhbmRUYWJzKSB7XG4gIGxldCBpbmRleCA9IC0xXG4gIC8qKiBAdHlwZSB7c3RyaW5nW119ICovXG5cbiAgY29uc3QgcmVzdWx0ID0gW11cbiAgLyoqIEB0eXBlIHtib29sZWFufHVuZGVmaW5lZH0gKi9cblxuICBsZXQgYXRUYWJcblxuICB3aGlsZSAoKytpbmRleCA8IGNodW5rcy5sZW5ndGgpIHtcbiAgICBjb25zdCBjaHVuayA9IGNodW5rc1tpbmRleF1cbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cblxuICAgIGxldCB2YWx1ZVxuXG4gICAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhbHVlID0gY2h1bmtcbiAgICB9IGVsc2VcbiAgICAgIHN3aXRjaCAoY2h1bmspIHtcbiAgICAgICAgY2FzZSAtNToge1xuICAgICAgICAgIHZhbHVlID0gJ1xccidcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG5cbiAgICAgICAgY2FzZSAtNDoge1xuICAgICAgICAgIHZhbHVlID0gJ1xcbidcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG5cbiAgICAgICAgY2FzZSAtMzoge1xuICAgICAgICAgIHZhbHVlID0gJ1xccicgKyAnXFxuJ1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cblxuICAgICAgICBjYXNlIC0yOiB7XG4gICAgICAgICAgdmFsdWUgPSBleHBhbmRUYWJzID8gJyAnIDogJ1xcdCdcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG5cbiAgICAgICAgY2FzZSAtMToge1xuICAgICAgICAgIGlmICghZXhwYW5kVGFicyAmJiBhdFRhYikgY29udGludWVcbiAgICAgICAgICB2YWx1ZSA9ICcgJ1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cblxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgLy8gQ3VycmVudGx5IG9ubHkgcmVwbGFjZW1lbnQgY2hhcmFjdGVyLlxuICAgICAgICAgIHZhbHVlID0gU3RyaW5nLmZyb21DaGFyQ29kZShjaHVuaylcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgYXRUYWIgPSBjaHVuayA9PT0gLTJcbiAgICByZXN1bHQucHVzaCh2YWx1ZSlcbiAgfVxuXG4gIHJldHVybiByZXN1bHQuam9pbignJylcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db25zdHJ1Y3R9IENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbml6ZXJ9IFRva2VuaXplclxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5TdGF0ZX0gU3RhdGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ29kZX0gQ29kZVxuICovXG5pbXBvcnQge2ZhY3RvcnlTcGFjZX0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UnXG5pbXBvcnQge21hcmtkb3duTGluZUVuZGluZywgbWFya2Rvd25TcGFjZX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCB0aGVtYXRpY0JyZWFrID0ge1xuICBuYW1lOiAndGhlbWF0aWNCcmVhaycsXG4gIHRva2VuaXplOiB0b2tlbml6ZVRoZW1hdGljQnJlYWtcbn1cbi8qKiBAdHlwZSB7VG9rZW5pemVyfSAqL1xuXG5mdW5jdGlvbiB0b2tlbml6ZVRoZW1hdGljQnJlYWsoZWZmZWN0cywgb2ssIG5vaykge1xuICBsZXQgc2l6ZSA9IDBcbiAgLyoqIEB0eXBlIHtOb25OdWxsYWJsZTxDb2RlPn0gKi9cblxuICBsZXQgbWFya2VyXG4gIHJldHVybiBzdGFydFxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKCd0aGVtYXRpY0JyZWFrJylcbiAgICBtYXJrZXIgPSBjb2RlXG4gICAgcmV0dXJuIGF0QnJlYWsoY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGF0QnJlYWsoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBtYXJrZXIpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIoJ3RoZW1hdGljQnJlYWtTZXF1ZW5jZScpXG4gICAgICByZXR1cm4gc2VxdWVuY2UoY29kZSlcbiAgICB9XG5cbiAgICBpZiAobWFya2Rvd25TcGFjZShjb2RlKSkge1xuICAgICAgcmV0dXJuIGZhY3RvcnlTcGFjZShlZmZlY3RzLCBhdEJyZWFrLCAnd2hpdGVzcGFjZScpKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKHNpemUgPCAzIHx8IChjb2RlICE9PSBudWxsICYmICFtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuXG4gICAgZWZmZWN0cy5leGl0KCd0aGVtYXRpY0JyZWFrJylcbiAgICByZXR1cm4gb2soY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIHNlcXVlbmNlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbWFya2VyKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHNpemUrK1xuICAgICAgcmV0dXJuIHNlcXVlbmNlXG4gICAgfVxuXG4gICAgZWZmZWN0cy5leGl0KCd0aGVtYXRpY0JyZWFrU2VxdWVuY2UnKVxuICAgIHJldHVybiBhdEJyZWFrKGNvZGUpXG4gIH1cbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db25zdHJ1Y3R9IENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbml6ZUNvbnRleHR9IFRva2VuaXplQ29udGV4dFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5FeGl0ZXJ9IEV4aXRlclxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbml6ZXJ9IFRva2VuaXplclxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5TdGF0ZX0gU3RhdGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ29kZX0gQ29kZVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge1JlY29yZDxzdHJpbmcsIHVua25vd24+ICYge21hcmtlcjogQ29kZSwgdHlwZTogc3RyaW5nLCBzaXplOiBudW1iZXJ9fSBMaXN0Q29udGFpbmVyU3RhdGVcbiAqIEB0eXBlZGVmIHtUb2tlbml6ZUNvbnRleHQgJiB7Y29udGFpbmVyU3RhdGU6IExpc3RDb250YWluZXJTdGF0ZX19IFRva2VuaXplQ29udGV4dFdpdGhTdGF0ZVxuICovXG5pbXBvcnQge2ZhY3RvcnlTcGFjZX0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UnXG5pbXBvcnQge2FzY2lpRGlnaXQsIG1hcmtkb3duU3BhY2V9IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3RlcidcbmltcG9ydCB7YmxhbmtMaW5lfSBmcm9tICcuL2JsYW5rLWxpbmUuanMnXG5pbXBvcnQge3RoZW1hdGljQnJlYWt9IGZyb20gJy4vdGhlbWF0aWMtYnJlYWsuanMnXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cblxuZXhwb3J0IGNvbnN0IGxpc3QgPSB7XG4gIG5hbWU6ICdsaXN0JyxcbiAgdG9rZW5pemU6IHRva2VuaXplTGlzdFN0YXJ0LFxuICBjb250aW51YXRpb246IHtcbiAgICB0b2tlbml6ZTogdG9rZW5pemVMaXN0Q29udGludWF0aW9uXG4gIH0sXG4gIGV4aXQ6IHRva2VuaXplTGlzdEVuZFxufVxuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5cbmNvbnN0IGxpc3RJdGVtUHJlZml4V2hpdGVzcGFjZUNvbnN0cnVjdCA9IHtcbiAgdG9rZW5pemU6IHRva2VuaXplTGlzdEl0ZW1QcmVmaXhXaGl0ZXNwYWNlLFxuICBwYXJ0aWFsOiB0cnVlXG59XG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cblxuY29uc3QgaW5kZW50Q29uc3RydWN0ID0ge1xuICB0b2tlbml6ZTogdG9rZW5pemVJbmRlbnQsXG4gIHBhcnRpYWw6IHRydWVcbn1cbi8qKlxuICogQHR5cGUge1Rva2VuaXplcn1cbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHRXaXRoU3RhdGV9XG4gKi9cblxuZnVuY3Rpb24gdG9rZW5pemVMaXN0U3RhcnQoZWZmZWN0cywgb2ssIG5vaykge1xuICBjb25zdCBzZWxmID0gdGhpc1xuICBjb25zdCB0YWlsID0gc2VsZi5ldmVudHNbc2VsZi5ldmVudHMubGVuZ3RoIC0gMV1cbiAgbGV0IGluaXRpYWxTaXplID1cbiAgICB0YWlsICYmIHRhaWxbMV0udHlwZSA9PT0gJ2xpbmVQcmVmaXgnXG4gICAgICA/IHRhaWxbMl0uc2xpY2VTZXJpYWxpemUodGFpbFsxXSwgdHJ1ZSkubGVuZ3RoXG4gICAgICA6IDBcbiAgbGV0IHNpemUgPSAwXG4gIHJldHVybiBzdGFydFxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBjb25zdCBraW5kID1cbiAgICAgIHNlbGYuY29udGFpbmVyU3RhdGUudHlwZSB8fFxuICAgICAgKGNvZGUgPT09IDQyIHx8IGNvZGUgPT09IDQzIHx8IGNvZGUgPT09IDQ1XG4gICAgICAgID8gJ2xpc3RVbm9yZGVyZWQnXG4gICAgICAgIDogJ2xpc3RPcmRlcmVkJylcblxuICAgIGlmIChcbiAgICAgIGtpbmQgPT09ICdsaXN0VW5vcmRlcmVkJ1xuICAgICAgICA/ICFzZWxmLmNvbnRhaW5lclN0YXRlLm1hcmtlciB8fCBjb2RlID09PSBzZWxmLmNvbnRhaW5lclN0YXRlLm1hcmtlclxuICAgICAgICA6IGFzY2lpRGlnaXQoY29kZSlcbiAgICApIHtcbiAgICAgIGlmICghc2VsZi5jb250YWluZXJTdGF0ZS50eXBlKSB7XG4gICAgICAgIHNlbGYuY29udGFpbmVyU3RhdGUudHlwZSA9IGtpbmRcbiAgICAgICAgZWZmZWN0cy5lbnRlcihraW5kLCB7XG4gICAgICAgICAgX2NvbnRhaW5lcjogdHJ1ZVxuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgICBpZiAoa2luZCA9PT0gJ2xpc3RVbm9yZGVyZWQnKSB7XG4gICAgICAgIGVmZmVjdHMuZW50ZXIoJ2xpc3RJdGVtUHJlZml4JylcbiAgICAgICAgcmV0dXJuIGNvZGUgPT09IDQyIHx8IGNvZGUgPT09IDQ1XG4gICAgICAgICAgPyBlZmZlY3RzLmNoZWNrKHRoZW1hdGljQnJlYWssIG5vaywgYXRNYXJrZXIpKGNvZGUpXG4gICAgICAgICAgOiBhdE1hcmtlcihjb2RlKVxuICAgICAgfVxuXG4gICAgICBpZiAoIXNlbGYuaW50ZXJydXB0IHx8IGNvZGUgPT09IDQ5KSB7XG4gICAgICAgIGVmZmVjdHMuZW50ZXIoJ2xpc3RJdGVtUHJlZml4JylcbiAgICAgICAgZWZmZWN0cy5lbnRlcignbGlzdEl0ZW1WYWx1ZScpXG4gICAgICAgIHJldHVybiBpbnNpZGUoY29kZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBpbnNpZGUoY29kZSkge1xuICAgIGlmIChhc2NpaURpZ2l0KGNvZGUpICYmICsrc2l6ZSA8IDEwKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBpbnNpZGVcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAoIXNlbGYuaW50ZXJydXB0IHx8IHNpemUgPCAyKSAmJlxuICAgICAgKHNlbGYuY29udGFpbmVyU3RhdGUubWFya2VyXG4gICAgICAgID8gY29kZSA9PT0gc2VsZi5jb250YWluZXJTdGF0ZS5tYXJrZXJcbiAgICAgICAgOiBjb2RlID09PSA0MSB8fCBjb2RlID09PSA0NilcbiAgICApIHtcbiAgICAgIGVmZmVjdHMuZXhpdCgnbGlzdEl0ZW1WYWx1ZScpXG4gICAgICByZXR1cm4gYXRNYXJrZXIoY29kZSlcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cbiAgLyoqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICoqL1xuXG4gIGZ1bmN0aW9uIGF0TWFya2VyKGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKCdsaXN0SXRlbU1hcmtlcicpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgZWZmZWN0cy5leGl0KCdsaXN0SXRlbU1hcmtlcicpXG4gICAgc2VsZi5jb250YWluZXJTdGF0ZS5tYXJrZXIgPSBzZWxmLmNvbnRhaW5lclN0YXRlLm1hcmtlciB8fCBjb2RlXG4gICAgcmV0dXJuIGVmZmVjdHMuY2hlY2soXG4gICAgICBibGFua0xpbmUsIC8vIENhbuKAmXQgYmUgZW1wdHkgd2hlbiBpbnRlcnJ1cHRpbmcuXG4gICAgICBzZWxmLmludGVycnVwdCA/IG5vayA6IG9uQmxhbmssXG4gICAgICBlZmZlY3RzLmF0dGVtcHQoXG4gICAgICAgIGxpc3RJdGVtUHJlZml4V2hpdGVzcGFjZUNvbnN0cnVjdCxcbiAgICAgICAgZW5kT2ZQcmVmaXgsXG4gICAgICAgIG90aGVyUHJlZml4XG4gICAgICApXG4gICAgKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gb25CbGFuayhjb2RlKSB7XG4gICAgc2VsZi5jb250YWluZXJTdGF0ZS5pbml0aWFsQmxhbmtMaW5lID0gdHJ1ZVxuICAgIGluaXRpYWxTaXplKytcbiAgICByZXR1cm4gZW5kT2ZQcmVmaXgoY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIG90aGVyUHJlZml4KGNvZGUpIHtcbiAgICBpZiAobWFya2Rvd25TcGFjZShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5lbnRlcignbGlzdEl0ZW1QcmVmaXhXaGl0ZXNwYWNlJylcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KCdsaXN0SXRlbVByZWZpeFdoaXRlc3BhY2UnKVxuICAgICAgcmV0dXJuIGVuZE9mUHJlZml4XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gZW5kT2ZQcmVmaXgoY29kZSkge1xuICAgIHNlbGYuY29udGFpbmVyU3RhdGUuc2l6ZSA9XG4gICAgICBpbml0aWFsU2l6ZSArXG4gICAgICBzZWxmLnNsaWNlU2VyaWFsaXplKGVmZmVjdHMuZXhpdCgnbGlzdEl0ZW1QcmVmaXgnKSwgdHJ1ZSkubGVuZ3RoXG4gICAgcmV0dXJuIG9rKGNvZGUpXG4gIH1cbn1cbi8qKlxuICogQHR5cGUge1Rva2VuaXplcn1cbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHRXaXRoU3RhdGV9XG4gKi9cblxuZnVuY3Rpb24gdG9rZW5pemVMaXN0Q29udGludWF0aW9uKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgc2VsZi5jb250YWluZXJTdGF0ZS5fY2xvc2VGbG93ID0gdW5kZWZpbmVkXG4gIHJldHVybiBlZmZlY3RzLmNoZWNrKGJsYW5rTGluZSwgb25CbGFuaywgbm90QmxhbmspXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gb25CbGFuayhjb2RlKSB7XG4gICAgc2VsZi5jb250YWluZXJTdGF0ZS5mdXJ0aGVyQmxhbmtMaW5lcyA9XG4gICAgICBzZWxmLmNvbnRhaW5lclN0YXRlLmZ1cnRoZXJCbGFua0xpbmVzIHx8XG4gICAgICBzZWxmLmNvbnRhaW5lclN0YXRlLmluaXRpYWxCbGFua0xpbmUgLy8gV2UgaGF2ZSBhIGJsYW5rIGxpbmUuXG4gICAgLy8gU3RpbGwsIHRyeSB0byBjb25zdW1lIGF0IG1vc3QgdGhlIGl0ZW1zIHNpemUuXG5cbiAgICByZXR1cm4gZmFjdG9yeVNwYWNlKFxuICAgICAgZWZmZWN0cyxcbiAgICAgIG9rLFxuICAgICAgJ2xpc3RJdGVtSW5kZW50JyxcbiAgICAgIHNlbGYuY29udGFpbmVyU3RhdGUuc2l6ZSArIDFcbiAgICApKGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBub3RCbGFuayhjb2RlKSB7XG4gICAgaWYgKHNlbGYuY29udGFpbmVyU3RhdGUuZnVydGhlckJsYW5rTGluZXMgfHwgIW1hcmtkb3duU3BhY2UoY29kZSkpIHtcbiAgICAgIHNlbGYuY29udGFpbmVyU3RhdGUuZnVydGhlckJsYW5rTGluZXMgPSB1bmRlZmluZWRcbiAgICAgIHNlbGYuY29udGFpbmVyU3RhdGUuaW5pdGlhbEJsYW5rTGluZSA9IHVuZGVmaW5lZFxuICAgICAgcmV0dXJuIG5vdEluQ3VycmVudEl0ZW0oY29kZSlcbiAgICB9XG5cbiAgICBzZWxmLmNvbnRhaW5lclN0YXRlLmZ1cnRoZXJCbGFua0xpbmVzID0gdW5kZWZpbmVkXG4gICAgc2VsZi5jb250YWluZXJTdGF0ZS5pbml0aWFsQmxhbmtMaW5lID0gdW5kZWZpbmVkXG4gICAgcmV0dXJuIGVmZmVjdHMuYXR0ZW1wdChpbmRlbnRDb25zdHJ1Y3QsIG9rLCBub3RJbkN1cnJlbnRJdGVtKShjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gbm90SW5DdXJyZW50SXRlbShjb2RlKSB7XG4gICAgLy8gV2hpbGUgd2UgZG8gY29udGludWUsIHdlIHNpZ25hbCB0aGF0IHRoZSBmbG93IHNob3VsZCBiZSBjbG9zZWQuXG4gICAgc2VsZi5jb250YWluZXJTdGF0ZS5fY2xvc2VGbG93ID0gdHJ1ZSAvLyBBcyB3ZeKAmXJlIGNsb3NpbmcgZmxvdywgd2XigJlyZSBubyBsb25nZXIgaW50ZXJydXB0aW5nLlxuXG4gICAgc2VsZi5pbnRlcnJ1cHQgPSB1bmRlZmluZWRcbiAgICByZXR1cm4gZmFjdG9yeVNwYWNlKFxuICAgICAgZWZmZWN0cyxcbiAgICAgIGVmZmVjdHMuYXR0ZW1wdChsaXN0LCBvaywgbm9rKSxcbiAgICAgICdsaW5lUHJlZml4JyxcbiAgICAgIHNlbGYucGFyc2VyLmNvbnN0cnVjdHMuZGlzYWJsZS5udWxsLmluY2x1ZGVzKCdjb2RlSW5kZW50ZWQnKVxuICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICA6IDRcbiAgICApKGNvZGUpXG4gIH1cbn1cbi8qKlxuICogQHR5cGUge1Rva2VuaXplcn1cbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHRXaXRoU3RhdGV9XG4gKi9cblxuZnVuY3Rpb24gdG9rZW5pemVJbmRlbnQoZWZmZWN0cywgb2ssIG5vaykge1xuICBjb25zdCBzZWxmID0gdGhpc1xuICByZXR1cm4gZmFjdG9yeVNwYWNlKFxuICAgIGVmZmVjdHMsXG4gICAgYWZ0ZXJQcmVmaXgsXG4gICAgJ2xpc3RJdGVtSW5kZW50JyxcbiAgICBzZWxmLmNvbnRhaW5lclN0YXRlLnNpemUgKyAxXG4gIClcbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBhZnRlclByZWZpeChjb2RlKSB7XG4gICAgY29uc3QgdGFpbCA9IHNlbGYuZXZlbnRzW3NlbGYuZXZlbnRzLmxlbmd0aCAtIDFdXG4gICAgcmV0dXJuIHRhaWwgJiZcbiAgICAgIHRhaWxbMV0udHlwZSA9PT0gJ2xpc3RJdGVtSW5kZW50JyAmJlxuICAgICAgdGFpbFsyXS5zbGljZVNlcmlhbGl6ZSh0YWlsWzFdLCB0cnVlKS5sZW5ndGggPT09IHNlbGYuY29udGFpbmVyU3RhdGUuc2l6ZVxuICAgICAgPyBvayhjb2RlKVxuICAgICAgOiBub2soY29kZSlcbiAgfVxufVxuLyoqXG4gKiBAdHlwZSB7RXhpdGVyfVxuICogQHRoaXMge1Rva2VuaXplQ29udGV4dFdpdGhTdGF0ZX1cbiAqL1xuXG5mdW5jdGlvbiB0b2tlbml6ZUxpc3RFbmQoZWZmZWN0cykge1xuICBlZmZlY3RzLmV4aXQodGhpcy5jb250YWluZXJTdGF0ZS50eXBlKVxufVxuLyoqXG4gKiBAdHlwZSB7VG9rZW5pemVyfVxuICogQHRoaXMge1Rva2VuaXplQ29udGV4dFdpdGhTdGF0ZX1cbiAqL1xuXG5mdW5jdGlvbiB0b2tlbml6ZUxpc3RJdGVtUHJlZml4V2hpdGVzcGFjZShlZmZlY3RzLCBvaywgbm9rKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIHJldHVybiBmYWN0b3J5U3BhY2UoXG4gICAgZWZmZWN0cyxcbiAgICBhZnRlclByZWZpeCxcbiAgICAnbGlzdEl0ZW1QcmVmaXhXaGl0ZXNwYWNlJyxcbiAgICBzZWxmLnBhcnNlci5jb25zdHJ1Y3RzLmRpc2FibGUubnVsbC5pbmNsdWRlcygnY29kZUluZGVudGVkJylcbiAgICAgID8gdW5kZWZpbmVkXG4gICAgICA6IDQgKyAxXG4gIClcbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBhZnRlclByZWZpeChjb2RlKSB7XG4gICAgY29uc3QgdGFpbCA9IHNlbGYuZXZlbnRzW3NlbGYuZXZlbnRzLmxlbmd0aCAtIDFdXG4gICAgcmV0dXJuICFtYXJrZG93blNwYWNlKGNvZGUpICYmXG4gICAgICB0YWlsICYmXG4gICAgICB0YWlsWzFdLnR5cGUgPT09ICdsaXN0SXRlbVByZWZpeFdoaXRlc3BhY2UnXG4gICAgICA/IG9rKGNvZGUpXG4gICAgICA6IG5vayhjb2RlKVxuICB9XG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ29uc3RydWN0fSBDb25zdHJ1Y3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuVG9rZW5pemVyfSBUb2tlbml6ZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuRXhpdGVyfSBFeGl0ZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuU3RhdGV9IFN0YXRlXG4gKi9cbmltcG9ydCB7ZmFjdG9yeVNwYWNlfSBmcm9tICdtaWNyb21hcmstZmFjdG9yeS1zcGFjZSdcbmltcG9ydCB7bWFya2Rvd25TcGFjZX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBibG9ja1F1b3RlID0ge1xuICBuYW1lOiAnYmxvY2tRdW90ZScsXG4gIHRva2VuaXplOiB0b2tlbml6ZUJsb2NrUXVvdGVTdGFydCxcbiAgY29udGludWF0aW9uOiB7XG4gICAgdG9rZW5pemU6IHRva2VuaXplQmxvY2tRdW90ZUNvbnRpbnVhdGlvblxuICB9LFxuICBleGl0XG59XG4vKiogQHR5cGUge1Rva2VuaXplcn0gKi9cblxuZnVuY3Rpb24gdG9rZW5pemVCbG9ja1F1b3RlU3RhcnQoZWZmZWN0cywgb2ssIG5vaykge1xuICBjb25zdCBzZWxmID0gdGhpc1xuICByZXR1cm4gc3RhcnRcbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDYyKSB7XG4gICAgICBjb25zdCBzdGF0ZSA9IHNlbGYuY29udGFpbmVyU3RhdGVcblxuICAgICAgaWYgKCFzdGF0ZS5vcGVuKSB7XG4gICAgICAgIGVmZmVjdHMuZW50ZXIoJ2Jsb2NrUXVvdGUnLCB7XG4gICAgICAgICAgX2NvbnRhaW5lcjogdHJ1ZVxuICAgICAgICB9KVxuICAgICAgICBzdGF0ZS5vcGVuID0gdHJ1ZVxuICAgICAgfVxuXG4gICAgICBlZmZlY3RzLmVudGVyKCdibG9ja1F1b3RlUHJlZml4JylcbiAgICAgIGVmZmVjdHMuZW50ZXIoJ2Jsb2NrUXVvdGVNYXJrZXInKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQoJ2Jsb2NrUXVvdGVNYXJrZXInKVxuICAgICAgcmV0dXJuIGFmdGVyXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gYWZ0ZXIoY29kZSkge1xuICAgIGlmIChtYXJrZG93blNwYWNlKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKCdibG9ja1F1b3RlUHJlZml4V2hpdGVzcGFjZScpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCgnYmxvY2tRdW90ZVByZWZpeFdoaXRlc3BhY2UnKVxuICAgICAgZWZmZWN0cy5leGl0KCdibG9ja1F1b3RlUHJlZml4JylcbiAgICAgIHJldHVybiBva1xuICAgIH1cblxuICAgIGVmZmVjdHMuZXhpdCgnYmxvY2tRdW90ZVByZWZpeCcpXG4gICAgcmV0dXJuIG9rKGNvZGUpXG4gIH1cbn1cbi8qKiBAdHlwZSB7VG9rZW5pemVyfSAqL1xuXG5mdW5jdGlvbiB0b2tlbml6ZUJsb2NrUXVvdGVDb250aW51YXRpb24oZWZmZWN0cywgb2ssIG5vaykge1xuICByZXR1cm4gZmFjdG9yeVNwYWNlKFxuICAgIGVmZmVjdHMsXG4gICAgZWZmZWN0cy5hdHRlbXB0KGJsb2NrUXVvdGUsIG9rLCBub2spLFxuICAgICdsaW5lUHJlZml4JyxcbiAgICB0aGlzLnBhcnNlci5jb25zdHJ1Y3RzLmRpc2FibGUubnVsbC5pbmNsdWRlcygnY29kZUluZGVudGVkJykgPyB1bmRlZmluZWQgOiA0XG4gIClcbn1cbi8qKiBAdHlwZSB7RXhpdGVyfSAqL1xuXG5mdW5jdGlvbiBleGl0KGVmZmVjdHMpIHtcbiAgZWZmZWN0cy5leGl0KCdibG9ja1F1b3RlJylcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5FZmZlY3RzfSBFZmZlY3RzXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlN0YXRlfSBTdGF0ZVxuICovXG5pbXBvcnQge1xuICBhc2NpaUNvbnRyb2wsXG4gIG1hcmtkb3duTGluZUVuZGluZ09yU3BhY2UsXG4gIG1hcmtkb3duTGluZUVuZGluZ1xufSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInXG5cbi8qKlxuICogQHBhcmFtIHtFZmZlY3RzfSBlZmZlY3RzXG4gKiBAcGFyYW0ge1N0YXRlfSBva1xuICogQHBhcmFtIHtTdGF0ZX0gbm9rXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtzdHJpbmd9IGxpdGVyYWxUeXBlXG4gKiBAcGFyYW0ge3N0cmluZ30gbGl0ZXJhbE1hcmtlclR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nfSByYXdUeXBlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nVHlwZVxuICogQHBhcmFtIHtudW1iZXJ9IFttYXg9SW5maW5pdHldXG4gKiBAcmV0dXJucyB7U3RhdGV9XG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtcGFyYW1zXG5leHBvcnQgZnVuY3Rpb24gZmFjdG9yeURlc3RpbmF0aW9uKFxuICBlZmZlY3RzLFxuICBvayxcbiAgbm9rLFxuICB0eXBlLFxuICBsaXRlcmFsVHlwZSxcbiAgbGl0ZXJhbE1hcmtlclR5cGUsXG4gIHJhd1R5cGUsXG4gIHN0cmluZ1R5cGUsXG4gIG1heFxuKSB7XG4gIGNvbnN0IGxpbWl0ID0gbWF4IHx8IE51bWJlci5QT1NJVElWRV9JTkZJTklUWVxuICBsZXQgYmFsYW5jZSA9IDBcbiAgcmV0dXJuIHN0YXJ0XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA2MCkge1xuICAgICAgZWZmZWN0cy5lbnRlcih0eXBlKVxuICAgICAgZWZmZWN0cy5lbnRlcihsaXRlcmFsVHlwZSlcbiAgICAgIGVmZmVjdHMuZW50ZXIobGl0ZXJhbE1hcmtlclR5cGUpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdChsaXRlcmFsTWFya2VyVHlwZSlcbiAgICAgIHJldHVybiBkZXN0aW5hdGlvbkVuY2xvc2VkQmVmb3JlXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IG51bGwgfHwgY29kZSA9PT0gNDEgfHwgYXNjaWlDb250cm9sKGNvZGUpKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlKVxuICAgIGVmZmVjdHMuZW50ZXIocmF3VHlwZSlcbiAgICBlZmZlY3RzLmVudGVyKHN0cmluZ1R5cGUpXG4gICAgZWZmZWN0cy5lbnRlcignY2h1bmtTdHJpbmcnLCB7XG4gICAgICBjb250ZW50VHlwZTogJ3N0cmluZydcbiAgICB9KVxuICAgIHJldHVybiBkZXN0aW5hdGlvblJhdyhjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gZGVzdGluYXRpb25FbmNsb3NlZEJlZm9yZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDYyKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKGxpdGVyYWxNYXJrZXJUeXBlKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQobGl0ZXJhbE1hcmtlclR5cGUpXG4gICAgICBlZmZlY3RzLmV4aXQobGl0ZXJhbFR5cGUpXG4gICAgICBlZmZlY3RzLmV4aXQodHlwZSlcbiAgICAgIHJldHVybiBva1xuICAgIH1cblxuICAgIGVmZmVjdHMuZW50ZXIoc3RyaW5nVHlwZSlcbiAgICBlZmZlY3RzLmVudGVyKCdjaHVua1N0cmluZycsIHtcbiAgICAgIGNvbnRlbnRUeXBlOiAnc3RyaW5nJ1xuICAgIH0pXG4gICAgcmV0dXJuIGRlc3RpbmF0aW9uRW5jbG9zZWQoY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGRlc3RpbmF0aW9uRW5jbG9zZWQoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA2Mikge1xuICAgICAgZWZmZWN0cy5leGl0KCdjaHVua1N0cmluZycpXG4gICAgICBlZmZlY3RzLmV4aXQoc3RyaW5nVHlwZSlcbiAgICAgIHJldHVybiBkZXN0aW5hdGlvbkVuY2xvc2VkQmVmb3JlKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IG51bGwgfHwgY29kZSA9PT0gNjAgfHwgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIGNvZGUgPT09IDkyID8gZGVzdGluYXRpb25FbmNsb3NlZEVzY2FwZSA6IGRlc3RpbmF0aW9uRW5jbG9zZWRcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGRlc3RpbmF0aW9uRW5jbG9zZWRFc2NhcGUoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA2MCB8fCBjb2RlID09PSA2MiB8fCBjb2RlID09PSA5Mikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gZGVzdGluYXRpb25FbmNsb3NlZFxuICAgIH1cblxuICAgIHJldHVybiBkZXN0aW5hdGlvbkVuY2xvc2VkKGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBkZXN0aW5hdGlvblJhdyhjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDQwKSB7XG4gICAgICBpZiAoKytiYWxhbmNlID4gbGltaXQpIHJldHVybiBub2soY29kZSlcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGRlc3RpbmF0aW9uUmF3XG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IDQxKSB7XG4gICAgICBpZiAoIWJhbGFuY2UtLSkge1xuICAgICAgICBlZmZlY3RzLmV4aXQoJ2NodW5rU3RyaW5nJylcbiAgICAgICAgZWZmZWN0cy5leGl0KHN0cmluZ1R5cGUpXG4gICAgICAgIGVmZmVjdHMuZXhpdChyYXdUeXBlKVxuICAgICAgICBlZmZlY3RzLmV4aXQodHlwZSlcbiAgICAgICAgcmV0dXJuIG9rKGNvZGUpXG4gICAgICB9XG5cbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGRlc3RpbmF0aW9uUmF3XG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IG51bGwgfHwgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZShjb2RlKSkge1xuICAgICAgaWYgKGJhbGFuY2UpIHJldHVybiBub2soY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCgnY2h1bmtTdHJpbmcnKVxuICAgICAgZWZmZWN0cy5leGl0KHN0cmluZ1R5cGUpXG4gICAgICBlZmZlY3RzLmV4aXQocmF3VHlwZSlcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlKVxuICAgICAgcmV0dXJuIG9rKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKGFzY2lpQ29udHJvbChjb2RlKSkgcmV0dXJuIG5vayhjb2RlKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiBjb2RlID09PSA5MiA/IGRlc3RpbmF0aW9uUmF3RXNjYXBlIDogZGVzdGluYXRpb25SYXdcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGRlc3RpbmF0aW9uUmF3RXNjYXBlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gNDAgfHwgY29kZSA9PT0gNDEgfHwgY29kZSA9PT0gOTIpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGRlc3RpbmF0aW9uUmF3XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlc3RpbmF0aW9uUmF3KGNvZGUpXG4gIH1cbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5FZmZlY3RzfSBFZmZlY3RzXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlRva2VuaXplQ29udGV4dH0gVG9rZW5pemVDb250ZXh0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlN0YXRlfSBTdGF0ZVxuICovXG5pbXBvcnQge21hcmtkb3duTGluZUVuZGluZywgbWFya2Rvd25TcGFjZX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuXG4vKipcbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHR9XG4gKiBAcGFyYW0ge0VmZmVjdHN9IGVmZmVjdHNcbiAqIEBwYXJhbSB7U3RhdGV9IG9rXG4gKiBAcGFyYW0ge1N0YXRlfSBub2tcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFya2VyVHlwZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1R5cGVcbiAqIEByZXR1cm5zIHtTdGF0ZX1cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1wYXJhbXNcbmV4cG9ydCBmdW5jdGlvbiBmYWN0b3J5TGFiZWwoZWZmZWN0cywgb2ssIG5vaywgdHlwZSwgbWFya2VyVHlwZSwgc3RyaW5nVHlwZSkge1xuICBjb25zdCBzZWxmID0gdGhpc1xuICBsZXQgc2l6ZSA9IDBcbiAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuXG4gIGxldCBkYXRhXG4gIHJldHVybiBzdGFydFxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKHR5cGUpXG4gICAgZWZmZWN0cy5lbnRlcihtYXJrZXJUeXBlKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGVmZmVjdHMuZXhpdChtYXJrZXJUeXBlKVxuICAgIGVmZmVjdHMuZW50ZXIoc3RyaW5nVHlwZSlcbiAgICByZXR1cm4gYXRCcmVha1xuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gYXRCcmVhayhjb2RlKSB7XG4gICAgaWYgKFxuICAgICAgY29kZSA9PT0gbnVsbCB8fFxuICAgICAgY29kZSA9PT0gOTEgfHxcbiAgICAgIChjb2RlID09PSA5MyAmJiAhZGF0YSkgfHxcbiAgICAgIC8qIEhpZGRlbiBmb290bm90ZXMgaG9vayAqL1xuXG4gICAgICAvKiBjOCBpZ25vcmUgbmV4dCAzICovXG4gICAgICAoY29kZSA9PT0gOTQgJiZcbiAgICAgICAgIXNpemUgJiZcbiAgICAgICAgJ19oaWRkZW5Gb290bm90ZVN1cHBvcnQnIGluIHNlbGYucGFyc2VyLmNvbnN0cnVjdHMpIHx8XG4gICAgICBzaXplID4gOTk5XG4gICAgKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IDkzKSB7XG4gICAgICBlZmZlY3RzLmV4aXQoc3RyaW5nVHlwZSlcbiAgICAgIGVmZmVjdHMuZW50ZXIobWFya2VyVHlwZSlcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KG1hcmtlclR5cGUpXG4gICAgICBlZmZlY3RzLmV4aXQodHlwZSlcbiAgICAgIHJldHVybiBva1xuICAgIH1cblxuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIoJ2xpbmVFbmRpbmcnKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQoJ2xpbmVFbmRpbmcnKVxuICAgICAgcmV0dXJuIGF0QnJlYWtcbiAgICB9XG5cbiAgICBlZmZlY3RzLmVudGVyKCdjaHVua1N0cmluZycsIHtcbiAgICAgIGNvbnRlbnRUeXBlOiAnc3RyaW5nJ1xuICAgIH0pXG4gICAgcmV0dXJuIGxhYmVsKGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBsYWJlbChjb2RlKSB7XG4gICAgaWYgKFxuICAgICAgY29kZSA9PT0gbnVsbCB8fFxuICAgICAgY29kZSA9PT0gOTEgfHxcbiAgICAgIGNvZGUgPT09IDkzIHx8XG4gICAgICBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkgfHxcbiAgICAgIHNpemUrKyA+IDk5OVxuICAgICkge1xuICAgICAgZWZmZWN0cy5leGl0KCdjaHVua1N0cmluZycpXG4gICAgICByZXR1cm4gYXRCcmVhayhjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGRhdGEgPSBkYXRhIHx8ICFtYXJrZG93blNwYWNlKGNvZGUpXG4gICAgcmV0dXJuIGNvZGUgPT09IDkyID8gbGFiZWxFc2NhcGUgOiBsYWJlbFxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gbGFiZWxFc2NhcGUoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA5MSB8fCBjb2RlID09PSA5MiB8fCBjb2RlID09PSA5Mykge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBzaXplKytcbiAgICAgIHJldHVybiBsYWJlbFxuICAgIH1cblxuICAgIHJldHVybiBsYWJlbChjb2RlKVxuICB9XG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuRWZmZWN0c30gRWZmZWN0c1xuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5TdGF0ZX0gU3RhdGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ29kZX0gQ29kZVxuICovXG5pbXBvcnQge2ZhY3RvcnlTcGFjZX0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UnXG5pbXBvcnQge21hcmtkb3duTGluZUVuZGluZ30gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuXG4vKipcbiAqIEBwYXJhbSB7RWZmZWN0c30gZWZmZWN0c1xuICogQHBhcmFtIHtTdGF0ZX0gb2tcbiAqIEBwYXJhbSB7U3RhdGV9IG5va1xuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrZXJUeXBlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nVHlwZVxuICogQHJldHVybnMge1N0YXRlfVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXBhcmFtc1xuZXhwb3J0IGZ1bmN0aW9uIGZhY3RvcnlUaXRsZShlZmZlY3RzLCBvaywgbm9rLCB0eXBlLCBtYXJrZXJUeXBlLCBzdHJpbmdUeXBlKSB7XG4gIC8qKiBAdHlwZSB7Tm9uTnVsbGFibGU8Q29kZT59ICovXG4gIGxldCBtYXJrZXJcbiAgcmV0dXJuIHN0YXJ0XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGVmZmVjdHMuZW50ZXIodHlwZSlcbiAgICBlZmZlY3RzLmVudGVyKG1hcmtlclR5cGUpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgZWZmZWN0cy5leGl0KG1hcmtlclR5cGUpXG4gICAgbWFya2VyID0gY29kZSA9PT0gNDAgPyA0MSA6IGNvZGVcbiAgICByZXR1cm4gYXRGaXJzdFRpdGxlQnJlYWtcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGF0Rmlyc3RUaXRsZUJyZWFrKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbWFya2VyKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKG1hcmtlclR5cGUpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdChtYXJrZXJUeXBlKVxuICAgICAgZWZmZWN0cy5leGl0KHR5cGUpXG4gICAgICByZXR1cm4gb2tcbiAgICB9XG5cbiAgICBlZmZlY3RzLmVudGVyKHN0cmluZ1R5cGUpXG4gICAgcmV0dXJuIGF0VGl0bGVCcmVhayhjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gYXRUaXRsZUJyZWFrKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbWFya2VyKSB7XG4gICAgICBlZmZlY3RzLmV4aXQoc3RyaW5nVHlwZSlcbiAgICAgIHJldHVybiBhdEZpcnN0VGl0bGVCcmVhayhtYXJrZXIpXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBub2soY29kZSlcbiAgICB9IC8vIE5vdGU6IGJsYW5rIGxpbmVzIGNhbuKAmXQgZXhpc3QgaW4gY29udGVudC5cblxuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIoJ2xpbmVFbmRpbmcnKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQoJ2xpbmVFbmRpbmcnKVxuICAgICAgcmV0dXJuIGZhY3RvcnlTcGFjZShlZmZlY3RzLCBhdFRpdGxlQnJlYWssICdsaW5lUHJlZml4JylcbiAgICB9XG5cbiAgICBlZmZlY3RzLmVudGVyKCdjaHVua1N0cmluZycsIHtcbiAgICAgIGNvbnRlbnRUeXBlOiAnc3RyaW5nJ1xuICAgIH0pXG4gICAgcmV0dXJuIHRpdGxlKGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiB0aXRsZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG1hcmtlciB8fCBjb2RlID09PSBudWxsIHx8IG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgZWZmZWN0cy5leGl0KCdjaHVua1N0cmluZycpXG4gICAgICByZXR1cm4gYXRUaXRsZUJyZWFrKGNvZGUpXG4gICAgfVxuXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIGNvZGUgPT09IDkyID8gdGl0bGVFc2NhcGUgOiB0aXRsZVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gdGl0bGVFc2NhcGUoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBtYXJrZXIgfHwgY29kZSA9PT0gOTIpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIHRpdGxlXG4gICAgfVxuXG4gICAgcmV0dXJuIHRpdGxlKGNvZGUpXG4gIH1cbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5FZmZlY3RzfSBFZmZlY3RzXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlN0YXRlfSBTdGF0ZVxuICovXG5pbXBvcnQge2ZhY3RvcnlTcGFjZX0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UnXG5pbXBvcnQge21hcmtkb3duTGluZUVuZGluZywgbWFya2Rvd25TcGFjZX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuXG4vKipcbiAqIEBwYXJhbSB7RWZmZWN0c30gZWZmZWN0c1xuICogQHBhcmFtIHtTdGF0ZX0gb2tcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZhY3RvcnlXaGl0ZXNwYWNlKGVmZmVjdHMsIG9rKSB7XG4gIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cbiAgbGV0IHNlZW5cbiAgcmV0dXJuIHN0YXJ0XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIoJ2xpbmVFbmRpbmcnKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQoJ2xpbmVFbmRpbmcnKVxuICAgICAgc2VlbiA9IHRydWVcbiAgICAgIHJldHVybiBzdGFydFxuICAgIH1cblxuICAgIGlmIChtYXJrZG93blNwYWNlKGNvZGUpKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeVNwYWNlKFxuICAgICAgICBlZmZlY3RzLFxuICAgICAgICBzdGFydCxcbiAgICAgICAgc2VlbiA/ICdsaW5lUHJlZml4JyA6ICdsaW5lU3VmZml4J1xuICAgICAgKShjb2RlKVxuICAgIH1cblxuICAgIHJldHVybiBvayhjb2RlKVxuICB9XG59XG4iLCIvKipcbiAqIE5vcm1hbGl6ZSBhbiBpZGVudGlmaWVyIChzdWNoIGFzIHVzZWQgaW4gZGVmaW5pdGlvbnMpLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZUlkZW50aWZpZXIodmFsdWUpIHtcbiAgcmV0dXJuIChcbiAgICB2YWx1ZSAvLyBDb2xsYXBzZSBNYXJrZG93biB3aGl0ZXNwYWNlLlxuICAgICAgLnJlcGxhY2UoL1tcXHRcXG5cXHIgXSsvZywgJyAnKSAvLyBUcmltLlxuICAgICAgLnJlcGxhY2UoL14gfCAkL2csICcnKSAvLyBTb21lIGNoYXJhY3RlcnMgYXJlIGNvbnNpZGVyZWQg4oCcdXBwZXJjYXNl4oCdLCBidXQgaWYgdGhlaXIgbG93ZXJjYXNlXG4gICAgICAvLyBjb3VudGVycGFydCBpcyB1cHBlcmNhc2VkIHdpbGwgcmVzdWx0IGluIGEgZGlmZmVyZW50IHVwcGVyY2FzZVxuICAgICAgLy8gY2hhcmFjdGVyLlxuICAgICAgLy8gSGVuY2UsIHRvIGdldCB0aGF0IGZvcm0sIHdlIHBlcmZvcm0gYm90aCBsb3dlci0gYW5kIHVwcGVyY2FzZS5cbiAgICAgIC8vIFVwcGVyIGNhc2UgbWFrZXMgc3VyZSBrZXlzIHdpbGwgbm90IGludGVyYWN0IHdpdGggZGVmYXVsdCBwcm90b3R5cGFsXG4gICAgICAvLyBtZXRob2RzOiBubyBtZXRob2QgaXMgdXBwZXJjYXNlLlxuICAgICAgLnRvTG93ZXJDYXNlKClcbiAgICAgIC50b1VwcGVyQ2FzZSgpXG4gIClcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db25zdHJ1Y3R9IENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbml6ZXJ9IFRva2VuaXplclxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuaW1wb3J0IHtmYWN0b3J5RGVzdGluYXRpb259IGZyb20gJ21pY3JvbWFyay1mYWN0b3J5LWRlc3RpbmF0aW9uJ1xuaW1wb3J0IHtmYWN0b3J5TGFiZWx9IGZyb20gJ21pY3JvbWFyay1mYWN0b3J5LWxhYmVsJ1xuaW1wb3J0IHtmYWN0b3J5U3BhY2V9IGZyb20gJ21pY3JvbWFyay1mYWN0b3J5LXNwYWNlJ1xuaW1wb3J0IHtmYWN0b3J5VGl0bGV9IGZyb20gJ21pY3JvbWFyay1mYWN0b3J5LXRpdGxlJ1xuaW1wb3J0IHtmYWN0b3J5V2hpdGVzcGFjZX0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktd2hpdGVzcGFjZSdcbmltcG9ydCB7bm9ybWFsaXplSWRlbnRpZmllcn0gZnJvbSAnbWljcm9tYXJrLXV0aWwtbm9ybWFsaXplLWlkZW50aWZpZXInXG5pbXBvcnQge1xuICBtYXJrZG93bkxpbmVFbmRpbmcsXG4gIG1hcmtkb3duTGluZUVuZGluZ09yU3BhY2Vcbn0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBkZWZpbml0aW9uID0ge1xuICBuYW1lOiAnZGVmaW5pdGlvbicsXG4gIHRva2VuaXplOiB0b2tlbml6ZURlZmluaXRpb25cbn1cbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuXG5jb25zdCB0aXRsZUNvbnN0cnVjdCA9IHtcbiAgdG9rZW5pemU6IHRva2VuaXplVGl0bGUsXG4gIHBhcnRpYWw6IHRydWVcbn1cbi8qKiBAdHlwZSB7VG9rZW5pemVyfSAqL1xuXG5mdW5jdGlvbiB0b2tlbml6ZURlZmluaXRpb24oZWZmZWN0cywgb2ssIG5vaykge1xuICBjb25zdCBzZWxmID0gdGhpc1xuICAvKiogQHR5cGUge3N0cmluZ30gKi9cblxuICBsZXQgaWRlbnRpZmllclxuICByZXR1cm4gc3RhcnRcbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgZWZmZWN0cy5lbnRlcignZGVmaW5pdGlvbicpXG4gICAgcmV0dXJuIGZhY3RvcnlMYWJlbC5jYWxsKFxuICAgICAgc2VsZixcbiAgICAgIGVmZmVjdHMsXG4gICAgICBsYWJlbEFmdGVyLFxuICAgICAgbm9rLFxuICAgICAgJ2RlZmluaXRpb25MYWJlbCcsXG4gICAgICAnZGVmaW5pdGlvbkxhYmVsTWFya2VyJyxcbiAgICAgICdkZWZpbml0aW9uTGFiZWxTdHJpbmcnXG4gICAgKShjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gbGFiZWxBZnRlcihjb2RlKSB7XG4gICAgaWRlbnRpZmllciA9IG5vcm1hbGl6ZUlkZW50aWZpZXIoXG4gICAgICBzZWxmLnNsaWNlU2VyaWFsaXplKHNlbGYuZXZlbnRzW3NlbGYuZXZlbnRzLmxlbmd0aCAtIDFdWzFdKS5zbGljZSgxLCAtMSlcbiAgICApXG5cbiAgICBpZiAoY29kZSA9PT0gNTgpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIoJ2RlZmluaXRpb25NYXJrZXInKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQoJ2RlZmluaXRpb25NYXJrZXInKSAvLyBOb3RlOiBibGFuayBsaW5lcyBjYW7igJl0IGV4aXN0IGluIGNvbnRlbnQuXG5cbiAgICAgIHJldHVybiBmYWN0b3J5V2hpdGVzcGFjZShcbiAgICAgICAgZWZmZWN0cyxcbiAgICAgICAgZmFjdG9yeURlc3RpbmF0aW9uKFxuICAgICAgICAgIGVmZmVjdHMsXG4gICAgICAgICAgZWZmZWN0cy5hdHRlbXB0KFxuICAgICAgICAgICAgdGl0bGVDb25zdHJ1Y3QsXG4gICAgICAgICAgICBmYWN0b3J5U3BhY2UoZWZmZWN0cywgYWZ0ZXIsICd3aGl0ZXNwYWNlJyksXG4gICAgICAgICAgICBmYWN0b3J5U3BhY2UoZWZmZWN0cywgYWZ0ZXIsICd3aGl0ZXNwYWNlJylcbiAgICAgICAgICApLFxuICAgICAgICAgIG5vayxcbiAgICAgICAgICAnZGVmaW5pdGlvbkRlc3RpbmF0aW9uJyxcbiAgICAgICAgICAnZGVmaW5pdGlvbkRlc3RpbmF0aW9uTGl0ZXJhbCcsXG4gICAgICAgICAgJ2RlZmluaXRpb25EZXN0aW5hdGlvbkxpdGVyYWxNYXJrZXInLFxuICAgICAgICAgICdkZWZpbml0aW9uRGVzdGluYXRpb25SYXcnLFxuICAgICAgICAgICdkZWZpbml0aW9uRGVzdGluYXRpb25TdHJpbmcnXG4gICAgICAgIClcbiAgICAgIClcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBhZnRlcihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG51bGwgfHwgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmV4aXQoJ2RlZmluaXRpb24nKVxuXG4gICAgICBpZiAoIXNlbGYucGFyc2VyLmRlZmluZWQuaW5jbHVkZXMoaWRlbnRpZmllcikpIHtcbiAgICAgICAgc2VsZi5wYXJzZXIuZGVmaW5lZC5wdXNoKGlkZW50aWZpZXIpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvayhjb2RlKVxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxufVxuLyoqIEB0eXBlIHtUb2tlbml6ZXJ9ICovXG5cbmZ1bmN0aW9uIHRva2VuaXplVGl0bGUoZWZmZWN0cywgb2ssIG5vaykge1xuICByZXR1cm4gc3RhcnRcbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgcmV0dXJuIG1hcmtkb3duTGluZUVuZGluZ09yU3BhY2UoY29kZSlcbiAgICAgID8gZmFjdG9yeVdoaXRlc3BhY2UoZWZmZWN0cywgYmVmb3JlKShjb2RlKVxuICAgICAgOiBub2soY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGJlZm9yZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDM0IHx8IGNvZGUgPT09IDM5IHx8IGNvZGUgPT09IDQwKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeVRpdGxlKFxuICAgICAgICBlZmZlY3RzLFxuICAgICAgICBmYWN0b3J5U3BhY2UoZWZmZWN0cywgYWZ0ZXIsICd3aGl0ZXNwYWNlJyksXG4gICAgICAgIG5vayxcbiAgICAgICAgJ2RlZmluaXRpb25UaXRsZScsXG4gICAgICAgICdkZWZpbml0aW9uVGl0bGVNYXJrZXInLFxuICAgICAgICAnZGVmaW5pdGlvblRpdGxlU3RyaW5nJ1xuICAgICAgKShjb2RlKVxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGFmdGVyKGNvZGUpIHtcbiAgICByZXR1cm4gY29kZSA9PT0gbnVsbCB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkgPyBvayhjb2RlKSA6IG5vayhjb2RlKVxuICB9XG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ29uc3RydWN0fSBDb25zdHJ1Y3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuVG9rZW5pemVyfSBUb2tlbml6ZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuUmVzb2x2ZXJ9IFJlc29sdmVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlRva2VufSBUb2tlblxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuaW1wb3J0IHtmYWN0b3J5U3BhY2V9IGZyb20gJ21pY3JvbWFyay1mYWN0b3J5LXNwYWNlJ1xuaW1wb3J0IHttYXJrZG93bkxpbmVFbmRpbmd9IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3RlcidcblxuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5leHBvcnQgY29uc3QgY29kZUluZGVudGVkID0ge1xuICBuYW1lOiAnY29kZUluZGVudGVkJyxcbiAgdG9rZW5pemU6IHRva2VuaXplQ29kZUluZGVudGVkXG59XG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cblxuY29uc3QgaW5kZW50ZWRDb250ZW50ID0ge1xuICB0b2tlbml6ZTogdG9rZW5pemVJbmRlbnRlZENvbnRlbnQsXG4gIHBhcnRpYWw6IHRydWVcbn1cbi8qKiBAdHlwZSB7VG9rZW5pemVyfSAqL1xuXG5mdW5jdGlvbiB0b2tlbml6ZUNvZGVJbmRlbnRlZChlZmZlY3RzLCBvaywgbm9rKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIHJldHVybiBzdGFydFxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKCdjb2RlSW5kZW50ZWQnKVxuICAgIHJldHVybiBmYWN0b3J5U3BhY2UoZWZmZWN0cywgYWZ0ZXJTdGFydFByZWZpeCwgJ2xpbmVQcmVmaXgnLCA0ICsgMSkoY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGFmdGVyU3RhcnRQcmVmaXgoY29kZSkge1xuICAgIGNvbnN0IHRhaWwgPSBzZWxmLmV2ZW50c1tzZWxmLmV2ZW50cy5sZW5ndGggLSAxXVxuICAgIHJldHVybiB0YWlsICYmXG4gICAgICB0YWlsWzFdLnR5cGUgPT09ICdsaW5lUHJlZml4JyAmJlxuICAgICAgdGFpbFsyXS5zbGljZVNlcmlhbGl6ZSh0YWlsWzFdLCB0cnVlKS5sZW5ndGggPj0gNFxuICAgICAgPyBhZnRlclByZWZpeChjb2RlKVxuICAgICAgOiBub2soY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGFmdGVyUHJlZml4KGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGFmdGVyKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgcmV0dXJuIGVmZmVjdHMuYXR0ZW1wdChpbmRlbnRlZENvbnRlbnQsIGFmdGVyUHJlZml4LCBhZnRlcikoY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmVudGVyKCdjb2RlRmxvd1ZhbHVlJylcbiAgICByZXR1cm4gY29udGVudChjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gY29udGVudChjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG51bGwgfHwgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmV4aXQoJ2NvZGVGbG93VmFsdWUnKVxuICAgICAgcmV0dXJuIGFmdGVyUHJlZml4KGNvZGUpXG4gICAgfVxuXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIGNvbnRlbnRcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGFmdGVyKGNvZGUpIHtcbiAgICBlZmZlY3RzLmV4aXQoJ2NvZGVJbmRlbnRlZCcpXG4gICAgcmV0dXJuIG9rKGNvZGUpXG4gIH1cbn1cbi8qKiBAdHlwZSB7VG9rZW5pemVyfSAqL1xuXG5mdW5jdGlvbiB0b2tlbml6ZUluZGVudGVkQ29udGVudChlZmZlY3RzLCBvaywgbm9rKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIHJldHVybiBzdGFydFxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICAvLyBJZiB0aGlzIGlzIGEgbGF6eSBsaW5lLCBpdCBjYW7igJl0IGJlIGNvZGUuXG4gICAgaWYgKHNlbGYucGFyc2VyLmxhenlbc2VsZi5ub3coKS5saW5lXSkge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgIH1cblxuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIoJ2xpbmVFbmRpbmcnKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQoJ2xpbmVFbmRpbmcnKVxuICAgICAgcmV0dXJuIHN0YXJ0XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhY3RvcnlTcGFjZShlZmZlY3RzLCBhZnRlclByZWZpeCwgJ2xpbmVQcmVmaXgnLCA0ICsgMSkoY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGFmdGVyUHJlZml4KGNvZGUpIHtcbiAgICBjb25zdCB0YWlsID0gc2VsZi5ldmVudHNbc2VsZi5ldmVudHMubGVuZ3RoIC0gMV1cbiAgICByZXR1cm4gdGFpbCAmJlxuICAgICAgdGFpbFsxXS50eXBlID09PSAnbGluZVByZWZpeCcgJiZcbiAgICAgIHRhaWxbMl0uc2xpY2VTZXJpYWxpemUodGFpbFsxXSwgdHJ1ZSkubGVuZ3RoID49IDRcbiAgICAgID8gb2soY29kZSlcbiAgICAgIDogbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpXG4gICAgICA/IHN0YXJ0KGNvZGUpXG4gICAgICA6IG5vayhjb2RlKVxuICB9XG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ29uc3RydWN0fSBDb25zdHJ1Y3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuUmVzb2x2ZXJ9IFJlc29sdmVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlRva2VuaXplcn0gVG9rZW5pemVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlRva2VufSBUb2tlblxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuaW1wb3J0IHtmYWN0b3J5U3BhY2V9IGZyb20gJ21pY3JvbWFyay1mYWN0b3J5LXNwYWNlJ1xuaW1wb3J0IHtcbiAgbWFya2Rvd25MaW5lRW5kaW5nLFxuICBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlLFxuICBtYXJrZG93blNwYWNlXG59IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3RlcidcbmltcG9ydCB7c3BsaWNlfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaHVua2VkJ1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBoZWFkaW5nQXR4ID0ge1xuICBuYW1lOiAnaGVhZGluZ0F0eCcsXG4gIHRva2VuaXplOiB0b2tlbml6ZUhlYWRpbmdBdHgsXG4gIHJlc29sdmU6IHJlc29sdmVIZWFkaW5nQXR4XG59XG4vKiogQHR5cGUge1Jlc29sdmVyfSAqL1xuXG5mdW5jdGlvbiByZXNvbHZlSGVhZGluZ0F0eChldmVudHMsIGNvbnRleHQpIHtcbiAgbGV0IGNvbnRlbnRFbmQgPSBldmVudHMubGVuZ3RoIC0gMlxuICBsZXQgY29udGVudFN0YXJ0ID0gM1xuICAvKiogQHR5cGUge1Rva2VufSAqL1xuXG4gIGxldCBjb250ZW50XG4gIC8qKiBAdHlwZSB7VG9rZW59ICovXG5cbiAgbGV0IHRleHQgLy8gUHJlZml4IHdoaXRlc3BhY2UsIHBhcnQgb2YgdGhlIG9wZW5pbmcuXG5cbiAgaWYgKGV2ZW50c1tjb250ZW50U3RhcnRdWzFdLnR5cGUgPT09ICd3aGl0ZXNwYWNlJykge1xuICAgIGNvbnRlbnRTdGFydCArPSAyXG4gIH0gLy8gU3VmZml4IHdoaXRlc3BhY2UsIHBhcnQgb2YgdGhlIGNsb3NpbmcuXG5cbiAgaWYgKFxuICAgIGNvbnRlbnRFbmQgLSAyID4gY29udGVudFN0YXJ0ICYmXG4gICAgZXZlbnRzW2NvbnRlbnRFbmRdWzFdLnR5cGUgPT09ICd3aGl0ZXNwYWNlJ1xuICApIHtcbiAgICBjb250ZW50RW5kIC09IDJcbiAgfVxuXG4gIGlmIChcbiAgICBldmVudHNbY29udGVudEVuZF1bMV0udHlwZSA9PT0gJ2F0eEhlYWRpbmdTZXF1ZW5jZScgJiZcbiAgICAoY29udGVudFN0YXJ0ID09PSBjb250ZW50RW5kIC0gMSB8fFxuICAgICAgKGNvbnRlbnRFbmQgLSA0ID4gY29udGVudFN0YXJ0ICYmXG4gICAgICAgIGV2ZW50c1tjb250ZW50RW5kIC0gMl1bMV0udHlwZSA9PT0gJ3doaXRlc3BhY2UnKSlcbiAgKSB7XG4gICAgY29udGVudEVuZCAtPSBjb250ZW50U3RhcnQgKyAxID09PSBjb250ZW50RW5kID8gMiA6IDRcbiAgfVxuXG4gIGlmIChjb250ZW50RW5kID4gY29udGVudFN0YXJ0KSB7XG4gICAgY29udGVudCA9IHtcbiAgICAgIHR5cGU6ICdhdHhIZWFkaW5nVGV4dCcsXG4gICAgICBzdGFydDogZXZlbnRzW2NvbnRlbnRTdGFydF1bMV0uc3RhcnQsXG4gICAgICBlbmQ6IGV2ZW50c1tjb250ZW50RW5kXVsxXS5lbmRcbiAgICB9XG4gICAgdGV4dCA9IHtcbiAgICAgIHR5cGU6ICdjaHVua1RleHQnLFxuICAgICAgc3RhcnQ6IGV2ZW50c1tjb250ZW50U3RhcnRdWzFdLnN0YXJ0LFxuICAgICAgZW5kOiBldmVudHNbY29udGVudEVuZF1bMV0uZW5kLFxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBDb25zdGFudHMgYXJlIGZpbmUgdG8gYXNzaWduLlxuICAgICAgY29udGVudFR5cGU6ICd0ZXh0J1xuICAgIH1cbiAgICBzcGxpY2UoZXZlbnRzLCBjb250ZW50U3RhcnQsIGNvbnRlbnRFbmQgLSBjb250ZW50U3RhcnQgKyAxLCBbXG4gICAgICBbJ2VudGVyJywgY29udGVudCwgY29udGV4dF0sXG4gICAgICBbJ2VudGVyJywgdGV4dCwgY29udGV4dF0sXG4gICAgICBbJ2V4aXQnLCB0ZXh0LCBjb250ZXh0XSxcbiAgICAgIFsnZXhpdCcsIGNvbnRlbnQsIGNvbnRleHRdXG4gICAgXSlcbiAgfVxuXG4gIHJldHVybiBldmVudHNcbn1cbi8qKiBAdHlwZSB7VG9rZW5pemVyfSAqL1xuXG5mdW5jdGlvbiB0b2tlbml6ZUhlYWRpbmdBdHgoZWZmZWN0cywgb2ssIG5vaykge1xuICBjb25zdCBzZWxmID0gdGhpc1xuICBsZXQgc2l6ZSA9IDBcbiAgcmV0dXJuIHN0YXJ0XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGVmZmVjdHMuZW50ZXIoJ2F0eEhlYWRpbmcnKVxuICAgIGVmZmVjdHMuZW50ZXIoJ2F0eEhlYWRpbmdTZXF1ZW5jZScpXG4gICAgcmV0dXJuIGZlbmNlT3Blbkluc2lkZShjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gZmVuY2VPcGVuSW5zaWRlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gMzUgJiYgc2l6ZSsrIDwgNikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gZmVuY2VPcGVuSW5zaWRlXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IG51bGwgfHwgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5leGl0KCdhdHhIZWFkaW5nU2VxdWVuY2UnKVxuICAgICAgcmV0dXJuIHNlbGYuaW50ZXJydXB0ID8gb2soY29kZSkgOiBoZWFkaW5nQnJlYWsoY29kZSlcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBoZWFkaW5nQnJlYWsoY29kZSkge1xuICAgIGlmIChjb2RlID09PSAzNSkge1xuICAgICAgZWZmZWN0cy5lbnRlcignYXR4SGVhZGluZ1NlcXVlbmNlJylcbiAgICAgIHJldHVybiBzZXF1ZW5jZShjb2RlKVxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSBudWxsIHx8IG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgZWZmZWN0cy5leGl0KCdhdHhIZWFkaW5nJylcbiAgICAgIHJldHVybiBvayhjb2RlKVxuICAgIH1cblxuICAgIGlmIChtYXJrZG93blNwYWNlKGNvZGUpKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeVNwYWNlKGVmZmVjdHMsIGhlYWRpbmdCcmVhaywgJ3doaXRlc3BhY2UnKShjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuZW50ZXIoJ2F0eEhlYWRpbmdUZXh0JylcbiAgICByZXR1cm4gZGF0YShjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gc2VxdWVuY2UoY29kZSkge1xuICAgIGlmIChjb2RlID09PSAzNSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gc2VxdWVuY2VcbiAgICB9XG5cbiAgICBlZmZlY3RzLmV4aXQoJ2F0eEhlYWRpbmdTZXF1ZW5jZScpXG4gICAgcmV0dXJuIGhlYWRpbmdCcmVhayhjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gZGF0YShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG51bGwgfHwgY29kZSA9PT0gMzUgfHwgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5leGl0KCdhdHhIZWFkaW5nVGV4dCcpXG4gICAgICByZXR1cm4gaGVhZGluZ0JyZWFrKGNvZGUpXG4gICAgfVxuXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIGRhdGFcbiAgfVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkNvbnN0cnVjdH0gQ29uc3RydWN0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlJlc29sdmVyfSBSZXNvbHZlclxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbml6ZXJ9IFRva2VuaXplclxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5TdGF0ZX0gU3RhdGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ29kZX0gQ29kZVxuICovXG5pbXBvcnQge2ZhY3RvcnlTcGFjZX0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UnXG5pbXBvcnQge21hcmtkb3duTGluZUVuZGluZ30gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBzZXRleHRVbmRlcmxpbmUgPSB7XG4gIG5hbWU6ICdzZXRleHRVbmRlcmxpbmUnLFxuICB0b2tlbml6ZTogdG9rZW5pemVTZXRleHRVbmRlcmxpbmUsXG4gIHJlc29sdmVUbzogcmVzb2x2ZVRvU2V0ZXh0VW5kZXJsaW5lXG59XG4vKiogQHR5cGUge1Jlc29sdmVyfSAqL1xuXG5mdW5jdGlvbiByZXNvbHZlVG9TZXRleHRVbmRlcmxpbmUoZXZlbnRzLCBjb250ZXh0KSB7XG4gIGxldCBpbmRleCA9IGV2ZW50cy5sZW5ndGhcbiAgLyoqIEB0eXBlIHtudW1iZXJ8dW5kZWZpbmVkfSAqL1xuXG4gIGxldCBjb250ZW50XG4gIC8qKiBAdHlwZSB7bnVtYmVyfHVuZGVmaW5lZH0gKi9cblxuICBsZXQgdGV4dFxuICAvKiogQHR5cGUge251bWJlcnx1bmRlZmluZWR9ICovXG5cbiAgbGV0IGRlZmluaXRpb24gLy8gRmluZCB0aGUgb3BlbmluZyBvZiB0aGUgY29udGVudC5cbiAgLy8gSXTigJlsbCBhbHdheXMgZXhpc3Q6IHdlIGRvbuKAmXQgdG9rZW5pemUgaWYgaXQgaXNu4oCZdCB0aGVyZS5cblxuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIGlmIChldmVudHNbaW5kZXhdWzBdID09PSAnZW50ZXInKSB7XG4gICAgICBpZiAoZXZlbnRzW2luZGV4XVsxXS50eXBlID09PSAnY29udGVudCcpIHtcbiAgICAgICAgY29udGVudCA9IGluZGV4XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudHNbaW5kZXhdWzFdLnR5cGUgPT09ICdwYXJhZ3JhcGgnKSB7XG4gICAgICAgIHRleHQgPSBpbmRleFxuICAgICAgfVxuICAgIH0gLy8gRXhpdFxuICAgIGVsc2Uge1xuICAgICAgaWYgKGV2ZW50c1tpbmRleF1bMV0udHlwZSA9PT0gJ2NvbnRlbnQnKSB7XG4gICAgICAgIC8vIFJlbW92ZSB0aGUgY29udGVudCBlbmQgKGlmIG5lZWRlZCB3ZeKAmWxsIGFkZCBpdCBsYXRlcilcbiAgICAgICAgZXZlbnRzLnNwbGljZShpbmRleCwgMSlcbiAgICAgIH1cblxuICAgICAgaWYgKCFkZWZpbml0aW9uICYmIGV2ZW50c1tpbmRleF1bMV0udHlwZSA9PT0gJ2RlZmluaXRpb24nKSB7XG4gICAgICAgIGRlZmluaXRpb24gPSBpbmRleFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGhlYWRpbmcgPSB7XG4gICAgdHlwZTogJ3NldGV4dEhlYWRpbmcnLFxuICAgIHN0YXJ0OiBPYmplY3QuYXNzaWduKHt9LCBldmVudHNbdGV4dF1bMV0uc3RhcnQpLFxuICAgIGVuZDogT2JqZWN0LmFzc2lnbih7fSwgZXZlbnRzW2V2ZW50cy5sZW5ndGggLSAxXVsxXS5lbmQpXG4gIH0gLy8gQ2hhbmdlIHRoZSBwYXJhZ3JhcGggdG8gc2V0ZXh0IGhlYWRpbmcgdGV4dC5cblxuICBldmVudHNbdGV4dF1bMV0udHlwZSA9ICdzZXRleHRIZWFkaW5nVGV4dCcgLy8gSWYgd2UgaGF2ZSBkZWZpbml0aW9ucyBpbiB0aGUgY29udGVudCwgd2XigJlsbCBrZWVwIG9uIGhhdmluZyBjb250ZW50LFxuICAvLyBidXQgd2UgbmVlZCBtb3ZlIGl0LlxuXG4gIGlmIChkZWZpbml0aW9uKSB7XG4gICAgZXZlbnRzLnNwbGljZSh0ZXh0LCAwLCBbJ2VudGVyJywgaGVhZGluZywgY29udGV4dF0pXG4gICAgZXZlbnRzLnNwbGljZShkZWZpbml0aW9uICsgMSwgMCwgWydleGl0JywgZXZlbnRzW2NvbnRlbnRdWzFdLCBjb250ZXh0XSlcbiAgICBldmVudHNbY29udGVudF1bMV0uZW5kID0gT2JqZWN0LmFzc2lnbih7fSwgZXZlbnRzW2RlZmluaXRpb25dWzFdLmVuZClcbiAgfSBlbHNlIHtcbiAgICBldmVudHNbY29udGVudF1bMV0gPSBoZWFkaW5nXG4gIH0gLy8gQWRkIHRoZSBoZWFkaW5nIGV4aXQgYXQgdGhlIGVuZC5cblxuICBldmVudHMucHVzaChbJ2V4aXQnLCBoZWFkaW5nLCBjb250ZXh0XSlcbiAgcmV0dXJuIGV2ZW50c1xufVxuLyoqIEB0eXBlIHtUb2tlbml6ZXJ9ICovXG5cbmZ1bmN0aW9uIHRva2VuaXplU2V0ZXh0VW5kZXJsaW5lKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgbGV0IGluZGV4ID0gc2VsZi5ldmVudHMubGVuZ3RoXG4gIC8qKiBAdHlwZSB7Tm9uTnVsbGFibGU8Q29kZT59ICovXG5cbiAgbGV0IG1hcmtlclxuICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG5cbiAgbGV0IHBhcmFncmFwaCAvLyBGaW5kIGFuIG9wZW5pbmcuXG5cbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAvLyBTa2lwIGVudGVyL2V4aXQgb2YgbGluZSBlbmRpbmcsIGxpbmUgcHJlZml4LCBhbmQgY29udGVudC5cbiAgICAvLyBXZSBjYW4gbm93IGVpdGhlciBoYXZlIGEgZGVmaW5pdGlvbiBvciBhIHBhcmFncmFwaC5cbiAgICBpZiAoXG4gICAgICBzZWxmLmV2ZW50c1tpbmRleF1bMV0udHlwZSAhPT0gJ2xpbmVFbmRpbmcnICYmXG4gICAgICBzZWxmLmV2ZW50c1tpbmRleF1bMV0udHlwZSAhPT0gJ2xpbmVQcmVmaXgnICYmXG4gICAgICBzZWxmLmV2ZW50c1tpbmRleF1bMV0udHlwZSAhPT0gJ2NvbnRlbnQnXG4gICAgKSB7XG4gICAgICBwYXJhZ3JhcGggPSBzZWxmLmV2ZW50c1tpbmRleF1bMV0udHlwZSA9PT0gJ3BhcmFncmFwaCdcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0YXJ0XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGlmICghc2VsZi5wYXJzZXIubGF6eVtzZWxmLm5vdygpLmxpbmVdICYmIChzZWxmLmludGVycnVwdCB8fCBwYXJhZ3JhcGgpKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKCdzZXRleHRIZWFkaW5nTGluZScpXG4gICAgICBlZmZlY3RzLmVudGVyKCdzZXRleHRIZWFkaW5nTGluZVNlcXVlbmNlJylcbiAgICAgIG1hcmtlciA9IGNvZGVcbiAgICAgIHJldHVybiBjbG9zaW5nU2VxdWVuY2UoY29kZSlcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBjbG9zaW5nU2VxdWVuY2UoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBtYXJrZXIpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNsb3NpbmdTZXF1ZW5jZVxuICAgIH1cblxuICAgIGVmZmVjdHMuZXhpdCgnc2V0ZXh0SGVhZGluZ0xpbmVTZXF1ZW5jZScpXG4gICAgcmV0dXJuIGZhY3RvcnlTcGFjZShlZmZlY3RzLCBjbG9zaW5nU2VxdWVuY2VFbmQsICdsaW5lU3VmZml4JykoY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGNsb3NpbmdTZXF1ZW5jZUVuZChjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG51bGwgfHwgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmV4aXQoJ3NldGV4dEhlYWRpbmdMaW5lJylcbiAgICAgIHJldHVybiBvayhjb2RlKVxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxufVxuIiwiLyoqXG4gKiBMaXN0IG9mIGxvd2VyY2FzZSBIVE1MIHRhZyBuYW1lcyB3aGljaCB3aGVuIHBhcnNpbmcgSFRNTCAoZmxvdyksIHJlc3VsdFxuICogaW4gbW9yZSByZWxheGVkIHJ1bGVzIChjb25kaXRpb24gNik6IGJlY2F1c2UgdGhleSBhcmUga25vd24gYmxvY2tzLCB0aGVcbiAqIEhUTUwtbGlrZSBzeW50YXggZG9lc27igJl0IGhhdmUgdG8gYmUgc3RyaWN0bHkgcGFyc2VkLlxuICogRm9yIHRhZyBuYW1lcyBub3QgaW4gdGhpcyBsaXN0LCBhIG1vcmUgc3RyaWN0IGFsZ29yaXRobSAoY29uZGl0aW9uIDcpIGlzIHVzZWRcbiAqIHRvIGRldGVjdCB3aGV0aGVyIHRoZSBIVE1MLWxpa2Ugc3ludGF4IGlzIHNlZW4gYXMgSFRNTCAoZmxvdykgb3Igbm90LlxuICpcbiAqIFRoaXMgaXMgY29waWVkIGZyb206XG4gKiA8aHR0cHM6Ly9zcGVjLmNvbW1vbm1hcmsub3JnLzAuMjkvI2h0bWwtYmxvY2tzPi5cbiAqL1xuZXhwb3J0IGNvbnN0IGh0bWxCbG9ja05hbWVzID0gW1xuICAnYWRkcmVzcycsXG4gICdhcnRpY2xlJyxcbiAgJ2FzaWRlJyxcbiAgJ2Jhc2UnLFxuICAnYmFzZWZvbnQnLFxuICAnYmxvY2txdW90ZScsXG4gICdib2R5JyxcbiAgJ2NhcHRpb24nLFxuICAnY2VudGVyJyxcbiAgJ2NvbCcsXG4gICdjb2xncm91cCcsXG4gICdkZCcsXG4gICdkZXRhaWxzJyxcbiAgJ2RpYWxvZycsXG4gICdkaXInLFxuICAnZGl2JyxcbiAgJ2RsJyxcbiAgJ2R0JyxcbiAgJ2ZpZWxkc2V0JyxcbiAgJ2ZpZ2NhcHRpb24nLFxuICAnZmlndXJlJyxcbiAgJ2Zvb3RlcicsXG4gICdmb3JtJyxcbiAgJ2ZyYW1lJyxcbiAgJ2ZyYW1lc2V0JyxcbiAgJ2gxJyxcbiAgJ2gyJyxcbiAgJ2gzJyxcbiAgJ2g0JyxcbiAgJ2g1JyxcbiAgJ2g2JyxcbiAgJ2hlYWQnLFxuICAnaGVhZGVyJyxcbiAgJ2hyJyxcbiAgJ2h0bWwnLFxuICAnaWZyYW1lJyxcbiAgJ2xlZ2VuZCcsXG4gICdsaScsXG4gICdsaW5rJyxcbiAgJ21haW4nLFxuICAnbWVudScsXG4gICdtZW51aXRlbScsXG4gICduYXYnLFxuICAnbm9mcmFtZXMnLFxuICAnb2wnLFxuICAnb3B0Z3JvdXAnLFxuICAnb3B0aW9uJyxcbiAgJ3AnLFxuICAncGFyYW0nLFxuICAnc2VjdGlvbicsXG4gICdzb3VyY2UnLFxuICAnc3VtbWFyeScsXG4gICd0YWJsZScsXG4gICd0Ym9keScsXG4gICd0ZCcsXG4gICd0Zm9vdCcsXG4gICd0aCcsXG4gICd0aGVhZCcsXG4gICd0aXRsZScsXG4gICd0cicsXG4gICd0cmFjaycsXG4gICd1bCdcbl1cblxuLyoqXG4gKiBMaXN0IG9mIGxvd2VyY2FzZSBIVE1MIHRhZyBuYW1lcyB3aGljaCB3aGVuIHBhcnNpbmcgSFRNTCAoZmxvdyksIHJlc3VsdCBpblxuICogSFRNTCB0aGF0IGNhbiBpbmNsdWRlIGxpbmVzIHcvbyBleGl0aW5nLCB1bnRpbCBhIGNsb3NpbmcgdGFnIGFsc28gaW4gdGhpc1xuICogbGlzdCBpcyBmb3VuZCAoY29uZGl0aW9uIDEpLlxuICpcbiAqIFRoaXMgbW9kdWxlIGlzIGNvcGllZCBmcm9tOlxuICogPGh0dHBzOi8vc3BlYy5jb21tb25tYXJrLm9yZy8wLjI5LyNodG1sLWJsb2Nrcz4uXG4gKlxuICogTm90ZSB0aGF0IGB0ZXh0YXJlYWAgaXMgbm90IGF2YWlsYWJsZSBpbiBgQ29tbW9uTWFya0AwLjI5YCBidXQgaGFzIGJlZW5cbiAqIG1lcmdlZCB0byB0aGUgcHJpbWFyeSBicmFuY2ggYW5kIGlzIHNsYXRlZCB0byBiZSByZWxlYXNlZCBpbiB0aGUgbmV4dCByZWxlYXNlXG4gKiBvZiBDb21tb25NYXJrLlxuICovXG5leHBvcnQgY29uc3QgaHRtbFJhd05hbWVzID0gWydwcmUnLCAnc2NyaXB0JywgJ3N0eWxlJywgJ3RleHRhcmVhJ11cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db25zdHJ1Y3R9IENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5SZXNvbHZlcn0gUmVzb2x2ZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuVG9rZW5pemVyfSBUb2tlbml6ZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuU3RhdGV9IFN0YXRlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkNvZGV9IENvZGVcbiAqL1xuaW1wb3J0IHtcbiAgYXNjaWlBbHBoYSxcbiAgYXNjaWlBbHBoYW51bWVyaWMsXG4gIG1hcmtkb3duTGluZUVuZGluZyxcbiAgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZSxcbiAgbWFya2Rvd25TcGFjZVxufSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInXG5pbXBvcnQge2h0bWxCbG9ja05hbWVzLCBodG1sUmF3TmFtZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLWh0bWwtdGFnLW5hbWUnXG5pbXBvcnQge2JsYW5rTGluZX0gZnJvbSAnLi9ibGFuay1saW5lLmpzJ1xuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5cbmV4cG9ydCBjb25zdCBodG1sRmxvdyA9IHtcbiAgbmFtZTogJ2h0bWxGbG93JyxcbiAgdG9rZW5pemU6IHRva2VuaXplSHRtbEZsb3csXG4gIHJlc29sdmVUbzogcmVzb2x2ZVRvSHRtbEZsb3csXG4gIGNvbmNyZXRlOiB0cnVlXG59XG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cblxuY29uc3QgbmV4dEJsYW5rQ29uc3RydWN0ID0ge1xuICB0b2tlbml6ZTogdG9rZW5pemVOZXh0QmxhbmssXG4gIHBhcnRpYWw6IHRydWVcbn1cbi8qKiBAdHlwZSB7UmVzb2x2ZXJ9ICovXG5cbmZ1bmN0aW9uIHJlc29sdmVUb0h0bWxGbG93KGV2ZW50cykge1xuICBsZXQgaW5kZXggPSBldmVudHMubGVuZ3RoXG5cbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICBpZiAoZXZlbnRzW2luZGV4XVswXSA9PT0gJ2VudGVyJyAmJiBldmVudHNbaW5kZXhdWzFdLnR5cGUgPT09ICdodG1sRmxvdycpIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKGluZGV4ID4gMSAmJiBldmVudHNbaW5kZXggLSAyXVsxXS50eXBlID09PSAnbGluZVByZWZpeCcpIHtcbiAgICAvLyBBZGQgdGhlIHByZWZpeCBzdGFydCB0byB0aGUgSFRNTCB0b2tlbi5cbiAgICBldmVudHNbaW5kZXhdWzFdLnN0YXJ0ID0gZXZlbnRzW2luZGV4IC0gMl1bMV0uc3RhcnQgLy8gQWRkIHRoZSBwcmVmaXggc3RhcnQgdG8gdGhlIEhUTUwgbGluZSB0b2tlbi5cblxuICAgIGV2ZW50c1tpbmRleCArIDFdWzFdLnN0YXJ0ID0gZXZlbnRzW2luZGV4IC0gMl1bMV0uc3RhcnQgLy8gUmVtb3ZlIHRoZSBsaW5lIHByZWZpeC5cblxuICAgIGV2ZW50cy5zcGxpY2UoaW5kZXggLSAyLCAyKVxuICB9XG5cbiAgcmV0dXJuIGV2ZW50c1xufVxuLyoqIEB0eXBlIHtUb2tlbml6ZXJ9ICovXG5cbmZ1bmN0aW9uIHRva2VuaXplSHRtbEZsb3coZWZmZWN0cywgb2ssIG5vaykge1xuICBjb25zdCBzZWxmID0gdGhpc1xuICAvKiogQHR5cGUge251bWJlcn0gKi9cblxuICBsZXQga2luZFxuICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG5cbiAgbGV0IHN0YXJ0VGFnXG4gIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuXG4gIGxldCBidWZmZXJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG5cbiAgbGV0IGluZGV4XG4gIC8qKiBAdHlwZSB7Q29kZX0gKi9cblxuICBsZXQgbWFya2VyXG4gIHJldHVybiBzdGFydFxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKCdodG1sRmxvdycpXG4gICAgZWZmZWN0cy5lbnRlcignaHRtbEZsb3dEYXRhJylcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gb3BlblxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gb3Blbihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDMzKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBkZWNsYXJhdGlvblN0YXJ0XG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IDQ3KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiB0YWdDbG9zZVN0YXJ0XG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IDYzKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGtpbmQgPSAzIC8vIFdoaWxlIHdl4oCZcmUgaW4gYW4gaW5zdHJ1Y3Rpb24gaW5zdGVhZCBvZiBhIGRlY2xhcmF0aW9uLCB3ZeKAmXJlIG9uIGEgYD9gXG4gICAgICAvLyByaWdodCBub3csIHNvIHdlIGRvIG5lZWQgdG8gc2VhcmNoIGZvciBgPmAsIHNpbWlsYXIgdG8gZGVjbGFyYXRpb25zLlxuXG4gICAgICByZXR1cm4gc2VsZi5pbnRlcnJ1cHQgPyBvayA6IGNvbnRpbnVhdGlvbkRlY2xhcmF0aW9uSW5zaWRlXG4gICAgfVxuXG4gICAgaWYgKGFzY2lpQWxwaGEoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgYnVmZmVyID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKVxuICAgICAgc3RhcnRUYWcgPSB0cnVlXG4gICAgICByZXR1cm4gdGFnTmFtZVxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGRlY2xhcmF0aW9uU3RhcnQoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA0NSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBraW5kID0gMlxuICAgICAgcmV0dXJuIGNvbW1lbnRPcGVuSW5zaWRlXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IDkxKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGtpbmQgPSA1XG4gICAgICBidWZmZXIgPSAnQ0RBVEFbJ1xuICAgICAgaW5kZXggPSAwXG4gICAgICByZXR1cm4gY2RhdGFPcGVuSW5zaWRlXG4gICAgfVxuXG4gICAgaWYgKGFzY2lpQWxwaGEoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAga2luZCA9IDRcbiAgICAgIHJldHVybiBzZWxmLmludGVycnVwdCA/IG9rIDogY29udGludWF0aW9uRGVjbGFyYXRpb25JbnNpZGVcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBjb21tZW50T3Blbkluc2lkZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDQ1KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBzZWxmLmludGVycnVwdCA/IG9rIDogY29udGludWF0aW9uRGVjbGFyYXRpb25JbnNpZGVcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBjZGF0YU9wZW5JbnNpZGUoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBidWZmZXIuY2hhckNvZGVBdChpbmRleCsrKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gaW5kZXggPT09IGJ1ZmZlci5sZW5ndGhcbiAgICAgICAgPyBzZWxmLmludGVycnVwdFxuICAgICAgICAgID8gb2tcbiAgICAgICAgICA6IGNvbnRpbnVhdGlvblxuICAgICAgICA6IGNkYXRhT3Blbkluc2lkZVxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIHRhZ0Nsb3NlU3RhcnQoY29kZSkge1xuICAgIGlmIChhc2NpaUFscGhhKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGJ1ZmZlciA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSlcbiAgICAgIHJldHVybiB0YWdOYW1lXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gdGFnTmFtZShjb2RlKSB7XG4gICAgaWYgKFxuICAgICAgY29kZSA9PT0gbnVsbCB8fFxuICAgICAgY29kZSA9PT0gNDcgfHxcbiAgICAgIGNvZGUgPT09IDYyIHx8XG4gICAgICBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlKGNvZGUpXG4gICAgKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGNvZGUgIT09IDQ3ICYmXG4gICAgICAgIHN0YXJ0VGFnICYmXG4gICAgICAgIGh0bWxSYXdOYW1lcy5pbmNsdWRlcyhidWZmZXIudG9Mb3dlckNhc2UoKSlcbiAgICAgICkge1xuICAgICAgICBraW5kID0gMVxuICAgICAgICByZXR1cm4gc2VsZi5pbnRlcnJ1cHQgPyBvayhjb2RlKSA6IGNvbnRpbnVhdGlvbihjb2RlKVxuICAgICAgfVxuXG4gICAgICBpZiAoaHRtbEJsb2NrTmFtZXMuaW5jbHVkZXMoYnVmZmVyLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgIGtpbmQgPSA2XG5cbiAgICAgICAgaWYgKGNvZGUgPT09IDQ3KSB7XG4gICAgICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICAgICAgcmV0dXJuIGJhc2ljU2VsZkNsb3NpbmdcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzZWxmLmludGVycnVwdCA/IG9rKGNvZGUpIDogY29udGludWF0aW9uKGNvZGUpXG4gICAgICB9XG5cbiAgICAgIGtpbmQgPSA3IC8vIERvIG5vdCBzdXBwb3J0IGNvbXBsZXRlIEhUTUwgd2hlbiBpbnRlcnJ1cHRpbmdcblxuICAgICAgcmV0dXJuIHNlbGYuaW50ZXJydXB0ICYmICFzZWxmLnBhcnNlci5sYXp5W3NlbGYubm93KCkubGluZV1cbiAgICAgICAgPyBub2soY29kZSlcbiAgICAgICAgOiBzdGFydFRhZ1xuICAgICAgICA/IGNvbXBsZXRlQXR0cmlidXRlTmFtZUJlZm9yZShjb2RlKVxuICAgICAgICA6IGNvbXBsZXRlQ2xvc2luZ1RhZ0FmdGVyKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IDQ1IHx8IGFzY2lpQWxwaGFudW1lcmljKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGJ1ZmZlciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpXG4gICAgICByZXR1cm4gdGFnTmFtZVxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGJhc2ljU2VsZkNsb3NpbmcoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA2Mikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gc2VsZi5pbnRlcnJ1cHQgPyBvayA6IGNvbnRpbnVhdGlvblxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGNvbXBsZXRlQ2xvc2luZ1RhZ0FmdGVyKGNvZGUpIHtcbiAgICBpZiAobWFya2Rvd25TcGFjZShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gY29tcGxldGVDbG9zaW5nVGFnQWZ0ZXJcbiAgICB9XG5cbiAgICByZXR1cm4gY29tcGxldGVFbmQoY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGNvbXBsZXRlQXR0cmlidXRlTmFtZUJlZm9yZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDQ3KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBjb21wbGV0ZUVuZFxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSA1OCB8fCBjb2RlID09PSA5NSB8fCBhc2NpaUFscGhhKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBjb21wbGV0ZUF0dHJpYnV0ZU5hbWVcbiAgICB9XG5cbiAgICBpZiAobWFya2Rvd25TcGFjZShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gY29tcGxldGVBdHRyaWJ1dGVOYW1lQmVmb3JlXG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbXBsZXRlRW5kKGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBjb21wbGV0ZUF0dHJpYnV0ZU5hbWUoY29kZSkge1xuICAgIGlmIChcbiAgICAgIGNvZGUgPT09IDQ1IHx8XG4gICAgICBjb2RlID09PSA0NiB8fFxuICAgICAgY29kZSA9PT0gNTggfHxcbiAgICAgIGNvZGUgPT09IDk1IHx8XG4gICAgICBhc2NpaUFscGhhbnVtZXJpYyhjb2RlKVxuICAgICkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gY29tcGxldGVBdHRyaWJ1dGVOYW1lXG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbXBsZXRlQXR0cmlidXRlTmFtZUFmdGVyKGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBjb21wbGV0ZUF0dHJpYnV0ZU5hbWVBZnRlcihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDYxKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBjb21wbGV0ZUF0dHJpYnV0ZVZhbHVlQmVmb3JlXG4gICAgfVxuXG4gICAgaWYgKG1hcmtkb3duU3BhY2UoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNvbXBsZXRlQXR0cmlidXRlTmFtZUFmdGVyXG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbXBsZXRlQXR0cmlidXRlTmFtZUJlZm9yZShjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gY29tcGxldGVBdHRyaWJ1dGVWYWx1ZUJlZm9yZShjb2RlKSB7XG4gICAgaWYgKFxuICAgICAgY29kZSA9PT0gbnVsbCB8fFxuICAgICAgY29kZSA9PT0gNjAgfHxcbiAgICAgIGNvZGUgPT09IDYxIHx8XG4gICAgICBjb2RlID09PSA2MiB8fFxuICAgICAgY29kZSA9PT0gOTZcbiAgICApIHtcbiAgICAgIHJldHVybiBub2soY29kZSlcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gMzQgfHwgY29kZSA9PT0gMzkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgbWFya2VyID0gY29kZVxuICAgICAgcmV0dXJuIGNvbXBsZXRlQXR0cmlidXRlVmFsdWVRdW90ZWRcbiAgICB9XG5cbiAgICBpZiAobWFya2Rvd25TcGFjZShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gY29tcGxldGVBdHRyaWJ1dGVWYWx1ZUJlZm9yZVxuICAgIH1cblxuICAgIG1hcmtlciA9IG51bGxcbiAgICByZXR1cm4gY29tcGxldGVBdHRyaWJ1dGVWYWx1ZVVucXVvdGVkKGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBjb21wbGV0ZUF0dHJpYnV0ZVZhbHVlUXVvdGVkKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIHJldHVybiBub2soY29kZSlcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gbWFya2VyKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBjb21wbGV0ZUF0dHJpYnV0ZVZhbHVlUXVvdGVkQWZ0ZXJcbiAgICB9XG5cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gY29tcGxldGVBdHRyaWJ1dGVWYWx1ZVF1b3RlZFxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gY29tcGxldGVBdHRyaWJ1dGVWYWx1ZVVucXVvdGVkKGNvZGUpIHtcbiAgICBpZiAoXG4gICAgICBjb2RlID09PSBudWxsIHx8XG4gICAgICBjb2RlID09PSAzNCB8fFxuICAgICAgY29kZSA9PT0gMzkgfHxcbiAgICAgIGNvZGUgPT09IDYwIHx8XG4gICAgICBjb2RlID09PSA2MSB8fFxuICAgICAgY29kZSA9PT0gNjIgfHxcbiAgICAgIGNvZGUgPT09IDk2IHx8XG4gICAgICBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlKGNvZGUpXG4gICAgKSB7XG4gICAgICByZXR1cm4gY29tcGxldGVBdHRyaWJ1dGVOYW1lQWZ0ZXIoY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gY29tcGxldGVBdHRyaWJ1dGVWYWx1ZVVucXVvdGVkXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBjb21wbGV0ZUF0dHJpYnV0ZVZhbHVlUXVvdGVkQWZ0ZXIoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA0NyB8fCBjb2RlID09PSA2MiB8fCBtYXJrZG93blNwYWNlKGNvZGUpKSB7XG4gICAgICByZXR1cm4gY29tcGxldGVBdHRyaWJ1dGVOYW1lQmVmb3JlKGNvZGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gY29tcGxldGVFbmQoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA2Mikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gY29tcGxldGVBZnRlclxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGNvbXBsZXRlQWZ0ZXIoY29kZSkge1xuICAgIGlmIChtYXJrZG93blNwYWNlKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBjb21wbGV0ZUFmdGVyXG4gICAgfVxuXG4gICAgcmV0dXJuIGNvZGUgPT09IG51bGwgfHwgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpXG4gICAgICA/IGNvbnRpbnVhdGlvbihjb2RlKVxuICAgICAgOiBub2soY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGNvbnRpbnVhdGlvbihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDQ1ICYmIGtpbmQgPT09IDIpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNvbnRpbnVhdGlvbkNvbW1lbnRJbnNpZGVcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gNjAgJiYga2luZCA9PT0gMSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gY29udGludWF0aW9uUmF3VGFnT3BlblxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSA2MiAmJiBraW5kID09PSA0KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBjb250aW51YXRpb25DbG9zZVxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSA2MyAmJiBraW5kID09PSAzKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBjb250aW51YXRpb25EZWNsYXJhdGlvbkluc2lkZVxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSA5MyAmJiBraW5kID09PSA1KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBjb250aW51YXRpb25DaGFyYWN0ZXJEYXRhSW5zaWRlXG4gICAgfVxuXG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSAmJiAoa2luZCA9PT0gNiB8fCBraW5kID09PSA3KSkge1xuICAgICAgcmV0dXJuIGVmZmVjdHMuY2hlY2soXG4gICAgICAgIG5leHRCbGFua0NvbnN0cnVjdCxcbiAgICAgICAgY29udGludWF0aW9uQ2xvc2UsXG4gICAgICAgIGNvbnRpbnVhdGlvbkF0TGluZUVuZGluZ1xuICAgICAgKShjb2RlKVxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSBudWxsIHx8IG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgcmV0dXJuIGNvbnRpbnVhdGlvbkF0TGluZUVuZGluZyhjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiBjb250aW51YXRpb25cbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGNvbnRpbnVhdGlvbkF0TGluZUVuZGluZyhjb2RlKSB7XG4gICAgZWZmZWN0cy5leGl0KCdodG1sRmxvd0RhdGEnKVxuICAgIHJldHVybiBodG1sQ29udGludWVTdGFydChjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gaHRtbENvbnRpbnVlU3RhcnQoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gZG9uZShjb2RlKVxuICAgIH1cblxuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIHJldHVybiBlZmZlY3RzLmF0dGVtcHQoXG4gICAgICAgIHtcbiAgICAgICAgICB0b2tlbml6ZTogaHRtbExpbmVFbmQsXG4gICAgICAgICAgcGFydGlhbDogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBodG1sQ29udGludWVTdGFydCxcbiAgICAgICAgZG9uZVxuICAgICAgKShjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuZW50ZXIoJ2h0bWxGbG93RGF0YScpXG4gICAgcmV0dXJuIGNvbnRpbnVhdGlvbihjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7VG9rZW5pemVyfSAqL1xuXG4gIGZ1bmN0aW9uIGh0bWxMaW5lRW5kKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgICByZXR1cm4gc3RhcnRcbiAgICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gICAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgICAgZWZmZWN0cy5lbnRlcignbGluZUVuZGluZycpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCgnbGluZUVuZGluZycpXG4gICAgICByZXR1cm4gbGluZVN0YXJ0XG4gICAgfVxuICAgIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgICBmdW5jdGlvbiBsaW5lU3RhcnQoY29kZSkge1xuICAgICAgcmV0dXJuIHNlbGYucGFyc2VyLmxhenlbc2VsZi5ub3coKS5saW5lXSA/IG5vayhjb2RlKSA6IG9rKGNvZGUpXG4gICAgfVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gY29udGludWF0aW9uQ29tbWVudEluc2lkZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDQ1KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBjb250aW51YXRpb25EZWNsYXJhdGlvbkluc2lkZVxuICAgIH1cblxuICAgIHJldHVybiBjb250aW51YXRpb24oY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGNvbnRpbnVhdGlvblJhd1RhZ09wZW4oY29kZSkge1xuICAgIGlmIChjb2RlID09PSA0Nykge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBidWZmZXIgPSAnJ1xuICAgICAgcmV0dXJuIGNvbnRpbnVhdGlvblJhd0VuZFRhZ1xuICAgIH1cblxuICAgIHJldHVybiBjb250aW51YXRpb24oY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGNvbnRpbnVhdGlvblJhd0VuZFRhZyhjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDYyICYmIGh0bWxSYXdOYW1lcy5pbmNsdWRlcyhidWZmZXIudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNvbnRpbnVhdGlvbkNsb3NlXG4gICAgfVxuXG4gICAgaWYgKGFzY2lpQWxwaGEoY29kZSkgJiYgYnVmZmVyLmxlbmd0aCA8IDgpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgYnVmZmVyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSlcbiAgICAgIHJldHVybiBjb250aW51YXRpb25SYXdFbmRUYWdcbiAgICB9XG5cbiAgICByZXR1cm4gY29udGludWF0aW9uKGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBjb250aW51YXRpb25DaGFyYWN0ZXJEYXRhSW5zaWRlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gOTMpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNvbnRpbnVhdGlvbkRlY2xhcmF0aW9uSW5zaWRlXG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRpbnVhdGlvbihjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gY29udGludWF0aW9uRGVjbGFyYXRpb25JbnNpZGUoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA2Mikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gY29udGludWF0aW9uQ2xvc2VcbiAgICB9XG5cbiAgICByZXR1cm4gY29udGludWF0aW9uKGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBjb250aW51YXRpb25DbG9zZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG51bGwgfHwgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmV4aXQoJ2h0bWxGbG93RGF0YScpXG4gICAgICByZXR1cm4gZG9uZShjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiBjb250aW51YXRpb25DbG9zZVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gZG9uZShjb2RlKSB7XG4gICAgZWZmZWN0cy5leGl0KCdodG1sRmxvdycpXG4gICAgcmV0dXJuIG9rKGNvZGUpXG4gIH1cbn1cbi8qKiBAdHlwZSB7VG9rZW5pemVyfSAqL1xuXG5mdW5jdGlvbiB0b2tlbml6ZU5leHRCbGFuayhlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHJldHVybiBzdGFydFxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBlZmZlY3RzLmV4aXQoJ2h0bWxGbG93RGF0YScpXG4gICAgZWZmZWN0cy5lbnRlcignbGluZUVuZGluZ0JsYW5rJylcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICBlZmZlY3RzLmV4aXQoJ2xpbmVFbmRpbmdCbGFuaycpXG4gICAgcmV0dXJuIGVmZmVjdHMuYXR0ZW1wdChibGFua0xpbmUsIG9rLCBub2spXG4gIH1cbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db25zdHJ1Y3R9IENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbml6ZXJ9IFRva2VuaXplclxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5TdGF0ZX0gU3RhdGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ29kZX0gQ29kZVxuICovXG5pbXBvcnQge2ZhY3RvcnlTcGFjZX0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UnXG5pbXBvcnQge1xuICBtYXJrZG93bkxpbmVFbmRpbmcsXG4gIG1hcmtkb3duTGluZUVuZGluZ09yU3BhY2Vcbn0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBjb2RlRmVuY2VkID0ge1xuICBuYW1lOiAnY29kZUZlbmNlZCcsXG4gIHRva2VuaXplOiB0b2tlbml6ZUNvZGVGZW5jZWQsXG4gIGNvbmNyZXRlOiB0cnVlXG59XG4vKiogQHR5cGUge1Rva2VuaXplcn0gKi9cblxuZnVuY3Rpb24gdG9rZW5pemVDb2RlRmVuY2VkKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5cbiAgY29uc3QgY2xvc2luZ0ZlbmNlQ29uc3RydWN0ID0ge1xuICAgIHRva2VuaXplOiB0b2tlbml6ZUNsb3NpbmdGZW5jZSxcbiAgICBwYXJ0aWFsOiB0cnVlXG4gIH1cbiAgLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5cbiAgY29uc3Qgbm9uTGF6eUxpbmUgPSB7XG4gICAgdG9rZW5pemU6IHRva2VuaXplTm9uTGF6eUxpbmUsXG4gICAgcGFydGlhbDogdHJ1ZVxuICB9XG4gIGNvbnN0IHRhaWwgPSB0aGlzLmV2ZW50c1t0aGlzLmV2ZW50cy5sZW5ndGggLSAxXVxuICBjb25zdCBpbml0aWFsUHJlZml4ID1cbiAgICB0YWlsICYmIHRhaWxbMV0udHlwZSA9PT0gJ2xpbmVQcmVmaXgnXG4gICAgICA/IHRhaWxbMl0uc2xpY2VTZXJpYWxpemUodGFpbFsxXSwgdHJ1ZSkubGVuZ3RoXG4gICAgICA6IDBcbiAgbGV0IHNpemVPcGVuID0gMFxuICAvKiogQHR5cGUge05vbk51bGxhYmxlPENvZGU+fSAqL1xuXG4gIGxldCBtYXJrZXJcbiAgcmV0dXJuIHN0YXJ0XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGVmZmVjdHMuZW50ZXIoJ2NvZGVGZW5jZWQnKVxuICAgIGVmZmVjdHMuZW50ZXIoJ2NvZGVGZW5jZWRGZW5jZScpXG4gICAgZWZmZWN0cy5lbnRlcignY29kZUZlbmNlZEZlbmNlU2VxdWVuY2UnKVxuICAgIG1hcmtlciA9IGNvZGVcbiAgICByZXR1cm4gc2VxdWVuY2VPcGVuKGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBzZXF1ZW5jZU9wZW4oY29kZSkge1xuICAgIGlmIChjb2RlID09PSBtYXJrZXIpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgc2l6ZU9wZW4rK1xuICAgICAgcmV0dXJuIHNlcXVlbmNlT3BlblxuICAgIH1cblxuICAgIGVmZmVjdHMuZXhpdCgnY29kZUZlbmNlZEZlbmNlU2VxdWVuY2UnKVxuICAgIHJldHVybiBzaXplT3BlbiA8IDNcbiAgICAgID8gbm9rKGNvZGUpXG4gICAgICA6IGZhY3RvcnlTcGFjZShlZmZlY3RzLCBpbmZvT3BlbiwgJ3doaXRlc3BhY2UnKShjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gaW5mb09wZW4oY29kZSkge1xuICAgIGlmIChjb2RlID09PSBudWxsIHx8IG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgcmV0dXJuIG9wZW5BZnRlcihjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuZW50ZXIoJ2NvZGVGZW5jZWRGZW5jZUluZm8nKVxuICAgIGVmZmVjdHMuZW50ZXIoJ2NodW5rU3RyaW5nJywge1xuICAgICAgY29udGVudFR5cGU6ICdzdHJpbmcnXG4gICAgfSlcbiAgICByZXR1cm4gaW5mbyhjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gaW5mbyhjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG51bGwgfHwgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5leGl0KCdjaHVua1N0cmluZycpXG4gICAgICBlZmZlY3RzLmV4aXQoJ2NvZGVGZW5jZWRGZW5jZUluZm8nKVxuICAgICAgcmV0dXJuIGZhY3RvcnlTcGFjZShlZmZlY3RzLCBpbmZvQWZ0ZXIsICd3aGl0ZXNwYWNlJykoY29kZSlcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gOTYgJiYgY29kZSA9PT0gbWFya2VyKSByZXR1cm4gbm9rKGNvZGUpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIGluZm9cbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGluZm9BZnRlcihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG51bGwgfHwgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICByZXR1cm4gb3BlbkFmdGVyKGNvZGUpXG4gICAgfVxuXG4gICAgZWZmZWN0cy5lbnRlcignY29kZUZlbmNlZEZlbmNlTWV0YScpXG4gICAgZWZmZWN0cy5lbnRlcignY2h1bmtTdHJpbmcnLCB7XG4gICAgICBjb250ZW50VHlwZTogJ3N0cmluZydcbiAgICB9KVxuICAgIHJldHVybiBtZXRhKGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBtZXRhKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZXhpdCgnY2h1bmtTdHJpbmcnKVxuICAgICAgZWZmZWN0cy5leGl0KCdjb2RlRmVuY2VkRmVuY2VNZXRhJylcbiAgICAgIHJldHVybiBvcGVuQWZ0ZXIoY29kZSlcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gOTYgJiYgY29kZSA9PT0gbWFya2VyKSByZXR1cm4gbm9rKGNvZGUpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIG1ldGFcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIG9wZW5BZnRlcihjb2RlKSB7XG4gICAgZWZmZWN0cy5leGl0KCdjb2RlRmVuY2VkRmVuY2UnKVxuICAgIHJldHVybiBzZWxmLmludGVycnVwdCA/IG9rKGNvZGUpIDogY29udGVudFN0YXJ0KGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBjb250ZW50U3RhcnQoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gYWZ0ZXIoY29kZSlcbiAgICB9XG5cbiAgICBpZiAobWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICByZXR1cm4gZWZmZWN0cy5hdHRlbXB0KFxuICAgICAgICBub25MYXp5TGluZSxcbiAgICAgICAgZWZmZWN0cy5hdHRlbXB0KFxuICAgICAgICAgIGNsb3NpbmdGZW5jZUNvbnN0cnVjdCxcbiAgICAgICAgICBhZnRlcixcbiAgICAgICAgICBpbml0aWFsUHJlZml4XG4gICAgICAgICAgICA/IGZhY3RvcnlTcGFjZShcbiAgICAgICAgICAgICAgICBlZmZlY3RzLFxuICAgICAgICAgICAgICAgIGNvbnRlbnRTdGFydCxcbiAgICAgICAgICAgICAgICAnbGluZVByZWZpeCcsXG4gICAgICAgICAgICAgICAgaW5pdGlhbFByZWZpeCArIDFcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgOiBjb250ZW50U3RhcnRcbiAgICAgICAgKSxcbiAgICAgICAgYWZ0ZXJcbiAgICAgICkoY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmVudGVyKCdjb2RlRmxvd1ZhbHVlJylcbiAgICByZXR1cm4gY29udGVudENvbnRpbnVlKGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBjb250ZW50Q29udGludWUoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBudWxsIHx8IG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgZWZmZWN0cy5leGl0KCdjb2RlRmxvd1ZhbHVlJylcbiAgICAgIHJldHVybiBjb250ZW50U3RhcnQoY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gY29udGVudENvbnRpbnVlXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBhZnRlcihjb2RlKSB7XG4gICAgZWZmZWN0cy5leGl0KCdjb2RlRmVuY2VkJylcbiAgICByZXR1cm4gb2soY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1Rva2VuaXplcn0gKi9cblxuICBmdW5jdGlvbiB0b2tlbml6ZU5vbkxhenlMaW5lKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgICBjb25zdCBzZWxmID0gdGhpc1xuICAgIHJldHVybiBzdGFydFxuICAgIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKCdsaW5lRW5kaW5nJylcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KCdsaW5lRW5kaW5nJylcbiAgICAgIHJldHVybiBsaW5lU3RhcnRcbiAgICB9XG4gICAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICAgIGZ1bmN0aW9uIGxpbmVTdGFydChjb2RlKSB7XG4gICAgICByZXR1cm4gc2VsZi5wYXJzZXIubGF6eVtzZWxmLm5vdygpLmxpbmVdID8gbm9rKGNvZGUpIDogb2soY29kZSlcbiAgICB9XG4gIH1cbiAgLyoqIEB0eXBlIHtUb2tlbml6ZXJ9ICovXG5cbiAgZnVuY3Rpb24gdG9rZW5pemVDbG9zaW5nRmVuY2UoZWZmZWN0cywgb2ssIG5vaykge1xuICAgIGxldCBzaXplID0gMFxuICAgIHJldHVybiBmYWN0b3J5U3BhY2UoXG4gICAgICBlZmZlY3RzLFxuICAgICAgY2xvc2luZ1NlcXVlbmNlU3RhcnQsXG4gICAgICAnbGluZVByZWZpeCcsXG4gICAgICB0aGlzLnBhcnNlci5jb25zdHJ1Y3RzLmRpc2FibGUubnVsbC5pbmNsdWRlcygnY29kZUluZGVudGVkJylcbiAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgOiA0XG4gICAgKVxuICAgIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgICBmdW5jdGlvbiBjbG9zaW5nU2VxdWVuY2VTdGFydChjb2RlKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKCdjb2RlRmVuY2VkRmVuY2UnKVxuICAgICAgZWZmZWN0cy5lbnRlcignY29kZUZlbmNlZEZlbmNlU2VxdWVuY2UnKVxuICAgICAgcmV0dXJuIGNsb3NpbmdTZXF1ZW5jZShjb2RlKVxuICAgIH1cbiAgICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gICAgZnVuY3Rpb24gY2xvc2luZ1NlcXVlbmNlKGNvZGUpIHtcbiAgICAgIGlmIChjb2RlID09PSBtYXJrZXIpIHtcbiAgICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICAgIHNpemUrK1xuICAgICAgICByZXR1cm4gY2xvc2luZ1NlcXVlbmNlXG4gICAgICB9XG5cbiAgICAgIGlmIChzaXplIDwgc2l6ZU9wZW4pIHJldHVybiBub2soY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCgnY29kZUZlbmNlZEZlbmNlU2VxdWVuY2UnKVxuICAgICAgcmV0dXJuIGZhY3RvcnlTcGFjZShlZmZlY3RzLCBjbG9zaW5nU2VxdWVuY2VFbmQsICd3aGl0ZXNwYWNlJykoY29kZSlcbiAgICB9XG4gICAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICAgIGZ1bmN0aW9uIGNsb3NpbmdTZXF1ZW5jZUVuZChjb2RlKSB7XG4gICAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgICAgZWZmZWN0cy5leGl0KCdjb2RlRmVuY2VkRmVuY2UnKVxuICAgICAgICByZXR1cm4gb2soY29kZSlcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgIH1cbiAgfVxufVxuIiwiLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbnZhciBzZW1pY29sb24gPSA1OSAvLyBgO2Bcbi8qKiBAdHlwZSB7SFRNTEVsZW1lbnR9ICovXG52YXIgZWxlbWVudFxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBjaGFyYWN0ZXJzXG4gKiBAcmV0dXJucyB7c3RyaW5nfGZhbHNlfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlRW50aXR5KGNoYXJhY3RlcnMpIHtcbiAgdmFyIGVudGl0eSA9ICcmJyArIGNoYXJhY3RlcnMgKyAnOydcbiAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gIHZhciBjaGFyXG5cbiAgZWxlbWVudCA9IGVsZW1lbnQgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaScpXG4gIGVsZW1lbnQuaW5uZXJIVE1MID0gZW50aXR5XG4gIGNoYXIgPSBlbGVtZW50LnRleHRDb250ZW50XG5cbiAgLy8gU29tZSBlbnRpdGllcyBkbyBub3QgcmVxdWlyZSB0aGUgY2xvc2luZyBzZW1pY29sb24gKGAmbm90YCAtIGZvciBpbnN0YW5jZSksXG4gIC8vIHdoaWNoIGxlYWRzIHRvIHNpdHVhdGlvbnMgd2hlcmUgcGFyc2luZyB0aGUgYXNzdW1lZCBlbnRpdHkgb2YgYCZub3RpdDtgXG4gIC8vIHdpbGwgcmVzdWx0IGluIHRoZSBzdHJpbmcgYMKsaXQ7YC5cbiAgLy8gV2hlbiB3ZSBlbmNvdW50ZXIgYSB0cmFpbGluZyBzZW1pY29sb24gYWZ0ZXIgcGFyc2luZyBhbmQgdGhlIGVudGl0eSB0b1xuICAvLyBkZWNvZGUgd2FzIG5vdCBhIHNlbWljb2xvbiAoYCZzZW1pO2ApLCB3ZSBjYW4gYXNzdW1lIHRoYXQgdGhlIG1hdGNoaW5nIHdhc1xuICAvLyBpbmNvbXBsZXRlXG4gIGlmIChjaGFyLmNoYXJDb2RlQXQoY2hhci5sZW5ndGggLSAxKSA9PT0gc2VtaWNvbG9uICYmIGNoYXJhY3RlcnMgIT09ICdzZW1pJykge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gSWYgdGhlIGRlY29kZWQgc3RyaW5nIGlzIGVxdWFsIHRvIHRoZSBpbnB1dCwgdGhlIGVudGl0eSB3YXMgbm90IHZhbGlkXG4gIHJldHVybiBjaGFyID09PSBlbnRpdHkgPyBmYWxzZSA6IGNoYXJcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db25zdHJ1Y3R9IENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbml6ZXJ9IFRva2VuaXplclxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbn0gVG9rZW5cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuU3RhdGV9IFN0YXRlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkNvZGV9IENvZGVcbiAqL1xuaW1wb3J0IHtkZWNvZGVFbnRpdHl9IGZyb20gJ3BhcnNlLWVudGl0aWVzL2RlY29kZS1lbnRpdHkuanMnXG5pbXBvcnQge1xuICBhc2NpaUFscGhhbnVtZXJpYyxcbiAgYXNjaWlEaWdpdCxcbiAgYXNjaWlIZXhEaWdpdFxufSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInXG5cbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuZXhwb3J0IGNvbnN0IGNoYXJhY3RlclJlZmVyZW5jZSA9IHtcbiAgbmFtZTogJ2NoYXJhY3RlclJlZmVyZW5jZScsXG4gIHRva2VuaXplOiB0b2tlbml6ZUNoYXJhY3RlclJlZmVyZW5jZVxufVxuLyoqIEB0eXBlIHtUb2tlbml6ZXJ9ICovXG5cbmZ1bmN0aW9uIHRva2VuaXplQ2hhcmFjdGVyUmVmZXJlbmNlKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgbGV0IHNpemUgPSAwXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuXG4gIGxldCBtYXhcbiAgLyoqIEB0eXBlIHsoY29kZTogQ29kZSkgPT4gY29kZSBpcyBudW1iZXJ9ICovXG5cbiAgbGV0IHRlc3RcbiAgcmV0dXJuIHN0YXJ0XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGVmZmVjdHMuZW50ZXIoJ2NoYXJhY3RlclJlZmVyZW5jZScpXG4gICAgZWZmZWN0cy5lbnRlcignY2hhcmFjdGVyUmVmZXJlbmNlTWFya2VyJylcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICBlZmZlY3RzLmV4aXQoJ2NoYXJhY3RlclJlZmVyZW5jZU1hcmtlcicpXG4gICAgcmV0dXJuIG9wZW5cbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIG9wZW4oY29kZSkge1xuICAgIGlmIChjb2RlID09PSAzNSkge1xuICAgICAgZWZmZWN0cy5lbnRlcignY2hhcmFjdGVyUmVmZXJlbmNlTWFya2VyTnVtZXJpYycpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCgnY2hhcmFjdGVyUmVmZXJlbmNlTWFya2VyTnVtZXJpYycpXG4gICAgICByZXR1cm4gbnVtZXJpY1xuICAgIH1cblxuICAgIGVmZmVjdHMuZW50ZXIoJ2NoYXJhY3RlclJlZmVyZW5jZVZhbHVlJylcbiAgICBtYXggPSAzMVxuICAgIHRlc3QgPSBhc2NpaUFscGhhbnVtZXJpY1xuICAgIHJldHVybiB2YWx1ZShjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gbnVtZXJpYyhjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDg4IHx8IGNvZGUgPT09IDEyMCkge1xuICAgICAgZWZmZWN0cy5lbnRlcignY2hhcmFjdGVyUmVmZXJlbmNlTWFya2VySGV4YWRlY2ltYWwnKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQoJ2NoYXJhY3RlclJlZmVyZW5jZU1hcmtlckhleGFkZWNpbWFsJylcbiAgICAgIGVmZmVjdHMuZW50ZXIoJ2NoYXJhY3RlclJlZmVyZW5jZVZhbHVlJylcbiAgICAgIG1heCA9IDZcbiAgICAgIHRlc3QgPSBhc2NpaUhleERpZ2l0XG4gICAgICByZXR1cm4gdmFsdWVcbiAgICB9XG5cbiAgICBlZmZlY3RzLmVudGVyKCdjaGFyYWN0ZXJSZWZlcmVuY2VWYWx1ZScpXG4gICAgbWF4ID0gN1xuICAgIHRlc3QgPSBhc2NpaURpZ2l0XG4gICAgcmV0dXJuIHZhbHVlKGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiB2YWx1ZShjb2RlKSB7XG4gICAgLyoqIEB0eXBlIHtUb2tlbn0gKi9cbiAgICBsZXQgdG9rZW5cblxuICAgIGlmIChjb2RlID09PSA1OSAmJiBzaXplKSB7XG4gICAgICB0b2tlbiA9IGVmZmVjdHMuZXhpdCgnY2hhcmFjdGVyUmVmZXJlbmNlVmFsdWUnKVxuXG4gICAgICBpZiAoXG4gICAgICAgIHRlc3QgPT09IGFzY2lpQWxwaGFudW1lcmljICYmXG4gICAgICAgICFkZWNvZGVFbnRpdHkoc2VsZi5zbGljZVNlcmlhbGl6ZSh0b2tlbikpXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgICAgfVxuXG4gICAgICBlZmZlY3RzLmVudGVyKCdjaGFyYWN0ZXJSZWZlcmVuY2VNYXJrZXInKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQoJ2NoYXJhY3RlclJlZmVyZW5jZU1hcmtlcicpXG4gICAgICBlZmZlY3RzLmV4aXQoJ2NoYXJhY3RlclJlZmVyZW5jZScpXG4gICAgICByZXR1cm4gb2tcbiAgICB9XG5cbiAgICBpZiAodGVzdChjb2RlKSAmJiBzaXplKysgPCBtYXgpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ29uc3RydWN0fSBDb25zdHJ1Y3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuVG9rZW5pemVyfSBUb2tlbml6ZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuU3RhdGV9IFN0YXRlXG4gKi9cbmltcG9ydCB7YXNjaWlQdW5jdHVhdGlvbn0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBjaGFyYWN0ZXJFc2NhcGUgPSB7XG4gIG5hbWU6ICdjaGFyYWN0ZXJFc2NhcGUnLFxuICB0b2tlbml6ZTogdG9rZW5pemVDaGFyYWN0ZXJFc2NhcGVcbn1cbi8qKiBAdHlwZSB7VG9rZW5pemVyfSAqL1xuXG5mdW5jdGlvbiB0b2tlbml6ZUNoYXJhY3RlckVzY2FwZShlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHJldHVybiBzdGFydFxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKCdjaGFyYWN0ZXJFc2NhcGUnKVxuICAgIGVmZmVjdHMuZW50ZXIoJ2VzY2FwZU1hcmtlcicpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgZWZmZWN0cy5leGl0KCdlc2NhcGVNYXJrZXInKVxuICAgIHJldHVybiBvcGVuXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBvcGVuKGNvZGUpIHtcbiAgICBpZiAoYXNjaWlQdW5jdHVhdGlvbihjb2RlKSkge1xuICAgICAgZWZmZWN0cy5lbnRlcignY2hhcmFjdGVyRXNjYXBlVmFsdWUnKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQoJ2NoYXJhY3RlckVzY2FwZVZhbHVlJylcbiAgICAgIGVmZmVjdHMuZXhpdCgnY2hhcmFjdGVyRXNjYXBlJylcbiAgICAgIHJldHVybiBva1xuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkNvbnN0cnVjdH0gQ29uc3RydWN0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlRva2VuaXplcn0gVG9rZW5pemVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlN0YXRlfSBTdGF0ZVxuICovXG5pbXBvcnQge2ZhY3RvcnlTcGFjZX0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UnXG5pbXBvcnQge21hcmtkb3duTGluZUVuZGluZ30gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBsaW5lRW5kaW5nID0ge1xuICBuYW1lOiAnbGluZUVuZGluZycsXG4gIHRva2VuaXplOiB0b2tlbml6ZUxpbmVFbmRpbmdcbn1cbi8qKiBAdHlwZSB7VG9rZW5pemVyfSAqL1xuXG5mdW5jdGlvbiB0b2tlbml6ZUxpbmVFbmRpbmcoZWZmZWN0cywgb2spIHtcbiAgcmV0dXJuIHN0YXJ0XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGVmZmVjdHMuZW50ZXIoJ2xpbmVFbmRpbmcnKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGVmZmVjdHMuZXhpdCgnbGluZUVuZGluZycpXG4gICAgcmV0dXJuIGZhY3RvcnlTcGFjZShlZmZlY3RzLCBvaywgJ2xpbmVQcmVmaXgnKVxuICB9XG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ29uc3RydWN0fSBDb25zdHJ1Y3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuUmVzb2x2ZXJ9IFJlc29sdmVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlRva2VuaXplcn0gVG9rZW5pemVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkV2ZW50fSBFdmVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbn0gVG9rZW5cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuU3RhdGV9IFN0YXRlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkNvZGV9IENvZGVcbiAqL1xuaW1wb3J0IHtmYWN0b3J5RGVzdGluYXRpb259IGZyb20gJ21pY3JvbWFyay1mYWN0b3J5LWRlc3RpbmF0aW9uJ1xuaW1wb3J0IHtmYWN0b3J5TGFiZWx9IGZyb20gJ21pY3JvbWFyay1mYWN0b3J5LWxhYmVsJ1xuaW1wb3J0IHtmYWN0b3J5VGl0bGV9IGZyb20gJ21pY3JvbWFyay1mYWN0b3J5LXRpdGxlJ1xuaW1wb3J0IHtmYWN0b3J5V2hpdGVzcGFjZX0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktd2hpdGVzcGFjZSdcbmltcG9ydCB7bWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuaW1wb3J0IHtwdXNoLCBzcGxpY2V9IGZyb20gJ21pY3JvbWFyay11dGlsLWNodW5rZWQnXG5pbXBvcnQge25vcm1hbGl6ZUlkZW50aWZpZXJ9IGZyb20gJ21pY3JvbWFyay11dGlsLW5vcm1hbGl6ZS1pZGVudGlmaWVyJ1xuaW1wb3J0IHtyZXNvbHZlQWxsfSBmcm9tICdtaWNyb21hcmstdXRpbC1yZXNvbHZlLWFsbCdcblxuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5leHBvcnQgY29uc3QgbGFiZWxFbmQgPSB7XG4gIG5hbWU6ICdsYWJlbEVuZCcsXG4gIHRva2VuaXplOiB0b2tlbml6ZUxhYmVsRW5kLFxuICByZXNvbHZlVG86IHJlc29sdmVUb0xhYmVsRW5kLFxuICByZXNvbHZlQWxsOiByZXNvbHZlQWxsTGFiZWxFbmRcbn1cbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuXG5jb25zdCByZXNvdXJjZUNvbnN0cnVjdCA9IHtcbiAgdG9rZW5pemU6IHRva2VuaXplUmVzb3VyY2Vcbn1cbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuXG5jb25zdCBmdWxsUmVmZXJlbmNlQ29uc3RydWN0ID0ge1xuICB0b2tlbml6ZTogdG9rZW5pemVGdWxsUmVmZXJlbmNlXG59XG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cblxuY29uc3QgY29sbGFwc2VkUmVmZXJlbmNlQ29uc3RydWN0ID0ge1xuICB0b2tlbml6ZTogdG9rZW5pemVDb2xsYXBzZWRSZWZlcmVuY2Vcbn1cbi8qKiBAdHlwZSB7UmVzb2x2ZXJ9ICovXG5cbmZ1bmN0aW9uIHJlc29sdmVBbGxMYWJlbEVuZChldmVudHMpIHtcbiAgbGV0IGluZGV4ID0gLTFcbiAgLyoqIEB0eXBlIHtUb2tlbn0gKi9cblxuICBsZXQgdG9rZW5cblxuICB3aGlsZSAoKytpbmRleCA8IGV2ZW50cy5sZW5ndGgpIHtcbiAgICB0b2tlbiA9IGV2ZW50c1tpbmRleF1bMV1cblxuICAgIGlmIChcbiAgICAgIHRva2VuLnR5cGUgPT09ICdsYWJlbEltYWdlJyB8fFxuICAgICAgdG9rZW4udHlwZSA9PT0gJ2xhYmVsTGluaycgfHxcbiAgICAgIHRva2VuLnR5cGUgPT09ICdsYWJlbEVuZCdcbiAgICApIHtcbiAgICAgIC8vIFJlbW92ZSB0aGUgbWFya2VyLlxuICAgICAgZXZlbnRzLnNwbGljZShpbmRleCArIDEsIHRva2VuLnR5cGUgPT09ICdsYWJlbEltYWdlJyA/IDQgOiAyKVxuICAgICAgdG9rZW4udHlwZSA9ICdkYXRhJ1xuICAgICAgaW5kZXgrK1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBldmVudHNcbn1cbi8qKiBAdHlwZSB7UmVzb2x2ZXJ9ICovXG5cbmZ1bmN0aW9uIHJlc29sdmVUb0xhYmVsRW5kKGV2ZW50cywgY29udGV4dCkge1xuICBsZXQgaW5kZXggPSBldmVudHMubGVuZ3RoXG4gIGxldCBvZmZzZXQgPSAwXG4gIC8qKiBAdHlwZSB7VG9rZW59ICovXG5cbiAgbGV0IHRva2VuXG4gIC8qKiBAdHlwZSB7bnVtYmVyfHVuZGVmaW5lZH0gKi9cblxuICBsZXQgb3BlblxuICAvKiogQHR5cGUge251bWJlcnx1bmRlZmluZWR9ICovXG5cbiAgbGV0IGNsb3NlXG4gIC8qKiBAdHlwZSB7RXZlbnRbXX0gKi9cblxuICBsZXQgbWVkaWEgLy8gRmluZCBhbiBvcGVuaW5nLlxuXG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgdG9rZW4gPSBldmVudHNbaW5kZXhdWzFdXG5cbiAgICBpZiAob3Blbikge1xuICAgICAgLy8gSWYgd2Ugc2VlIGFub3RoZXIgbGluaywgb3IgaW5hY3RpdmUgbGluayBsYWJlbCwgd2XigJl2ZSBiZWVuIGhlcmUgYmVmb3JlLlxuICAgICAgaWYgKFxuICAgICAgICB0b2tlbi50eXBlID09PSAnbGluaycgfHxcbiAgICAgICAgKHRva2VuLnR5cGUgPT09ICdsYWJlbExpbmsnICYmIHRva2VuLl9pbmFjdGl2ZSlcbiAgICAgICkge1xuICAgICAgICBicmVha1xuICAgICAgfSAvLyBNYXJrIG90aGVyIGxpbmsgb3BlbmluZ3MgYXMgaW5hY3RpdmUsIGFzIHdlIGNhbuKAmXQgaGF2ZSBsaW5rcyBpblxuICAgICAgLy8gbGlua3MuXG5cbiAgICAgIGlmIChldmVudHNbaW5kZXhdWzBdID09PSAnZW50ZXInICYmIHRva2VuLnR5cGUgPT09ICdsYWJlbExpbmsnKSB7XG4gICAgICAgIHRva2VuLl9pbmFjdGl2ZSA9IHRydWVcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNsb3NlKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGV2ZW50c1tpbmRleF1bMF0gPT09ICdlbnRlcicgJiZcbiAgICAgICAgKHRva2VuLnR5cGUgPT09ICdsYWJlbEltYWdlJyB8fCB0b2tlbi50eXBlID09PSAnbGFiZWxMaW5rJykgJiZcbiAgICAgICAgIXRva2VuLl9iYWxhbmNlZFxuICAgICAgKSB7XG4gICAgICAgIG9wZW4gPSBpbmRleFxuXG4gICAgICAgIGlmICh0b2tlbi50eXBlICE9PSAnbGFiZWxMaW5rJykge1xuICAgICAgICAgIG9mZnNldCA9IDJcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0b2tlbi50eXBlID09PSAnbGFiZWxFbmQnKSB7XG4gICAgICBjbG9zZSA9IGluZGV4XG4gICAgfVxuICB9XG5cbiAgY29uc3QgZ3JvdXAgPSB7XG4gICAgdHlwZTogZXZlbnRzW29wZW5dWzFdLnR5cGUgPT09ICdsYWJlbExpbmsnID8gJ2xpbmsnIDogJ2ltYWdlJyxcbiAgICBzdGFydDogT2JqZWN0LmFzc2lnbih7fSwgZXZlbnRzW29wZW5dWzFdLnN0YXJ0KSxcbiAgICBlbmQ6IE9iamVjdC5hc3NpZ24oe30sIGV2ZW50c1tldmVudHMubGVuZ3RoIC0gMV1bMV0uZW5kKVxuICB9XG4gIGNvbnN0IGxhYmVsID0ge1xuICAgIHR5cGU6ICdsYWJlbCcsXG4gICAgc3RhcnQ6IE9iamVjdC5hc3NpZ24oe30sIGV2ZW50c1tvcGVuXVsxXS5zdGFydCksXG4gICAgZW5kOiBPYmplY3QuYXNzaWduKHt9LCBldmVudHNbY2xvc2VdWzFdLmVuZClcbiAgfVxuICBjb25zdCB0ZXh0ID0ge1xuICAgIHR5cGU6ICdsYWJlbFRleHQnLFxuICAgIHN0YXJ0OiBPYmplY3QuYXNzaWduKHt9LCBldmVudHNbb3BlbiArIG9mZnNldCArIDJdWzFdLmVuZCksXG4gICAgZW5kOiBPYmplY3QuYXNzaWduKHt9LCBldmVudHNbY2xvc2UgLSAyXVsxXS5zdGFydClcbiAgfVxuICBtZWRpYSA9IFtcbiAgICBbJ2VudGVyJywgZ3JvdXAsIGNvbnRleHRdLFxuICAgIFsnZW50ZXInLCBsYWJlbCwgY29udGV4dF1cbiAgXSAvLyBPcGVuaW5nIG1hcmtlci5cblxuICBtZWRpYSA9IHB1c2gobWVkaWEsIGV2ZW50cy5zbGljZShvcGVuICsgMSwgb3BlbiArIG9mZnNldCArIDMpKSAvLyBUZXh0IG9wZW4uXG5cbiAgbWVkaWEgPSBwdXNoKG1lZGlhLCBbWydlbnRlcicsIHRleHQsIGNvbnRleHRdXSkgLy8gQmV0d2Vlbi5cblxuICBtZWRpYSA9IHB1c2goXG4gICAgbWVkaWEsXG4gICAgcmVzb2x2ZUFsbChcbiAgICAgIGNvbnRleHQucGFyc2VyLmNvbnN0cnVjdHMuaW5zaWRlU3Bhbi5udWxsLFxuICAgICAgZXZlbnRzLnNsaWNlKG9wZW4gKyBvZmZzZXQgKyA0LCBjbG9zZSAtIDMpLFxuICAgICAgY29udGV4dFxuICAgIClcbiAgKSAvLyBUZXh0IGNsb3NlLCBtYXJrZXIgY2xvc2UsIGxhYmVsIGNsb3NlLlxuXG4gIG1lZGlhID0gcHVzaChtZWRpYSwgW1xuICAgIFsnZXhpdCcsIHRleHQsIGNvbnRleHRdLFxuICAgIGV2ZW50c1tjbG9zZSAtIDJdLFxuICAgIGV2ZW50c1tjbG9zZSAtIDFdLFxuICAgIFsnZXhpdCcsIGxhYmVsLCBjb250ZXh0XVxuICBdKSAvLyBSZWZlcmVuY2UsIHJlc291cmNlLCBvciBzby5cblxuICBtZWRpYSA9IHB1c2gobWVkaWEsIGV2ZW50cy5zbGljZShjbG9zZSArIDEpKSAvLyBNZWRpYSBjbG9zZS5cblxuICBtZWRpYSA9IHB1c2gobWVkaWEsIFtbJ2V4aXQnLCBncm91cCwgY29udGV4dF1dKVxuICBzcGxpY2UoZXZlbnRzLCBvcGVuLCBldmVudHMubGVuZ3RoLCBtZWRpYSlcbiAgcmV0dXJuIGV2ZW50c1xufVxuLyoqIEB0eXBlIHtUb2tlbml6ZXJ9ICovXG5cbmZ1bmN0aW9uIHRva2VuaXplTGFiZWxFbmQoZWZmZWN0cywgb2ssIG5vaykge1xuICBjb25zdCBzZWxmID0gdGhpc1xuICBsZXQgaW5kZXggPSBzZWxmLmV2ZW50cy5sZW5ndGhcbiAgLyoqIEB0eXBlIHtUb2tlbn0gKi9cblxuICBsZXQgbGFiZWxTdGFydFxuICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG5cbiAgbGV0IGRlZmluZWQgLy8gRmluZCBhbiBvcGVuaW5nLlxuXG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgaWYgKFxuICAgICAgKHNlbGYuZXZlbnRzW2luZGV4XVsxXS50eXBlID09PSAnbGFiZWxJbWFnZScgfHxcbiAgICAgICAgc2VsZi5ldmVudHNbaW5kZXhdWzFdLnR5cGUgPT09ICdsYWJlbExpbmsnKSAmJlxuICAgICAgIXNlbGYuZXZlbnRzW2luZGV4XVsxXS5fYmFsYW5jZWRcbiAgICApIHtcbiAgICAgIGxhYmVsU3RhcnQgPSBzZWxmLmV2ZW50c1tpbmRleF1bMV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0YXJ0XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGlmICghbGFiZWxTdGFydCkge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgIH0gLy8gSXTigJlzIGEgYmFsYW5jZWQgYnJhY2tldCwgYnV0IGNvbnRhaW5zIGEgbGluay5cblxuICAgIGlmIChsYWJlbFN0YXJ0Ll9pbmFjdGl2ZSkgcmV0dXJuIGJhbGFuY2VkKGNvZGUpXG4gICAgZGVmaW5lZCA9IHNlbGYucGFyc2VyLmRlZmluZWQuaW5jbHVkZXMoXG4gICAgICBub3JtYWxpemVJZGVudGlmaWVyKFxuICAgICAgICBzZWxmLnNsaWNlU2VyaWFsaXplKHtcbiAgICAgICAgICBzdGFydDogbGFiZWxTdGFydC5lbmQsXG4gICAgICAgICAgZW5kOiBzZWxmLm5vdygpXG4gICAgICAgIH0pXG4gICAgICApXG4gICAgKVxuICAgIGVmZmVjdHMuZW50ZXIoJ2xhYmVsRW5kJylcbiAgICBlZmZlY3RzLmVudGVyKCdsYWJlbE1hcmtlcicpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgZWZmZWN0cy5leGl0KCdsYWJlbE1hcmtlcicpXG4gICAgZWZmZWN0cy5leGl0KCdsYWJlbEVuZCcpXG4gICAgcmV0dXJuIGFmdGVyTGFiZWxFbmRcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGFmdGVyTGFiZWxFbmQoY29kZSkge1xuICAgIC8vIFJlc291cmNlOiBgW2FzZF0oZmdoKWAuXG4gICAgaWYgKGNvZGUgPT09IDQwKSB7XG4gICAgICByZXR1cm4gZWZmZWN0cy5hdHRlbXB0KFxuICAgICAgICByZXNvdXJjZUNvbnN0cnVjdCxcbiAgICAgICAgb2ssXG4gICAgICAgIGRlZmluZWQgPyBvayA6IGJhbGFuY2VkXG4gICAgICApKGNvZGUpXG4gICAgfSAvLyBDb2xsYXBzZWQgKGBbYXNkXVtdYCkgb3IgZnVsbCAoYFthc2RdW2ZnaF1gKSByZWZlcmVuY2U/XG5cbiAgICBpZiAoY29kZSA9PT0gOTEpIHtcbiAgICAgIHJldHVybiBlZmZlY3RzLmF0dGVtcHQoXG4gICAgICAgIGZ1bGxSZWZlcmVuY2VDb25zdHJ1Y3QsXG4gICAgICAgIG9rLFxuICAgICAgICBkZWZpbmVkXG4gICAgICAgICAgPyBlZmZlY3RzLmF0dGVtcHQoY29sbGFwc2VkUmVmZXJlbmNlQ29uc3RydWN0LCBvaywgYmFsYW5jZWQpXG4gICAgICAgICAgOiBiYWxhbmNlZFxuICAgICAgKShjb2RlKVxuICAgIH0gLy8gU2hvcnRjdXQgcmVmZXJlbmNlOiBgW2FzZF1gP1xuXG4gICAgcmV0dXJuIGRlZmluZWQgPyBvayhjb2RlKSA6IGJhbGFuY2VkKGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBiYWxhbmNlZChjb2RlKSB7XG4gICAgbGFiZWxTdGFydC5fYmFsYW5jZWQgPSB0cnVlXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG59XG4vKiogQHR5cGUge1Rva2VuaXplcn0gKi9cblxuZnVuY3Rpb24gdG9rZW5pemVSZXNvdXJjZShlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHJldHVybiBzdGFydFxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKCdyZXNvdXJjZScpXG4gICAgZWZmZWN0cy5lbnRlcigncmVzb3VyY2VNYXJrZXInKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGVmZmVjdHMuZXhpdCgncmVzb3VyY2VNYXJrZXInKVxuICAgIHJldHVybiBmYWN0b3J5V2hpdGVzcGFjZShlZmZlY3RzLCBvcGVuKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gb3Blbihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDQxKSB7XG4gICAgICByZXR1cm4gZW5kKGNvZGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhY3RvcnlEZXN0aW5hdGlvbihcbiAgICAgIGVmZmVjdHMsXG4gICAgICBkZXN0aW5hdGlvbkFmdGVyLFxuICAgICAgbm9rLFxuICAgICAgJ3Jlc291cmNlRGVzdGluYXRpb24nLFxuICAgICAgJ3Jlc291cmNlRGVzdGluYXRpb25MaXRlcmFsJyxcbiAgICAgICdyZXNvdXJjZURlc3RpbmF0aW9uTGl0ZXJhbE1hcmtlcicsXG4gICAgICAncmVzb3VyY2VEZXN0aW5hdGlvblJhdycsXG4gICAgICAncmVzb3VyY2VEZXN0aW5hdGlvblN0cmluZycsXG4gICAgICAzXG4gICAgKShjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gZGVzdGluYXRpb25BZnRlcihjb2RlKSB7XG4gICAgcmV0dXJuIG1hcmtkb3duTGluZUVuZGluZ09yU3BhY2UoY29kZSlcbiAgICAgID8gZmFjdG9yeVdoaXRlc3BhY2UoZWZmZWN0cywgYmV0d2VlbikoY29kZSlcbiAgICAgIDogZW5kKGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBiZXR3ZWVuKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gMzQgfHwgY29kZSA9PT0gMzkgfHwgY29kZSA9PT0gNDApIHtcbiAgICAgIHJldHVybiBmYWN0b3J5VGl0bGUoXG4gICAgICAgIGVmZmVjdHMsXG4gICAgICAgIGZhY3RvcnlXaGl0ZXNwYWNlKGVmZmVjdHMsIGVuZCksXG4gICAgICAgIG5vayxcbiAgICAgICAgJ3Jlc291cmNlVGl0bGUnLFxuICAgICAgICAncmVzb3VyY2VUaXRsZU1hcmtlcicsXG4gICAgICAgICdyZXNvdXJjZVRpdGxlU3RyaW5nJ1xuICAgICAgKShjb2RlKVxuICAgIH1cblxuICAgIHJldHVybiBlbmQoY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGVuZChjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDQxKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKCdyZXNvdXJjZU1hcmtlcicpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCgncmVzb3VyY2VNYXJrZXInKVxuICAgICAgZWZmZWN0cy5leGl0KCdyZXNvdXJjZScpXG4gICAgICByZXR1cm4gb2tcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cbn1cbi8qKiBAdHlwZSB7VG9rZW5pemVyfSAqL1xuXG5mdW5jdGlvbiB0b2tlbml6ZUZ1bGxSZWZlcmVuY2UoZWZmZWN0cywgb2ssIG5vaykge1xuICBjb25zdCBzZWxmID0gdGhpc1xuICByZXR1cm4gc3RhcnRcbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgcmV0dXJuIGZhY3RvcnlMYWJlbC5jYWxsKFxuICAgICAgc2VsZixcbiAgICAgIGVmZmVjdHMsXG4gICAgICBhZnRlckxhYmVsLFxuICAgICAgbm9rLFxuICAgICAgJ3JlZmVyZW5jZScsXG4gICAgICAncmVmZXJlbmNlTWFya2VyJyxcbiAgICAgICdyZWZlcmVuY2VTdHJpbmcnXG4gICAgKShjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gYWZ0ZXJMYWJlbChjb2RlKSB7XG4gICAgcmV0dXJuIHNlbGYucGFyc2VyLmRlZmluZWQuaW5jbHVkZXMoXG4gICAgICBub3JtYWxpemVJZGVudGlmaWVyKFxuICAgICAgICBzZWxmLnNsaWNlU2VyaWFsaXplKHNlbGYuZXZlbnRzW3NlbGYuZXZlbnRzLmxlbmd0aCAtIDFdWzFdKS5zbGljZSgxLCAtMSlcbiAgICAgIClcbiAgICApXG4gICAgICA/IG9rKGNvZGUpXG4gICAgICA6IG5vayhjb2RlKVxuICB9XG59XG4vKiogQHR5cGUge1Rva2VuaXplcn0gKi9cblxuZnVuY3Rpb24gdG9rZW5pemVDb2xsYXBzZWRSZWZlcmVuY2UoZWZmZWN0cywgb2ssIG5vaykge1xuICByZXR1cm4gc3RhcnRcbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgZWZmZWN0cy5lbnRlcigncmVmZXJlbmNlJylcbiAgICBlZmZlY3RzLmVudGVyKCdyZWZlcmVuY2VNYXJrZXInKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGVmZmVjdHMuZXhpdCgncmVmZXJlbmNlTWFya2VyJylcbiAgICByZXR1cm4gb3BlblxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gb3Blbihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDkzKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKCdyZWZlcmVuY2VNYXJrZXInKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQoJ3JlZmVyZW5jZU1hcmtlcicpXG4gICAgICBlZmZlY3RzLmV4aXQoJ3JlZmVyZW5jZScpXG4gICAgICByZXR1cm4gb2tcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db25zdHJ1Y3R9IENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbml6ZXJ9IFRva2VuaXplclxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuaW1wb3J0IHtsYWJlbEVuZH0gZnJvbSAnLi9sYWJlbC1lbmQuanMnXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cblxuZXhwb3J0IGNvbnN0IGxhYmVsU3RhcnRJbWFnZSA9IHtcbiAgbmFtZTogJ2xhYmVsU3RhcnRJbWFnZScsXG4gIHRva2VuaXplOiB0b2tlbml6ZUxhYmVsU3RhcnRJbWFnZSxcbiAgcmVzb2x2ZUFsbDogbGFiZWxFbmQucmVzb2x2ZUFsbFxufVxuLyoqIEB0eXBlIHtUb2tlbml6ZXJ9ICovXG5cbmZ1bmN0aW9uIHRva2VuaXplTGFiZWxTdGFydEltYWdlKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgcmV0dXJuIHN0YXJ0XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGVmZmVjdHMuZW50ZXIoJ2xhYmVsSW1hZ2UnKVxuICAgIGVmZmVjdHMuZW50ZXIoJ2xhYmVsSW1hZ2VNYXJrZXInKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGVmZmVjdHMuZXhpdCgnbGFiZWxJbWFnZU1hcmtlcicpXG4gICAgcmV0dXJuIG9wZW5cbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIG9wZW4oY29kZSkge1xuICAgIGlmIChjb2RlID09PSA5MSkge1xuICAgICAgZWZmZWN0cy5lbnRlcignbGFiZWxNYXJrZXInKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQoJ2xhYmVsTWFya2VyJylcbiAgICAgIGVmZmVjdHMuZXhpdCgnbGFiZWxJbWFnZScpXG4gICAgICByZXR1cm4gYWZ0ZXJcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBhZnRlcihjb2RlKSB7XG4gICAgLyogSGlkZGVuIGZvb3Rub3RlcyBob29rICovXG5cbiAgICAvKiBjOCBpZ25vcmUgbmV4dCAzICovXG4gICAgcmV0dXJuIGNvZGUgPT09IDk0ICYmICdfaGlkZGVuRm9vdG5vdGVTdXBwb3J0JyBpbiBzZWxmLnBhcnNlci5jb25zdHJ1Y3RzXG4gICAgICA/IG5vayhjb2RlKVxuICAgICAgOiBvayhjb2RlKVxuICB9XG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ29kZX0gQ29kZVxuICovXG5pbXBvcnQge1xuICBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlLFxuICB1bmljb2RlUHVuY3R1YXRpb24sXG4gIHVuaWNvZGVXaGl0ZXNwYWNlXG59IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3RlcidcblxuLyoqXG4gKiBDbGFzc2lmeSB3aGV0aGVyIGEgY2hhcmFjdGVyIGNvZGUgcmVwcmVzZW50cyB3aGl0ZXNwYWNlLCBwdW5jdHVhdGlvbiwgb3JcbiAqIHNvbWV0aGluZyBlbHNlLlxuICpcbiAqIFVzZWQgZm9yIGF0dGVudGlvbiAoZW1waGFzaXMsIHN0cm9uZyksIHdob3NlIHNlcXVlbmNlcyBjYW4gb3BlbiBvciBjbG9zZVxuICogYmFzZWQgb24gdGhlIGNsYXNzIG9mIHN1cnJvdW5kaW5nIGNoYXJhY3RlcnMuXG4gKlxuICogTm90ZSB0aGF0IGVvZiAoYG51bGxgKSBpcyBzZWVuIGFzIHdoaXRlc3BhY2UuXG4gKlxuICogQHBhcmFtIHtDb2RlfSBjb2RlXG4gKiBAcmV0dXJucyB7bnVtYmVyfHVuZGVmaW5lZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsYXNzaWZ5Q2hhcmFjdGVyKGNvZGUpIHtcbiAgaWYgKFxuICAgIGNvZGUgPT09IG51bGwgfHxcbiAgICBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlKGNvZGUpIHx8XG4gICAgdW5pY29kZVdoaXRlc3BhY2UoY29kZSlcbiAgKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIGlmICh1bmljb2RlUHVuY3R1YXRpb24oY29kZSkpIHtcbiAgICByZXR1cm4gMlxuICB9XG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ29uc3RydWN0fSBDb25zdHJ1Y3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuVG9rZW5pemVyfSBUb2tlbml6ZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuUmVzb2x2ZXJ9IFJlc29sdmVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlN0YXRlfSBTdGF0ZVxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbn0gVG9rZW5cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuRXZlbnR9IEV2ZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkNvZGV9IENvZGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuUG9pbnR9IFBvaW50XG4gKi9cbmltcG9ydCB7cHVzaCwgc3BsaWNlfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaHVua2VkJ1xuaW1wb3J0IHtjbGFzc2lmeUNoYXJhY3Rlcn0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2xhc3NpZnktY2hhcmFjdGVyJ1xuaW1wb3J0IHtyZXNvbHZlQWxsfSBmcm9tICdtaWNyb21hcmstdXRpbC1yZXNvbHZlLWFsbCdcblxuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5leHBvcnQgY29uc3QgYXR0ZW50aW9uID0ge1xuICBuYW1lOiAnYXR0ZW50aW9uJyxcbiAgdG9rZW5pemU6IHRva2VuaXplQXR0ZW50aW9uLFxuICByZXNvbHZlQWxsOiByZXNvbHZlQWxsQXR0ZW50aW9uXG59XG4vKipcbiAqIFRha2UgYWxsIGV2ZW50cyBhbmQgcmVzb2x2ZSBhdHRlbnRpb24gdG8gZW1waGFzaXMgb3Igc3Ryb25nLlxuICpcbiAqIEB0eXBlIHtSZXNvbHZlcn1cbiAqL1xuXG5mdW5jdGlvbiByZXNvbHZlQWxsQXR0ZW50aW9uKGV2ZW50cywgY29udGV4dCkge1xuICBsZXQgaW5kZXggPSAtMVxuICAvKiogQHR5cGUge251bWJlcn0gKi9cblxuICBsZXQgb3BlblxuICAvKiogQHR5cGUge1Rva2VufSAqL1xuXG4gIGxldCBncm91cFxuICAvKiogQHR5cGUge1Rva2VufSAqL1xuXG4gIGxldCB0ZXh0XG4gIC8qKiBAdHlwZSB7VG9rZW59ICovXG5cbiAgbGV0IG9wZW5pbmdTZXF1ZW5jZVxuICAvKiogQHR5cGUge1Rva2VufSAqL1xuXG4gIGxldCBjbG9zaW5nU2VxdWVuY2VcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG5cbiAgbGV0IHVzZVxuICAvKiogQHR5cGUge0V2ZW50W119ICovXG5cbiAgbGV0IG5leHRFdmVudHNcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG5cbiAgbGV0IG9mZnNldCAvLyBXYWxrIHRocm91Z2ggYWxsIGV2ZW50cy5cbiAgLy9cbiAgLy8gTm90ZTogcGVyZm9ybWFuY2Ugb2YgdGhpcyBpcyBmaW5lIG9uIGFuIG1iIG9mIG5vcm1hbCBtYXJrZG93biwgYnV0IGl04oCZc1xuICAvLyBhIGJvdHRsZW5lY2sgZm9yIG1hbGljaW91cyBzdHVmZi5cblxuICB3aGlsZSAoKytpbmRleCA8IGV2ZW50cy5sZW5ndGgpIHtcbiAgICAvLyBGaW5kIGEgdG9rZW4gdGhhdCBjYW4gY2xvc2UuXG4gICAgaWYgKFxuICAgICAgZXZlbnRzW2luZGV4XVswXSA9PT0gJ2VudGVyJyAmJlxuICAgICAgZXZlbnRzW2luZGV4XVsxXS50eXBlID09PSAnYXR0ZW50aW9uU2VxdWVuY2UnICYmXG4gICAgICBldmVudHNbaW5kZXhdWzFdLl9jbG9zZVxuICAgICkge1xuICAgICAgb3BlbiA9IGluZGV4IC8vIE5vdyB3YWxrIGJhY2sgdG8gZmluZCBhbiBvcGVuZXIuXG5cbiAgICAgIHdoaWxlIChvcGVuLS0pIHtcbiAgICAgICAgLy8gRmluZCBhIHRva2VuIHRoYXQgY2FuIG9wZW4gdGhlIGNsb3Nlci5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIGV2ZW50c1tvcGVuXVswXSA9PT0gJ2V4aXQnICYmXG4gICAgICAgICAgZXZlbnRzW29wZW5dWzFdLnR5cGUgPT09ICdhdHRlbnRpb25TZXF1ZW5jZScgJiZcbiAgICAgICAgICBldmVudHNbb3Blbl1bMV0uX29wZW4gJiYgLy8gSWYgdGhlIG1hcmtlcnMgYXJlIHRoZSBzYW1lOlxuICAgICAgICAgIGNvbnRleHQuc2xpY2VTZXJpYWxpemUoZXZlbnRzW29wZW5dWzFdKS5jaGFyQ29kZUF0KDApID09PVxuICAgICAgICAgICAgY29udGV4dC5zbGljZVNlcmlhbGl6ZShldmVudHNbaW5kZXhdWzFdKS5jaGFyQ29kZUF0KDApXG4gICAgICAgICkge1xuICAgICAgICAgIC8vIElmIHRoZSBvcGVuaW5nIGNhbiBjbG9zZSBvciB0aGUgY2xvc2luZyBjYW4gb3BlbixcbiAgICAgICAgICAvLyBhbmQgdGhlIGNsb3NlIHNpemUgKmlzIG5vdCogYSBtdWx0aXBsZSBvZiB0aHJlZSxcbiAgICAgICAgICAvLyBidXQgdGhlIHN1bSBvZiB0aGUgb3BlbmluZyBhbmQgY2xvc2luZyBzaXplICppcyogbXVsdGlwbGUgb2YgdGhyZWUsXG4gICAgICAgICAgLy8gdGhlbiBkb27igJl0IG1hdGNoLlxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIChldmVudHNbb3Blbl1bMV0uX2Nsb3NlIHx8IGV2ZW50c1tpbmRleF1bMV0uX29wZW4pICYmXG4gICAgICAgICAgICAoZXZlbnRzW2luZGV4XVsxXS5lbmQub2Zmc2V0IC0gZXZlbnRzW2luZGV4XVsxXS5zdGFydC5vZmZzZXQpICUgMyAmJlxuICAgICAgICAgICAgIShcbiAgICAgICAgICAgICAgKGV2ZW50c1tvcGVuXVsxXS5lbmQub2Zmc2V0IC1cbiAgICAgICAgICAgICAgICBldmVudHNbb3Blbl1bMV0uc3RhcnQub2Zmc2V0ICtcbiAgICAgICAgICAgICAgICBldmVudHNbaW5kZXhdWzFdLmVuZC5vZmZzZXQgLVxuICAgICAgICAgICAgICAgIGV2ZW50c1tpbmRleF1bMV0uc3RhcnQub2Zmc2V0KSAlXG4gICAgICAgICAgICAgIDNcbiAgICAgICAgICAgIClcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSAvLyBOdW1iZXIgb2YgbWFya2VycyB0byB1c2UgZnJvbSB0aGUgc2VxdWVuY2UuXG5cbiAgICAgICAgICB1c2UgPVxuICAgICAgICAgICAgZXZlbnRzW29wZW5dWzFdLmVuZC5vZmZzZXQgLSBldmVudHNbb3Blbl1bMV0uc3RhcnQub2Zmc2V0ID4gMSAmJlxuICAgICAgICAgICAgZXZlbnRzW2luZGV4XVsxXS5lbmQub2Zmc2V0IC0gZXZlbnRzW2luZGV4XVsxXS5zdGFydC5vZmZzZXQgPiAxXG4gICAgICAgICAgICAgID8gMlxuICAgICAgICAgICAgICA6IDFcbiAgICAgICAgICBjb25zdCBzdGFydCA9IE9iamVjdC5hc3NpZ24oe30sIGV2ZW50c1tvcGVuXVsxXS5lbmQpXG4gICAgICAgICAgY29uc3QgZW5kID0gT2JqZWN0LmFzc2lnbih7fSwgZXZlbnRzW2luZGV4XVsxXS5zdGFydClcbiAgICAgICAgICBtb3ZlUG9pbnQoc3RhcnQsIC11c2UpXG4gICAgICAgICAgbW92ZVBvaW50KGVuZCwgdXNlKVxuICAgICAgICAgIG9wZW5pbmdTZXF1ZW5jZSA9IHtcbiAgICAgICAgICAgIHR5cGU6IHVzZSA+IDEgPyAnc3Ryb25nU2VxdWVuY2UnIDogJ2VtcGhhc2lzU2VxdWVuY2UnLFxuICAgICAgICAgICAgc3RhcnQsXG4gICAgICAgICAgICBlbmQ6IE9iamVjdC5hc3NpZ24oe30sIGV2ZW50c1tvcGVuXVsxXS5lbmQpXG4gICAgICAgICAgfVxuICAgICAgICAgIGNsb3NpbmdTZXF1ZW5jZSA9IHtcbiAgICAgICAgICAgIHR5cGU6IHVzZSA+IDEgPyAnc3Ryb25nU2VxdWVuY2UnIDogJ2VtcGhhc2lzU2VxdWVuY2UnLFxuICAgICAgICAgICAgc3RhcnQ6IE9iamVjdC5hc3NpZ24oe30sIGV2ZW50c1tpbmRleF1bMV0uc3RhcnQpLFxuICAgICAgICAgICAgZW5kXG4gICAgICAgICAgfVxuICAgICAgICAgIHRleHQgPSB7XG4gICAgICAgICAgICB0eXBlOiB1c2UgPiAxID8gJ3N0cm9uZ1RleHQnIDogJ2VtcGhhc2lzVGV4dCcsXG4gICAgICAgICAgICBzdGFydDogT2JqZWN0LmFzc2lnbih7fSwgZXZlbnRzW29wZW5dWzFdLmVuZCksXG4gICAgICAgICAgICBlbmQ6IE9iamVjdC5hc3NpZ24oe30sIGV2ZW50c1tpbmRleF1bMV0uc3RhcnQpXG4gICAgICAgICAgfVxuICAgICAgICAgIGdyb3VwID0ge1xuICAgICAgICAgICAgdHlwZTogdXNlID4gMSA/ICdzdHJvbmcnIDogJ2VtcGhhc2lzJyxcbiAgICAgICAgICAgIHN0YXJ0OiBPYmplY3QuYXNzaWduKHt9LCBvcGVuaW5nU2VxdWVuY2Uuc3RhcnQpLFxuICAgICAgICAgICAgZW5kOiBPYmplY3QuYXNzaWduKHt9LCBjbG9zaW5nU2VxdWVuY2UuZW5kKVxuICAgICAgICAgIH1cbiAgICAgICAgICBldmVudHNbb3Blbl1bMV0uZW5kID0gT2JqZWN0LmFzc2lnbih7fSwgb3BlbmluZ1NlcXVlbmNlLnN0YXJ0KVxuICAgICAgICAgIGV2ZW50c1tpbmRleF1bMV0uc3RhcnQgPSBPYmplY3QuYXNzaWduKHt9LCBjbG9zaW5nU2VxdWVuY2UuZW5kKVxuICAgICAgICAgIG5leHRFdmVudHMgPSBbXSAvLyBJZiB0aGVyZSBhcmUgbW9yZSBtYXJrZXJzIGluIHRoZSBvcGVuaW5nLCBhZGQgdGhlbSBiZWZvcmUuXG5cbiAgICAgICAgICBpZiAoZXZlbnRzW29wZW5dWzFdLmVuZC5vZmZzZXQgLSBldmVudHNbb3Blbl1bMV0uc3RhcnQub2Zmc2V0KSB7XG4gICAgICAgICAgICBuZXh0RXZlbnRzID0gcHVzaChuZXh0RXZlbnRzLCBbXG4gICAgICAgICAgICAgIFsnZW50ZXInLCBldmVudHNbb3Blbl1bMV0sIGNvbnRleHRdLFxuICAgICAgICAgICAgICBbJ2V4aXQnLCBldmVudHNbb3Blbl1bMV0sIGNvbnRleHRdXG4gICAgICAgICAgICBdKVxuICAgICAgICAgIH0gLy8gT3BlbmluZy5cblxuICAgICAgICAgIG5leHRFdmVudHMgPSBwdXNoKG5leHRFdmVudHMsIFtcbiAgICAgICAgICAgIFsnZW50ZXInLCBncm91cCwgY29udGV4dF0sXG4gICAgICAgICAgICBbJ2VudGVyJywgb3BlbmluZ1NlcXVlbmNlLCBjb250ZXh0XSxcbiAgICAgICAgICAgIFsnZXhpdCcsIG9wZW5pbmdTZXF1ZW5jZSwgY29udGV4dF0sXG4gICAgICAgICAgICBbJ2VudGVyJywgdGV4dCwgY29udGV4dF1cbiAgICAgICAgICBdKSAvLyBCZXR3ZWVuLlxuXG4gICAgICAgICAgbmV4dEV2ZW50cyA9IHB1c2goXG4gICAgICAgICAgICBuZXh0RXZlbnRzLFxuICAgICAgICAgICAgcmVzb2x2ZUFsbChcbiAgICAgICAgICAgICAgY29udGV4dC5wYXJzZXIuY29uc3RydWN0cy5pbnNpZGVTcGFuLm51bGwsXG4gICAgICAgICAgICAgIGV2ZW50cy5zbGljZShvcGVuICsgMSwgaW5kZXgpLFxuICAgICAgICAgICAgICBjb250ZXh0XG4gICAgICAgICAgICApXG4gICAgICAgICAgKSAvLyBDbG9zaW5nLlxuXG4gICAgICAgICAgbmV4dEV2ZW50cyA9IHB1c2gobmV4dEV2ZW50cywgW1xuICAgICAgICAgICAgWydleGl0JywgdGV4dCwgY29udGV4dF0sXG4gICAgICAgICAgICBbJ2VudGVyJywgY2xvc2luZ1NlcXVlbmNlLCBjb250ZXh0XSxcbiAgICAgICAgICAgIFsnZXhpdCcsIGNsb3NpbmdTZXF1ZW5jZSwgY29udGV4dF0sXG4gICAgICAgICAgICBbJ2V4aXQnLCBncm91cCwgY29udGV4dF1cbiAgICAgICAgICBdKSAvLyBJZiB0aGVyZSBhcmUgbW9yZSBtYXJrZXJzIGluIHRoZSBjbG9zaW5nLCBhZGQgdGhlbSBhZnRlci5cblxuICAgICAgICAgIGlmIChldmVudHNbaW5kZXhdWzFdLmVuZC5vZmZzZXQgLSBldmVudHNbaW5kZXhdWzFdLnN0YXJ0Lm9mZnNldCkge1xuICAgICAgICAgICAgb2Zmc2V0ID0gMlxuICAgICAgICAgICAgbmV4dEV2ZW50cyA9IHB1c2gobmV4dEV2ZW50cywgW1xuICAgICAgICAgICAgICBbJ2VudGVyJywgZXZlbnRzW2luZGV4XVsxXSwgY29udGV4dF0sXG4gICAgICAgICAgICAgIFsnZXhpdCcsIGV2ZW50c1tpbmRleF1bMV0sIGNvbnRleHRdXG4gICAgICAgICAgICBdKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvZmZzZXQgPSAwXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc3BsaWNlKGV2ZW50cywgb3BlbiAtIDEsIGluZGV4IC0gb3BlbiArIDMsIG5leHRFdmVudHMpXG4gICAgICAgICAgaW5kZXggPSBvcGVuICsgbmV4dEV2ZW50cy5sZW5ndGggLSBvZmZzZXQgLSAyXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSAvLyBSZW1vdmUgcmVtYWluaW5nIHNlcXVlbmNlcy5cblxuICBpbmRleCA9IC0xXG5cbiAgd2hpbGUgKCsraW5kZXggPCBldmVudHMubGVuZ3RoKSB7XG4gICAgaWYgKGV2ZW50c1tpbmRleF1bMV0udHlwZSA9PT0gJ2F0dGVudGlvblNlcXVlbmNlJykge1xuICAgICAgZXZlbnRzW2luZGV4XVsxXS50eXBlID0gJ2RhdGEnXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGV2ZW50c1xufVxuLyoqIEB0eXBlIHtUb2tlbml6ZXJ9ICovXG5cbmZ1bmN0aW9uIHRva2VuaXplQXR0ZW50aW9uKGVmZmVjdHMsIG9rKSB7XG4gIGNvbnN0IGF0dGVudGlvbk1hcmtlcnMgPSB0aGlzLnBhcnNlci5jb25zdHJ1Y3RzLmF0dGVudGlvbk1hcmtlcnMubnVsbFxuICBjb25zdCBwcmV2aW91cyA9IHRoaXMucHJldmlvdXNcbiAgY29uc3QgYmVmb3JlID0gY2xhc3NpZnlDaGFyYWN0ZXIocHJldmlvdXMpXG4gIC8qKiBAdHlwZSB7Tm9uTnVsbGFibGU8Q29kZT59ICovXG5cbiAgbGV0IG1hcmtlclxuICByZXR1cm4gc3RhcnRcbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgZWZmZWN0cy5lbnRlcignYXR0ZW50aW9uU2VxdWVuY2UnKVxuICAgIG1hcmtlciA9IGNvZGVcbiAgICByZXR1cm4gc2VxdWVuY2UoY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIHNlcXVlbmNlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbWFya2VyKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBzZXF1ZW5jZVxuICAgIH1cblxuICAgIGNvbnN0IHRva2VuID0gZWZmZWN0cy5leGl0KCdhdHRlbnRpb25TZXF1ZW5jZScpXG4gICAgY29uc3QgYWZ0ZXIgPSBjbGFzc2lmeUNoYXJhY3Rlcihjb2RlKVxuICAgIGNvbnN0IG9wZW4gPVxuICAgICAgIWFmdGVyIHx8IChhZnRlciA9PT0gMiAmJiBiZWZvcmUpIHx8IGF0dGVudGlvbk1hcmtlcnMuaW5jbHVkZXMoY29kZSlcbiAgICBjb25zdCBjbG9zZSA9XG4gICAgICAhYmVmb3JlIHx8IChiZWZvcmUgPT09IDIgJiYgYWZ0ZXIpIHx8IGF0dGVudGlvbk1hcmtlcnMuaW5jbHVkZXMocHJldmlvdXMpXG4gICAgdG9rZW4uX29wZW4gPSBCb29sZWFuKG1hcmtlciA9PT0gNDIgPyBvcGVuIDogb3BlbiAmJiAoYmVmb3JlIHx8ICFjbG9zZSkpXG4gICAgdG9rZW4uX2Nsb3NlID0gQm9vbGVhbihtYXJrZXIgPT09IDQyID8gY2xvc2UgOiBjbG9zZSAmJiAoYWZ0ZXIgfHwgIW9wZW4pKVxuICAgIHJldHVybiBvayhjb2RlKVxuICB9XG59XG4vKipcbiAqIE1vdmUgYSBwb2ludCBhIGJpdC5cbiAqXG4gKiBOb3RlOiBgbW92ZWAgb25seSB3b3JrcyBpbnNpZGUgbGluZXMhIEl04oCZcyBub3QgcG9zc2libGUgdG8gbW92ZSBwYXN0IG90aGVyXG4gKiBjaHVua3MgKHJlcGxhY2VtZW50IGNoYXJhY3RlcnMsIHRhYnMsIG9yIGxpbmUgZW5kaW5ncykuXG4gKlxuICogQHBhcmFtIHtQb2ludH0gcG9pbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5cbmZ1bmN0aW9uIG1vdmVQb2ludChwb2ludCwgb2Zmc2V0KSB7XG4gIHBvaW50LmNvbHVtbiArPSBvZmZzZXRcbiAgcG9pbnQub2Zmc2V0ICs9IG9mZnNldFxuICBwb2ludC5fYnVmZmVySW5kZXggKz0gb2Zmc2V0XG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ29uc3RydWN0fSBDb25zdHJ1Y3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuVG9rZW5pemVyfSBUb2tlbml6ZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuU3RhdGV9IFN0YXRlXG4gKi9cbmltcG9ydCB7XG4gIGFzY2lpQWxwaGEsXG4gIGFzY2lpQWxwaGFudW1lcmljLFxuICBhc2NpaUF0ZXh0LFxuICBhc2NpaUNvbnRyb2xcbn0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBhdXRvbGluayA9IHtcbiAgbmFtZTogJ2F1dG9saW5rJyxcbiAgdG9rZW5pemU6IHRva2VuaXplQXV0b2xpbmtcbn1cbi8qKiBAdHlwZSB7VG9rZW5pemVyfSAqL1xuXG5mdW5jdGlvbiB0b2tlbml6ZUF1dG9saW5rKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgbGV0IHNpemUgPSAxXG4gIHJldHVybiBzdGFydFxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKCdhdXRvbGluaycpXG4gICAgZWZmZWN0cy5lbnRlcignYXV0b2xpbmtNYXJrZXInKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGVmZmVjdHMuZXhpdCgnYXV0b2xpbmtNYXJrZXInKVxuICAgIGVmZmVjdHMuZW50ZXIoJ2F1dG9saW5rUHJvdG9jb2wnKVxuICAgIHJldHVybiBvcGVuXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBvcGVuKGNvZGUpIHtcbiAgICBpZiAoYXNjaWlBbHBoYShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gc2NoZW1lT3JFbWFpbEF0ZXh0XG4gICAgfVxuXG4gICAgcmV0dXJuIGFzY2lpQXRleHQoY29kZSkgPyBlbWFpbEF0ZXh0KGNvZGUpIDogbm9rKGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBzY2hlbWVPckVtYWlsQXRleHQoY29kZSkge1xuICAgIHJldHVybiBjb2RlID09PSA0MyB8fCBjb2RlID09PSA0NSB8fCBjb2RlID09PSA0NiB8fCBhc2NpaUFscGhhbnVtZXJpYyhjb2RlKVxuICAgICAgPyBzY2hlbWVJbnNpZGVPckVtYWlsQXRleHQoY29kZSlcbiAgICAgIDogZW1haWxBdGV4dChjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gc2NoZW1lSW5zaWRlT3JFbWFpbEF0ZXh0KGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gNTgpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIHVybEluc2lkZVxuICAgIH1cblxuICAgIGlmIChcbiAgICAgIChjb2RlID09PSA0MyB8fCBjb2RlID09PSA0NSB8fCBjb2RlID09PSA0NiB8fCBhc2NpaUFscGhhbnVtZXJpYyhjb2RlKSkgJiZcbiAgICAgIHNpemUrKyA8IDMyXG4gICAgKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBzY2hlbWVJbnNpZGVPckVtYWlsQXRleHRcbiAgICB9XG5cbiAgICByZXR1cm4gZW1haWxBdGV4dChjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gdXJsSW5zaWRlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gNjIpIHtcbiAgICAgIGVmZmVjdHMuZXhpdCgnYXV0b2xpbmtQcm90b2NvbCcpXG4gICAgICByZXR1cm4gZW5kKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IG51bGwgfHwgY29kZSA9PT0gMzIgfHwgY29kZSA9PT0gNjAgfHwgYXNjaWlDb250cm9sKGNvZGUpKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIHVybEluc2lkZVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gZW1haWxBdGV4dChjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDY0KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHNpemUgPSAwXG4gICAgICByZXR1cm4gZW1haWxBdFNpZ25PckRvdFxuICAgIH1cblxuICAgIGlmIChhc2NpaUF0ZXh0KGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBlbWFpbEF0ZXh0XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gZW1haWxBdFNpZ25PckRvdChjb2RlKSB7XG4gICAgcmV0dXJuIGFzY2lpQWxwaGFudW1lcmljKGNvZGUpID8gZW1haWxMYWJlbChjb2RlKSA6IG5vayhjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gZW1haWxMYWJlbChjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDQ2KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHNpemUgPSAwXG4gICAgICByZXR1cm4gZW1haWxBdFNpZ25PckRvdFxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSA2Mikge1xuICAgICAgLy8gRXhpdCwgdGhlbiBjaGFuZ2UgdGhlIHR5cGUuXG4gICAgICBlZmZlY3RzLmV4aXQoJ2F1dG9saW5rUHJvdG9jb2wnKS50eXBlID0gJ2F1dG9saW5rRW1haWwnXG4gICAgICByZXR1cm4gZW5kKGNvZGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIGVtYWlsVmFsdWUoY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGVtYWlsVmFsdWUoY29kZSkge1xuICAgIGlmICgoY29kZSA9PT0gNDUgfHwgYXNjaWlBbHBoYW51bWVyaWMoY29kZSkpICYmIHNpemUrKyA8IDYzKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBjb2RlID09PSA0NSA/IGVtYWlsVmFsdWUgOiBlbWFpbExhYmVsXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gZW5kKGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKCdhdXRvbGlua01hcmtlcicpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgZWZmZWN0cy5leGl0KCdhdXRvbGlua01hcmtlcicpXG4gICAgZWZmZWN0cy5leGl0KCdhdXRvbGluaycpXG4gICAgcmV0dXJuIG9rXG4gIH1cbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db25zdHJ1Y3R9IENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbml6ZXJ9IFRva2VuaXplclxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5TdGF0ZX0gU3RhdGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ29kZX0gQ29kZVxuICovXG5pbXBvcnQge2ZhY3RvcnlTcGFjZX0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UnXG5pbXBvcnQge1xuICBhc2NpaUFscGhhLFxuICBhc2NpaUFscGhhbnVtZXJpYyxcbiAgbWFya2Rvd25MaW5lRW5kaW5nLFxuICBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlLFxuICBtYXJrZG93blNwYWNlXG59IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3RlcidcblxuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5leHBvcnQgY29uc3QgaHRtbFRleHQgPSB7XG4gIG5hbWU6ICdodG1sVGV4dCcsXG4gIHRva2VuaXplOiB0b2tlbml6ZUh0bWxUZXh0XG59XG4vKiogQHR5cGUge1Rva2VuaXplcn0gKi9cblxuZnVuY3Rpb24gdG9rZW5pemVIdG1sVGV4dChlZmZlY3RzLCBvaywgbm9rKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIC8qKiBAdHlwZSB7Tm9uTnVsbGFibGU8Q29kZT58dW5kZWZpbmVkfSAqL1xuXG4gIGxldCBtYXJrZXJcbiAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG5cbiAgbGV0IGJ1ZmZlclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cblxuICBsZXQgaW5kZXhcbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBsZXQgcmV0dXJuU3RhdGVcbiAgcmV0dXJuIHN0YXJ0XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGVmZmVjdHMuZW50ZXIoJ2h0bWxUZXh0JylcbiAgICBlZmZlY3RzLmVudGVyKCdodG1sVGV4dERhdGEnKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiBvcGVuXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBvcGVuKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gMzMpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGRlY2xhcmF0aW9uT3BlblxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSA0Nykge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gdGFnQ2xvc2VTdGFydFxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSA2Mykge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gaW5zdHJ1Y3Rpb25cbiAgICB9XG5cbiAgICBpZiAoYXNjaWlBbHBoYShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gdGFnT3BlblxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGRlY2xhcmF0aW9uT3Blbihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDQ1KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBjb21tZW50T3BlblxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSA5MSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBidWZmZXIgPSAnQ0RBVEFbJ1xuICAgICAgaW5kZXggPSAwXG4gICAgICByZXR1cm4gY2RhdGFPcGVuXG4gICAgfVxuXG4gICAgaWYgKGFzY2lpQWxwaGEoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGRlY2xhcmF0aW9uXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gY29tbWVudE9wZW4oY29kZSkge1xuICAgIGlmIChjb2RlID09PSA0NSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gY29tbWVudFN0YXJ0XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gY29tbWVudFN0YXJ0KGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBjb2RlID09PSA2Mikge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSA0NSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gY29tbWVudFN0YXJ0RGFzaFxuICAgIH1cblxuICAgIHJldHVybiBjb21tZW50KGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBjb21tZW50U3RhcnREYXNoKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBjb2RlID09PSA2Mikge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgIH1cblxuICAgIHJldHVybiBjb21tZW50KGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBjb21tZW50KGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSA0NSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gY29tbWVudENsb3NlXG4gICAgfVxuXG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgcmV0dXJuU3RhdGUgPSBjb21tZW50XG4gICAgICByZXR1cm4gYXRMaW5lRW5kaW5nKGNvZGUpXG4gICAgfVxuXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIGNvbW1lbnRcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGNvbW1lbnRDbG9zZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDQ1KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBlbmRcbiAgICB9XG5cbiAgICByZXR1cm4gY29tbWVudChjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gY2RhdGFPcGVuKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gYnVmZmVyLmNoYXJDb2RlQXQoaW5kZXgrKykpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGluZGV4ID09PSBidWZmZXIubGVuZ3RoID8gY2RhdGEgOiBjZGF0YU9wZW5cbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBjZGF0YShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBub2soY29kZSlcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gOTMpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNkYXRhQ2xvc2VcbiAgICB9XG5cbiAgICBpZiAobWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICByZXR1cm5TdGF0ZSA9IGNkYXRhXG4gICAgICByZXR1cm4gYXRMaW5lRW5kaW5nKGNvZGUpXG4gICAgfVxuXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIGNkYXRhXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBjZGF0YUNsb3NlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gOTMpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNkYXRhRW5kXG4gICAgfVxuXG4gICAgcmV0dXJuIGNkYXRhKGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBjZGF0YUVuZChjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDYyKSB7XG4gICAgICByZXR1cm4gZW5kKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IDkzKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBjZGF0YUVuZFxuICAgIH1cblxuICAgIHJldHVybiBjZGF0YShjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gZGVjbGFyYXRpb24oY29kZSkge1xuICAgIGlmIChjb2RlID09PSBudWxsIHx8IGNvZGUgPT09IDYyKSB7XG4gICAgICByZXR1cm4gZW5kKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgcmV0dXJuU3RhdGUgPSBkZWNsYXJhdGlvblxuICAgICAgcmV0dXJuIGF0TGluZUVuZGluZyhjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiBkZWNsYXJhdGlvblxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gaW5zdHJ1Y3Rpb24oY29kZSkge1xuICAgIGlmIChjb2RlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IDYzKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBpbnN0cnVjdGlvbkNsb3NlXG4gICAgfVxuXG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgcmV0dXJuU3RhdGUgPSBpbnN0cnVjdGlvblxuICAgICAgcmV0dXJuIGF0TGluZUVuZGluZyhjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiBpbnN0cnVjdGlvblxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gaW5zdHJ1Y3Rpb25DbG9zZShjb2RlKSB7XG4gICAgcmV0dXJuIGNvZGUgPT09IDYyID8gZW5kKGNvZGUpIDogaW5zdHJ1Y3Rpb24oY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIHRhZ0Nsb3NlU3RhcnQoY29kZSkge1xuICAgIGlmIChhc2NpaUFscGhhKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiB0YWdDbG9zZVxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIHRhZ0Nsb3NlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gNDUgfHwgYXNjaWlBbHBoYW51bWVyaWMoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIHRhZ0Nsb3NlXG4gICAgfVxuXG4gICAgcmV0dXJuIHRhZ0Nsb3NlQmV0d2Vlbihjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gdGFnQ2xvc2VCZXR3ZWVuKGNvZGUpIHtcbiAgICBpZiAobWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICByZXR1cm5TdGF0ZSA9IHRhZ0Nsb3NlQmV0d2VlblxuICAgICAgcmV0dXJuIGF0TGluZUVuZGluZyhjb2RlKVxuICAgIH1cblxuICAgIGlmIChtYXJrZG93blNwYWNlKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiB0YWdDbG9zZUJldHdlZW5cbiAgICB9XG5cbiAgICByZXR1cm4gZW5kKGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiB0YWdPcGVuKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gNDUgfHwgYXNjaWlBbHBoYW51bWVyaWMoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIHRhZ09wZW5cbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gNDcgfHwgY29kZSA9PT0gNjIgfHwgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZShjb2RlKSkge1xuICAgICAgcmV0dXJuIHRhZ09wZW5CZXR3ZWVuKGNvZGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gdGFnT3BlbkJldHdlZW4oY29kZSkge1xuICAgIGlmIChjb2RlID09PSA0Nykge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gZW5kXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IDU4IHx8IGNvZGUgPT09IDk1IHx8IGFzY2lpQWxwaGEoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIHRhZ09wZW5BdHRyaWJ1dGVOYW1lXG4gICAgfVxuXG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgcmV0dXJuU3RhdGUgPSB0YWdPcGVuQmV0d2VlblxuICAgICAgcmV0dXJuIGF0TGluZUVuZGluZyhjb2RlKVxuICAgIH1cblxuICAgIGlmIChtYXJrZG93blNwYWNlKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiB0YWdPcGVuQmV0d2VlblxuICAgIH1cblxuICAgIHJldHVybiBlbmQoY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIHRhZ09wZW5BdHRyaWJ1dGVOYW1lKGNvZGUpIHtcbiAgICBpZiAoXG4gICAgICBjb2RlID09PSA0NSB8fFxuICAgICAgY29kZSA9PT0gNDYgfHxcbiAgICAgIGNvZGUgPT09IDU4IHx8XG4gICAgICBjb2RlID09PSA5NSB8fFxuICAgICAgYXNjaWlBbHBoYW51bWVyaWMoY29kZSlcbiAgICApIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIHRhZ09wZW5BdHRyaWJ1dGVOYW1lXG4gICAgfVxuXG4gICAgcmV0dXJuIHRhZ09wZW5BdHRyaWJ1dGVOYW1lQWZ0ZXIoY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIHRhZ09wZW5BdHRyaWJ1dGVOYW1lQWZ0ZXIoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA2MSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gdGFnT3BlbkF0dHJpYnV0ZVZhbHVlQmVmb3JlXG4gICAgfVxuXG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgcmV0dXJuU3RhdGUgPSB0YWdPcGVuQXR0cmlidXRlTmFtZUFmdGVyXG4gICAgICByZXR1cm4gYXRMaW5lRW5kaW5nKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKG1hcmtkb3duU3BhY2UoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIHRhZ09wZW5BdHRyaWJ1dGVOYW1lQWZ0ZXJcbiAgICB9XG5cbiAgICByZXR1cm4gdGFnT3BlbkJldHdlZW4oY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIHRhZ09wZW5BdHRyaWJ1dGVWYWx1ZUJlZm9yZShjb2RlKSB7XG4gICAgaWYgKFxuICAgICAgY29kZSA9PT0gbnVsbCB8fFxuICAgICAgY29kZSA9PT0gNjAgfHxcbiAgICAgIGNvZGUgPT09IDYxIHx8XG4gICAgICBjb2RlID09PSA2MiB8fFxuICAgICAgY29kZSA9PT0gOTZcbiAgICApIHtcbiAgICAgIHJldHVybiBub2soY29kZSlcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gMzQgfHwgY29kZSA9PT0gMzkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgbWFya2VyID0gY29kZVxuICAgICAgcmV0dXJuIHRhZ09wZW5BdHRyaWJ1dGVWYWx1ZVF1b3RlZFxuICAgIH1cblxuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIHJldHVyblN0YXRlID0gdGFnT3BlbkF0dHJpYnV0ZVZhbHVlQmVmb3JlXG4gICAgICByZXR1cm4gYXRMaW5lRW5kaW5nKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKG1hcmtkb3duU3BhY2UoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIHRhZ09wZW5BdHRyaWJ1dGVWYWx1ZUJlZm9yZVxuICAgIH1cblxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIG1hcmtlciA9IHVuZGVmaW5lZFxuICAgIHJldHVybiB0YWdPcGVuQXR0cmlidXRlVmFsdWVVbnF1b3RlZFxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gdGFnT3BlbkF0dHJpYnV0ZVZhbHVlUXVvdGVkKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbWFya2VyKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiB0YWdPcGVuQXR0cmlidXRlVmFsdWVRdW90ZWRBZnRlclxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgcmV0dXJuU3RhdGUgPSB0YWdPcGVuQXR0cmlidXRlVmFsdWVRdW90ZWRcbiAgICAgIHJldHVybiBhdExpbmVFbmRpbmcoY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gdGFnT3BlbkF0dHJpYnV0ZVZhbHVlUXVvdGVkXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiB0YWdPcGVuQXR0cmlidXRlVmFsdWVRdW90ZWRBZnRlcihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDYyIHx8IGNvZGUgPT09IDQ3IHx8IG1hcmtkb3duTGluZUVuZGluZ09yU3BhY2UoY29kZSkpIHtcbiAgICAgIHJldHVybiB0YWdPcGVuQmV0d2Vlbihjb2RlKVxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIHRhZ09wZW5BdHRyaWJ1dGVWYWx1ZVVucXVvdGVkKGNvZGUpIHtcbiAgICBpZiAoXG4gICAgICBjb2RlID09PSBudWxsIHx8XG4gICAgICBjb2RlID09PSAzNCB8fFxuICAgICAgY29kZSA9PT0gMzkgfHxcbiAgICAgIGNvZGUgPT09IDYwIHx8XG4gICAgICBjb2RlID09PSA2MSB8fFxuICAgICAgY29kZSA9PT0gOTZcbiAgICApIHtcbiAgICAgIHJldHVybiBub2soY29kZSlcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gNjIgfHwgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZShjb2RlKSkge1xuICAgICAgcmV0dXJuIHRhZ09wZW5CZXR3ZWVuKGNvZGUpXG4gICAgfVxuXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIHRhZ09wZW5BdHRyaWJ1dGVWYWx1ZVVucXVvdGVkXG4gIH0gLy8gV2UgY2Fu4oCZdCBoYXZlIGJsYW5rIGxpbmVzIGluIGNvbnRlbnQsIHNvIG5vIG5lZWQgdG8gd29ycnkgYWJvdXQgZW1wdHlcbiAgLy8gdG9rZW5zLlxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gYXRMaW5lRW5kaW5nKGNvZGUpIHtcbiAgICBlZmZlY3RzLmV4aXQoJ2h0bWxUZXh0RGF0YScpXG4gICAgZWZmZWN0cy5lbnRlcignbGluZUVuZGluZycpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgZWZmZWN0cy5leGl0KCdsaW5lRW5kaW5nJylcbiAgICByZXR1cm4gZmFjdG9yeVNwYWNlKFxuICAgICAgZWZmZWN0cyxcbiAgICAgIGFmdGVyUHJlZml4LFxuICAgICAgJ2xpbmVQcmVmaXgnLFxuICAgICAgc2VsZi5wYXJzZXIuY29uc3RydWN0cy5kaXNhYmxlLm51bGwuaW5jbHVkZXMoJ2NvZGVJbmRlbnRlZCcpXG4gICAgICAgID8gdW5kZWZpbmVkXG4gICAgICAgIDogNFxuICAgIClcbiAgfVxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGFmdGVyUHJlZml4KGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKCdodG1sVGV4dERhdGEnKVxuICAgIHJldHVybiByZXR1cm5TdGF0ZShjb2RlKVxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gZW5kKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gNjIpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KCdodG1sVGV4dERhdGEnKVxuICAgICAgZWZmZWN0cy5leGl0KCdodG1sVGV4dCcpXG4gICAgICByZXR1cm4gb2tcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db25zdHJ1Y3R9IENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbml6ZXJ9IFRva2VuaXplclxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuaW1wb3J0IHtsYWJlbEVuZH0gZnJvbSAnLi9sYWJlbC1lbmQuanMnXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cblxuZXhwb3J0IGNvbnN0IGxhYmVsU3RhcnRMaW5rID0ge1xuICBuYW1lOiAnbGFiZWxTdGFydExpbmsnLFxuICB0b2tlbml6ZTogdG9rZW5pemVMYWJlbFN0YXJ0TGluayxcbiAgcmVzb2x2ZUFsbDogbGFiZWxFbmQucmVzb2x2ZUFsbFxufVxuLyoqIEB0eXBlIHtUb2tlbml6ZXJ9ICovXG5cbmZ1bmN0aW9uIHRva2VuaXplTGFiZWxTdGFydExpbmsoZWZmZWN0cywgb2ssIG5vaykge1xuICBjb25zdCBzZWxmID0gdGhpc1xuICByZXR1cm4gc3RhcnRcbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgZWZmZWN0cy5lbnRlcignbGFiZWxMaW5rJylcbiAgICBlZmZlY3RzLmVudGVyKCdsYWJlbE1hcmtlcicpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgZWZmZWN0cy5leGl0KCdsYWJlbE1hcmtlcicpXG4gICAgZWZmZWN0cy5leGl0KCdsYWJlbExpbmsnKVxuICAgIHJldHVybiBhZnRlclxuICB9XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gYWZ0ZXIoY29kZSkge1xuICAgIC8qIEhpZGRlbiBmb290bm90ZXMgaG9vay4gKi9cblxuICAgIC8qIGM4IGlnbm9yZSBuZXh0IDMgKi9cbiAgICByZXR1cm4gY29kZSA9PT0gOTQgJiYgJ19oaWRkZW5Gb290bm90ZVN1cHBvcnQnIGluIHNlbGYucGFyc2VyLmNvbnN0cnVjdHNcbiAgICAgID8gbm9rKGNvZGUpXG4gICAgICA6IG9rKGNvZGUpXG4gIH1cbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db25zdHJ1Y3R9IENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbml6ZXJ9IFRva2VuaXplclxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuaW1wb3J0IHttYXJrZG93bkxpbmVFbmRpbmd9IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3RlcidcblxuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5leHBvcnQgY29uc3QgaGFyZEJyZWFrRXNjYXBlID0ge1xuICBuYW1lOiAnaGFyZEJyZWFrRXNjYXBlJyxcbiAgdG9rZW5pemU6IHRva2VuaXplSGFyZEJyZWFrRXNjYXBlXG59XG4vKiogQHR5cGUge1Rva2VuaXplcn0gKi9cblxuZnVuY3Rpb24gdG9rZW5pemVIYXJkQnJlYWtFc2NhcGUoZWZmZWN0cywgb2ssIG5vaykge1xuICByZXR1cm4gc3RhcnRcbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgZWZmZWN0cy5lbnRlcignaGFyZEJyZWFrRXNjYXBlJylcbiAgICBlZmZlY3RzLmVudGVyKCdlc2NhcGVNYXJrZXInKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiBvcGVuXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBvcGVuKGNvZGUpIHtcbiAgICBpZiAobWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmV4aXQoJ2VzY2FwZU1hcmtlcicpXG4gICAgICBlZmZlY3RzLmV4aXQoJ2hhcmRCcmVha0VzY2FwZScpXG4gICAgICByZXR1cm4gb2soY29kZSlcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db25zdHJ1Y3R9IENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5SZXNvbHZlcn0gUmVzb2x2ZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuVG9rZW5pemVyfSBUb2tlbml6ZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuUHJldmlvdXN9IFByZXZpb3VzXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlRva2VufSBUb2tlblxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuaW1wb3J0IHttYXJrZG93bkxpbmVFbmRpbmd9IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3RlcidcblxuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5leHBvcnQgY29uc3QgY29kZVRleHQgPSB7XG4gIG5hbWU6ICdjb2RlVGV4dCcsXG4gIHRva2VuaXplOiB0b2tlbml6ZUNvZGVUZXh0LFxuICByZXNvbHZlOiByZXNvbHZlQ29kZVRleHQsXG4gIHByZXZpb3VzXG59XG4vKiogQHR5cGUge1Jlc29sdmVyfSAqL1xuXG5mdW5jdGlvbiByZXNvbHZlQ29kZVRleHQoZXZlbnRzKSB7XG4gIGxldCB0YWlsRXhpdEluZGV4ID0gZXZlbnRzLmxlbmd0aCAtIDRcbiAgbGV0IGhlYWRFbnRlckluZGV4ID0gM1xuICAvKiogQHR5cGUge251bWJlcn0gKi9cblxuICBsZXQgaW5kZXhcbiAgLyoqIEB0eXBlIHtudW1iZXJ8dW5kZWZpbmVkfSAqL1xuXG4gIGxldCBlbnRlciAvLyBJZiB3ZSBzdGFydCBhbmQgZW5kIHdpdGggYW4gRU9MIG9yIGEgc3BhY2UuXG5cbiAgaWYgKFxuICAgIChldmVudHNbaGVhZEVudGVySW5kZXhdWzFdLnR5cGUgPT09ICdsaW5lRW5kaW5nJyB8fFxuICAgICAgZXZlbnRzW2hlYWRFbnRlckluZGV4XVsxXS50eXBlID09PSAnc3BhY2UnKSAmJlxuICAgIChldmVudHNbdGFpbEV4aXRJbmRleF1bMV0udHlwZSA9PT0gJ2xpbmVFbmRpbmcnIHx8XG4gICAgICBldmVudHNbdGFpbEV4aXRJbmRleF1bMV0udHlwZSA9PT0gJ3NwYWNlJylcbiAgKSB7XG4gICAgaW5kZXggPSBoZWFkRW50ZXJJbmRleCAvLyBBbmQgd2UgaGF2ZSBkYXRhLlxuXG4gICAgd2hpbGUgKCsraW5kZXggPCB0YWlsRXhpdEluZGV4KSB7XG4gICAgICBpZiAoZXZlbnRzW2luZGV4XVsxXS50eXBlID09PSAnY29kZVRleHREYXRhJykge1xuICAgICAgICAvLyBUaGVuIHdlIGhhdmUgcGFkZGluZy5cbiAgICAgICAgZXZlbnRzW2hlYWRFbnRlckluZGV4XVsxXS50eXBlID0gJ2NvZGVUZXh0UGFkZGluZydcbiAgICAgICAgZXZlbnRzW3RhaWxFeGl0SW5kZXhdWzFdLnR5cGUgPSAnY29kZVRleHRQYWRkaW5nJ1xuICAgICAgICBoZWFkRW50ZXJJbmRleCArPSAyXG4gICAgICAgIHRhaWxFeGl0SW5kZXggLT0gMlxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfSAvLyBNZXJnZSBhZGphY2VudCBzcGFjZXMgYW5kIGRhdGEuXG5cbiAgaW5kZXggPSBoZWFkRW50ZXJJbmRleCAtIDFcbiAgdGFpbEV4aXRJbmRleCsrXG5cbiAgd2hpbGUgKCsraW5kZXggPD0gdGFpbEV4aXRJbmRleCkge1xuICAgIGlmIChlbnRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoaW5kZXggIT09IHRhaWxFeGl0SW5kZXggJiYgZXZlbnRzW2luZGV4XVsxXS50eXBlICE9PSAnbGluZUVuZGluZycpIHtcbiAgICAgICAgZW50ZXIgPSBpbmRleFxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICBpbmRleCA9PT0gdGFpbEV4aXRJbmRleCB8fFxuICAgICAgZXZlbnRzW2luZGV4XVsxXS50eXBlID09PSAnbGluZUVuZGluZydcbiAgICApIHtcbiAgICAgIGV2ZW50c1tlbnRlcl1bMV0udHlwZSA9ICdjb2RlVGV4dERhdGEnXG5cbiAgICAgIGlmIChpbmRleCAhPT0gZW50ZXIgKyAyKSB7XG4gICAgICAgIGV2ZW50c1tlbnRlcl1bMV0uZW5kID0gZXZlbnRzW2luZGV4IC0gMV1bMV0uZW5kXG4gICAgICAgIGV2ZW50cy5zcGxpY2UoZW50ZXIgKyAyLCBpbmRleCAtIGVudGVyIC0gMilcbiAgICAgICAgdGFpbEV4aXRJbmRleCAtPSBpbmRleCAtIGVudGVyIC0gMlxuICAgICAgICBpbmRleCA9IGVudGVyICsgMlxuICAgICAgfVxuXG4gICAgICBlbnRlciA9IHVuZGVmaW5lZFxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBldmVudHNcbn1cbi8qKiBAdHlwZSB7UHJldmlvdXN9ICovXG5cbmZ1bmN0aW9uIHByZXZpb3VzKGNvZGUpIHtcbiAgLy8gSWYgdGhlcmUgaXMgYSBwcmV2aW91cyBjb2RlLCB0aGVyZSB3aWxsIGFsd2F5cyBiZSBhIHRhaWwuXG4gIHJldHVybiAoXG4gICAgY29kZSAhPT0gOTYgfHxcbiAgICB0aGlzLmV2ZW50c1t0aGlzLmV2ZW50cy5sZW5ndGggLSAxXVsxXS50eXBlID09PSAnY2hhcmFjdGVyRXNjYXBlJ1xuICApXG59XG4vKiogQHR5cGUge1Rva2VuaXplcn0gKi9cblxuZnVuY3Rpb24gdG9rZW5pemVDb2RlVGV4dChlZmZlY3RzLCBvaywgbm9rKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIGxldCBzaXplT3BlbiA9IDBcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG5cbiAgbGV0IHNpemVcbiAgLyoqIEB0eXBlIHtUb2tlbn0gKi9cblxuICBsZXQgdG9rZW5cbiAgcmV0dXJuIHN0YXJ0XG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG5cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGVmZmVjdHMuZW50ZXIoJ2NvZGVUZXh0JylcbiAgICBlZmZlY3RzLmVudGVyKCdjb2RlVGV4dFNlcXVlbmNlJylcbiAgICByZXR1cm4gb3BlbmluZ1NlcXVlbmNlKGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBvcGVuaW5nU2VxdWVuY2UoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA5Nikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBzaXplT3BlbisrXG4gICAgICByZXR1cm4gb3BlbmluZ1NlcXVlbmNlXG4gICAgfVxuXG4gICAgZWZmZWN0cy5leGl0KCdjb2RlVGV4dFNlcXVlbmNlJylcbiAgICByZXR1cm4gZ2FwKGNvZGUpXG4gIH1cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBnYXAoY29kZSkge1xuICAgIC8vIEVPRi5cbiAgICBpZiAoY29kZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgIH0gLy8gQ2xvc2luZyBmZW5jZT9cbiAgICAvLyBDb3VsZCBhbHNvIGJlIGRhdGEuXG5cbiAgICBpZiAoY29kZSA9PT0gOTYpIHtcbiAgICAgIHRva2VuID0gZWZmZWN0cy5lbnRlcignY29kZVRleHRTZXF1ZW5jZScpXG4gICAgICBzaXplID0gMFxuICAgICAgcmV0dXJuIGNsb3NpbmdTZXF1ZW5jZShjb2RlKVxuICAgIH0gLy8gVGFicyBkb27igJl0IHdvcmssIGFuZCB2aXJ0dWFsIHNwYWNlcyBkb27igJl0IG1ha2Ugc2Vuc2UuXG5cbiAgICBpZiAoY29kZSA9PT0gMzIpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIoJ3NwYWNlJylcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KCdzcGFjZScpXG4gICAgICByZXR1cm4gZ2FwXG4gICAgfVxuXG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgZWZmZWN0cy5lbnRlcignbGluZUVuZGluZycpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCgnbGluZUVuZGluZycpXG4gICAgICByZXR1cm4gZ2FwXG4gICAgfSAvLyBEYXRhLlxuXG4gICAgZWZmZWN0cy5lbnRlcignY29kZVRleHREYXRhJylcbiAgICByZXR1cm4gZGF0YShjb2RlKVxuICB9IC8vIEluIGNvZGUuXG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cblxuICBmdW5jdGlvbiBkYXRhKGNvZGUpIHtcbiAgICBpZiAoXG4gICAgICBjb2RlID09PSBudWxsIHx8XG4gICAgICBjb2RlID09PSAzMiB8fFxuICAgICAgY29kZSA9PT0gOTYgfHxcbiAgICAgIG1hcmtkb3duTGluZUVuZGluZyhjb2RlKVxuICAgICkge1xuICAgICAgZWZmZWN0cy5leGl0KCdjb2RlVGV4dERhdGEnKVxuICAgICAgcmV0dXJuIGdhcChjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiBkYXRhXG4gIH0gLy8gQ2xvc2luZyBmZW5jZS5cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuXG4gIGZ1bmN0aW9uIGNsb3NpbmdTZXF1ZW5jZShjb2RlKSB7XG4gICAgLy8gTW9yZS5cbiAgICBpZiAoY29kZSA9PT0gOTYpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgc2l6ZSsrXG4gICAgICByZXR1cm4gY2xvc2luZ1NlcXVlbmNlXG4gICAgfSAvLyBEb25lIVxuXG4gICAgaWYgKHNpemUgPT09IHNpemVPcGVuKSB7XG4gICAgICBlZmZlY3RzLmV4aXQoJ2NvZGVUZXh0U2VxdWVuY2UnKVxuICAgICAgZWZmZWN0cy5leGl0KCdjb2RlVGV4dCcpXG4gICAgICByZXR1cm4gb2soY29kZSlcbiAgICB9IC8vIE1vcmUgb3IgbGVzcyBhY2NlbnRzOiBtYXJrIGFzIGRhdGEuXG5cbiAgICB0b2tlbi50eXBlID0gJ2NvZGVUZXh0RGF0YSdcbiAgICByZXR1cm4gZGF0YShjb2RlKVxuICB9XG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuRXh0ZW5zaW9ufSBFeHRlbnNpb25cbiAqL1xuaW1wb3J0IHtcbiAgYXR0ZW50aW9uLFxuICBhdXRvbGluayxcbiAgYmxvY2tRdW90ZSxcbiAgY2hhcmFjdGVyRXNjYXBlLFxuICBjaGFyYWN0ZXJSZWZlcmVuY2UsXG4gIGNvZGVGZW5jZWQsXG4gIGNvZGVJbmRlbnRlZCxcbiAgY29kZVRleHQsXG4gIGRlZmluaXRpb24sXG4gIGhhcmRCcmVha0VzY2FwZSxcbiAgaGVhZGluZ0F0eCxcbiAgaHRtbEZsb3csXG4gIGh0bWxUZXh0LFxuICBsYWJlbEVuZCxcbiAgbGFiZWxTdGFydEltYWdlLFxuICBsYWJlbFN0YXJ0TGluayxcbiAgbGluZUVuZGluZyxcbiAgbGlzdCxcbiAgc2V0ZXh0VW5kZXJsaW5lLFxuICB0aGVtYXRpY0JyZWFrXG59IGZyb20gJ21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsnXG5pbXBvcnQge3Jlc29sdmVyIGFzIHJlc29sdmVUZXh0fSBmcm9tICcuL2luaXRpYWxpemUvdGV4dC5qcydcbi8qKiBAdHlwZSB7RXh0ZW5zaW9uWydkb2N1bWVudCddfSAqL1xuXG5leHBvcnQgY29uc3QgZG9jdW1lbnQgPSB7XG4gIFs0Ml06IGxpc3QsXG4gIFs0M106IGxpc3QsXG4gIFs0NV06IGxpc3QsXG4gIFs0OF06IGxpc3QsXG4gIFs0OV06IGxpc3QsXG4gIFs1MF06IGxpc3QsXG4gIFs1MV06IGxpc3QsXG4gIFs1Ml06IGxpc3QsXG4gIFs1M106IGxpc3QsXG4gIFs1NF06IGxpc3QsXG4gIFs1NV06IGxpc3QsXG4gIFs1Nl06IGxpc3QsXG4gIFs1N106IGxpc3QsXG4gIFs2Ml06IGJsb2NrUXVvdGVcbn1cbi8qKiBAdHlwZSB7RXh0ZW5zaW9uWydjb250ZW50SW5pdGlhbCddfSAqL1xuXG5leHBvcnQgY29uc3QgY29udGVudEluaXRpYWwgPSB7XG4gIFs5MV06IGRlZmluaXRpb25cbn1cbi8qKiBAdHlwZSB7RXh0ZW5zaW9uWydmbG93SW5pdGlhbCddfSAqL1xuXG5leHBvcnQgY29uc3QgZmxvd0luaXRpYWwgPSB7XG4gIFstMl06IGNvZGVJbmRlbnRlZCxcbiAgWy0xXTogY29kZUluZGVudGVkLFxuICBbMzJdOiBjb2RlSW5kZW50ZWRcbn1cbi8qKiBAdHlwZSB7RXh0ZW5zaW9uWydmbG93J119ICovXG5cbmV4cG9ydCBjb25zdCBmbG93ID0ge1xuICBbMzVdOiBoZWFkaW5nQXR4LFxuICBbNDJdOiB0aGVtYXRpY0JyZWFrLFxuICBbNDVdOiBbc2V0ZXh0VW5kZXJsaW5lLCB0aGVtYXRpY0JyZWFrXSxcbiAgWzYwXTogaHRtbEZsb3csXG4gIFs2MV06IHNldGV4dFVuZGVybGluZSxcbiAgWzk1XTogdGhlbWF0aWNCcmVhayxcbiAgWzk2XTogY29kZUZlbmNlZCxcbiAgWzEyNl06IGNvZGVGZW5jZWRcbn1cbi8qKiBAdHlwZSB7RXh0ZW5zaW9uWydzdHJpbmcnXX0gKi9cblxuZXhwb3J0IGNvbnN0IHN0cmluZyA9IHtcbiAgWzM4XTogY2hhcmFjdGVyUmVmZXJlbmNlLFxuICBbOTJdOiBjaGFyYWN0ZXJFc2NhcGVcbn1cbi8qKiBAdHlwZSB7RXh0ZW5zaW9uWyd0ZXh0J119ICovXG5cbmV4cG9ydCBjb25zdCB0ZXh0ID0ge1xuICBbLTVdOiBsaW5lRW5kaW5nLFxuICBbLTRdOiBsaW5lRW5kaW5nLFxuICBbLTNdOiBsaW5lRW5kaW5nLFxuICBbMzNdOiBsYWJlbFN0YXJ0SW1hZ2UsXG4gIFszOF06IGNoYXJhY3RlclJlZmVyZW5jZSxcbiAgWzQyXTogYXR0ZW50aW9uLFxuICBbNjBdOiBbYXV0b2xpbmssIGh0bWxUZXh0XSxcbiAgWzkxXTogbGFiZWxTdGFydExpbmssXG4gIFs5Ml06IFtoYXJkQnJlYWtFc2NhcGUsIGNoYXJhY3RlckVzY2FwZV0sXG4gIFs5M106IGxhYmVsRW5kLFxuICBbOTVdOiBhdHRlbnRpb24sXG4gIFs5Nl06IGNvZGVUZXh0XG59XG4vKiogQHR5cGUge0V4dGVuc2lvblsnaW5zaWRlU3BhbiddfSAqL1xuXG5leHBvcnQgY29uc3QgaW5zaWRlU3BhbiA9IHtcbiAgbnVsbDogW2F0dGVudGlvbiwgcmVzb2x2ZVRleHRdXG59XG4vKiogQHR5cGUge0V4dGVuc2lvblsnYXR0ZW50aW9uTWFya2VycyddfSAqL1xuXG5leHBvcnQgY29uc3QgYXR0ZW50aW9uTWFya2VycyA9IHtcbiAgbnVsbDogWzQyLCA5NV1cbn1cbi8qKiBAdHlwZSB7RXh0ZW5zaW9uWydkaXNhYmxlJ119ICovXG5cbmV4cG9ydCBjb25zdCBkaXNhYmxlID0ge1xuICBudWxsOiBbXVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkVuY29kaW5nfSBFbmNvZGluZ1xuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5WYWx1ZX0gVmFsdWVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ2h1bmt9IENodW5rXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkNvZGV9IENvZGVcbiAqL1xuXG4vKipcbiAqIEBjYWxsYmFjayBQcmVwcm9jZXNzb3JcbiAqIEBwYXJhbSB7VmFsdWV9IHZhbHVlXG4gKiBAcGFyYW0ge0VuY29kaW5nfSBbZW5jb2RpbmddXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtlbmQ9ZmFsc2VdXG4gKiBAcmV0dXJucyB7Q2h1bmtbXX1cbiAqL1xuY29uc3Qgc2VhcmNoID0gL1tcXDBcXHRcXG5cXHJdL2dcbi8qKlxuICogQHJldHVybnMge1ByZXByb2Nlc3Nvcn1cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcHJlcHJvY2VzcygpIHtcbiAgbGV0IGNvbHVtbiA9IDFcbiAgbGV0IGJ1ZmZlciA9ICcnXG4gIC8qKiBAdHlwZSB7Ym9vbGVhbnx1bmRlZmluZWR9ICovXG5cbiAgbGV0IHN0YXJ0ID0gdHJ1ZVxuICAvKiogQHR5cGUge2Jvb2xlYW58dW5kZWZpbmVkfSAqL1xuXG4gIGxldCBhdENhcnJpYWdlUmV0dXJuXG4gIHJldHVybiBwcmVwcm9jZXNzb3JcbiAgLyoqIEB0eXBlIHtQcmVwcm9jZXNzb3J9ICovXG5cbiAgZnVuY3Rpb24gcHJlcHJvY2Vzc29yKHZhbHVlLCBlbmNvZGluZywgZW5kKSB7XG4gICAgLyoqIEB0eXBlIHtDaHVua1tdfSAqL1xuICAgIGNvbnN0IGNodW5rcyA9IFtdXG4gICAgLyoqIEB0eXBlIHtSZWdFeHBNYXRjaEFycmF5fG51bGx9ICovXG5cbiAgICBsZXQgbWF0Y2hcbiAgICAvKiogQHR5cGUge251bWJlcn0gKi9cblxuICAgIGxldCBuZXh0XG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG5cbiAgICBsZXQgc3RhcnRQb3NpdGlvblxuICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuXG4gICAgbGV0IGVuZFBvc2l0aW9uXG4gICAgLyoqIEB0eXBlIHtDb2RlfSAqL1xuXG4gICAgbGV0IGNvZGUgLy8gQHRzLWV4cGVjdC1lcnJvciBgQnVmZmVyYCBkb2VzIGFsbG93IGFuIGVuY29kaW5nLlxuXG4gICAgdmFsdWUgPSBidWZmZXIgKyB2YWx1ZS50b1N0cmluZyhlbmNvZGluZylcbiAgICBzdGFydFBvc2l0aW9uID0gMFxuICAgIGJ1ZmZlciA9ICcnXG5cbiAgICBpZiAoc3RhcnQpIHtcbiAgICAgIGlmICh2YWx1ZS5jaGFyQ29kZUF0KDApID09PSA2NTI3OSkge1xuICAgICAgICBzdGFydFBvc2l0aW9uKytcbiAgICAgIH1cblxuICAgICAgc3RhcnQgPSB1bmRlZmluZWRcbiAgICB9XG5cbiAgICB3aGlsZSAoc3RhcnRQb3NpdGlvbiA8IHZhbHVlLmxlbmd0aCkge1xuICAgICAgc2VhcmNoLmxhc3RJbmRleCA9IHN0YXJ0UG9zaXRpb25cbiAgICAgIG1hdGNoID0gc2VhcmNoLmV4ZWModmFsdWUpXG4gICAgICBlbmRQb3NpdGlvbiA9XG4gICAgICAgIG1hdGNoICYmIG1hdGNoLmluZGV4ICE9PSB1bmRlZmluZWQgPyBtYXRjaC5pbmRleCA6IHZhbHVlLmxlbmd0aFxuICAgICAgY29kZSA9IHZhbHVlLmNoYXJDb2RlQXQoZW5kUG9zaXRpb24pXG5cbiAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgYnVmZmVyID0gdmFsdWUuc2xpY2Uoc3RhcnRQb3NpdGlvbilcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvZGUgPT09IDEwICYmIHN0YXJ0UG9zaXRpb24gPT09IGVuZFBvc2l0aW9uICYmIGF0Q2FycmlhZ2VSZXR1cm4pIHtcbiAgICAgICAgY2h1bmtzLnB1c2goLTMpXG4gICAgICAgIGF0Q2FycmlhZ2VSZXR1cm4gPSB1bmRlZmluZWRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChhdENhcnJpYWdlUmV0dXJuKSB7XG4gICAgICAgICAgY2h1bmtzLnB1c2goLTUpXG4gICAgICAgICAgYXRDYXJyaWFnZVJldHVybiA9IHVuZGVmaW5lZFxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXJ0UG9zaXRpb24gPCBlbmRQb3NpdGlvbikge1xuICAgICAgICAgIGNodW5rcy5wdXNoKHZhbHVlLnNsaWNlKHN0YXJ0UG9zaXRpb24sIGVuZFBvc2l0aW9uKSlcbiAgICAgICAgICBjb2x1bW4gKz0gZW5kUG9zaXRpb24gLSBzdGFydFBvc2l0aW9uXG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKGNvZGUpIHtcbiAgICAgICAgICBjYXNlIDA6IHtcbiAgICAgICAgICAgIGNodW5rcy5wdXNoKDY1NTMzKVxuICAgICAgICAgICAgY29sdW1uKytcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2FzZSA5OiB7XG4gICAgICAgICAgICBuZXh0ID0gTWF0aC5jZWlsKGNvbHVtbiAvIDQpICogNFxuICAgICAgICAgICAgY2h1bmtzLnB1c2goLTIpXG5cbiAgICAgICAgICAgIHdoaWxlIChjb2x1bW4rKyA8IG5leHQpIGNodW5rcy5wdXNoKC0xKVxuXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNhc2UgMTA6IHtcbiAgICAgICAgICAgIGNodW5rcy5wdXNoKC00KVxuICAgICAgICAgICAgY29sdW1uID0gMVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBhdENhcnJpYWdlUmV0dXJuID0gdHJ1ZVxuICAgICAgICAgICAgY29sdW1uID0gMVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzdGFydFBvc2l0aW9uID0gZW5kUG9zaXRpb24gKyAxXG4gICAgfVxuXG4gICAgaWYgKGVuZCkge1xuICAgICAgaWYgKGF0Q2FycmlhZ2VSZXR1cm4pIGNodW5rcy5wdXNoKC01KVxuICAgICAgaWYgKGJ1ZmZlcikgY2h1bmtzLnB1c2goYnVmZmVyKVxuICAgICAgY2h1bmtzLnB1c2gobnVsbClcbiAgICB9XG5cbiAgICByZXR1cm4gY2h1bmtzXG4gIH1cbn1cbiIsIi8qKlxuICogVHVybiB0aGUgbnVtYmVyIChpbiBzdHJpbmcgZm9ybSBhcyBlaXRoZXIgaGV4YS0gb3IgcGxhaW4gZGVjaW1hbCkgY29taW5nIGZyb21cbiAqIGEgbnVtZXJpYyBjaGFyYWN0ZXIgcmVmZXJlbmNlIGludG8gYSBjaGFyYWN0ZXIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiAgIFZhbHVlIHRvIGRlY29kZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiYXNlXG4gKiAgIE51bWVyaWMgYmFzZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVOdW1lcmljQ2hhcmFjdGVyUmVmZXJlbmNlKHZhbHVlLCBiYXNlKSB7XG4gIGNvbnN0IGNvZGUgPSBOdW1iZXIucGFyc2VJbnQodmFsdWUsIGJhc2UpXG5cbiAgaWYgKFxuICAgIC8vIEMwIGV4Y2VwdCBmb3IgSFQsIExGLCBGRiwgQ1IsIHNwYWNlXG4gICAgY29kZSA8IDkgfHxcbiAgICBjb2RlID09PSAxMSB8fFxuICAgIChjb2RlID4gMTMgJiYgY29kZSA8IDMyKSB8fCAvLyBDb250cm9sIGNoYXJhY3RlciAoREVMKSBvZiB0aGUgYmFzaWMgYmxvY2sgYW5kIEMxIGNvbnRyb2xzLlxuICAgIChjb2RlID4gMTI2ICYmIGNvZGUgPCAxNjApIHx8IC8vIExvbmUgaGlnaCBzdXJyb2dhdGVzIGFuZCBsb3cgc3Vycm9nYXRlcy5cbiAgICAoY29kZSA+IDU1Mjk1ICYmIGNvZGUgPCA1NzM0NCkgfHwgLy8gTm9uY2hhcmFjdGVycy5cbiAgICAoY29kZSA+IDY0OTc1ICYmIGNvZGUgPCA2NTAwOCkgfHxcbiAgICAoY29kZSAmIDY1NTM1KSA9PT0gNjU1MzUgfHxcbiAgICAoY29kZSAmIDY1NTM1KSA9PT0gNjU1MzQgfHwgLy8gT3V0IG9mIHJhbmdlXG4gICAgY29kZSA+IDExMTQxMTFcbiAgKSB7XG4gICAgcmV0dXJuICdcXHVGRkZEJ1xuICB9XG5cbiAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSlcbn1cbiIsImltcG9ydCB7ZGVjb2RlRW50aXR5fSBmcm9tICdwYXJzZS1lbnRpdGllcy9kZWNvZGUtZW50aXR5LmpzJ1xuaW1wb3J0IHtkZWNvZGVOdW1lcmljQ2hhcmFjdGVyUmVmZXJlbmNlfSBmcm9tICdtaWNyb21hcmstdXRpbC1kZWNvZGUtbnVtZXJpYy1jaGFyYWN0ZXItcmVmZXJlbmNlJ1xuY29uc3QgY2hhcmFjdGVyRXNjYXBlT3JSZWZlcmVuY2UgPVxuICAvXFxcXChbIS0vOi1AWy1gey1+XSl8JigjKD86XFxkezEsN318eFtcXGRhLWZdezEsNn0pfFtcXGRhLXpdezEsMzF9KTsvZ2lcbi8qKlxuICogVXRpbGl0eSB0byBkZWNvZGUgbWFya2Rvd24gc3RyaW5ncyAod2hpY2ggb2NjdXIgaW4gcGxhY2VzIHN1Y2ggYXMgZmVuY2VkXG4gKiBjb2RlIGluZm8gc3RyaW5ncywgZGVzdGluYXRpb25zLCBsYWJlbHMsIGFuZCB0aXRsZXMpLlxuICogVGhlIOKAnHN0cmluZ+KAnSBjb250ZW50IHR5cGUgYWxsb3dzIGNoYXJhY3RlciBlc2NhcGVzIGFuZCAtcmVmZXJlbmNlcy5cbiAqIFRoaXMgZGVjb2RlcyB0aG9zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZVN0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUucmVwbGFjZShjaGFyYWN0ZXJFc2NhcGVPclJlZmVyZW5jZSwgZGVjb2RlKVxufVxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gJDBcbiAqIEBwYXJhbSB7c3RyaW5nfSAkMVxuICogQHBhcmFtIHtzdHJpbmd9ICQyXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5cbmZ1bmN0aW9uIGRlY29kZSgkMCwgJDEsICQyKSB7XG4gIGlmICgkMSkge1xuICAgIC8vIEVzY2FwZS5cbiAgICByZXR1cm4gJDFcbiAgfSAvLyBSZWZlcmVuY2UuXG5cbiAgY29uc3QgaGVhZCA9ICQyLmNoYXJDb2RlQXQoMClcblxuICBpZiAoaGVhZCA9PT0gMzUpIHtcbiAgICBjb25zdCBoZWFkID0gJDIuY2hhckNvZGVBdCgxKVxuICAgIGNvbnN0IGhleCA9IGhlYWQgPT09IDEyMCB8fCBoZWFkID09PSA4OFxuICAgIHJldHVybiBkZWNvZGVOdW1lcmljQ2hhcmFjdGVyUmVmZXJlbmNlKCQyLnNsaWNlKGhleCA/IDIgOiAxKSwgaGV4ID8gMTYgOiAxMClcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVFbnRpdHkoJDIpIHx8ICQwXG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuRW5jb2Rpbmd9IEVuY29kaW5nXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkV2ZW50fSBFdmVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5QYXJzZU9wdGlvbnN9IFBhcnNlT3B0aW9uc1xuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbn0gVG9rZW5cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuVG9rZW5pemVDb250ZXh0fSBUb2tlbml6ZUNvbnRleHRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuVmFsdWV9IFZhbHVlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlzdCcpLlBhcmVudH0gVW5pc3RQYXJlbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaXN0JykuUG9pbnR9IFBvaW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLlBocmFzaW5nQ29udGVudH0gUGhyYXNpbmdDb250ZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkNvbnRlbnR9IENvbnRlbnRcbiAqIEB0eXBlZGVmIHtSb290fENvbnRlbnR9IE5vZGVcbiAqIEB0eXBlZGVmIHtFeHRyYWN0PE5vZGUsIFVuaXN0UGFyZW50Pn0gUGFyZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkJyZWFrfSBCcmVha1xuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5CbG9ja3F1b3RlfSBCbG9ja3F1b3RlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkNvZGV9IENvZGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuRGVmaW5pdGlvbn0gRGVmaW5pdGlvblxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5FbXBoYXNpc30gRW1waGFzaXNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuSGVhZGluZ30gSGVhZGluZ1xuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5IVE1MfSBIVE1MXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkltYWdlfSBJbWFnZVxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5JbWFnZVJlZmVyZW5jZX0gSW1hZ2VSZWZlcmVuY2VcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuSW5saW5lQ29kZX0gSW5saW5lQ29kZVxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5MaW5rfSBMaW5rXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkxpbmtSZWZlcmVuY2V9IExpbmtSZWZlcmVuY2VcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuTGlzdH0gTGlzdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5MaXN0SXRlbX0gTGlzdEl0ZW1cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuUGFyYWdyYXBofSBQYXJhZ3JhcGhcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuUm9vdH0gUm9vdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5TdHJvbmd9IFN0cm9uZ1xuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5UZXh0fSBUZXh0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLlRoZW1hdGljQnJlYWt9IFRoZW1hdGljQnJlYWtcbiAqXG4gKiBAdHlwZWRlZiB7VW5pc3RQYXJlbnQgJiB7dHlwZTogJ2ZyYWdtZW50JywgY2hpbGRyZW46IFBocmFzaW5nQ29udGVudFtdfX0gRnJhZ21lbnRcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIF9Db21waWxlRGF0YUZpZWxkc1xuICogQHByb3BlcnR5IHtib29sZWFufHVuZGVmaW5lZH0gZXhwZWN0aW5nRmlyc3RMaXN0SXRlbVZhbHVlXG4gKiBAcHJvcGVydHkge2Jvb2xlYW58dW5kZWZpbmVkfSBmbG93Q29kZUluc2lkZVxuICogQHByb3BlcnR5IHtib29sZWFufHVuZGVmaW5lZH0gc2V0ZXh0SGVhZGluZ1NsdXJwTGluZUVuZGluZ1xuICogQHByb3BlcnR5IHtib29sZWFufHVuZGVmaW5lZH0gYXRIYXJkQnJlYWtcbiAqIEBwcm9wZXJ0eSB7J2NvbGxhcHNlZCd8J2Z1bGwnfSByZWZlcmVuY2VUeXBlXG4gKiBAcHJvcGVydHkge2Jvb2xlYW58dW5kZWZpbmVkfSBpblJlZmVyZW5jZVxuICogQHByb3BlcnR5IHsnY2hhcmFjdGVyUmVmZXJlbmNlTWFya2VySGV4YWRlY2ltYWwnfCdjaGFyYWN0ZXJSZWZlcmVuY2VNYXJrZXJOdW1lcmljJ30gY2hhcmFjdGVyUmVmZXJlbmNlVHlwZVxuICpcbiAqIEB0eXBlZGVmIHtSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiAmIFBhcnRpYWw8X0NvbXBpbGVEYXRhRmllbGRzPn0gQ29tcGlsZURhdGFcbiAqXG4gKiBAdHlwZWRlZiB7KHRyZWU6IFJvb3QpID0+IFJvb3R8dm9pZH0gVHJhbnNmb3JtXG4gKiBAdHlwZWRlZiB7KHRoaXM6IENvbXBpbGVDb250ZXh0LCB0b2tlbjogVG9rZW4pID0+IHZvaWR9IEhhbmRsZVxuICogQHR5cGVkZWYge1JlY29yZDxzdHJpbmcsIEhhbmRsZT59IEhhbmRsZXNcbiAqICAgVG9rZW4gdHlwZXMgbWFwcGluZyB0byBoYW5kbGVzXG4gKiBAdHlwZWRlZiB7UmVjb3JkPHN0cmluZywgUmVjb3JkPHN0cmluZywgdW5rbm93bj58QXJyYXkuPHVua25vd24+PiAmIHtjYW5Db250YWluRW9sczogQXJyYXkuPHN0cmluZz4sIHRyYW5zZm9ybXM6IEFycmF5LjxUcmFuc2Zvcm0+LCBlbnRlcjogSGFuZGxlcywgZXhpdDogSGFuZGxlc319IE5vcm1hbGl6ZWRFeHRlbnNpb25cbiAqIEB0eXBlZGVmIHtQYXJ0aWFsPE5vcm1hbGl6ZWRFeHRlbnNpb24+fSBFeHRlbnNpb25cbiAqICAgQW4gbWRhc3QgZXh0ZW5zaW9uIGNoYW5nZXMgaG93IG1hcmtkb3duIHRva2VucyBhcmUgdHVybmVkIGludG8gbWRhc3QuXG4gKlxuICogQHR5cGVkZWYgQ29tcGlsZUNvbnRleHRcbiAqICAgbWRhc3QgY29tcGlsZXIgY29udGV4dFxuICogQHByb3BlcnR5IHtBcnJheS48Tm9kZSB8IEZyYWdtZW50Pn0gc3RhY2tcbiAqIEBwcm9wZXJ0eSB7QXJyYXkuPFRva2VuPn0gdG9rZW5TdGFja1xuICogQHByb3BlcnR5IHsoa2V5OiBzdHJpbmcsIHZhbHVlPzogdW5rbm93bikgPT4gdm9pZH0gc2V0RGF0YVxuICogICBTZXQgZGF0YSBpbnRvIHRoZSBrZXktdmFsdWUgc3RvcmUuXG4gKiBAcHJvcGVydHkgezxLIGV4dGVuZHMgc3RyaW5nPihrZXk6IEspID0+IENvbXBpbGVEYXRhW0tdfSBnZXREYXRhXG4gKiAgIEdldCBkYXRhIGZyb20gdGhlIGtleS12YWx1ZSBzdG9yZS5cbiAqIEBwcm9wZXJ0eSB7KHRoaXM6IENvbXBpbGVDb250ZXh0KSA9PiB2b2lkfSBidWZmZXJcbiAqICAgQ2FwdHVyZSBzb21lIG9mIHRoZSBvdXRwdXQgZGF0YS5cbiAqIEBwcm9wZXJ0eSB7KHRoaXM6IENvbXBpbGVDb250ZXh0KSA9PiBzdHJpbmd9IHJlc3VtZVxuICogICBTdG9wIGNhcHR1cmluZyBhbmQgYWNjZXNzIHRoZSBvdXRwdXQgZGF0YS5cbiAqIEBwcm9wZXJ0eSB7PE4gZXh0ZW5kcyBOb2RlPih0aGlzOiBDb21waWxlQ29udGV4dCwgbm9kZTogTiwgdG9rZW46IFRva2VuKSA9PiBOfSBlbnRlclxuICogICBFbnRlciBhIHRva2VuLlxuICogQHByb3BlcnR5IHsodGhpczogQ29tcGlsZUNvbnRleHQsIHRva2VuOiBUb2tlbikgPT4gTm9kZX0gZXhpdFxuICogICBFeGl0IGEgdG9rZW4uXG4gKiBAcHJvcGVydHkge1Rva2VuaXplQ29udGV4dFsnc2xpY2VTZXJpYWxpemUnXX0gc2xpY2VTZXJpYWxpemVcbiAqICAgR2V0IHRoZSBzdHJpbmcgdmFsdWUgb2YgYSB0b2tlbi5cbiAqIEBwcm9wZXJ0eSB7Tm9ybWFsaXplZEV4dGVuc2lvbn0gY29uZmlnXG4gKiAgIENvbmZpZ3VyYXRpb24uXG4gKlxuICogQHR5cGVkZWYge3ttZGFzdEV4dGVuc2lvbnM/OiBBcnJheS48RXh0ZW5zaW9ufEFycmF5LjxFeHRlbnNpb24+Pn19IEZyb21NYXJrZG93bk9wdGlvbnNcbiAqIEB0eXBlZGVmIHtQYXJzZU9wdGlvbnMgJiBGcm9tTWFya2Rvd25PcHRpb25zfSBPcHRpb25zXG4gKi9cbmltcG9ydCB7dG9TdHJpbmd9IGZyb20gJ21kYXN0LXV0aWwtdG8tc3RyaW5nJ1xuaW1wb3J0IHtwYXJzZX0gZnJvbSAnbWljcm9tYXJrL2xpYi9wYXJzZS5qcydcbmltcG9ydCB7cHJlcHJvY2Vzc30gZnJvbSAnbWljcm9tYXJrL2xpYi9wcmVwcm9jZXNzLmpzJ1xuaW1wb3J0IHtwb3N0cHJvY2Vzc30gZnJvbSAnbWljcm9tYXJrL2xpYi9wb3N0cHJvY2Vzcy5qcydcbmltcG9ydCB7ZGVjb2RlTnVtZXJpY0NoYXJhY3RlclJlZmVyZW5jZX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtZGVjb2RlLW51bWVyaWMtY2hhcmFjdGVyLXJlZmVyZW5jZSdcbmltcG9ydCB7ZGVjb2RlU3RyaW5nfSBmcm9tICdtaWNyb21hcmstdXRpbC1kZWNvZGUtc3RyaW5nJ1xuaW1wb3J0IHtub3JtYWxpemVJZGVudGlmaWVyfSBmcm9tICdtaWNyb21hcmstdXRpbC1ub3JtYWxpemUtaWRlbnRpZmllcidcbmltcG9ydCB7ZGVjb2RlRW50aXR5fSBmcm9tICdwYXJzZS1lbnRpdGllcy9kZWNvZGUtZW50aXR5LmpzJ1xuaW1wb3J0IHtzdHJpbmdpZnlQb3NpdGlvbn0gZnJvbSAndW5pc3QtdXRpbC1zdHJpbmdpZnktcG9zaXRpb24nXG5jb25zdCBvd24gPSB7fS5oYXNPd25Qcm9wZXJ0eVxuLyoqXG4gKiBAcGFyYW0gdmFsdWUgTWFya2Rvd24gdG8gcGFyc2UgKGBzdHJpbmdgIG9yIGBCdWZmZXJgKS5cbiAqIEBwYXJhbSBbZW5jb2RpbmddIENoYXJhY3RlciBlbmNvZGluZyB0byB1bmRlcnN0YW5kIGB2YWx1ZWAgYXMgd2hlbiBpdOKAmXMgYSBgQnVmZmVyYCAoYHN0cmluZ2AsIGRlZmF1bHQ6IGAndXRmOCdgKS5cbiAqIEBwYXJhbSBbb3B0aW9uc10gQ29uZmlndXJhdGlvblxuICovXG5cbmV4cG9ydCBjb25zdCBmcm9tTWFya2Rvd24gPVxuICAvKipcbiAgICogQHBhcmFtIHtWYWx1ZX0gdmFsdWVcbiAgICogQHBhcmFtIHtFbmNvZGluZ30gW2VuY29kaW5nXVxuICAgKiBAcGFyYW0ge09wdGlvbnN9IFtvcHRpb25zXVxuICAgKiBAcmV0dXJucyB7Um9vdH1cbiAgICovXG4gIGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmcsIG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgb3B0aW9ucyA9IGVuY29kaW5nXG4gICAgICBlbmNvZGluZyA9IHVuZGVmaW5lZFxuICAgIH1cblxuICAgIHJldHVybiBjb21waWxlcihvcHRpb25zKShcbiAgICAgIHBvc3Rwcm9jZXNzKFxuICAgICAgICBwYXJzZShvcHRpb25zKS5kb2N1bWVudCgpLndyaXRlKHByZXByb2Nlc3MoKSh2YWx1ZSwgZW5jb2RpbmcsIHRydWUpKVxuICAgICAgKVxuICAgIClcbiAgfVxuLyoqXG4gKiBOb3RlIHRoaXMgY29tcGlsZXIgb25seSB1bmRlcnN0YW5kIGNvbXBsZXRlIGJ1ZmZlcmluZywgbm90IHN0cmVhbWluZy5cbiAqXG4gKiBAcGFyYW0ge09wdGlvbnN9IFtvcHRpb25zXVxuICovXG5cbmZ1bmN0aW9uIGNvbXBpbGVyKG9wdGlvbnMgPSB7fSkge1xuICAvKiogQHR5cGUge05vcm1hbGl6ZWRFeHRlbnNpb259ICovXG4gIC8vIEB0cy1leHBlY3QtZXJyb3I6IG91ciBiYXNlIGhhcyBhbGwgcmVxdWlyZWQgZmllbGRzLCBzbyB0aGUgcmVzdWx0IHdpbGwgdG9vLlxuICBjb25zdCBjb25maWcgPSBjb25maWd1cmUoXG4gICAge1xuICAgICAgdHJhbnNmb3JtczogW10sXG4gICAgICBjYW5Db250YWluRW9sczogW1xuICAgICAgICAnZW1waGFzaXMnLFxuICAgICAgICAnZnJhZ21lbnQnLFxuICAgICAgICAnaGVhZGluZycsXG4gICAgICAgICdwYXJhZ3JhcGgnLFxuICAgICAgICAnc3Ryb25nJ1xuICAgICAgXSxcbiAgICAgIGVudGVyOiB7XG4gICAgICAgIGF1dG9saW5rOiBvcGVuZXIobGluayksXG4gICAgICAgIGF1dG9saW5rUHJvdG9jb2w6IG9uZW50ZXJkYXRhLFxuICAgICAgICBhdXRvbGlua0VtYWlsOiBvbmVudGVyZGF0YSxcbiAgICAgICAgYXR4SGVhZGluZzogb3BlbmVyKGhlYWRpbmcpLFxuICAgICAgICBibG9ja1F1b3RlOiBvcGVuZXIoYmxvY2tRdW90ZSksXG4gICAgICAgIGNoYXJhY3RlckVzY2FwZTogb25lbnRlcmRhdGEsXG4gICAgICAgIGNoYXJhY3RlclJlZmVyZW5jZTogb25lbnRlcmRhdGEsXG4gICAgICAgIGNvZGVGZW5jZWQ6IG9wZW5lcihjb2RlRmxvdyksXG4gICAgICAgIGNvZGVGZW5jZWRGZW5jZUluZm86IGJ1ZmZlcixcbiAgICAgICAgY29kZUZlbmNlZEZlbmNlTWV0YTogYnVmZmVyLFxuICAgICAgICBjb2RlSW5kZW50ZWQ6IG9wZW5lcihjb2RlRmxvdywgYnVmZmVyKSxcbiAgICAgICAgY29kZVRleHQ6IG9wZW5lcihjb2RlVGV4dCwgYnVmZmVyKSxcbiAgICAgICAgY29kZVRleHREYXRhOiBvbmVudGVyZGF0YSxcbiAgICAgICAgZGF0YTogb25lbnRlcmRhdGEsXG4gICAgICAgIGNvZGVGbG93VmFsdWU6IG9uZW50ZXJkYXRhLFxuICAgICAgICBkZWZpbml0aW9uOiBvcGVuZXIoZGVmaW5pdGlvbiksXG4gICAgICAgIGRlZmluaXRpb25EZXN0aW5hdGlvblN0cmluZzogYnVmZmVyLFxuICAgICAgICBkZWZpbml0aW9uTGFiZWxTdHJpbmc6IGJ1ZmZlcixcbiAgICAgICAgZGVmaW5pdGlvblRpdGxlU3RyaW5nOiBidWZmZXIsXG4gICAgICAgIGVtcGhhc2lzOiBvcGVuZXIoZW1waGFzaXMpLFxuICAgICAgICBoYXJkQnJlYWtFc2NhcGU6IG9wZW5lcihoYXJkQnJlYWspLFxuICAgICAgICBoYXJkQnJlYWtUcmFpbGluZzogb3BlbmVyKGhhcmRCcmVhayksXG4gICAgICAgIGh0bWxGbG93OiBvcGVuZXIoaHRtbCwgYnVmZmVyKSxcbiAgICAgICAgaHRtbEZsb3dEYXRhOiBvbmVudGVyZGF0YSxcbiAgICAgICAgaHRtbFRleHQ6IG9wZW5lcihodG1sLCBidWZmZXIpLFxuICAgICAgICBodG1sVGV4dERhdGE6IG9uZW50ZXJkYXRhLFxuICAgICAgICBpbWFnZTogb3BlbmVyKGltYWdlKSxcbiAgICAgICAgbGFiZWw6IGJ1ZmZlcixcbiAgICAgICAgbGluazogb3BlbmVyKGxpbmspLFxuICAgICAgICBsaXN0SXRlbTogb3BlbmVyKGxpc3RJdGVtKSxcbiAgICAgICAgbGlzdEl0ZW1WYWx1ZTogb25lbnRlcmxpc3RpdGVtdmFsdWUsXG4gICAgICAgIGxpc3RPcmRlcmVkOiBvcGVuZXIobGlzdCwgb25lbnRlcmxpc3RvcmRlcmVkKSxcbiAgICAgICAgbGlzdFVub3JkZXJlZDogb3BlbmVyKGxpc3QpLFxuICAgICAgICBwYXJhZ3JhcGg6IG9wZW5lcihwYXJhZ3JhcGgpLFxuICAgICAgICByZWZlcmVuY2U6IG9uZW50ZXJyZWZlcmVuY2UsXG4gICAgICAgIHJlZmVyZW5jZVN0cmluZzogYnVmZmVyLFxuICAgICAgICByZXNvdXJjZURlc3RpbmF0aW9uU3RyaW5nOiBidWZmZXIsXG4gICAgICAgIHJlc291cmNlVGl0bGVTdHJpbmc6IGJ1ZmZlcixcbiAgICAgICAgc2V0ZXh0SGVhZGluZzogb3BlbmVyKGhlYWRpbmcpLFxuICAgICAgICBzdHJvbmc6IG9wZW5lcihzdHJvbmcpLFxuICAgICAgICB0aGVtYXRpY0JyZWFrOiBvcGVuZXIodGhlbWF0aWNCcmVhaylcbiAgICAgIH0sXG4gICAgICBleGl0OiB7XG4gICAgICAgIGF0eEhlYWRpbmc6IGNsb3NlcigpLFxuICAgICAgICBhdHhIZWFkaW5nU2VxdWVuY2U6IG9uZXhpdGF0eGhlYWRpbmdzZXF1ZW5jZSxcbiAgICAgICAgYXV0b2xpbms6IGNsb3NlcigpLFxuICAgICAgICBhdXRvbGlua0VtYWlsOiBvbmV4aXRhdXRvbGlua2VtYWlsLFxuICAgICAgICBhdXRvbGlua1Byb3RvY29sOiBvbmV4aXRhdXRvbGlua3Byb3RvY29sLFxuICAgICAgICBibG9ja1F1b3RlOiBjbG9zZXIoKSxcbiAgICAgICAgY2hhcmFjdGVyRXNjYXBlVmFsdWU6IG9uZXhpdGRhdGEsXG4gICAgICAgIGNoYXJhY3RlclJlZmVyZW5jZU1hcmtlckhleGFkZWNpbWFsOiBvbmV4aXRjaGFyYWN0ZXJyZWZlcmVuY2VtYXJrZXIsXG4gICAgICAgIGNoYXJhY3RlclJlZmVyZW5jZU1hcmtlck51bWVyaWM6IG9uZXhpdGNoYXJhY3RlcnJlZmVyZW5jZW1hcmtlcixcbiAgICAgICAgY2hhcmFjdGVyUmVmZXJlbmNlVmFsdWU6IG9uZXhpdGNoYXJhY3RlcnJlZmVyZW5jZXZhbHVlLFxuICAgICAgICBjb2RlRmVuY2VkOiBjbG9zZXIob25leGl0Y29kZWZlbmNlZCksXG4gICAgICAgIGNvZGVGZW5jZWRGZW5jZTogb25leGl0Y29kZWZlbmNlZGZlbmNlLFxuICAgICAgICBjb2RlRmVuY2VkRmVuY2VJbmZvOiBvbmV4aXRjb2RlZmVuY2VkZmVuY2VpbmZvLFxuICAgICAgICBjb2RlRmVuY2VkRmVuY2VNZXRhOiBvbmV4aXRjb2RlZmVuY2VkZmVuY2VtZXRhLFxuICAgICAgICBjb2RlRmxvd1ZhbHVlOiBvbmV4aXRkYXRhLFxuICAgICAgICBjb2RlSW5kZW50ZWQ6IGNsb3NlcihvbmV4aXRjb2RlaW5kZW50ZWQpLFxuICAgICAgICBjb2RlVGV4dDogY2xvc2VyKG9uZXhpdGNvZGV0ZXh0KSxcbiAgICAgICAgY29kZVRleHREYXRhOiBvbmV4aXRkYXRhLFxuICAgICAgICBkYXRhOiBvbmV4aXRkYXRhLFxuICAgICAgICBkZWZpbml0aW9uOiBjbG9zZXIoKSxcbiAgICAgICAgZGVmaW5pdGlvbkRlc3RpbmF0aW9uU3RyaW5nOiBvbmV4aXRkZWZpbml0aW9uZGVzdGluYXRpb25zdHJpbmcsXG4gICAgICAgIGRlZmluaXRpb25MYWJlbFN0cmluZzogb25leGl0ZGVmaW5pdGlvbmxhYmVsc3RyaW5nLFxuICAgICAgICBkZWZpbml0aW9uVGl0bGVTdHJpbmc6IG9uZXhpdGRlZmluaXRpb250aXRsZXN0cmluZyxcbiAgICAgICAgZW1waGFzaXM6IGNsb3NlcigpLFxuICAgICAgICBoYXJkQnJlYWtFc2NhcGU6IGNsb3NlcihvbmV4aXRoYXJkYnJlYWspLFxuICAgICAgICBoYXJkQnJlYWtUcmFpbGluZzogY2xvc2VyKG9uZXhpdGhhcmRicmVhayksXG4gICAgICAgIGh0bWxGbG93OiBjbG9zZXIob25leGl0aHRtbGZsb3cpLFxuICAgICAgICBodG1sRmxvd0RhdGE6IG9uZXhpdGRhdGEsXG4gICAgICAgIGh0bWxUZXh0OiBjbG9zZXIob25leGl0aHRtbHRleHQpLFxuICAgICAgICBodG1sVGV4dERhdGE6IG9uZXhpdGRhdGEsXG4gICAgICAgIGltYWdlOiBjbG9zZXIob25leGl0aW1hZ2UpLFxuICAgICAgICBsYWJlbDogb25leGl0bGFiZWwsXG4gICAgICAgIGxhYmVsVGV4dDogb25leGl0bGFiZWx0ZXh0LFxuICAgICAgICBsaW5lRW5kaW5nOiBvbmV4aXRsaW5lZW5kaW5nLFxuICAgICAgICBsaW5rOiBjbG9zZXIob25leGl0bGluayksXG4gICAgICAgIGxpc3RJdGVtOiBjbG9zZXIoKSxcbiAgICAgICAgbGlzdE9yZGVyZWQ6IGNsb3NlcigpLFxuICAgICAgICBsaXN0VW5vcmRlcmVkOiBjbG9zZXIoKSxcbiAgICAgICAgcGFyYWdyYXBoOiBjbG9zZXIoKSxcbiAgICAgICAgcmVmZXJlbmNlU3RyaW5nOiBvbmV4aXRyZWZlcmVuY2VzdHJpbmcsXG4gICAgICAgIHJlc291cmNlRGVzdGluYXRpb25TdHJpbmc6IG9uZXhpdHJlc291cmNlZGVzdGluYXRpb25zdHJpbmcsXG4gICAgICAgIHJlc291cmNlVGl0bGVTdHJpbmc6IG9uZXhpdHJlc291cmNldGl0bGVzdHJpbmcsXG4gICAgICAgIHJlc291cmNlOiBvbmV4aXRyZXNvdXJjZSxcbiAgICAgICAgc2V0ZXh0SGVhZGluZzogY2xvc2VyKG9uZXhpdHNldGV4dGhlYWRpbmcpLFxuICAgICAgICBzZXRleHRIZWFkaW5nTGluZVNlcXVlbmNlOiBvbmV4aXRzZXRleHRoZWFkaW5nbGluZXNlcXVlbmNlLFxuICAgICAgICBzZXRleHRIZWFkaW5nVGV4dDogb25leGl0c2V0ZXh0aGVhZGluZ3RleHQsXG4gICAgICAgIHN0cm9uZzogY2xvc2VyKCksXG4gICAgICAgIHRoZW1hdGljQnJlYWs6IGNsb3NlcigpXG4gICAgICB9XG4gICAgfSxcbiAgICBvcHRpb25zLm1kYXN0RXh0ZW5zaW9ucyB8fCBbXVxuICApXG4gIC8qKiBAdHlwZSB7Q29tcGlsZURhdGF9ICovXG5cbiAgY29uc3QgZGF0YSA9IHt9XG4gIHJldHVybiBjb21waWxlXG4gIC8qKlxuICAgKiBAcGFyYW0ge0FycmF5LjxFdmVudD59IGV2ZW50c1xuICAgKiBAcmV0dXJucyB7Um9vdH1cbiAgICovXG5cbiAgZnVuY3Rpb24gY29tcGlsZShldmVudHMpIHtcbiAgICAvKiogQHR5cGUge1Jvb3R9ICovXG4gICAgbGV0IHRyZWUgPSB7XG4gICAgICB0eXBlOiAncm9vdCcsXG4gICAgICBjaGlsZHJlbjogW11cbiAgICB9XG4gICAgLyoqIEB0eXBlIHtDb21waWxlQ29udGV4dFsnc3RhY2snXX0gKi9cblxuICAgIGNvbnN0IHN0YWNrID0gW3RyZWVdXG4gICAgLyoqIEB0eXBlIHtDb21waWxlQ29udGV4dFsndG9rZW5TdGFjayddfSAqL1xuXG4gICAgY29uc3QgdG9rZW5TdGFjayA9IFtdXG4gICAgLyoqIEB0eXBlIHtBcnJheS48bnVtYmVyPn0gKi9cblxuICAgIGNvbnN0IGxpc3RTdGFjayA9IFtdXG4gICAgLyoqIEB0eXBlIHtPbWl0PENvbXBpbGVDb250ZXh0LCAnc2xpY2VTZXJpYWxpemUnPn0gKi9cblxuICAgIGNvbnN0IGNvbnRleHQgPSB7XG4gICAgICBzdGFjayxcbiAgICAgIHRva2VuU3RhY2ssXG4gICAgICBjb25maWcsXG4gICAgICBlbnRlcixcbiAgICAgIGV4aXQsXG4gICAgICBidWZmZXIsXG4gICAgICByZXN1bWUsXG4gICAgICBzZXREYXRhLFxuICAgICAgZ2V0RGF0YVxuICAgIH1cbiAgICBsZXQgaW5kZXggPSAtMVxuXG4gICAgd2hpbGUgKCsraW5kZXggPCBldmVudHMubGVuZ3RoKSB7XG4gICAgICAvLyBXZSBwcmVwcm9jZXNzIGxpc3RzIHRvIGFkZCBgbGlzdEl0ZW1gIHRva2VucywgYW5kIHRvIGluZmVyIHdoZXRoZXJcbiAgICAgIC8vIGl0ZW1zIHRoZSBsaXN0IGl0c2VsZiBhcmUgc3ByZWFkIG91dC5cbiAgICAgIGlmIChcbiAgICAgICAgZXZlbnRzW2luZGV4XVsxXS50eXBlID09PSAnbGlzdE9yZGVyZWQnIHx8XG4gICAgICAgIGV2ZW50c1tpbmRleF1bMV0udHlwZSA9PT0gJ2xpc3RVbm9yZGVyZWQnXG4gICAgICApIHtcbiAgICAgICAgaWYgKGV2ZW50c1tpbmRleF1bMF0gPT09ICdlbnRlcicpIHtcbiAgICAgICAgICBsaXN0U3RhY2sucHVzaChpbmRleClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCB0YWlsID0gbGlzdFN0YWNrLnBvcCgpXG4gICAgICAgICAgaW5kZXggPSBwcmVwYXJlTGlzdChldmVudHMsIHRhaWwsIGluZGV4KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaW5kZXggPSAtMVxuXG4gICAgd2hpbGUgKCsraW5kZXggPCBldmVudHMubGVuZ3RoKSB7XG4gICAgICBjb25zdCBoYW5kbGVyID0gY29uZmlnW2V2ZW50c1tpbmRleF1bMF1dXG5cbiAgICAgIGlmIChvd24uY2FsbChoYW5kbGVyLCBldmVudHNbaW5kZXhdWzFdLnR5cGUpKSB7XG4gICAgICAgIGhhbmRsZXJbZXZlbnRzW2luZGV4XVsxXS50eXBlXS5jYWxsKFxuICAgICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHNsaWNlU2VyaWFsaXplOiBldmVudHNbaW5kZXhdWzJdLnNsaWNlU2VyaWFsaXplXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGV4dFxuICAgICAgICAgICksXG4gICAgICAgICAgZXZlbnRzW2luZGV4XVsxXVxuICAgICAgICApXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRva2VuU3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnQ2Fubm90IGNsb3NlIGRvY3VtZW50LCBhIHRva2VuIChgJyArXG4gICAgICAgICAgdG9rZW5TdGFja1t0b2tlblN0YWNrLmxlbmd0aCAtIDFdLnR5cGUgK1xuICAgICAgICAgICdgLCAnICtcbiAgICAgICAgICBzdHJpbmdpZnlQb3NpdGlvbih7XG4gICAgICAgICAgICBzdGFydDogdG9rZW5TdGFja1t0b2tlblN0YWNrLmxlbmd0aCAtIDFdLnN0YXJ0LFxuICAgICAgICAgICAgZW5kOiB0b2tlblN0YWNrW3Rva2VuU3RhY2subGVuZ3RoIC0gMV0uZW5kXG4gICAgICAgICAgfSkgK1xuICAgICAgICAgICcpIGlzIHN0aWxsIG9wZW4nXG4gICAgICApXG4gICAgfSAvLyBGaWd1cmUgb3V0IGByb290YCBwb3NpdGlvbi5cblxuICAgIHRyZWUucG9zaXRpb24gPSB7XG4gICAgICBzdGFydDogcG9pbnQoXG4gICAgICAgIGV2ZW50cy5sZW5ndGggPiAwXG4gICAgICAgICAgPyBldmVudHNbMF1bMV0uc3RhcnRcbiAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgbGluZTogMSxcbiAgICAgICAgICAgICAgY29sdW1uOiAxLFxuICAgICAgICAgICAgICBvZmZzZXQ6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICksXG4gICAgICBlbmQ6IHBvaW50KFxuICAgICAgICBldmVudHMubGVuZ3RoID4gMFxuICAgICAgICAgID8gZXZlbnRzW2V2ZW50cy5sZW5ndGggLSAyXVsxXS5lbmRcbiAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgbGluZTogMSxcbiAgICAgICAgICAgICAgY29sdW1uOiAxLFxuICAgICAgICAgICAgICBvZmZzZXQ6IDBcbiAgICAgICAgICAgIH1cbiAgICAgIClcbiAgICB9XG4gICAgaW5kZXggPSAtMVxuXG4gICAgd2hpbGUgKCsraW5kZXggPCBjb25maWcudHJhbnNmb3Jtcy5sZW5ndGgpIHtcbiAgICAgIHRyZWUgPSBjb25maWcudHJhbnNmb3Jtc1tpbmRleF0odHJlZSkgfHwgdHJlZVxuICAgIH1cblxuICAgIHJldHVybiB0cmVlXG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7QXJyYXkuPEV2ZW50Pn0gZXZlbnRzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydFxuICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuXG4gIGZ1bmN0aW9uIHByZXBhcmVMaXN0KGV2ZW50cywgc3RhcnQsIGxlbmd0aCkge1xuICAgIGxldCBpbmRleCA9IHN0YXJ0IC0gMVxuICAgIGxldCBjb250YWluZXJCYWxhbmNlID0gLTFcbiAgICBsZXQgbGlzdFNwcmVhZCA9IGZhbHNlXG4gICAgLyoqIEB0eXBlIHtUb2tlbnx1bmRlZmluZWR9ICovXG5cbiAgICBsZXQgbGlzdEl0ZW1cbiAgICAvKiogQHR5cGUge251bWJlcnx1bmRlZmluZWR9ICovXG5cbiAgICBsZXQgbGluZUluZGV4XG4gICAgLyoqIEB0eXBlIHtudW1iZXJ8dW5kZWZpbmVkfSAqL1xuXG4gICAgbGV0IGZpcnN0QmxhbmtMaW5lSW5kZXhcbiAgICAvKiogQHR5cGUge2Jvb2xlYW58dW5kZWZpbmVkfSAqL1xuXG4gICAgbGV0IGF0TWFya2VyXG5cbiAgICB3aGlsZSAoKytpbmRleCA8PSBsZW5ndGgpIHtcbiAgICAgIGNvbnN0IGV2ZW50ID0gZXZlbnRzW2luZGV4XVxuXG4gICAgICBpZiAoXG4gICAgICAgIGV2ZW50WzFdLnR5cGUgPT09ICdsaXN0VW5vcmRlcmVkJyB8fFxuICAgICAgICBldmVudFsxXS50eXBlID09PSAnbGlzdE9yZGVyZWQnIHx8XG4gICAgICAgIGV2ZW50WzFdLnR5cGUgPT09ICdibG9ja1F1b3RlJ1xuICAgICAgKSB7XG4gICAgICAgIGlmIChldmVudFswXSA9PT0gJ2VudGVyJykge1xuICAgICAgICAgIGNvbnRhaW5lckJhbGFuY2UrK1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnRhaW5lckJhbGFuY2UtLVxuICAgICAgICB9XG5cbiAgICAgICAgYXRNYXJrZXIgPSB1bmRlZmluZWRcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnRbMV0udHlwZSA9PT0gJ2xpbmVFbmRpbmdCbGFuaycpIHtcbiAgICAgICAgaWYgKGV2ZW50WzBdID09PSAnZW50ZXInKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgbGlzdEl0ZW0gJiZcbiAgICAgICAgICAgICFhdE1hcmtlciAmJlxuICAgICAgICAgICAgIWNvbnRhaW5lckJhbGFuY2UgJiZcbiAgICAgICAgICAgICFmaXJzdEJsYW5rTGluZUluZGV4XG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBmaXJzdEJsYW5rTGluZUluZGV4ID0gaW5kZXhcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhdE1hcmtlciA9IHVuZGVmaW5lZFxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBldmVudFsxXS50eXBlID09PSAnbGluZVByZWZpeCcgfHxcbiAgICAgICAgZXZlbnRbMV0udHlwZSA9PT0gJ2xpc3RJdGVtVmFsdWUnIHx8XG4gICAgICAgIGV2ZW50WzFdLnR5cGUgPT09ICdsaXN0SXRlbU1hcmtlcicgfHxcbiAgICAgICAgZXZlbnRbMV0udHlwZSA9PT0gJ2xpc3RJdGVtUHJlZml4JyB8fFxuICAgICAgICBldmVudFsxXS50eXBlID09PSAnbGlzdEl0ZW1QcmVmaXhXaGl0ZXNwYWNlJ1xuICAgICAgKSB7XG4gICAgICAgIC8vIEVtcHR5LlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXRNYXJrZXIgPSB1bmRlZmluZWRcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICAoIWNvbnRhaW5lckJhbGFuY2UgJiZcbiAgICAgICAgICBldmVudFswXSA9PT0gJ2VudGVyJyAmJlxuICAgICAgICAgIGV2ZW50WzFdLnR5cGUgPT09ICdsaXN0SXRlbVByZWZpeCcpIHx8XG4gICAgICAgIChjb250YWluZXJCYWxhbmNlID09PSAtMSAmJlxuICAgICAgICAgIGV2ZW50WzBdID09PSAnZXhpdCcgJiZcbiAgICAgICAgICAoZXZlbnRbMV0udHlwZSA9PT0gJ2xpc3RVbm9yZGVyZWQnIHx8XG4gICAgICAgICAgICBldmVudFsxXS50eXBlID09PSAnbGlzdE9yZGVyZWQnKSlcbiAgICAgICkge1xuICAgICAgICBpZiAobGlzdEl0ZW0pIHtcbiAgICAgICAgICBsZXQgdGFpbEluZGV4ID0gaW5kZXhcbiAgICAgICAgICBsaW5lSW5kZXggPSB1bmRlZmluZWRcblxuICAgICAgICAgIHdoaWxlICh0YWlsSW5kZXgtLSkge1xuICAgICAgICAgICAgY29uc3QgdGFpbEV2ZW50ID0gZXZlbnRzW3RhaWxJbmRleF1cblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICB0YWlsRXZlbnRbMV0udHlwZSA9PT0gJ2xpbmVFbmRpbmcnIHx8XG4gICAgICAgICAgICAgIHRhaWxFdmVudFsxXS50eXBlID09PSAnbGluZUVuZGluZ0JsYW5rJ1xuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGlmICh0YWlsRXZlbnRbMF0gPT09ICdleGl0JykgY29udGludWVcblxuICAgICAgICAgICAgICBpZiAobGluZUluZGV4KSB7XG4gICAgICAgICAgICAgICAgZXZlbnRzW2xpbmVJbmRleF1bMV0udHlwZSA9ICdsaW5lRW5kaW5nQmxhbmsnXG4gICAgICAgICAgICAgICAgbGlzdFNwcmVhZCA9IHRydWVcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHRhaWxFdmVudFsxXS50eXBlID0gJ2xpbmVFbmRpbmcnXG4gICAgICAgICAgICAgIGxpbmVJbmRleCA9IHRhaWxJbmRleFxuICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgdGFpbEV2ZW50WzFdLnR5cGUgPT09ICdsaW5lUHJlZml4JyB8fFxuICAgICAgICAgICAgICB0YWlsRXZlbnRbMV0udHlwZSA9PT0gJ2Jsb2NrUXVvdGVQcmVmaXgnIHx8XG4gICAgICAgICAgICAgIHRhaWxFdmVudFsxXS50eXBlID09PSAnYmxvY2tRdW90ZVByZWZpeFdoaXRlc3BhY2UnIHx8XG4gICAgICAgICAgICAgIHRhaWxFdmVudFsxXS50eXBlID09PSAnYmxvY2tRdW90ZU1hcmtlcicgfHxcbiAgICAgICAgICAgICAgdGFpbEV2ZW50WzFdLnR5cGUgPT09ICdsaXN0SXRlbUluZGVudCdcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAvLyBFbXB0eVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBmaXJzdEJsYW5rTGluZUluZGV4ICYmXG4gICAgICAgICAgICAoIWxpbmVJbmRleCB8fCBmaXJzdEJsYW5rTGluZUluZGV4IDwgbGluZUluZGV4KVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBQYXRjaGVkLlxuICAgICAgICAgICAgbGlzdEl0ZW0uX3NwcmVhZCA9IHRydWVcbiAgICAgICAgICB9IC8vIEZpeCBwb3NpdGlvbi5cblxuICAgICAgICAgIGxpc3RJdGVtLmVuZCA9IE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICB7fSxcbiAgICAgICAgICAgIGxpbmVJbmRleCA/IGV2ZW50c1tsaW5lSW5kZXhdWzFdLnN0YXJ0IDogZXZlbnRbMV0uZW5kXG4gICAgICAgICAgKVxuICAgICAgICAgIGV2ZW50cy5zcGxpY2UobGluZUluZGV4IHx8IGluZGV4LCAwLCBbJ2V4aXQnLCBsaXN0SXRlbSwgZXZlbnRbMl1dKVxuICAgICAgICAgIGluZGV4KytcbiAgICAgICAgICBsZW5ndGgrK1xuICAgICAgICB9IC8vIENyZWF0ZSBhIG5ldyBsaXN0IGl0ZW0uXG5cbiAgICAgICAgaWYgKGV2ZW50WzFdLnR5cGUgPT09ICdsaXN0SXRlbVByZWZpeCcpIHtcbiAgICAgICAgICBsaXN0SXRlbSA9IHtcbiAgICAgICAgICAgIHR5cGU6ICdsaXN0SXRlbScsXG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFBhdGNoZWRcbiAgICAgICAgICAgIF9zcHJlYWQ6IGZhbHNlLFxuICAgICAgICAgICAgc3RhcnQ6IE9iamVjdC5hc3NpZ24oe30sIGV2ZW50WzFdLnN0YXJ0KVxuICAgICAgICAgIH0gLy8gQHRzLWV4cGVjdC1lcnJvcjogYGxpc3RJdGVtYCBpcyBtb3N0IGRlZmluaXRlbHkgZGVmaW5lZCwgVFMuLi5cblxuICAgICAgICAgIGV2ZW50cy5zcGxpY2UoaW5kZXgsIDAsIFsnZW50ZXInLCBsaXN0SXRlbSwgZXZlbnRbMl1dKVxuICAgICAgICAgIGluZGV4KytcbiAgICAgICAgICBsZW5ndGgrK1xuICAgICAgICAgIGZpcnN0QmxhbmtMaW5lSW5kZXggPSB1bmRlZmluZWRcbiAgICAgICAgICBhdE1hcmtlciA9IHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gLy8gQHRzLWV4cGVjdC1lcnJvciBQYXRjaGVkLlxuXG4gICAgZXZlbnRzW3N0YXJ0XVsxXS5fc3ByZWFkID0gbGlzdFNwcmVhZFxuICAgIHJldHVybiBsZW5ndGhcbiAgfVxuICAvKipcbiAgICogQHR5cGUge0NvbXBpbGVDb250ZXh0WydzZXREYXRhJ119XG4gICAqIEBwYXJhbSBbdmFsdWVdXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHNldERhdGEoa2V5LCB2YWx1ZSkge1xuICAgIGRhdGFba2V5XSA9IHZhbHVlXG4gIH1cbiAgLyoqXG4gICAqIEB0eXBlIHtDb21waWxlQ29udGV4dFsnZ2V0RGF0YSddfVxuICAgKiBAdGVtcGxhdGUge3N0cmluZ30gS1xuICAgKiBAcGFyYW0ge0t9IGtleVxuICAgKiBAcmV0dXJucyB7Q29tcGlsZURhdGFbS119XG4gICAqL1xuXG4gIGZ1bmN0aW9uIGdldERhdGEoa2V5KSB7XG4gICAgcmV0dXJuIGRhdGFba2V5XVxuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0ge1BvaW50fSBkXG4gICAqIEByZXR1cm5zIHtQb2ludH1cbiAgICovXG5cbiAgZnVuY3Rpb24gcG9pbnQoZCkge1xuICAgIHJldHVybiB7XG4gICAgICBsaW5lOiBkLmxpbmUsXG4gICAgICBjb2x1bW46IGQuY29sdW1uLFxuICAgICAgb2Zmc2V0OiBkLm9mZnNldFxuICAgIH1cbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHsodG9rZW46IFRva2VuKSA9PiBOb2RlfSBjcmVhdGVcbiAgICogQHBhcmFtIHtIYW5kbGV9IFthbmRdXG4gICAqIEByZXR1cm5zIHtIYW5kbGV9XG4gICAqL1xuXG4gIGZ1bmN0aW9uIG9wZW5lcihjcmVhdGUsIGFuZCkge1xuICAgIHJldHVybiBvcGVuXG4gICAgLyoqXG4gICAgICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICAgICAqIEBwYXJhbSB7VG9rZW59IHRva2VuXG4gICAgICogQHJldHVybnMge3ZvaWR9XG4gICAgICovXG5cbiAgICBmdW5jdGlvbiBvcGVuKHRva2VuKSB7XG4gICAgICBlbnRlci5jYWxsKHRoaXMsIGNyZWF0ZSh0b2tlbiksIHRva2VuKVxuICAgICAgaWYgKGFuZCkgYW5kLmNhbGwodGhpcywgdG9rZW4pXG4gICAgfVxuICB9XG4gIC8qKiBAdHlwZSB7Q29tcGlsZUNvbnRleHRbJ2J1ZmZlciddfSAqL1xuXG4gIGZ1bmN0aW9uIGJ1ZmZlcigpIHtcbiAgICB0aGlzLnN0YWNrLnB1c2goe1xuICAgICAgdHlwZTogJ2ZyYWdtZW50JyxcbiAgICAgIGNoaWxkcmVuOiBbXVxuICAgIH0pXG4gIH1cbiAgLyoqXG4gICAqIEB0eXBlIHtDb21waWxlQ29udGV4dFsnZW50ZXInXX1cbiAgICogQHRlbXBsYXRlIHtOb2RlfSBOXG4gICAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAgICogQHBhcmFtIHtOfSBub2RlXG4gICAqIEBwYXJhbSB7VG9rZW59IHRva2VuXG4gICAqIEByZXR1cm5zIHtOfVxuICAgKi9cblxuICBmdW5jdGlvbiBlbnRlcihub2RlLCB0b2tlbikge1xuICAgIGNvbnN0IHBhcmVudCA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXVxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IEFzc3VtZSBgTm9kZWAgY2FuIGV4aXN0IGFzIGEgY2hpbGQgb2YgYHBhcmVudGAuXG4gICAgcGFyZW50LmNoaWxkcmVuLnB1c2gobm9kZSlcbiAgICB0aGlzLnN0YWNrLnB1c2gobm9kZSlcbiAgICB0aGlzLnRva2VuU3RhY2sucHVzaCh0b2tlbikgLy8gQHRzLWV4cGVjdC1lcnJvcjogYGVuZGAgd2lsbCBiZSBwYXRjaGVkIGxhdGVyLlxuXG4gICAgbm9kZS5wb3NpdGlvbiA9IHtcbiAgICAgIHN0YXJ0OiBwb2ludCh0b2tlbi5zdGFydClcbiAgICB9XG4gICAgcmV0dXJuIG5vZGVcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHtIYW5kbGV9IFthbmRdXG4gICAqIEByZXR1cm5zIHtIYW5kbGV9XG4gICAqL1xuXG4gIGZ1bmN0aW9uIGNsb3NlcihhbmQpIHtcbiAgICByZXR1cm4gY2xvc2VcbiAgICAvKipcbiAgICAgKiBAdGhpcyB7Q29tcGlsZUNvbnRleHR9XG4gICAgICogQHBhcmFtIHtUb2tlbn0gdG9rZW5cbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICAgKi9cblxuICAgIGZ1bmN0aW9uIGNsb3NlKHRva2VuKSB7XG4gICAgICBpZiAoYW5kKSBhbmQuY2FsbCh0aGlzLCB0b2tlbilcbiAgICAgIGV4aXQuY2FsbCh0aGlzLCB0b2tlbilcbiAgICB9XG4gIH1cbiAgLyoqIEB0eXBlIHtDb21waWxlQ29udGV4dFsnZXhpdCddfSAqL1xuXG4gIGZ1bmN0aW9uIGV4aXQodG9rZW4pIHtcbiAgICBjb25zdCBub2RlID0gdGhpcy5zdGFjay5wb3AoKVxuICAgIGNvbnN0IG9wZW4gPSB0aGlzLnRva2VuU3RhY2sucG9wKClcblxuICAgIGlmICghb3Blbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnQ2Fubm90IGNsb3NlIGAnICtcbiAgICAgICAgICB0b2tlbi50eXBlICtcbiAgICAgICAgICAnYCAoJyArXG4gICAgICAgICAgc3RyaW5naWZ5UG9zaXRpb24oe1xuICAgICAgICAgICAgc3RhcnQ6IHRva2VuLnN0YXJ0LFxuICAgICAgICAgICAgZW5kOiB0b2tlbi5lbmRcbiAgICAgICAgICB9KSArXG4gICAgICAgICAgJyk6IGl04oCZcyBub3Qgb3BlbidcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKG9wZW4udHlwZSAhPT0gdG9rZW4udHlwZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnQ2Fubm90IGNsb3NlIGAnICtcbiAgICAgICAgICB0b2tlbi50eXBlICtcbiAgICAgICAgICAnYCAoJyArXG4gICAgICAgICAgc3RyaW5naWZ5UG9zaXRpb24oe1xuICAgICAgICAgICAgc3RhcnQ6IHRva2VuLnN0YXJ0LFxuICAgICAgICAgICAgZW5kOiB0b2tlbi5lbmRcbiAgICAgICAgICB9KSArXG4gICAgICAgICAgJyk6IGEgZGlmZmVyZW50IHRva2VuIChgJyArXG4gICAgICAgICAgb3Blbi50eXBlICtcbiAgICAgICAgICAnYCwgJyArXG4gICAgICAgICAgc3RyaW5naWZ5UG9zaXRpb24oe1xuICAgICAgICAgICAgc3RhcnQ6IG9wZW4uc3RhcnQsXG4gICAgICAgICAgICBlbmQ6IG9wZW4uZW5kXG4gICAgICAgICAgfSkgK1xuICAgICAgICAgICcpIGlzIG9wZW4nXG4gICAgICApXG4gICAgfVxuXG4gICAgbm9kZS5wb3NpdGlvbi5lbmQgPSBwb2ludCh0b2tlbi5lbmQpXG4gICAgcmV0dXJuIG5vZGVcbiAgfVxuICAvKipcbiAgICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cblxuICBmdW5jdGlvbiByZXN1bWUoKSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nKHRoaXMuc3RhY2sucG9wKCkpXG4gIH0gLy9cbiAgLy8gSGFuZGxlcnMuXG4gIC8vXG5cbiAgLyoqIEB0eXBlIHtIYW5kbGV9ICovXG5cbiAgZnVuY3Rpb24gb25lbnRlcmxpc3RvcmRlcmVkKCkge1xuICAgIHNldERhdGEoJ2V4cGVjdGluZ0ZpcnN0TGlzdEl0ZW1WYWx1ZScsIHRydWUpXG4gIH1cbiAgLyoqIEB0eXBlIHtIYW5kbGV9ICovXG5cbiAgZnVuY3Rpb24gb25lbnRlcmxpc3RpdGVtdmFsdWUodG9rZW4pIHtcbiAgICBpZiAoZ2V0RGF0YSgnZXhwZWN0aW5nRmlyc3RMaXN0SXRlbVZhbHVlJykpIHtcbiAgICAgIGNvbnN0IGFuY2VzdG9yID0gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDJdXG4gICAgICBhbmNlc3Rvci5zdGFydCA9IE51bWJlci5wYXJzZUludCh0aGlzLnNsaWNlU2VyaWFsaXplKHRva2VuKSwgMTApXG4gICAgICBzZXREYXRhKCdleHBlY3RpbmdGaXJzdExpc3RJdGVtVmFsdWUnKVxuICAgIH1cbiAgfVxuICAvKiogQHR5cGUge0hhbmRsZX0gKi9cblxuICBmdW5jdGlvbiBvbmV4aXRjb2RlZmVuY2VkZmVuY2VpbmZvKCkge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLnJlc3VtZSgpXG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXVxuICAgIG5vZGUubGFuZyA9IGRhdGFcbiAgfVxuICAvKiogQHR5cGUge0hhbmRsZX0gKi9cblxuICBmdW5jdGlvbiBvbmV4aXRjb2RlZmVuY2VkZmVuY2VtZXRhKCkge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLnJlc3VtZSgpXG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXVxuICAgIG5vZGUubWV0YSA9IGRhdGFcbiAgfVxuICAvKiogQHR5cGUge0hhbmRsZX0gKi9cblxuICBmdW5jdGlvbiBvbmV4aXRjb2RlZmVuY2VkZmVuY2UoKSB7XG4gICAgLy8gRXhpdCBpZiB0aGlzIGlzIHRoZSBjbG9zaW5nIGZlbmNlLlxuICAgIGlmIChnZXREYXRhKCdmbG93Q29kZUluc2lkZScpKSByZXR1cm5cbiAgICB0aGlzLmJ1ZmZlcigpXG4gICAgc2V0RGF0YSgnZmxvd0NvZGVJbnNpZGUnLCB0cnVlKVxuICB9XG4gIC8qKiBAdHlwZSB7SGFuZGxlfSAqL1xuXG4gIGZ1bmN0aW9uIG9uZXhpdGNvZGVmZW5jZWQoKSB7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMucmVzdW1lKClcbiAgICBjb25zdCBub2RlID0gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdXG4gICAgbm9kZS52YWx1ZSA9IGRhdGEucmVwbGFjZSgvXihcXHI/XFxufFxccil8KFxccj9cXG58XFxyKSQvZywgJycpXG4gICAgc2V0RGF0YSgnZmxvd0NvZGVJbnNpZGUnKVxuICB9XG4gIC8qKiBAdHlwZSB7SGFuZGxlfSAqL1xuXG4gIGZ1bmN0aW9uIG9uZXhpdGNvZGVpbmRlbnRlZCgpIHtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5yZXN1bWUoKVxuICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV1cbiAgICBub2RlLnZhbHVlID0gZGF0YS5yZXBsYWNlKC8oXFxyP1xcbnxcXHIpJC9nLCAnJylcbiAgfVxuICAvKiogQHR5cGUge0hhbmRsZX0gKi9cblxuICBmdW5jdGlvbiBvbmV4aXRkZWZpbml0aW9ubGFiZWxzdHJpbmcodG9rZW4pIHtcbiAgICAvLyBEaXNjYXJkIGxhYmVsLCB1c2UgdGhlIHNvdXJjZSBjb250ZW50IGluc3RlYWQuXG4gICAgY29uc3QgbGFiZWwgPSB0aGlzLnJlc3VtZSgpXG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXVxuICAgIG5vZGUubGFiZWwgPSBsYWJlbFxuICAgIG5vZGUuaWRlbnRpZmllciA9IG5vcm1hbGl6ZUlkZW50aWZpZXIoXG4gICAgICB0aGlzLnNsaWNlU2VyaWFsaXplKHRva2VuKVxuICAgICkudG9Mb3dlckNhc2UoKVxuICB9XG4gIC8qKiBAdHlwZSB7SGFuZGxlfSAqL1xuXG4gIGZ1bmN0aW9uIG9uZXhpdGRlZmluaXRpb250aXRsZXN0cmluZygpIHtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5yZXN1bWUoKVxuICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV1cbiAgICBub2RlLnRpdGxlID0gZGF0YVxuICB9XG4gIC8qKiBAdHlwZSB7SGFuZGxlfSAqL1xuXG4gIGZ1bmN0aW9uIG9uZXhpdGRlZmluaXRpb25kZXN0aW5hdGlvbnN0cmluZygpIHtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5yZXN1bWUoKVxuICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV1cbiAgICBub2RlLnVybCA9IGRhdGFcbiAgfVxuICAvKiogQHR5cGUge0hhbmRsZX0gKi9cblxuICBmdW5jdGlvbiBvbmV4aXRhdHhoZWFkaW5nc2VxdWVuY2UodG9rZW4pIHtcbiAgICBjb25zdCBub2RlID0gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdXG5cbiAgICBpZiAoIW5vZGUuZGVwdGgpIHtcbiAgICAgIGNvbnN0IGRlcHRoID0gdGhpcy5zbGljZVNlcmlhbGl6ZSh0b2tlbikubGVuZ3RoXG4gICAgICBub2RlLmRlcHRoID0gZGVwdGhcbiAgICB9XG4gIH1cbiAgLyoqIEB0eXBlIHtIYW5kbGV9ICovXG5cbiAgZnVuY3Rpb24gb25leGl0c2V0ZXh0aGVhZGluZ3RleHQoKSB7XG4gICAgc2V0RGF0YSgnc2V0ZXh0SGVhZGluZ1NsdXJwTGluZUVuZGluZycsIHRydWUpXG4gIH1cbiAgLyoqIEB0eXBlIHtIYW5kbGV9ICovXG5cbiAgZnVuY3Rpb24gb25leGl0c2V0ZXh0aGVhZGluZ2xpbmVzZXF1ZW5jZSh0b2tlbikge1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV1cbiAgICBub2RlLmRlcHRoID0gdGhpcy5zbGljZVNlcmlhbGl6ZSh0b2tlbikuY2hhckNvZGVBdCgwKSA9PT0gNjEgPyAxIDogMlxuICB9XG4gIC8qKiBAdHlwZSB7SGFuZGxlfSAqL1xuXG4gIGZ1bmN0aW9uIG9uZXhpdHNldGV4dGhlYWRpbmcoKSB7XG4gICAgc2V0RGF0YSgnc2V0ZXh0SGVhZGluZ1NsdXJwTGluZUVuZGluZycpXG4gIH1cbiAgLyoqIEB0eXBlIHtIYW5kbGV9ICovXG5cbiAgZnVuY3Rpb24gb25lbnRlcmRhdGEodG9rZW4pIHtcbiAgICBjb25zdCBwYXJlbnQgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV1cbiAgICAvKiogQHR5cGUge05vZGV9ICovXG5cbiAgICBsZXQgdGFpbCA9IHBhcmVudC5jaGlsZHJlbltwYXJlbnQuY2hpbGRyZW4ubGVuZ3RoIC0gMV1cblxuICAgIGlmICghdGFpbCB8fCB0YWlsLnR5cGUgIT09ICd0ZXh0Jykge1xuICAgICAgLy8gQWRkIGEgbmV3IHRleHQgbm9kZS5cbiAgICAgIHRhaWwgPSB0ZXh0KCkgLy8gQHRzLWV4cGVjdC1lcnJvcjogd2XigJlsbCBhZGQgYGVuZGAgbGF0ZXIuXG5cbiAgICAgIHRhaWwucG9zaXRpb24gPSB7XG4gICAgICAgIHN0YXJ0OiBwb2ludCh0b2tlbi5zdGFydClcbiAgICAgIH0gLy8gQHRzLWV4cGVjdC1lcnJvcjogQXNzdW1lIGBwYXJlbnRgIGFjY2VwdHMgYHRleHRgLlxuXG4gICAgICBwYXJlbnQuY2hpbGRyZW4ucHVzaCh0YWlsKVxuICAgIH1cblxuICAgIHRoaXMuc3RhY2sucHVzaCh0YWlsKVxuICB9XG4gIC8qKiBAdHlwZSB7SGFuZGxlfSAqL1xuXG4gIGZ1bmN0aW9uIG9uZXhpdGRhdGEodG9rZW4pIHtcbiAgICBjb25zdCB0YWlsID0gdGhpcy5zdGFjay5wb3AoKVxuICAgIHRhaWwudmFsdWUgKz0gdGhpcy5zbGljZVNlcmlhbGl6ZSh0b2tlbilcbiAgICB0YWlsLnBvc2l0aW9uLmVuZCA9IHBvaW50KHRva2VuLmVuZClcbiAgfVxuICAvKiogQHR5cGUge0hhbmRsZX0gKi9cblxuICBmdW5jdGlvbiBvbmV4aXRsaW5lZW5kaW5nKHRva2VuKSB7XG4gICAgY29uc3QgY29udGV4dCA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXVxuXG4gICAgLy8gSWYgd2XigJlyZSBhdCBhIGhhcmQgYnJlYWssIGluY2x1ZGUgdGhlIGxpbmUgZW5kaW5nIGluIHRoZXJlLlxuICAgIGlmIChnZXREYXRhKCdhdEhhcmRCcmVhaycpKSB7XG4gICAgICBjb25zdCB0YWlsID0gY29udGV4dC5jaGlsZHJlbltjb250ZXh0LmNoaWxkcmVuLmxlbmd0aCAtIDFdXG4gICAgICB0YWlsLnBvc2l0aW9uLmVuZCA9IHBvaW50KHRva2VuLmVuZClcbiAgICAgIHNldERhdGEoJ2F0SGFyZEJyZWFrJylcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChcbiAgICAgICFnZXREYXRhKCdzZXRleHRIZWFkaW5nU2x1cnBMaW5lRW5kaW5nJykgJiZcbiAgICAgIGNvbmZpZy5jYW5Db250YWluRW9scy5pbmNsdWRlcyhjb250ZXh0LnR5cGUpXG4gICAgKSB7XG4gICAgICBvbmVudGVyZGF0YS5jYWxsKHRoaXMsIHRva2VuKVxuICAgICAgb25leGl0ZGF0YS5jYWxsKHRoaXMsIHRva2VuKVxuICAgIH1cbiAgfVxuICAvKiogQHR5cGUge0hhbmRsZX0gKi9cblxuICBmdW5jdGlvbiBvbmV4aXRoYXJkYnJlYWsoKSB7XG4gICAgc2V0RGF0YSgnYXRIYXJkQnJlYWsnLCB0cnVlKVxuICB9XG4gIC8qKiBAdHlwZSB7SGFuZGxlfSAqL1xuXG4gIGZ1bmN0aW9uIG9uZXhpdGh0bWxmbG93KCkge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLnJlc3VtZSgpXG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXVxuICAgIG5vZGUudmFsdWUgPSBkYXRhXG4gIH1cbiAgLyoqIEB0eXBlIHtIYW5kbGV9ICovXG5cbiAgZnVuY3Rpb24gb25leGl0aHRtbHRleHQoKSB7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMucmVzdW1lKClcbiAgICBjb25zdCBub2RlID0gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdXG4gICAgbm9kZS52YWx1ZSA9IGRhdGFcbiAgfVxuICAvKiogQHR5cGUge0hhbmRsZX0gKi9cblxuICBmdW5jdGlvbiBvbmV4aXRjb2RldGV4dCgpIHtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5yZXN1bWUoKVxuICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV1cbiAgICBub2RlLnZhbHVlID0gZGF0YVxuICB9XG4gIC8qKiBAdHlwZSB7SGFuZGxlfSAqL1xuXG4gIGZ1bmN0aW9uIG9uZXhpdGxpbmsoKSB7XG4gICAgY29uc3QgY29udGV4dCA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXSAvLyBUbyBkbzogY2xlYW4uXG5cbiAgICBpZiAoZ2V0RGF0YSgnaW5SZWZlcmVuY2UnKSkge1xuICAgICAgY29udGV4dC50eXBlICs9ICdSZWZlcmVuY2UnIC8vIEB0cy1leHBlY3QtZXJyb3I6IG11dGF0ZS5cblxuICAgICAgY29udGV4dC5yZWZlcmVuY2VUeXBlID0gZ2V0RGF0YSgncmVmZXJlbmNlVHlwZScpIHx8ICdzaG9ydGN1dCcgLy8gQHRzLWV4cGVjdC1lcnJvcjogbXV0YXRlLlxuXG4gICAgICBkZWxldGUgY29udGV4dC51cmxcbiAgICAgIGRlbGV0ZSBjb250ZXh0LnRpdGxlXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IG11dGF0ZS5cbiAgICAgIGRlbGV0ZSBjb250ZXh0LmlkZW50aWZpZXIgLy8gQHRzLWV4cGVjdC1lcnJvcjogbXV0YXRlLlxuXG4gICAgICBkZWxldGUgY29udGV4dC5sYWJlbFxuICAgIH1cblxuICAgIHNldERhdGEoJ3JlZmVyZW5jZVR5cGUnKVxuICB9XG4gIC8qKiBAdHlwZSB7SGFuZGxlfSAqL1xuXG4gIGZ1bmN0aW9uIG9uZXhpdGltYWdlKCkge1xuICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV0gLy8gVG8gZG86IGNsZWFuLlxuXG4gICAgaWYgKGdldERhdGEoJ2luUmVmZXJlbmNlJykpIHtcbiAgICAgIGNvbnRleHQudHlwZSArPSAnUmVmZXJlbmNlJyAvLyBAdHMtZXhwZWN0LWVycm9yOiBtdXRhdGUuXG5cbiAgICAgIGNvbnRleHQucmVmZXJlbmNlVHlwZSA9IGdldERhdGEoJ3JlZmVyZW5jZVR5cGUnKSB8fCAnc2hvcnRjdXQnIC8vIEB0cy1leHBlY3QtZXJyb3I6IG11dGF0ZS5cblxuICAgICAgZGVsZXRlIGNvbnRleHQudXJsXG4gICAgICBkZWxldGUgY29udGV4dC50aXRsZVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBtdXRhdGUuXG4gICAgICBkZWxldGUgY29udGV4dC5pZGVudGlmaWVyIC8vIEB0cy1leHBlY3QtZXJyb3I6IG11dGF0ZS5cblxuICAgICAgZGVsZXRlIGNvbnRleHQubGFiZWxcbiAgICB9XG5cbiAgICBzZXREYXRhKCdyZWZlcmVuY2VUeXBlJylcbiAgfVxuICAvKiogQHR5cGUge0hhbmRsZX0gKi9cblxuICBmdW5jdGlvbiBvbmV4aXRsYWJlbHRleHQodG9rZW4pIHtcbiAgICBjb25zdCBhbmNlc3RvciA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAyXVxuICAgIGNvbnN0IHN0cmluZyA9IHRoaXMuc2xpY2VTZXJpYWxpemUodG9rZW4pXG4gICAgYW5jZXN0b3IubGFiZWwgPSBkZWNvZGVTdHJpbmcoc3RyaW5nKVxuICAgIGFuY2VzdG9yLmlkZW50aWZpZXIgPSBub3JtYWxpemVJZGVudGlmaWVyKHN0cmluZykudG9Mb3dlckNhc2UoKVxuICB9XG4gIC8qKiBAdHlwZSB7SGFuZGxlfSAqL1xuXG4gIGZ1bmN0aW9uIG9uZXhpdGxhYmVsKCkge1xuICAgIGNvbnN0IGZyYWdtZW50ID0gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdXG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLnJlc3VtZSgpXG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXSAvLyBBc3N1bWUgYSByZWZlcmVuY2UuXG5cbiAgICBzZXREYXRhKCdpblJlZmVyZW5jZScsIHRydWUpXG5cbiAgICBpZiAobm9kZS50eXBlID09PSAnbGluaycpIHtcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IEFzc3VtZSBzdGF0aWMgcGhyYXNpbmcgY29udGVudC5cbiAgICAgIG5vZGUuY2hpbGRyZW4gPSBmcmFnbWVudC5jaGlsZHJlblxuICAgIH0gZWxzZSB7XG4gICAgICBub2RlLmFsdCA9IHZhbHVlXG4gICAgfVxuICB9XG4gIC8qKiBAdHlwZSB7SGFuZGxlfSAqL1xuXG4gIGZ1bmN0aW9uIG9uZXhpdHJlc291cmNlZGVzdGluYXRpb25zdHJpbmcoKSB7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMucmVzdW1lKClcbiAgICBjb25zdCBub2RlID0gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdXG4gICAgbm9kZS51cmwgPSBkYXRhXG4gIH1cbiAgLyoqIEB0eXBlIHtIYW5kbGV9ICovXG5cbiAgZnVuY3Rpb24gb25leGl0cmVzb3VyY2V0aXRsZXN0cmluZygpIHtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5yZXN1bWUoKVxuICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV1cbiAgICBub2RlLnRpdGxlID0gZGF0YVxuICB9XG4gIC8qKiBAdHlwZSB7SGFuZGxlfSAqL1xuXG4gIGZ1bmN0aW9uIG9uZXhpdHJlc291cmNlKCkge1xuICAgIHNldERhdGEoJ2luUmVmZXJlbmNlJylcbiAgfVxuICAvKiogQHR5cGUge0hhbmRsZX0gKi9cblxuICBmdW5jdGlvbiBvbmVudGVycmVmZXJlbmNlKCkge1xuICAgIHNldERhdGEoJ3JlZmVyZW5jZVR5cGUnLCAnY29sbGFwc2VkJylcbiAgfVxuICAvKiogQHR5cGUge0hhbmRsZX0gKi9cblxuICBmdW5jdGlvbiBvbmV4aXRyZWZlcmVuY2VzdHJpbmcodG9rZW4pIHtcbiAgICBjb25zdCBsYWJlbCA9IHRoaXMucmVzdW1lKClcbiAgICBjb25zdCBub2RlID0gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdXG4gICAgbm9kZS5sYWJlbCA9IGxhYmVsXG4gICAgbm9kZS5pZGVudGlmaWVyID0gbm9ybWFsaXplSWRlbnRpZmllcihcbiAgICAgIHRoaXMuc2xpY2VTZXJpYWxpemUodG9rZW4pXG4gICAgKS50b0xvd2VyQ2FzZSgpXG4gICAgc2V0RGF0YSgncmVmZXJlbmNlVHlwZScsICdmdWxsJylcbiAgfVxuICAvKiogQHR5cGUge0hhbmRsZX0gKi9cblxuICBmdW5jdGlvbiBvbmV4aXRjaGFyYWN0ZXJyZWZlcmVuY2VtYXJrZXIodG9rZW4pIHtcbiAgICBzZXREYXRhKCdjaGFyYWN0ZXJSZWZlcmVuY2VUeXBlJywgdG9rZW4udHlwZSlcbiAgfVxuICAvKiogQHR5cGUge0hhbmRsZX0gKi9cblxuICBmdW5jdGlvbiBvbmV4aXRjaGFyYWN0ZXJyZWZlcmVuY2V2YWx1ZSh0b2tlbikge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLnNsaWNlU2VyaWFsaXplKHRva2VuKVxuICAgIGNvbnN0IHR5cGUgPSBnZXREYXRhKCdjaGFyYWN0ZXJSZWZlcmVuY2VUeXBlJylcbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cblxuICAgIGxldCB2YWx1ZVxuXG4gICAgaWYgKHR5cGUpIHtcbiAgICAgIHZhbHVlID0gZGVjb2RlTnVtZXJpY0NoYXJhY3RlclJlZmVyZW5jZShcbiAgICAgICAgZGF0YSxcbiAgICAgICAgdHlwZSA9PT0gJ2NoYXJhY3RlclJlZmVyZW5jZU1hcmtlck51bWVyaWMnID8gMTAgOiAxNlxuICAgICAgKVxuICAgICAgc2V0RGF0YSgnY2hhcmFjdGVyUmVmZXJlbmNlVHlwZScpXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgYGRlY29kZUVudGl0eWAgY2FuIHJldHVybiBmYWxzZSBmb3IgaW52YWxpZCBuYW1lZFxuICAgICAgLy8gY2hhcmFjdGVyIHJlZmVyZW5jZXMsIGJ1dCBldmVyeXRoaW5nIHdl4oCZdmUgdG9rZW5pemVkIGlzIHZhbGlkLlxuICAgICAgdmFsdWUgPSBkZWNvZGVFbnRpdHkoZGF0YSlcbiAgICB9XG5cbiAgICBjb25zdCB0YWlsID0gdGhpcy5zdGFjay5wb3AoKVxuICAgIHRhaWwudmFsdWUgKz0gdmFsdWVcbiAgICB0YWlsLnBvc2l0aW9uLmVuZCA9IHBvaW50KHRva2VuLmVuZClcbiAgfVxuICAvKiogQHR5cGUge0hhbmRsZX0gKi9cblxuICBmdW5jdGlvbiBvbmV4aXRhdXRvbGlua3Byb3RvY29sKHRva2VuKSB7XG4gICAgb25leGl0ZGF0YS5jYWxsKHRoaXMsIHRva2VuKVxuICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV1cbiAgICBub2RlLnVybCA9IHRoaXMuc2xpY2VTZXJpYWxpemUodG9rZW4pXG4gIH1cbiAgLyoqIEB0eXBlIHtIYW5kbGV9ICovXG5cbiAgZnVuY3Rpb24gb25leGl0YXV0b2xpbmtlbWFpbCh0b2tlbikge1xuICAgIG9uZXhpdGRhdGEuY2FsbCh0aGlzLCB0b2tlbilcbiAgICBjb25zdCBub2RlID0gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdXG4gICAgbm9kZS51cmwgPSAnbWFpbHRvOicgKyB0aGlzLnNsaWNlU2VyaWFsaXplKHRva2VuKVxuICB9IC8vXG4gIC8vIENyZWF0ZXJzLlxuICAvL1xuXG4gIC8qKiBAcmV0dXJucyB7QmxvY2txdW90ZX0gKi9cblxuICBmdW5jdGlvbiBibG9ja1F1b3RlKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnYmxvY2txdW90ZScsXG4gICAgICBjaGlsZHJlbjogW11cbiAgICB9XG4gIH1cbiAgLyoqIEByZXR1cm5zIHtDb2RlfSAqL1xuXG4gIGZ1bmN0aW9uIGNvZGVGbG93KCkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnY29kZScsXG4gICAgICBsYW5nOiBudWxsLFxuICAgICAgbWV0YTogbnVsbCxcbiAgICAgIHZhbHVlOiAnJ1xuICAgIH1cbiAgfVxuICAvKiogQHJldHVybnMge0lubGluZUNvZGV9ICovXG5cbiAgZnVuY3Rpb24gY29kZVRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdpbmxpbmVDb2RlJyxcbiAgICAgIHZhbHVlOiAnJ1xuICAgIH1cbiAgfVxuICAvKiogQHJldHVybnMge0RlZmluaXRpb259ICovXG5cbiAgZnVuY3Rpb24gZGVmaW5pdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ2RlZmluaXRpb24nLFxuICAgICAgaWRlbnRpZmllcjogJycsXG4gICAgICBsYWJlbDogbnVsbCxcbiAgICAgIHRpdGxlOiBudWxsLFxuICAgICAgdXJsOiAnJ1xuICAgIH1cbiAgfVxuICAvKiogQHJldHVybnMge0VtcGhhc2lzfSAqL1xuXG4gIGZ1bmN0aW9uIGVtcGhhc2lzKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnZW1waGFzaXMnLFxuICAgICAgY2hpbGRyZW46IFtdXG4gICAgfVxuICB9XG4gIC8qKiBAcmV0dXJucyB7SGVhZGluZ30gKi9cblxuICBmdW5jdGlvbiBoZWFkaW5nKCkge1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgYGRlcHRoYCB3aWxsIGJlIHNldCBsYXRlci5cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ2hlYWRpbmcnLFxuICAgICAgZGVwdGg6IHVuZGVmaW5lZCxcbiAgICAgIGNoaWxkcmVuOiBbXVxuICAgIH1cbiAgfVxuICAvKiogQHJldHVybnMge0JyZWFrfSAqL1xuXG4gIGZ1bmN0aW9uIGhhcmRCcmVhaygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ2JyZWFrJ1xuICAgIH1cbiAgfVxuICAvKiogQHJldHVybnMge0hUTUx9ICovXG5cbiAgZnVuY3Rpb24gaHRtbCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ2h0bWwnLFxuICAgICAgdmFsdWU6ICcnXG4gICAgfVxuICB9XG4gIC8qKiBAcmV0dXJucyB7SW1hZ2V9ICovXG5cbiAgZnVuY3Rpb24gaW1hZ2UoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdpbWFnZScsXG4gICAgICB0aXRsZTogbnVsbCxcbiAgICAgIHVybDogJycsXG4gICAgICBhbHQ6IG51bGxcbiAgICB9XG4gIH1cbiAgLyoqIEByZXR1cm5zIHtMaW5rfSAqL1xuXG4gIGZ1bmN0aW9uIGxpbmsoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdsaW5rJyxcbiAgICAgIHRpdGxlOiBudWxsLFxuICAgICAgdXJsOiAnJyxcbiAgICAgIGNoaWxkcmVuOiBbXVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHtUb2tlbn0gdG9rZW5cbiAgICogQHJldHVybnMge0xpc3R9XG4gICAqL1xuXG4gIGZ1bmN0aW9uIGxpc3QodG9rZW4pIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ2xpc3QnLFxuICAgICAgb3JkZXJlZDogdG9rZW4udHlwZSA9PT0gJ2xpc3RPcmRlcmVkJyxcbiAgICAgIHN0YXJ0OiBudWxsLFxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBQYXRjaGVkLlxuICAgICAgc3ByZWFkOiB0b2tlbi5fc3ByZWFkLFxuICAgICAgY2hpbGRyZW46IFtdXG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0ge1Rva2VufSB0b2tlblxuICAgKiBAcmV0dXJucyB7TGlzdEl0ZW19XG4gICAqL1xuXG4gIGZ1bmN0aW9uIGxpc3RJdGVtKHRva2VuKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdsaXN0SXRlbScsXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFBhdGNoZWQuXG4gICAgICBzcHJlYWQ6IHRva2VuLl9zcHJlYWQsXG4gICAgICBjaGVja2VkOiBudWxsLFxuICAgICAgY2hpbGRyZW46IFtdXG4gICAgfVxuICB9XG4gIC8qKiBAcmV0dXJucyB7UGFyYWdyYXBofSAqL1xuXG4gIGZ1bmN0aW9uIHBhcmFncmFwaCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ3BhcmFncmFwaCcsXG4gICAgICBjaGlsZHJlbjogW11cbiAgICB9XG4gIH1cbiAgLyoqIEByZXR1cm5zIHtTdHJvbmd9ICovXG5cbiAgZnVuY3Rpb24gc3Ryb25nKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnc3Ryb25nJyxcbiAgICAgIGNoaWxkcmVuOiBbXVxuICAgIH1cbiAgfVxuICAvKiogQHJldHVybnMge1RleHR9ICovXG5cbiAgZnVuY3Rpb24gdGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgdmFsdWU6ICcnXG4gICAgfVxuICB9XG4gIC8qKiBAcmV0dXJucyB7VGhlbWF0aWNCcmVha30gKi9cblxuICBmdW5jdGlvbiB0aGVtYXRpY0JyZWFrKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAndGhlbWF0aWNCcmVhaydcbiAgICB9XG4gIH1cbn1cbi8qKlxuICogQHBhcmFtIHtFeHRlbnNpb259IGNvbWJpbmVkXG4gKiBAcGFyYW0ge0FycmF5LjxFeHRlbnNpb258QXJyYXkuPEV4dGVuc2lvbj4+fSBleHRlbnNpb25zXG4gKiBAcmV0dXJucyB7RXh0ZW5zaW9ufVxuICovXG5cbmZ1bmN0aW9uIGNvbmZpZ3VyZShjb21iaW5lZCwgZXh0ZW5zaW9ucykge1xuICBsZXQgaW5kZXggPSAtMVxuXG4gIHdoaWxlICgrK2luZGV4IDwgZXh0ZW5zaW9ucy5sZW5ndGgpIHtcbiAgICBjb25zdCB2YWx1ZSA9IGV4dGVuc2lvbnNbaW5kZXhdXG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIGNvbmZpZ3VyZShjb21iaW5lZCwgdmFsdWUpXG4gICAgfSBlbHNlIHtcbiAgICAgIGV4dGVuc2lvbihjb21iaW5lZCwgdmFsdWUpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNvbWJpbmVkXG59XG4vKipcbiAqIEBwYXJhbSB7RXh0ZW5zaW9ufSBjb21iaW5lZFxuICogQHBhcmFtIHtFeHRlbnNpb259IGV4dGVuc2lvblxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cblxuZnVuY3Rpb24gZXh0ZW5zaW9uKGNvbWJpbmVkLCBleHRlbnNpb24pIHtcbiAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gIGxldCBrZXlcblxuICBmb3IgKGtleSBpbiBleHRlbnNpb24pIHtcbiAgICBpZiAob3duLmNhbGwoZXh0ZW5zaW9uLCBrZXkpKSB7XG4gICAgICBjb25zdCBsaXN0ID0ga2V5ID09PSAnY2FuQ29udGFpbkVvbHMnIHx8IGtleSA9PT0gJ3RyYW5zZm9ybXMnXG4gICAgICBjb25zdCBtYXliZSA9IG93bi5jYWxsKGNvbWJpbmVkLCBrZXkpID8gY29tYmluZWRba2V5XSA6IHVuZGVmaW5lZFxuICAgICAgLyogYzggaWdub3JlIG5leHQgKi9cblxuICAgICAgY29uc3QgbGVmdCA9IG1heWJlIHx8IChjb21iaW5lZFtrZXldID0gbGlzdCA/IFtdIDoge30pXG4gICAgICBjb25zdCByaWdodCA9IGV4dGVuc2lvbltrZXldXG5cbiAgICAgIGlmIChyaWdodCkge1xuICAgICAgICBpZiAobGlzdCkge1xuICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IGBsZWZ0YCBpcyBhbiBhcnJheS5cbiAgICAgICAgICBjb21iaW5lZFtrZXldID0gWy4uLmxlZnQsIC4uLnJpZ2h0XVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIE9iamVjdC5hc3NpZ24obGVmdCwgcmlnaHQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5FdmVudH0gRXZlbnRcbiAqL1xuaW1wb3J0IHtzdWJ0b2tlbml6ZX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3VidG9rZW5pemUnXG4vKipcbiAqIEBwYXJhbSB7RXZlbnRbXX0gZXZlbnRzXG4gKiBAcmV0dXJucyB7RXZlbnRbXX1cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcG9zdHByb2Nlc3MoZXZlbnRzKSB7XG4gIHdoaWxlICghc3VidG9rZW5pemUoZXZlbnRzKSkge1xuICAgIC8vIEVtcHR5XG4gIH1cblxuICByZXR1cm4gZXZlbnRzXG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuSW5pdGlhbENvbnN0cnVjdH0gSW5pdGlhbENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5GdWxsTm9ybWFsaXplZEV4dGVuc2lvbn0gRnVsbE5vcm1hbGl6ZWRFeHRlbnNpb25cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuUGFyc2VPcHRpb25zfSBQYXJzZU9wdGlvbnNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuUGFyc2VDb250ZXh0fSBQYXJzZUNvbnRleHRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ3JlYXRlfSBDcmVhdGVcbiAqL1xuaW1wb3J0IHtjb21iaW5lRXh0ZW5zaW9uc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtY29tYmluZS1leHRlbnNpb25zJ1xuaW1wb3J0IHtjb250ZW50fSBmcm9tICcuL2luaXRpYWxpemUvY29udGVudC5qcydcbmltcG9ydCB7ZG9jdW1lbnR9IGZyb20gJy4vaW5pdGlhbGl6ZS9kb2N1bWVudC5qcydcbmltcG9ydCB7Zmxvd30gZnJvbSAnLi9pbml0aWFsaXplL2Zsb3cuanMnXG5pbXBvcnQge3RleHQsIHN0cmluZ30gZnJvbSAnLi9pbml0aWFsaXplL3RleHQuanMnXG5pbXBvcnQge2NyZWF0ZVRva2VuaXplcn0gZnJvbSAnLi9jcmVhdGUtdG9rZW5pemVyLmpzJ1xuaW1wb3J0ICogYXMgZGVmYXVsdENvbnN0cnVjdHMgZnJvbSAnLi9jb25zdHJ1Y3RzLmpzJ1xuLyoqXG4gKiBAcGFyYW0ge1BhcnNlT3B0aW9uc30gW29wdGlvbnNdXG4gKiBAcmV0dXJucyB7UGFyc2VDb250ZXh0fVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZShvcHRpb25zID0ge30pIHtcbiAgLyoqIEB0eXBlIHtGdWxsTm9ybWFsaXplZEV4dGVuc2lvbn0gKi9cbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBgZGVmYXVsdENvbnN0cnVjdHNgIGlzIGZ1bGwsIHNvIHRoZSByZXN1bHQgd2lsbCBiZSB0b28uXG4gIGNvbnN0IGNvbnN0cnVjdHMgPSBjb21iaW5lRXh0ZW5zaW9ucyhcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFNhbWUgYXMgYWJvdmUuXG4gICAgW2RlZmF1bHRDb25zdHJ1Y3RzXS5jb25jYXQob3B0aW9ucy5leHRlbnNpb25zIHx8IFtdKVxuICApXG4gIC8qKiBAdHlwZSB7UGFyc2VDb250ZXh0fSAqL1xuXG4gIGNvbnN0IHBhcnNlciA9IHtcbiAgICBkZWZpbmVkOiBbXSxcbiAgICBsYXp5OiB7fSxcbiAgICBjb25zdHJ1Y3RzLFxuICAgIGNvbnRlbnQ6IGNyZWF0ZShjb250ZW50KSxcbiAgICBkb2N1bWVudDogY3JlYXRlKGRvY3VtZW50KSxcbiAgICBmbG93OiBjcmVhdGUoZmxvdyksXG4gICAgc3RyaW5nOiBjcmVhdGUoc3RyaW5nKSxcbiAgICB0ZXh0OiBjcmVhdGUodGV4dClcbiAgfVxuICByZXR1cm4gcGFyc2VyXG4gIC8qKlxuICAgKiBAcGFyYW0ge0luaXRpYWxDb25zdHJ1Y3R9IGluaXRpYWxcbiAgICovXG5cbiAgZnVuY3Rpb24gY3JlYXRlKGluaXRpYWwpIHtcbiAgICByZXR1cm4gY3JlYXRvclxuICAgIC8qKiBAdHlwZSB7Q3JlYXRlfSAqL1xuXG4gICAgZnVuY3Rpb24gY3JlYXRvcihmcm9tKSB7XG4gICAgICByZXR1cm4gY3JlYXRlVG9rZW5pemVyKHBhcnNlciwgaW5pdGlhbCwgZnJvbSlcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCByZW1hcmtQYXJzZSBmcm9tICcuL2xpYi9pbmRleC5qcydcblxuZXhwb3J0IGRlZmF1bHQgcmVtYXJrUGFyc2VcbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5Sb290fSBSb290XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdC11dGlsLWZyb20tbWFya2Rvd24nKS5PcHRpb25zfSBPcHRpb25zXG4gKi9cblxuaW1wb3J0IHtmcm9tTWFya2Rvd259IGZyb20gJ21kYXN0LXV0aWwtZnJvbS1tYXJrZG93bidcblxuLyoqIEB0eXBlIHtpbXBvcnQoJ3VuaWZpZWQnKS5QbHVnaW48W09wdGlvbnM/XSB8IHZvaWRbXSwgc3RyaW5nLCBSb290Pn0gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbWFya1BhcnNlKG9wdGlvbnMpIHtcbiAgLyoqIEB0eXBlIHtpbXBvcnQoJ3VuaWZpZWQnKS5QYXJzZXJGdW5jdGlvbjxSb290Pn0gKi9cbiAgY29uc3QgcGFyc2VyID0gKGRvYykgPT4ge1xuICAgIC8vIEFzc3VtZSBvcHRpb25zLlxuICAgIGNvbnN0IHNldHRpbmdzID0gLyoqIEB0eXBlIHtPcHRpb25zfSAqLyAodGhpcy5kYXRhKCdzZXR0aW5ncycpKVxuXG4gICAgcmV0dXJuIGZyb21NYXJrZG93bihcbiAgICAgIGRvYyxcbiAgICAgIE9iamVjdC5hc3NpZ24oe30sIHNldHRpbmdzLCBvcHRpb25zLCB7XG4gICAgICAgIC8vIE5vdGU6IHRoZXNlIG9wdGlvbnMgYXJlIG5vdCBpbiB0aGUgcmVhZG1lLlxuICAgICAgICAvLyBUaGUgZ29hbCBpcyBmb3IgdGhlbSB0byBiZSBzZXQgYnkgcGx1Z2lucyBvbiBgZGF0YWAgaW5zdGVhZCBvZiBiZWluZ1xuICAgICAgICAvLyBwYXNzZWQgYnkgdXNlcnMuXG4gICAgICAgIGV4dGVuc2lvbnM6IHRoaXMuZGF0YSgnbWljcm9tYXJrRXh0ZW5zaW9ucycpIHx8IFtdLFxuICAgICAgICBtZGFzdEV4dGVuc2lvbnM6IHRoaXMuZGF0YSgnZnJvbU1hcmtkb3duRXh0ZW5zaW9ucycpIHx8IFtdXG4gICAgICB9KVxuICAgIClcbiAgfVxuXG4gIE9iamVjdC5hc3NpZ24odGhpcywge1BhcnNlcjogcGFyc2VyfSlcbn1cbiIsImltcG9ydCB7YXNjaWlBbHBoYW51bWVyaWN9IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3RlcidcbmltcG9ydCB7ZW5jb2RlfSBmcm9tICdtaWNyb21hcmstdXRpbC1lbmNvZGUnXG4vKipcbiAqIE1ha2UgYSB2YWx1ZSBzYWZlIGZvciBpbmplY3Rpb24gYXMgYSBVUkwuXG4gKlxuICogVGhpcyBlbmNvZGVzIHVuc2FmZSBjaGFyYWN0ZXJzIHdpdGggcGVyY2VudC1lbmNvZGluZyBhbmQgc2tpcHMgYWxyZWFkeVxuICogZW5jb2RlZCBzZXF1ZW5jZXMgKHNlZSBgbm9ybWFsaXplVXJpYCkuXG4gKiBGdXJ0aGVyIHVuc2FmZSBjaGFyYWN0ZXJzIGFyZSBlbmNvZGVkIGFzIGNoYXJhY3RlciByZWZlcmVuY2VzIChzZWVcbiAqIGBtaWNyb21hcmstdXRpbC1lbmNvZGVgKS5cbiAqXG4gKiBBIHJlZ2V4IG9mIGFsbG93ZWQgcHJvdG9jb2xzIGNhbiBiZSBnaXZlbiwgaW4gd2hpY2ggY2FzZSB0aGUgVVJMIGlzXG4gKiBzYW5pdGl6ZWQuXG4gKiBGb3IgZXhhbXBsZSwgYC9eKGh0dHBzP3xpcmNzP3xtYWlsdG98eG1wcCkkL2lgIGNhbiBiZSB1c2VkIGZvciBgYVtocmVmXWAsIG9yXG4gKiBgL15odHRwcz8kL2lgIGZvciBgaW1nW3NyY11gICh0aGlzIGlzIHdoYXQgYGdpdGh1Yi5jb21gIGFsbG93cykuXG4gKiBJZiB0aGUgVVJMIGluY2x1ZGVzIGFuIHVua25vd24gcHJvdG9jb2wgKG9uZSBub3QgbWF0Y2hlZCBieSBgcHJvdG9jb2xgLCBzdWNoXG4gKiBhcyBhIGRhbmdlcm91cyBleGFtcGxlLCBgamF2YXNjcmlwdDpgKSwgdGhlIHZhbHVlIGlzIGlnbm9yZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmcgfCB1bmRlZmluZWR9IHVybFxuICogICBVUkkgdG8gc2FuaXRpemUuXG4gKiBAcGFyYW0ge1JlZ0V4cCB8IG51bGwgfCB1bmRlZmluZWR9IFtwcm90b2NvbF1cbiAqICAgQWxsb3dlZCBwcm90b2NvbHMuXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICogICBTYW5pdGl6ZWQgVVJJLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2FuaXRpemVVcmkodXJsLCBwcm90b2NvbCkge1xuICBjb25zdCB2YWx1ZSA9IGVuY29kZShub3JtYWxpemVVcmkodXJsIHx8ICcnKSlcbiAgaWYgKCFwcm90b2NvbCkge1xuICAgIHJldHVybiB2YWx1ZVxuICB9XG4gIGNvbnN0IGNvbG9uID0gdmFsdWUuaW5kZXhPZignOicpXG4gIGNvbnN0IHF1ZXN0aW9uTWFyayA9IHZhbHVlLmluZGV4T2YoJz8nKVxuICBjb25zdCBudW1iZXJTaWduID0gdmFsdWUuaW5kZXhPZignIycpXG4gIGNvbnN0IHNsYXNoID0gdmFsdWUuaW5kZXhPZignLycpXG4gIGlmIChcbiAgICAvLyBJZiB0aGVyZSBpcyBubyBwcm90b2NvbCwgaXTigJlzIHJlbGF0aXZlLlxuICAgIGNvbG9uIDwgMCB8fFxuICAgIC8vIElmIHRoZSBmaXJzdCBjb2xvbiBpcyBhZnRlciBhIGA/YCwgYCNgLCBvciBgL2AsIGl04oCZcyBub3QgYSBwcm90b2NvbC5cbiAgICAoc2xhc2ggPiAtMSAmJiBjb2xvbiA+IHNsYXNoKSB8fFxuICAgIChxdWVzdGlvbk1hcmsgPiAtMSAmJiBjb2xvbiA+IHF1ZXN0aW9uTWFyaykgfHxcbiAgICAobnVtYmVyU2lnbiA+IC0xICYmIGNvbG9uID4gbnVtYmVyU2lnbikgfHxcbiAgICAvLyBJdCBpcyBhIHByb3RvY29sLCBpdCBzaG91bGQgYmUgYWxsb3dlZC5cbiAgICBwcm90b2NvbC50ZXN0KHZhbHVlLnNsaWNlKDAsIGNvbG9uKSlcbiAgKSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cbiAgcmV0dXJuICcnXG59XG5cbi8qKlxuICogTm9ybWFsaXplIGEgVVJMLlxuICpcbiAqIEVuY29kZSB1bnNhZmUgY2hhcmFjdGVycyB3aXRoIHBlcmNlbnQtZW5jb2RpbmcsIHNraXBwaW5nIGFscmVhZHkgZW5jb2RlZFxuICogc2VxdWVuY2VzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogICBVUkkgdG8gbm9ybWFsaXplLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqICAgTm9ybWFsaXplZCBVUkkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVVcmkodmFsdWUpIHtcbiAgLyoqIEB0eXBlIHtBcnJheTxzdHJpbmc+fSAqL1xuICBjb25zdCByZXN1bHQgPSBbXVxuICBsZXQgaW5kZXggPSAtMVxuICBsZXQgc3RhcnQgPSAwXG4gIGxldCBza2lwID0gMFxuICB3aGlsZSAoKytpbmRleCA8IHZhbHVlLmxlbmd0aCkge1xuICAgIGNvbnN0IGNvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KGluZGV4KVxuICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgIGxldCByZXBsYWNlID0gJydcblxuICAgIC8vIEEgY29ycmVjdCBwZXJjZW50IGVuY29kZWQgdmFsdWUuXG4gICAgaWYgKFxuICAgICAgY29kZSA9PT0gMzcgJiZcbiAgICAgIGFzY2lpQWxwaGFudW1lcmljKHZhbHVlLmNoYXJDb2RlQXQoaW5kZXggKyAxKSkgJiZcbiAgICAgIGFzY2lpQWxwaGFudW1lcmljKHZhbHVlLmNoYXJDb2RlQXQoaW5kZXggKyAyKSlcbiAgICApIHtcbiAgICAgIHNraXAgPSAyXG4gICAgfVxuICAgIC8vIEFTQ0lJLlxuICAgIGVsc2UgaWYgKGNvZGUgPCAxMjgpIHtcbiAgICAgIGlmICghL1shIyQmLTs9Py1aX2Eten5dLy50ZXN0KFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSkpKSB7XG4gICAgICAgIHJlcGxhY2UgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIEFzdHJhbC5cbiAgICBlbHNlIGlmIChjb2RlID4gNTUyOTUgJiYgY29kZSA8IDU3MzQ0KSB7XG4gICAgICBjb25zdCBuZXh0ID0gdmFsdWUuY2hhckNvZGVBdChpbmRleCArIDEpXG5cbiAgICAgIC8vIEEgY29ycmVjdCBzdXJyb2dhdGUgcGFpci5cbiAgICAgIGlmIChjb2RlIDwgNTYzMjAgJiYgbmV4dCA+IDU2MzE5ICYmIG5leHQgPCA1NzM0NCkge1xuICAgICAgICByZXBsYWNlID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlLCBuZXh0KVxuICAgICAgICBza2lwID0gMVxuICAgICAgfVxuICAgICAgLy8gTG9uZSBzdXJyb2dhdGUuXG4gICAgICBlbHNlIHtcbiAgICAgICAgcmVwbGFjZSA9ICdcXHVGRkZEJ1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBVbmljb2RlLlxuICAgIGVsc2Uge1xuICAgICAgcmVwbGFjZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSlcbiAgICB9XG4gICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgIHJlc3VsdC5wdXNoKHZhbHVlLnNsaWNlKHN0YXJ0LCBpbmRleCksIGVuY29kZVVSSUNvbXBvbmVudChyZXBsYWNlKSlcbiAgICAgIHN0YXJ0ID0gaW5kZXggKyBza2lwICsgMVxuICAgICAgcmVwbGFjZSA9ICcnXG4gICAgfVxuICAgIGlmIChza2lwKSB7XG4gICAgICBpbmRleCArPSBza2lwXG4gICAgICBza2lwID0gMFxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0LmpvaW4oJycpICsgdmFsdWUuc2xpY2Uoc3RhcnQpXG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaXN0JykuTm9kZX0gTm9kZVxuICogQHR5cGVkZWYge2ltcG9ydCgndW5pc3QnKS5QYXJlbnR9IFBhcmVudFxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge1JlY29yZDxzdHJpbmcsIHVua25vd24+fSBQcm9wc1xuICogQHR5cGVkZWYge251bGwgfCB1bmRlZmluZWQgfCBzdHJpbmcgfCBQcm9wcyB8IFRlc3RGdW5jdGlvbkFueXRoaW5nIHwgQXJyYXk8c3RyaW5nIHwgUHJvcHMgfCBUZXN0RnVuY3Rpb25Bbnl0aGluZz59IFRlc3RcbiAqICAgQ2hlY2sgZm9yIGFuIGFyYml0cmFyeSBub2RlLCB1bmF3YXJlIG9mIFR5cGVTY3JpcHQgaW5mZXJyYWwuXG4gKlxuICogQGNhbGxiYWNrIFRlc3RGdW5jdGlvbkFueXRoaW5nXG4gKiAgIENoZWNrIGlmIGEgbm9kZSBwYXNzZXMgYSB0ZXN0LCB1bmF3YXJlIG9mIFR5cGVTY3JpcHQgaW5mZXJyYWwuXG4gKiBAcGFyYW0ge3Vua25vd259IHRoaXNcbiAqICAgVGhlIGdpdmVuIGNvbnRleHQuXG4gKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAqICAgQSBub2RlLlxuICogQHBhcmFtIHtudW1iZXIgfCBudWxsIHwgdW5kZWZpbmVkfSBbaW5kZXhdXG4gKiAgIFRoZSBub2Rl4oCZcyBwb3NpdGlvbiBpbiBpdHMgcGFyZW50LlxuICogQHBhcmFtIHtQYXJlbnQgfCBudWxsIHwgdW5kZWZpbmVkfSBbcGFyZW50XVxuICogICBUaGUgbm9kZeKAmXMgcGFyZW50LlxuICogQHJldHVybnMge2Jvb2xlYW4gfCB2b2lkfVxuICogICBXaGV0aGVyIHRoaXMgbm9kZSBwYXNzZXMgdGhlIHRlc3QuXG4gKi9cblxuLyoqXG4gKiBAdGVtcGxhdGUge05vZGV9IEtpbmRcbiAqICAgTm9kZSB0eXBlLlxuICogQHR5cGVkZWYge0tpbmRbJ3R5cGUnXSB8IFBhcnRpYWw8S2luZD4gfCBUZXN0RnVuY3Rpb25QcmVkaWNhdGU8S2luZD4gfCBBcnJheTxLaW5kWyd0eXBlJ10gfCBQYXJ0aWFsPEtpbmQ+IHwgVGVzdEZ1bmN0aW9uUHJlZGljYXRlPEtpbmQ+Pn0gUHJlZGljYXRlVGVzdFxuICogICBDaGVjayBmb3IgYSBub2RlIHRoYXQgY2FuIGJlIGluZmVycmVkIGJ5IFR5cGVTY3JpcHQuXG4gKi9cblxuLyoqXG4gKiBDaGVjayBpZiBhIG5vZGUgcGFzc2VzIGEgY2VydGFpbiB0ZXN0LlxuICpcbiAqIEB0ZW1wbGF0ZSB7Tm9kZX0gS2luZFxuICogICBOb2RlIHR5cGUuXG4gKiBAY2FsbGJhY2sgVGVzdEZ1bmN0aW9uUHJlZGljYXRlXG4gKiAgIENvbXBsZXggdGVzdCBmdW5jdGlvbiBmb3IgYSBub2RlIHRoYXQgY2FuIGJlIGluZmVycmVkIGJ5IFR5cGVTY3JpcHQuXG4gKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAqICAgQSBub2RlLlxuICogQHBhcmFtIHtudW1iZXIgfCBudWxsIHwgdW5kZWZpbmVkfSBbaW5kZXhdXG4gKiAgIFRoZSBub2Rl4oCZcyBwb3NpdGlvbiBpbiBpdHMgcGFyZW50LlxuICogQHBhcmFtIHtQYXJlbnQgfCBudWxsIHwgdW5kZWZpbmVkfSBbcGFyZW50XVxuICogICBUaGUgbm9kZeKAmXMgcGFyZW50LlxuICogQHJldHVybnMge25vZGUgaXMgS2luZH1cbiAqICAgV2hldGhlciB0aGlzIG5vZGUgcGFzc2VzIHRoZSB0ZXN0LlxuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIEFzc2VydEFueXRoaW5nXG4gKiAgIENoZWNrIHRoYXQgYW4gYXJiaXRyYXJ5IHZhbHVlIGlzIGEgbm9kZSwgdW5hd2FyZSBvZiBUeXBlU2NyaXB0IGluZmVycmFsLlxuICogQHBhcmFtIHt1bmtub3dufSBbbm9kZV1cbiAqICAgQW55dGhpbmcgKHR5cGljYWxseSBhIG5vZGUpLlxuICogQHBhcmFtIHtudW1iZXIgfCBudWxsIHwgdW5kZWZpbmVkfSBbaW5kZXhdXG4gKiAgIFRoZSBub2Rl4oCZcyBwb3NpdGlvbiBpbiBpdHMgcGFyZW50LlxuICogQHBhcmFtIHtQYXJlbnQgfCBudWxsIHwgdW5kZWZpbmVkfSBbcGFyZW50XVxuICogICBUaGUgbm9kZeKAmXMgcGFyZW50LlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKiAgIFdoZXRoZXIgdGhpcyBpcyBhIG5vZGUgYW5kIHBhc3NlcyBhIHRlc3QuXG4gKi9cblxuLyoqXG4gKiBDaGVjayBpZiBhIG5vZGUgaXMgYSBub2RlIGFuZCBwYXNzZXMgYSBjZXJ0YWluIG5vZGUgdGVzdC5cbiAqXG4gKiBAdGVtcGxhdGUge05vZGV9IEtpbmRcbiAqICAgTm9kZSB0eXBlLlxuICogQGNhbGxiYWNrIEFzc2VydFByZWRpY2F0ZVxuICogICBDaGVjayB0aGF0IGFuIGFyYml0cmFyeSB2YWx1ZSBpcyBhIHNwZWNpZmljIG5vZGUsIGF3YXJlIG9mIFR5cGVTY3JpcHQuXG4gKiBAcGFyYW0ge3Vua25vd259IFtub2RlXVxuICogICBBbnl0aGluZyAodHlwaWNhbGx5IGEgbm9kZSkuXG4gKiBAcGFyYW0ge251bWJlciB8IG51bGwgfCB1bmRlZmluZWR9IFtpbmRleF1cbiAqICAgVGhlIG5vZGXigJlzIHBvc2l0aW9uIGluIGl0cyBwYXJlbnQuXG4gKiBAcGFyYW0ge1BhcmVudCB8IG51bGwgfCB1bmRlZmluZWR9IFtwYXJlbnRdXG4gKiAgIFRoZSBub2Rl4oCZcyBwYXJlbnQuXG4gKiBAcmV0dXJucyB7bm9kZSBpcyBLaW5kfVxuICogICBXaGV0aGVyIHRoaXMgaXMgYSBub2RlIGFuZCBwYXNzZXMgYSB0ZXN0LlxuICovXG5cbi8qKlxuICogQ2hlY2sgaWYgYG5vZGVgIGlzIGEgYE5vZGVgIGFuZCB3aGV0aGVyIGl0IHBhc3NlcyB0aGUgZ2l2ZW4gdGVzdC5cbiAqXG4gKiBAcGFyYW0gbm9kZVxuICogICBUaGluZyB0byBjaGVjaywgdHlwaWNhbGx5IGBOb2RlYC5cbiAqIEBwYXJhbSB0ZXN0XG4gKiAgIEEgY2hlY2sgZm9yIGEgc3BlY2lmaWMgbm9kZS5cbiAqIEBwYXJhbSBpbmRleFxuICogICBUaGUgbm9kZeKAmXMgcG9zaXRpb24gaW4gaXRzIHBhcmVudC5cbiAqIEBwYXJhbSBwYXJlbnRcbiAqICAgVGhlIG5vZGXigJlzIHBhcmVudC5cbiAqIEByZXR1cm5zXG4gKiAgIFdoZXRoZXIgYG5vZGVgIGlzIGEgbm9kZSBhbmQgcGFzc2VzIGEgdGVzdC5cbiAqL1xuZXhwb3J0IGNvbnN0IGlzID1cbiAgLyoqXG4gICAqIEB0eXBlIHsoXG4gICAqICAgKCgpID0+IGZhbHNlKSAmXG4gICAqICAgKDxLaW5kIGV4dGVuZHMgTm9kZSA9IE5vZGU+KG5vZGU6IHVua25vd24sIHRlc3Q6IFByZWRpY2F0ZVRlc3Q8S2luZD4sIGluZGV4OiBudW1iZXIsIHBhcmVudDogUGFyZW50LCBjb250ZXh0PzogdW5rbm93bikgPT4gbm9kZSBpcyBLaW5kKSAmXG4gICAqICAgKDxLaW5kIGV4dGVuZHMgTm9kZSA9IE5vZGU+KG5vZGU6IHVua25vd24sIHRlc3Q6IFByZWRpY2F0ZVRlc3Q8S2luZD4sIGluZGV4PzogbnVsbCB8IHVuZGVmaW5lZCwgcGFyZW50PzogbnVsbCB8IHVuZGVmaW5lZCwgY29udGV4dD86IHVua25vd24pID0+IG5vZGUgaXMgS2luZCkgJlxuICAgKiAgICgobm9kZTogdW5rbm93biwgdGVzdDogVGVzdCwgaW5kZXg6IG51bWJlciwgcGFyZW50OiBQYXJlbnQsIGNvbnRleHQ/OiB1bmtub3duKSA9PiBib29sZWFuKSAmXG4gICAqICAgKChub2RlOiB1bmtub3duLCB0ZXN0PzogVGVzdCwgaW5kZXg/OiBudWxsIHwgdW5kZWZpbmVkLCBwYXJlbnQ/OiBudWxsIHwgdW5kZWZpbmVkLCBjb250ZXh0PzogdW5rbm93bikgPT4gYm9vbGVhbilcbiAgICogKX1cbiAgICovXG4gIChcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3Vua25vd259IFtub2RlXVxuICAgICAqIEBwYXJhbSB7VGVzdH0gW3Rlc3RdXG4gICAgICogQHBhcmFtIHtudW1iZXIgfCBudWxsIHwgdW5kZWZpbmVkfSBbaW5kZXhdXG4gICAgICogQHBhcmFtIHtQYXJlbnQgfCBudWxsIHwgdW5kZWZpbmVkfSBbcGFyZW50XVxuICAgICAqIEBwYXJhbSB7dW5rbm93bn0gW2NvbnRleHRdXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1wYXJhbXNcbiAgICBmdW5jdGlvbiBpcyhub2RlLCB0ZXN0LCBpbmRleCwgcGFyZW50LCBjb250ZXh0KSB7XG4gICAgICBjb25zdCBjaGVjayA9IGNvbnZlcnQodGVzdClcblxuICAgICAgaWYgKFxuICAgICAgICBpbmRleCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgIGluZGV4ICE9PSBudWxsICYmXG4gICAgICAgICh0eXBlb2YgaW5kZXggIT09ICdudW1iZXInIHx8XG4gICAgICAgICAgaW5kZXggPCAwIHx8XG4gICAgICAgICAgaW5kZXggPT09IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSlcbiAgICAgICkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHBvc2l0aXZlIGZpbml0ZSBpbmRleCcpXG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgcGFyZW50ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgcGFyZW50ICE9PSBudWxsICYmXG4gICAgICAgICghaXMocGFyZW50KSB8fCAhcGFyZW50LmNoaWxkcmVuKVxuICAgICAgKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgcGFyZW50IG5vZGUnKVxuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIChwYXJlbnQgPT09IHVuZGVmaW5lZCB8fCBwYXJlbnQgPT09IG51bGwpICE9PVxuICAgICAgICAoaW5kZXggPT09IHVuZGVmaW5lZCB8fCBpbmRleCA9PT0gbnVsbClcbiAgICAgICkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGJvdGggcGFyZW50IGFuZCBpbmRleCcpXG4gICAgICB9XG5cbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgTG9va3MgbGlrZSBhIG5vZGUuXG4gICAgICByZXR1cm4gbm9kZSAmJiBub2RlLnR5cGUgJiYgdHlwZW9mIG5vZGUudHlwZSA9PT0gJ3N0cmluZydcbiAgICAgICAgPyBCb29sZWFuKGNoZWNrLmNhbGwoY29udGV4dCwgbm9kZSwgaW5kZXgsIHBhcmVudCkpXG4gICAgICAgIDogZmFsc2VcbiAgICB9XG4gIClcblxuLyoqXG4gKiBHZW5lcmF0ZSBhbiBhc3NlcnRpb24gZnJvbSBhIHRlc3QuXG4gKlxuICogVXNlZnVsIGlmIHlvdeKAmXJlIGdvaW5nIHRvIHRlc3QgbWFueSBub2RlcywgZm9yIGV4YW1wbGUgd2hlbiBjcmVhdGluZyBhXG4gKiB1dGlsaXR5IHdoZXJlIHNvbWV0aGluZyBlbHNlIHBhc3NlcyBhIGNvbXBhdGlibGUgdGVzdC5cbiAqXG4gKiBUaGUgY3JlYXRlZCBmdW5jdGlvbiBpcyBhIGJpdCBmYXN0ZXIgYmVjYXVzZSBpdCBleHBlY3RzIHZhbGlkIGlucHV0IG9ubHk6XG4gKiBhIGBub2RlYCwgYGluZGV4YCwgYW5kIGBwYXJlbnRgLlxuICpcbiAqIEBwYXJhbSB0ZXN0XG4gKiAgICogICB3aGVuIG51bGxpc2gsIGNoZWNrcyBpZiBgbm9kZWAgaXMgYSBgTm9kZWAuXG4gKiAgICogICB3aGVuIGBzdHJpbmdgLCB3b3JrcyBsaWtlIHBhc3NpbmcgYChub2RlKSA9PiBub2RlLnR5cGUgPT09IHRlc3RgLlxuICogICAqICAgd2hlbiBgZnVuY3Rpb25gIGNoZWNrcyBpZiBmdW5jdGlvbiBwYXNzZWQgdGhlIG5vZGUgaXMgdHJ1ZS5cbiAqICAgKiAgIHdoZW4gYG9iamVjdGAsIGNoZWNrcyB0aGF0IGFsbCBrZXlzIGluIHRlc3QgYXJlIGluIG5vZGUsIGFuZCB0aGF0IHRoZXkgaGF2ZSAoc3RyaWN0bHkpIGVxdWFsIHZhbHVlcy5cbiAqICAgKiAgIHdoZW4gYGFycmF5YCwgY2hlY2tzIGlmIGFueSBvbmUgb2YgdGhlIHN1YnRlc3RzIHBhc3MuXG4gKiBAcmV0dXJuc1xuICogICBBbiBhc3NlcnRpb24uXG4gKi9cbmV4cG9ydCBjb25zdCBjb252ZXJ0ID1cbiAgLyoqXG4gICAqIEB0eXBlIHsoXG4gICAqICAgKDxLaW5kIGV4dGVuZHMgTm9kZT4odGVzdDogUHJlZGljYXRlVGVzdDxLaW5kPikgPT4gQXNzZXJ0UHJlZGljYXRlPEtpbmQ+KSAmXG4gICAqICAgKCh0ZXN0PzogVGVzdCkgPT4gQXNzZXJ0QW55dGhpbmcpXG4gICAqICl9XG4gICAqL1xuICAoXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtUZXN0fSBbdGVzdF1cbiAgICAgKiBAcmV0dXJucyB7QXNzZXJ0QW55dGhpbmd9XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHRlc3QpIHtcbiAgICAgIGlmICh0ZXN0ID09PSB1bmRlZmluZWQgfHwgdGVzdCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gb2tcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB0ZXN0ID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdHlwZUZhY3RvcnkodGVzdClcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB0ZXN0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh0ZXN0KSA/IGFueUZhY3RvcnkodGVzdCkgOiBwcm9wc0ZhY3RvcnkodGVzdClcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB0ZXN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjYXN0RmFjdG9yeSh0ZXN0KVxuICAgICAgfVxuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGZ1bmN0aW9uLCBzdHJpbmcsIG9yIG9iamVjdCBhcyB0ZXN0JylcbiAgICB9XG4gIClcblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZyB8IFByb3BzIHwgVGVzdEZ1bmN0aW9uQW55dGhpbmc+fSB0ZXN0c1xuICogQHJldHVybnMge0Fzc2VydEFueXRoaW5nfVxuICovXG5mdW5jdGlvbiBhbnlGYWN0b3J5KHRlc3RzKSB7XG4gIC8qKiBAdHlwZSB7QXJyYXk8QXNzZXJ0QW55dGhpbmc+fSAqL1xuICBjb25zdCBjaGVja3MgPSBbXVxuICBsZXQgaW5kZXggPSAtMVxuXG4gIHdoaWxlICgrK2luZGV4IDwgdGVzdHMubGVuZ3RoKSB7XG4gICAgY2hlY2tzW2luZGV4XSA9IGNvbnZlcnQodGVzdHNbaW5kZXhdKVxuICB9XG5cbiAgcmV0dXJuIGNhc3RGYWN0b3J5KGFueSlcblxuICAvKipcbiAgICogQHRoaXMge3Vua25vd259XG4gICAqIEBwYXJhbSB7QXJyYXk8dW5rbm93bj59IHBhcmFtZXRlcnNcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBmdW5jdGlvbiBhbnkoLi4ucGFyYW1ldGVycykge1xuICAgIGxldCBpbmRleCA9IC0xXG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGNoZWNrcy5sZW5ndGgpIHtcbiAgICAgIGlmIChjaGVja3NbaW5kZXhdLmNhbGwodGhpcywgLi4ucGFyYW1ldGVycykpIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuLyoqXG4gKiBUdXJuIGFuIG9iamVjdCBpbnRvIGEgdGVzdCBmb3IgYSBub2RlIHdpdGggYSBjZXJ0YWluIGZpZWxkcy5cbiAqXG4gKiBAcGFyYW0ge1Byb3BzfSBjaGVja1xuICogQHJldHVybnMge0Fzc2VydEFueXRoaW5nfVxuICovXG5mdW5jdGlvbiBwcm9wc0ZhY3RvcnkoY2hlY2spIHtcbiAgcmV0dXJuIGNhc3RGYWN0b3J5KGFsbClcblxuICAvKipcbiAgICogQHBhcmFtIHtOb2RlfSBub2RlXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgZnVuY3Rpb24gYWxsKG5vZGUpIHtcbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICBsZXQga2V5XG5cbiAgICBmb3IgKGtleSBpbiBjaGVjaykge1xuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogaHVzaCwgaXQgc3VyZSB3b3JrcyBhcyBhbiBpbmRleC5cbiAgICAgIGlmIChub2RlW2tleV0gIT09IGNoZWNrW2tleV0pIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlXG4gIH1cbn1cblxuLyoqXG4gKiBUdXJuIGEgc3RyaW5nIGludG8gYSB0ZXN0IGZvciBhIG5vZGUgd2l0aCBhIGNlcnRhaW4gdHlwZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY2hlY2tcbiAqIEByZXR1cm5zIHtBc3NlcnRBbnl0aGluZ31cbiAqL1xuZnVuY3Rpb24gdHlwZUZhY3RvcnkoY2hlY2spIHtcbiAgcmV0dXJuIGNhc3RGYWN0b3J5KHR5cGUpXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICAgKi9cbiAgZnVuY3Rpb24gdHlwZShub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUgJiYgbm9kZS50eXBlID09PSBjaGVja1xuICB9XG59XG5cbi8qKlxuICogVHVybiBhIGN1c3RvbSB0ZXN0IGludG8gYSB0ZXN0IGZvciBhIG5vZGUgdGhhdCBwYXNzZXMgdGhhdCB0ZXN0LlxuICpcbiAqIEBwYXJhbSB7VGVzdEZ1bmN0aW9uQW55dGhpbmd9IGNoZWNrXG4gKiBAcmV0dXJucyB7QXNzZXJ0QW55dGhpbmd9XG4gKi9cbmZ1bmN0aW9uIGNhc3RGYWN0b3J5KGNoZWNrKSB7XG4gIHJldHVybiBhc3NlcnRpb25cblxuICAvKipcbiAgICogQHRoaXMge3Vua25vd259XG4gICAqIEBwYXJhbSB7dW5rbm93bn0gbm9kZVxuICAgKiBAcGFyYW0ge0FycmF5PHVua25vd24+fSBwYXJhbWV0ZXJzXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgZnVuY3Rpb24gYXNzZXJ0aW9uKG5vZGUsIC4uLnBhcmFtZXRlcnMpIHtcbiAgICByZXR1cm4gQm9vbGVhbihcbiAgICAgIG5vZGUgJiZcbiAgICAgICAgdHlwZW9mIG5vZGUgPT09ICdvYmplY3QnICYmXG4gICAgICAgICd0eXBlJyBpbiBub2RlICYmXG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IGZpbmUuXG4gICAgICAgIEJvb2xlYW4oY2hlY2suY2FsbCh0aGlzLCBub2RlLCAuLi5wYXJhbWV0ZXJzKSlcbiAgICApXG4gIH1cbn1cblxuZnVuY3Rpb24gb2soKSB7XG4gIHJldHVybiB0cnVlXG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaXN0JykuTm9kZX0gTm9kZVxuICogQHR5cGVkZWYge2ltcG9ydCgndW5pc3QnKS5QYXJlbnR9IFBhcmVudFxuICogQHR5cGVkZWYge2ltcG9ydCgndW5pc3QtdXRpbC1pcycpLlRlc3R9IFRlc3RcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtib29sZWFuIHwgJ3NraXAnfSBBY3Rpb25cbiAqICAgVW5pb24gb2YgdGhlIGFjdGlvbiB0eXBlcy5cbiAqXG4gKiBAdHlwZWRlZiB7bnVtYmVyfSBJbmRleFxuICogICBNb3ZlIHRvIHRoZSBzaWJsaW5nIGF0IGBpbmRleGAgbmV4dCAoYWZ0ZXIgbm9kZSBpdHNlbGYgaXMgY29tcGxldGVseVxuICogICB0cmF2ZXJzZWQpLlxuICpcbiAqICAgVXNlZnVsIGlmIG11dGF0aW5nIHRoZSB0cmVlLCBzdWNoIGFzIHJlbW92aW5nIHRoZSBub2RlIHRoZSB2aXNpdG9yIGlzXG4gKiAgIGN1cnJlbnRseSBvbiwgb3IgYW55IG9mIGl0cyBwcmV2aW91cyBzaWJsaW5ncy5cbiAqICAgUmVzdWx0cyBsZXNzIHRoYW4gMCBvciBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gYGNoaWxkcmVuLmxlbmd0aGAgc3RvcFxuICogICB0cmF2ZXJzaW5nIHRoZSBwYXJlbnQuXG4gKlxuICogQHR5cGVkZWYge1soQWN0aW9uIHwgbnVsbCB8IHVuZGVmaW5lZCB8IHZvaWQpPywgKEluZGV4IHwgbnVsbCB8IHVuZGVmaW5lZCk/XX0gQWN0aW9uVHVwbGVcbiAqICAgTGlzdCB3aXRoIG9uZSBvciB0d28gdmFsdWVzLCB0aGUgZmlyc3QgYW4gYWN0aW9uLCB0aGUgc2Vjb25kIGFuIGluZGV4LlxuICpcbiAqIEB0eXBlZGVmIHtBY3Rpb24gfCBBY3Rpb25UdXBsZSB8IEluZGV4IHwgbnVsbCB8IHVuZGVmaW5lZCB8IHZvaWR9IFZpc2l0b3JSZXN1bHRcbiAqICAgQW55IHZhbHVlIHRoYXQgY2FuIGJlIHJldHVybmVkIGZyb20gYSB2aXNpdG9yLlxuICovXG5cbi8qKlxuICogQHRlbXBsYXRlIHtOb2RlfSBbVmlzaXRlZD1Ob2RlXVxuICogICBWaXNpdGVkIG5vZGUgdHlwZS5cbiAqIEB0ZW1wbGF0ZSB7UGFyZW50fSBbQW5jZXN0b3I9UGFyZW50XVxuICogICBBbmNlc3RvciB0eXBlLlxuICogQGNhbGxiYWNrIFZpc2l0b3JcbiAqICAgSGFuZGxlIGEgbm9kZSAobWF0Y2hpbmcgYHRlc3RgLCBpZiBnaXZlbikuXG4gKlxuICogICBWaXNpdG9ycyBhcmUgZnJlZSB0byB0cmFuc2Zvcm0gYG5vZGVgLlxuICogICBUaGV5IGNhbiBhbHNvIHRyYW5zZm9ybSB0aGUgcGFyZW50IG9mIG5vZGUgKHRoZSBsYXN0IG9mIGBhbmNlc3RvcnNgKS5cbiAqXG4gKiAgIFJlcGxhY2luZyBgbm9kZWAgaXRzZWxmLCBpZiBgU0tJUGAgaXMgbm90IHJldHVybmVkLCBzdGlsbCBjYXVzZXMgaXRzXG4gKiAgIGRlc2NlbmRhbnRzIHRvIGJlIHdhbGtlZCAod2hpY2ggaXMgYSBidWcpLlxuICpcbiAqICAgV2hlbiBhZGRpbmcgb3IgcmVtb3ZpbmcgcHJldmlvdXMgc2libGluZ3Mgb2YgYG5vZGVgIChvciBuZXh0IHNpYmxpbmdzLCBpblxuICogICBjYXNlIG9mIHJldmVyc2UpLCB0aGUgYFZpc2l0b3JgIHNob3VsZCByZXR1cm4gYSBuZXcgYEluZGV4YCB0byBzcGVjaWZ5IHRoZVxuICogICBzaWJsaW5nIHRvIHRyYXZlcnNlIGFmdGVyIGBub2RlYCBpcyB0cmF2ZXJzZWQuXG4gKiAgIEFkZGluZyBvciByZW1vdmluZyBuZXh0IHNpYmxpbmdzIG9mIGBub2RlYCAob3IgcHJldmlvdXMgc2libGluZ3MsIGluIGNhc2VcbiAqICAgb2YgcmV2ZXJzZSkgaXMgaGFuZGxlZCBhcyBleHBlY3RlZCB3aXRob3V0IG5lZWRpbmcgdG8gcmV0dXJuIGEgbmV3IGBJbmRleGAuXG4gKlxuICogICBSZW1vdmluZyB0aGUgY2hpbGRyZW4gcHJvcGVydHkgb2YgYW4gYW5jZXN0b3Igc3RpbGwgcmVzdWx0cyBpbiB0aGVtIGJlaW5nXG4gKiAgIHRyYXZlcnNlZC5cbiAqIEBwYXJhbSB7VmlzaXRlZH0gbm9kZVxuICogICBGb3VuZCBub2RlLlxuICogQHBhcmFtIHtBcnJheTxBbmNlc3Rvcj59IGFuY2VzdG9yc1xuICogICBBbmNlc3RvcnMgb2YgYG5vZGVgLlxuICogQHJldHVybnMge1Zpc2l0b3JSZXN1bHR9XG4gKiAgIFdoYXQgdG8gZG8gbmV4dC5cbiAqXG4gKiAgIEFuIGBJbmRleGAgaXMgdHJlYXRlZCBhcyBhIHR1cGxlIG9mIGBbQ09OVElOVUUsIEluZGV4XWAuXG4gKiAgIEFuIGBBY3Rpb25gIGlzIHRyZWF0ZWQgYXMgYSB0dXBsZSBvZiBgW0FjdGlvbl1gLlxuICpcbiAqICAgUGFzc2luZyBhIHR1cGxlIGJhY2sgb25seSBtYWtlcyBzZW5zZSBpZiB0aGUgYEFjdGlvbmAgaXMgYFNLSVBgLlxuICogICBXaGVuIHRoZSBgQWN0aW9uYCBpcyBgRVhJVGAsIHRoYXQgYWN0aW9uIGNhbiBiZSByZXR1cm5lZC5cbiAqICAgV2hlbiB0aGUgYEFjdGlvbmAgaXMgYENPTlRJTlVFYCwgYEluZGV4YCBjYW4gYmUgcmV0dXJuZWQuXG4gKi9cblxuLyoqXG4gKiBAdGVtcGxhdGUge05vZGV9IFtUcmVlPU5vZGVdXG4gKiAgIFRyZWUgdHlwZS5cbiAqIEB0ZW1wbGF0ZSB7VGVzdH0gW0NoZWNrPXN0cmluZ11cbiAqICAgVGVzdCB0eXBlLlxuICogQHR5cGVkZWYge1Zpc2l0b3I8aW1wb3J0KCcuL2NvbXBsZXgtdHlwZXMuanMnKS5NYXRjaGVzPGltcG9ydCgnLi9jb21wbGV4LXR5cGVzLmpzJykuSW5jbHVzaXZlRGVzY2VuZGFudDxUcmVlPiwgQ2hlY2s+LCBFeHRyYWN0PGltcG9ydCgnLi9jb21wbGV4LXR5cGVzLmpzJykuSW5jbHVzaXZlRGVzY2VuZGFudDxUcmVlPiwgUGFyZW50Pj59IEJ1aWxkVmlzaXRvclxuICogICBCdWlsZCBhIHR5cGVkIGBWaXNpdG9yYCBmdW5jdGlvbiBmcm9tIGEgdHJlZSBhbmQgYSB0ZXN0LlxuICpcbiAqICAgSXQgd2lsbCBpbmZlciB3aGljaCB2YWx1ZXMgYXJlIHBhc3NlZCBhcyBgbm9kZWAgYW5kIHdoaWNoIGFzIGBwYXJlbnRzYC5cbiAqL1xuXG5pbXBvcnQge2NvbnZlcnR9IGZyb20gJ3VuaXN0LXV0aWwtaXMnXG5pbXBvcnQge2NvbG9yfSBmcm9tICcuL2NvbG9yLmpzJ1xuXG4vKipcbiAqIENvbnRpbnVlIHRyYXZlcnNpbmcgYXMgbm9ybWFsLlxuICovXG5leHBvcnQgY29uc3QgQ09OVElOVUUgPSB0cnVlXG5cbi8qKlxuICogU3RvcCB0cmF2ZXJzaW5nIGltbWVkaWF0ZWx5LlxuICovXG5leHBvcnQgY29uc3QgRVhJVCA9IGZhbHNlXG5cbi8qKlxuICogRG8gbm90IHRyYXZlcnNlIHRoaXMgbm9kZeKAmXMgY2hpbGRyZW4uXG4gKi9cbmV4cG9ydCBjb25zdCBTS0lQID0gJ3NraXAnXG5cbi8qKlxuICogVmlzaXQgbm9kZXMsIHdpdGggYW5jZXN0cmFsIGluZm9ybWF0aW9uLlxuICpcbiAqIFRoaXMgYWxnb3JpdGhtIHBlcmZvcm1zICpkZXB0aC1maXJzdCogKnRyZWUgdHJhdmVyc2FsKiBpbiAqcHJlb3JkZXIqXG4gKiAoKipOTFIqKikgb3IgaWYgYHJldmVyc2VgIGlzIGdpdmVuLCBpbiAqcmV2ZXJzZSBwcmVvcmRlciogKCoqTlJMKiopLlxuICpcbiAqIFlvdSBjYW4gY2hvb3NlIGZvciB3aGljaCBub2RlcyBgdmlzaXRvcmAgaXMgY2FsbGVkIGJ5IHBhc3NpbmcgYSBgdGVzdGAuXG4gKiBGb3IgY29tcGxleCB0ZXN0cywgeW91IHNob3VsZCB0ZXN0IHlvdXJzZWxmIGluIGB2aXNpdG9yYCwgYXMgaXQgd2lsbCBiZVxuICogZmFzdGVyIGFuZCB3aWxsIGhhdmUgaW1wcm92ZWQgdHlwZSBpbmZvcm1hdGlvbi5cbiAqXG4gKiBXYWxraW5nIHRoZSB0cmVlIGlzIGFuIGludGVuc2l2ZSB0YXNrLlxuICogTWFrZSB1c2Ugb2YgdGhlIHJldHVybiB2YWx1ZXMgb2YgdGhlIHZpc2l0b3Igd2hlbiBwb3NzaWJsZS5cbiAqIEluc3RlYWQgb2Ygd2Fsa2luZyBhIHRyZWUgbXVsdGlwbGUgdGltZXMsIHdhbGsgaXQgb25jZSwgdXNlIGB1bmlzdC11dGlsLWlzYFxuICogdG8gY2hlY2sgaWYgYSBub2RlIG1hdGNoZXMsIGFuZCB0aGVuIHBlcmZvcm0gZGlmZmVyZW50IG9wZXJhdGlvbnMuXG4gKlxuICogWW91IGNhbiBjaGFuZ2UgdGhlIHRyZWUuXG4gKiBTZWUgYFZpc2l0b3JgIGZvciBtb3JlIGluZm8uXG4gKlxuICogQHBhcmFtIHRyZWVcbiAqICAgVHJlZSB0byB0cmF2ZXJzZS5cbiAqIEBwYXJhbSB0ZXN0XG4gKiAgIGB1bmlzdC11dGlsLWlzYC1jb21wYXRpYmxlIHRlc3RcbiAqIEBwYXJhbSB2aXNpdG9yXG4gKiAgIEhhbmRsZSBlYWNoIG5vZGUuXG4gKiBAcGFyYW0gcmV2ZXJzZVxuICogICBUcmF2ZXJzZSBpbiByZXZlcnNlIHByZW9yZGVyIChOUkwpIGluc3RlYWQgb2YgdGhlIGRlZmF1bHQgcHJlb3JkZXIgKE5MUikuXG4gKiBAcmV0dXJuc1xuICogICBOb3RoaW5nLlxuICovXG5leHBvcnQgY29uc3QgdmlzaXRQYXJlbnRzID1cbiAgLyoqXG4gICAqIEB0eXBlIHsoXG4gICAqICAgKDxUcmVlIGV4dGVuZHMgTm9kZSwgQ2hlY2sgZXh0ZW5kcyBUZXN0Pih0cmVlOiBUcmVlLCB0ZXN0OiBDaGVjaywgdmlzaXRvcjogQnVpbGRWaXNpdG9yPFRyZWUsIENoZWNrPiwgcmV2ZXJzZT86IGJvb2xlYW4gfCBudWxsIHwgdW5kZWZpbmVkKSA9PiB2b2lkKSAmXG4gICAqICAgKDxUcmVlIGV4dGVuZHMgTm9kZT4odHJlZTogVHJlZSwgdmlzaXRvcjogQnVpbGRWaXNpdG9yPFRyZWU+LCByZXZlcnNlPzogYm9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWQpID0+IHZvaWQpXG4gICAqICl9XG4gICAqL1xuICAoXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtOb2RlfSB0cmVlXG4gICAgICogQHBhcmFtIHtUZXN0fSB0ZXN0XG4gICAgICogQHBhcmFtIHtWaXNpdG9yPE5vZGU+fSB2aXNpdG9yXG4gICAgICogQHBhcmFtIHtib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZH0gW3JldmVyc2VdXG4gICAgICogQHJldHVybnMge3ZvaWR9XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHRyZWUsIHRlc3QsIHZpc2l0b3IsIHJldmVyc2UpIHtcbiAgICAgIGlmICh0eXBlb2YgdGVzdCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmlzaXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXZlcnNlID0gdmlzaXRvclxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIG5vIHZpc2l0b3IgZ2l2ZW4sIHNvIGB2aXNpdG9yYCBpcyB0ZXN0LlxuICAgICAgICB2aXNpdG9yID0gdGVzdFxuICAgICAgICB0ZXN0ID0gbnVsbFxuICAgICAgfVxuXG4gICAgICBjb25zdCBpcyA9IGNvbnZlcnQodGVzdClcbiAgICAgIGNvbnN0IHN0ZXAgPSByZXZlcnNlID8gLTEgOiAxXG5cbiAgICAgIGZhY3RvcnkodHJlZSwgdW5kZWZpbmVkLCBbXSkoKVxuXG4gICAgICAvKipcbiAgICAgICAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICAgICAgICogQHBhcmFtIHtudW1iZXIgfCB1bmRlZmluZWR9IGluZGV4XG4gICAgICAgKiBAcGFyYW0ge0FycmF5PFBhcmVudD59IHBhcmVudHNcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gZmFjdG9yeShub2RlLCBpbmRleCwgcGFyZW50cykge1xuICAgICAgICAvKiogQHR5cGUge1JlY29yZDxzdHJpbmcsIHVua25vd24+fSAqL1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBodXNoXG4gICAgICAgIGNvbnN0IHZhbHVlID0gbm9kZSAmJiB0eXBlb2Ygbm9kZSA9PT0gJ29iamVjdCcgPyBub2RlIDoge31cblxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlLnR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgY29uc3QgbmFtZSA9XG4gICAgICAgICAgICAvLyBgaGFzdGBcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZS50YWdOYW1lID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICA/IHZhbHVlLnRhZ05hbWVcbiAgICAgICAgICAgICAgOiAvLyBgeGFzdGBcbiAgICAgICAgICAgICAgdHlwZW9mIHZhbHVlLm5hbWUgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgID8gdmFsdWUubmFtZVxuICAgICAgICAgICAgICA6IHVuZGVmaW5lZFxuXG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHZpc2l0LCAnbmFtZScsIHtcbiAgICAgICAgICAgIHZhbHVlOlxuICAgICAgICAgICAgICAnbm9kZSAoJyArIGNvbG9yKG5vZGUudHlwZSArIChuYW1lID8gJzwnICsgbmFtZSArICc+JyA6ICcnKSkgKyAnKSdcbiAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZpc2l0XG5cbiAgICAgICAgZnVuY3Rpb24gdmlzaXQoKSB7XG4gICAgICAgICAgLyoqIEB0eXBlIHtBY3Rpb25UdXBsZX0gKi9cbiAgICAgICAgICBsZXQgcmVzdWx0ID0gW11cbiAgICAgICAgICAvKiogQHR5cGUge0FjdGlvblR1cGxlfSAqL1xuICAgICAgICAgIGxldCBzdWJyZXN1bHRcbiAgICAgICAgICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgICAgICAgICBsZXQgb2Zmc2V0XG4gICAgICAgICAgLyoqIEB0eXBlIHtBcnJheTxQYXJlbnQ+fSAqL1xuICAgICAgICAgIGxldCBncmFuZHBhcmVudHNcblxuICAgICAgICAgIGlmICghdGVzdCB8fCBpcyhub2RlLCBpbmRleCwgcGFyZW50c1twYXJlbnRzLmxlbmd0aCAtIDFdIHx8IG51bGwpKSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0b1Jlc3VsdCh2aXNpdG9yKG5vZGUsIHBhcmVudHMpKVxuXG4gICAgICAgICAgICBpZiAocmVzdWx0WzBdID09PSBFWElUKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGxvb2tzIGxpa2UgYSBwYXJlbnQuXG4gICAgICAgICAgaWYgKG5vZGUuY2hpbGRyZW4gJiYgcmVzdWx0WzBdICE9PSBTS0lQKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGxvb2tzIGxpa2UgYSBwYXJlbnQuXG4gICAgICAgICAgICBvZmZzZXQgPSAocmV2ZXJzZSA/IG5vZGUuY2hpbGRyZW4ubGVuZ3RoIDogLTEpICsgc3RlcFxuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBsb29rcyBsaWtlIGEgcGFyZW50LlxuICAgICAgICAgICAgZ3JhbmRwYXJlbnRzID0gcGFyZW50cy5jb25jYXQobm9kZSlcblxuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBsb29rcyBsaWtlIGEgcGFyZW50LlxuICAgICAgICAgICAgd2hpbGUgKG9mZnNldCA+IC0xICYmIG9mZnNldCA8IG5vZGUuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgbG9va3MgbGlrZSBhIHBhcmVudC5cbiAgICAgICAgICAgICAgc3VicmVzdWx0ID0gZmFjdG9yeShub2RlLmNoaWxkcmVuW29mZnNldF0sIG9mZnNldCwgZ3JhbmRwYXJlbnRzKSgpXG5cbiAgICAgICAgICAgICAgaWYgKHN1YnJlc3VsdFswXSA9PT0gRVhJVCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdWJyZXN1bHRcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIG9mZnNldCA9XG4gICAgICAgICAgICAgICAgdHlwZW9mIHN1YnJlc3VsdFsxXSA9PT0gJ251bWJlcicgPyBzdWJyZXN1bHRbMV0gOiBvZmZzZXQgKyBzdGVwXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICApXG5cbi8qKlxuICogVHVybiBhIHJldHVybiB2YWx1ZSBpbnRvIGEgY2xlYW4gcmVzdWx0LlxuICpcbiAqIEBwYXJhbSB7VmlzaXRvclJlc3VsdH0gdmFsdWVcbiAqICAgVmFsaWQgcmV0dXJuIHZhbHVlcyBmcm9tIHZpc2l0b3JzLlxuICogQHJldHVybnMge0FjdGlvblR1cGxlfVxuICogICBDbGVhbiByZXN1bHQuXG4gKi9cbmZ1bmN0aW9uIHRvUmVzdWx0KHZhbHVlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gW0NPTlRJTlVFLCB2YWx1ZV1cbiAgfVxuXG4gIHJldHVybiBbdmFsdWVdXG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaXN0JykuTm9kZX0gTm9kZVxuICogQHR5cGVkZWYge2ltcG9ydCgndW5pc3QnKS5QYXJlbnR9IFBhcmVudFxuICogQHR5cGVkZWYge2ltcG9ydCgndW5pc3QtdXRpbC1pcycpLlRlc3R9IFRlc3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaXN0LXV0aWwtdmlzaXQtcGFyZW50cycpLlZpc2l0b3JSZXN1bHR9IFZpc2l0b3JSZXN1bHRcbiAqL1xuXG4vKipcbiAqIENoZWNrIGlmIGBDaGlsZGAgY2FuIGJlIGEgY2hpbGQgb2YgYEFuY2VzdG9yYC5cbiAqXG4gKiBSZXR1cm5zIHRoZSBhbmNlc3RvciB3aGVuIGBDaGlsZGAgY2FuIGJlIGEgY2hpbGQgb2YgYEFuY2VzdG9yYCwgb3IgcmV0dXJuc1xuICogYG5ldmVyYC5cbiAqXG4gKiBAdGVtcGxhdGUge05vZGV9IEFuY2VzdG9yXG4gKiAgIE5vZGUgdHlwZS5cbiAqIEB0ZW1wbGF0ZSB7Tm9kZX0gQ2hpbGRcbiAqICAgTm9kZSB0eXBlLlxuICogQHR5cGVkZWYgeyhcbiAqICAgQW5jZXN0b3IgZXh0ZW5kcyBQYXJlbnRcbiAqICAgICA/IENoaWxkIGV4dGVuZHMgQW5jZXN0b3JbJ2NoaWxkcmVuJ11bbnVtYmVyXVxuICogICAgICAgPyBBbmNlc3RvclxuICogICAgICAgOiBuZXZlclxuICogICAgIDogbmV2ZXJcbiAqICl9IFBhcmVudHNPZlxuICovXG5cbi8qKlxuICogQHRlbXBsYXRlIHtOb2RlfSBbVmlzaXRlZD1Ob2RlXVxuICogICBWaXNpdGVkIG5vZGUgdHlwZS5cbiAqIEB0ZW1wbGF0ZSB7UGFyZW50fSBbQW5jZXN0b3I9UGFyZW50XVxuICogICBBbmNlc3RvciB0eXBlLlxuICogQGNhbGxiYWNrIFZpc2l0b3JcbiAqICAgSGFuZGxlIGEgbm9kZSAobWF0Y2hpbmcgYHRlc3RgLCBpZiBnaXZlbikuXG4gKlxuICogICBWaXNpdG9ycyBhcmUgZnJlZSB0byB0cmFuc2Zvcm0gYG5vZGVgLlxuICogICBUaGV5IGNhbiBhbHNvIHRyYW5zZm9ybSBgcGFyZW50YC5cbiAqXG4gKiAgIFJlcGxhY2luZyBgbm9kZWAgaXRzZWxmLCBpZiBgU0tJUGAgaXMgbm90IHJldHVybmVkLCBzdGlsbCBjYXVzZXMgaXRzXG4gKiAgIGRlc2NlbmRhbnRzIHRvIGJlIHdhbGtlZCAod2hpY2ggaXMgYSBidWcpLlxuICpcbiAqICAgV2hlbiBhZGRpbmcgb3IgcmVtb3ZpbmcgcHJldmlvdXMgc2libGluZ3Mgb2YgYG5vZGVgIChvciBuZXh0IHNpYmxpbmdzLCBpblxuICogICBjYXNlIG9mIHJldmVyc2UpLCB0aGUgYFZpc2l0b3JgIHNob3VsZCByZXR1cm4gYSBuZXcgYEluZGV4YCB0byBzcGVjaWZ5IHRoZVxuICogICBzaWJsaW5nIHRvIHRyYXZlcnNlIGFmdGVyIGBub2RlYCBpcyB0cmF2ZXJzZWQuXG4gKiAgIEFkZGluZyBvciByZW1vdmluZyBuZXh0IHNpYmxpbmdzIG9mIGBub2RlYCAob3IgcHJldmlvdXMgc2libGluZ3MsIGluIGNhc2VcbiAqICAgb2YgcmV2ZXJzZSkgaXMgaGFuZGxlZCBhcyBleHBlY3RlZCB3aXRob3V0IG5lZWRpbmcgdG8gcmV0dXJuIGEgbmV3IGBJbmRleGAuXG4gKlxuICogICBSZW1vdmluZyB0aGUgY2hpbGRyZW4gcHJvcGVydHkgb2YgYHBhcmVudGAgc3RpbGwgcmVzdWx0cyBpbiB0aGVtIGJlaW5nXG4gKiAgIHRyYXZlcnNlZC5cbiAqIEBwYXJhbSB7VmlzaXRlZH0gbm9kZVxuICogICBGb3VuZCBub2RlLlxuICogQHBhcmFtIHtWaXNpdGVkIGV4dGVuZHMgTm9kZSA/IG51bWJlciB8IG51bGwgOiBuZXZlcn0gaW5kZXhcbiAqICAgSW5kZXggb2YgYG5vZGVgIGluIGBwYXJlbnRgLlxuICogQHBhcmFtIHtBbmNlc3RvciBleHRlbmRzIE5vZGUgPyBBbmNlc3RvciB8IG51bGwgOiBuZXZlcn0gcGFyZW50XG4gKiAgIFBhcmVudCBvZiBgbm9kZWAuXG4gKiBAcmV0dXJucyB7VmlzaXRvclJlc3VsdH1cbiAqICAgV2hhdCB0byBkbyBuZXh0LlxuICpcbiAqICAgQW4gYEluZGV4YCBpcyB0cmVhdGVkIGFzIGEgdHVwbGUgb2YgYFtDT05USU5VRSwgSW5kZXhdYC5cbiAqICAgQW4gYEFjdGlvbmAgaXMgdHJlYXRlZCBhcyBhIHR1cGxlIG9mIGBbQWN0aW9uXWAuXG4gKlxuICogICBQYXNzaW5nIGEgdHVwbGUgYmFjayBvbmx5IG1ha2VzIHNlbnNlIGlmIHRoZSBgQWN0aW9uYCBpcyBgU0tJUGAuXG4gKiAgIFdoZW4gdGhlIGBBY3Rpb25gIGlzIGBFWElUYCwgdGhhdCBhY3Rpb24gY2FuIGJlIHJldHVybmVkLlxuICogICBXaGVuIHRoZSBgQWN0aW9uYCBpcyBgQ09OVElOVUVgLCBgSW5kZXhgIGNhbiBiZSByZXR1cm5lZC5cbiAqL1xuXG4vKipcbiAqIEJ1aWxkIGEgdHlwZWQgYFZpc2l0b3JgIGZ1bmN0aW9uIGZyb20gYSBub2RlIGFuZCBhbGwgcG9zc2libGUgcGFyZW50cy5cbiAqXG4gKiBJdCB3aWxsIGluZmVyIHdoaWNoIHZhbHVlcyBhcmUgcGFzc2VkIGFzIGBub2RlYCBhbmQgd2hpY2ggYXMgYHBhcmVudGAuXG4gKlxuICogQHRlbXBsYXRlIHtOb2RlfSBWaXNpdGVkXG4gKiAgIE5vZGUgdHlwZS5cbiAqIEB0ZW1wbGF0ZSB7UGFyZW50fSBBbmNlc3RvclxuICogICBQYXJlbnQgdHlwZS5cbiAqIEB0eXBlZGVmIHtWaXNpdG9yPFZpc2l0ZWQsIFBhcmVudHNPZjxBbmNlc3RvciwgVmlzaXRlZD4+fSBCdWlsZFZpc2l0b3JGcm9tTWF0Y2hcbiAqL1xuXG4vKipcbiAqIEJ1aWxkIGEgdHlwZWQgYFZpc2l0b3JgIGZ1bmN0aW9uIGZyb20gYSBsaXN0IG9mIGRlc2NlbmRhbnRzIGFuZCBhIHRlc3QuXG4gKlxuICogSXQgd2lsbCBpbmZlciB3aGljaCB2YWx1ZXMgYXJlIHBhc3NlZCBhcyBgbm9kZWAgYW5kIHdoaWNoIGFzIGBwYXJlbnRgLlxuICpcbiAqIEB0ZW1wbGF0ZSB7Tm9kZX0gRGVzY2VuZGFudFxuICogICBOb2RlIHR5cGUuXG4gKiBAdGVtcGxhdGUge1Rlc3R9IENoZWNrXG4gKiAgIFRlc3QgdHlwZS5cbiAqIEB0eXBlZGVmIHsoXG4gKiAgIEJ1aWxkVmlzaXRvckZyb21NYXRjaDxcbiAqICAgICBpbXBvcnQoJ3VuaXN0LXV0aWwtdmlzaXQtcGFyZW50cy9jb21wbGV4LXR5cGVzLmpzJykuTWF0Y2hlczxEZXNjZW5kYW50LCBDaGVjaz4sXG4gKiAgICAgRXh0cmFjdDxEZXNjZW5kYW50LCBQYXJlbnQ+XG4gKiAgID5cbiAqICl9IEJ1aWxkVmlzaXRvckZyb21EZXNjZW5kYW50c1xuICovXG5cbi8qKlxuICogQnVpbGQgYSB0eXBlZCBgVmlzaXRvcmAgZnVuY3Rpb24gZnJvbSBhIHRyZWUgYW5kIGEgdGVzdC5cbiAqXG4gKiBJdCB3aWxsIGluZmVyIHdoaWNoIHZhbHVlcyBhcmUgcGFzc2VkIGFzIGBub2RlYCBhbmQgd2hpY2ggYXMgYHBhcmVudGAuXG4gKlxuICogQHRlbXBsYXRlIHtOb2RlfSBbVHJlZT1Ob2RlXVxuICogICBOb2RlIHR5cGUuXG4gKiBAdGVtcGxhdGUge1Rlc3R9IFtDaGVjaz1zdHJpbmddXG4gKiAgIFRlc3QgdHlwZS5cbiAqIEB0eXBlZGVmIHsoXG4gKiAgIEJ1aWxkVmlzaXRvckZyb21EZXNjZW5kYW50czxcbiAqICAgICBpbXBvcnQoJ3VuaXN0LXV0aWwtdmlzaXQtcGFyZW50cy9jb21wbGV4LXR5cGVzLmpzJykuSW5jbHVzaXZlRGVzY2VuZGFudDxUcmVlPixcbiAqICAgICBDaGVja1xuICogICA+XG4gKiApfSBCdWlsZFZpc2l0b3JcbiAqL1xuXG5pbXBvcnQge3Zpc2l0UGFyZW50c30gZnJvbSAndW5pc3QtdXRpbC12aXNpdC1wYXJlbnRzJ1xuXG4vKipcbiAqIFZpc2l0IG5vZGVzLlxuICpcbiAqIFRoaXMgYWxnb3JpdGhtIHBlcmZvcm1zICpkZXB0aC1maXJzdCogKnRyZWUgdHJhdmVyc2FsKiBpbiAqcHJlb3JkZXIqXG4gKiAoKipOTFIqKikgb3IgaWYgYHJldmVyc2VgIGlzIGdpdmVuLCBpbiAqcmV2ZXJzZSBwcmVvcmRlciogKCoqTlJMKiopLlxuICpcbiAqIFlvdSBjYW4gY2hvb3NlIGZvciB3aGljaCBub2RlcyBgdmlzaXRvcmAgaXMgY2FsbGVkIGJ5IHBhc3NpbmcgYSBgdGVzdGAuXG4gKiBGb3IgY29tcGxleCB0ZXN0cywgeW91IHNob3VsZCB0ZXN0IHlvdXJzZWxmIGluIGB2aXNpdG9yYCwgYXMgaXQgd2lsbCBiZVxuICogZmFzdGVyIGFuZCB3aWxsIGhhdmUgaW1wcm92ZWQgdHlwZSBpbmZvcm1hdGlvbi5cbiAqXG4gKiBXYWxraW5nIHRoZSB0cmVlIGlzIGFuIGludGVuc2l2ZSB0YXNrLlxuICogTWFrZSB1c2Ugb2YgdGhlIHJldHVybiB2YWx1ZXMgb2YgdGhlIHZpc2l0b3Igd2hlbiBwb3NzaWJsZS5cbiAqIEluc3RlYWQgb2Ygd2Fsa2luZyBhIHRyZWUgbXVsdGlwbGUgdGltZXMsIHdhbGsgaXQgb25jZSwgdXNlIGB1bmlzdC11dGlsLWlzYFxuICogdG8gY2hlY2sgaWYgYSBub2RlIG1hdGNoZXMsIGFuZCB0aGVuIHBlcmZvcm0gZGlmZmVyZW50IG9wZXJhdGlvbnMuXG4gKlxuICogWW91IGNhbiBjaGFuZ2UgdGhlIHRyZWUuXG4gKiBTZWUgYFZpc2l0b3JgIGZvciBtb3JlIGluZm8uXG4gKlxuICogQHBhcmFtIHRyZWVcbiAqICAgVHJlZSB0byB0cmF2ZXJzZS5cbiAqIEBwYXJhbSB0ZXN0XG4gKiAgIGB1bmlzdC11dGlsLWlzYC1jb21wYXRpYmxlIHRlc3RcbiAqIEBwYXJhbSB2aXNpdG9yXG4gKiAgIEhhbmRsZSBlYWNoIG5vZGUuXG4gKiBAcGFyYW0gcmV2ZXJzZVxuICogICBUcmF2ZXJzZSBpbiByZXZlcnNlIHByZW9yZGVyIChOUkwpIGluc3RlYWQgb2YgdGhlIGRlZmF1bHQgcHJlb3JkZXIgKE5MUikuXG4gKiBAcmV0dXJuc1xuICogICBOb3RoaW5nLlxuICovXG5leHBvcnQgY29uc3QgdmlzaXQgPVxuICAvKipcbiAgICogQHR5cGUgeyhcbiAgICogICAoPFRyZWUgZXh0ZW5kcyBOb2RlLCBDaGVjayBleHRlbmRzIFRlc3Q+KHRyZWU6IFRyZWUsIHRlc3Q6IENoZWNrLCB2aXNpdG9yOiBCdWlsZFZpc2l0b3I8VHJlZSwgQ2hlY2s+LCByZXZlcnNlPzogYm9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWQpID0+IHZvaWQpICZcbiAgICogICAoPFRyZWUgZXh0ZW5kcyBOb2RlPih0cmVlOiBUcmVlLCB2aXNpdG9yOiBCdWlsZFZpc2l0b3I8VHJlZT4sIHJldmVyc2U/OiBib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZCkgPT4gdm9pZClcbiAgICogKX1cbiAgICovXG4gIChcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge05vZGV9IHRyZWVcbiAgICAgKiBAcGFyYW0ge1Rlc3R9IHRlc3RcbiAgICAgKiBAcGFyYW0ge1Zpc2l0b3J9IHZpc2l0b3JcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW4gfCBudWxsIHwgdW5kZWZpbmVkfSBbcmV2ZXJzZV1cbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAodHJlZSwgdGVzdCwgdmlzaXRvciwgcmV2ZXJzZSkge1xuICAgICAgaWYgKHR5cGVvZiB0ZXN0ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2aXNpdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldmVyc2UgPSB2aXNpdG9yXG4gICAgICAgIHZpc2l0b3IgPSB0ZXN0XG4gICAgICAgIHRlc3QgPSBudWxsXG4gICAgICB9XG5cbiAgICAgIHZpc2l0UGFyZW50cyh0cmVlLCB0ZXN0LCBvdmVybG9hZCwgcmV2ZXJzZSlcblxuICAgICAgLyoqXG4gICAgICAgKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAgICAgICAqIEBwYXJhbSB7QXJyYXk8UGFyZW50Pn0gcGFyZW50c1xuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBvdmVybG9hZChub2RlLCBwYXJlbnRzKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudCA9IHBhcmVudHNbcGFyZW50cy5sZW5ndGggLSAxXVxuICAgICAgICByZXR1cm4gdmlzaXRvcihcbiAgICAgICAgICBub2RlLFxuICAgICAgICAgIHBhcmVudCA/IHBhcmVudC5jaGlsZHJlbi5pbmRleE9mKG5vZGUpIDogbnVsbCxcbiAgICAgICAgICBwYXJlbnRcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH1cbiAgKVxuXG5leHBvcnQge0NPTlRJTlVFLCBFWElULCBTS0lQfSBmcm9tICd1bmlzdC11dGlsLXZpc2l0LXBhcmVudHMnXG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaXN0JykuUG9zaXRpb259IFBvc2l0aW9uXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlzdCcpLk5vZGV9IE5vZGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaXN0JykuUG9pbnR9IFBvaW50XG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiBOb2RlTGlrZVxuICogQHByb3BlcnR5IHtzdHJpbmd9IHR5cGVcbiAqIEBwcm9wZXJ0eSB7UG9zaXRpb25MaWtlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW3Bvc2l0aW9uXVxuICpcbiAqIEB0eXBlZGVmIFBvc2l0aW9uTGlrZVxuICogQHByb3BlcnR5IHtQb2ludExpa2UgfCBudWxsIHwgdW5kZWZpbmVkfSBbc3RhcnRdXG4gKiBAcHJvcGVydHkge1BvaW50TGlrZSB8IG51bGwgfCB1bmRlZmluZWR9IFtlbmRdXG4gKlxuICogQHR5cGVkZWYgUG9pbnRMaWtlXG4gKiBAcHJvcGVydHkge251bWJlciB8IG51bGwgfCB1bmRlZmluZWR9IFtsaW5lXVxuICogQHByb3BlcnR5IHtudW1iZXIgfCBudWxsIHwgdW5kZWZpbmVkfSBbY29sdW1uXVxuICogQHByb3BlcnR5IHtudW1iZXIgfCBudWxsIHwgdW5kZWZpbmVkfSBbb2Zmc2V0XVxuICovXG5cbi8qKlxuICogR2V0IHRoZSBzdGFydGluZyBwb2ludCBvZiBgbm9kZWAuXG4gKlxuICogQHBhcmFtIG5vZGVcbiAqICAgTm9kZS5cbiAqIEByZXR1cm5zXG4gKiAgIFBvaW50LlxuICovXG5leHBvcnQgY29uc3QgcG9pbnRTdGFydCA9IHBvaW50KCdzdGFydCcpXG5cbi8qKlxuICogR2V0IHRoZSBlbmRpbmcgcG9pbnQgb2YgYG5vZGVgLlxuICpcbiAqIEBwYXJhbSBub2RlXG4gKiAgIE5vZGUuXG4gKiBAcmV0dXJuc1xuICogICBQb2ludC5cbiAqL1xuZXhwb3J0IGNvbnN0IHBvaW50RW5kID0gcG9pbnQoJ2VuZCcpXG5cbi8qKlxuICogR2V0IHRoZSBwb3NpdGlvbmFsIGluZm8gb2YgYG5vZGVgLlxuICpcbiAqIEBwYXJhbSB7Tm9kZUxpa2UgfCBOb2RlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW25vZGVdXG4gKiAgIE5vZGUuXG4gKiBAcmV0dXJucyB7UG9zaXRpb259XG4gKiAgIFBvc2l0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcG9zaXRpb24obm9kZSkge1xuICByZXR1cm4ge3N0YXJ0OiBwb2ludFN0YXJ0KG5vZGUpLCBlbmQ6IHBvaW50RW5kKG5vZGUpfVxufVxuXG4vKipcbiAqIEdldCB0aGUgcG9zaXRpb25hbCBpbmZvIG9mIGBub2RlYC5cbiAqXG4gKiBAcGFyYW0geydzdGFydCcgfCAnZW5kJ30gdHlwZVxuICogICBTaWRlLlxuICogQHJldHVybnNcbiAqICAgR2V0dGVyLlxuICovXG5mdW5jdGlvbiBwb2ludCh0eXBlKSB7XG4gIHJldHVybiBwb2ludFxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHBvaW50IGluZm8gb2YgYG5vZGVgIGF0IGEgYm91bmQgc2lkZS5cbiAgICpcbiAgICogQHBhcmFtIHtOb2RlTGlrZSB8IE5vZGUgfCBudWxsIHwgdW5kZWZpbmVkfSBbbm9kZV1cbiAgICogQHJldHVybnMge1BvaW50fVxuICAgKi9cbiAgZnVuY3Rpb24gcG9pbnQobm9kZSkge1xuICAgIGNvbnN0IHBvaW50ID0gKG5vZGUgJiYgbm9kZS5wb3NpdGlvbiAmJiBub2RlLnBvc2l0aW9uW3R5cGVdKSB8fCB7fVxuXG4gICAgLy8gVG8gZG86IG5leHQgbWFqb3I6IGRvbuKAmXQgcmV0dXJuIHBvaW50cyB3aGVuIGludmFsaWQuXG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IGluIHByYWN0aWNlLCBudWxsIGlzIGFsbG93ZWQuXG4gICAgICBsaW5lOiBwb2ludC5saW5lIHx8IG51bGwsXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBpbiBwcmFjdGljZSwgbnVsbCBpcyBhbGxvd2VkLlxuICAgICAgY29sdW1uOiBwb2ludC5jb2x1bW4gfHwgbnVsbCxcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IGluIHByYWN0aWNlLCBudWxsIGlzIGFsbG93ZWQuXG4gICAgICBvZmZzZXQ6IHBvaW50Lm9mZnNldCA+IC0xID8gcG9pbnQub2Zmc2V0IDogbnVsbFxuICAgIH1cbiAgfVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLlJvb3R9IFJvb3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuQ29udGVudH0gQ29udGVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5EZWZpbml0aW9ufSBEZWZpbml0aW9uXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7Um9vdCB8IENvbnRlbnR9IE5vZGVcbiAqXG4gKiBAY2FsbGJhY2sgR2V0RGVmaW5pdGlvblxuICogICBHZXQgYSBkZWZpbml0aW9uIGJ5IGlkZW50aWZpZXIuXG4gKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtpZGVudGlmaWVyXVxuICogICBJZGVudGlmaWVyIG9mIGRlZmluaXRpb24uXG4gKiBAcmV0dXJucyB7RGVmaW5pdGlvbiB8IG51bGx9XG4gKiAgIERlZmluaXRpb24gY29ycmVzcG9uZGluZyB0byBgaWRlbnRpZmllcmAgb3IgYG51bGxgLlxuICovXG5cbmltcG9ydCB7dmlzaXR9IGZyb20gJ3VuaXN0LXV0aWwtdmlzaXQnXG5cbmNvbnN0IG93biA9IHt9Lmhhc093blByb3BlcnR5XG5cbi8qKlxuICogRmluZCBkZWZpbml0aW9ucyBpbiBgdHJlZWAuXG4gKlxuICogVXNlcyBDb21tb25NYXJrIHByZWNlZGVuY2UsIHdoaWNoIG1lYW5zIHRoYXQgZWFybGllciBkZWZpbml0aW9ucyBhcmVcbiAqIHByZWZlcnJlZCBvdmVyIGR1cGxpY2F0ZSBsYXRlciBkZWZpbml0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge05vZGV9IHRyZWVcbiAqICAgVHJlZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtHZXREZWZpbml0aW9ufVxuICogICBHZXR0ZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWZpbml0aW9ucyh0cmVlKSB7XG4gIC8qKiBAdHlwZSB7UmVjb3JkPHN0cmluZywgRGVmaW5pdGlvbj59ICovXG4gIGNvbnN0IGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuXG4gIGlmICghdHJlZSB8fCAhdHJlZS50eXBlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdtZGFzdC11dGlsLWRlZmluaXRpb25zIGV4cGVjdGVkIG5vZGUnKVxuICB9XG5cbiAgdmlzaXQodHJlZSwgJ2RlZmluaXRpb24nLCAoZGVmaW5pdGlvbikgPT4ge1xuICAgIGNvbnN0IGlkID0gY2xlYW4oZGVmaW5pdGlvbi5pZGVudGlmaWVyKVxuICAgIGlmIChpZCAmJiAhb3duLmNhbGwoY2FjaGUsIGlkKSkge1xuICAgICAgY2FjaGVbaWRdID0gZGVmaW5pdGlvblxuICAgIH1cbiAgfSlcblxuICByZXR1cm4gZGVmaW5pdGlvblxuXG4gIC8qKiBAdHlwZSB7R2V0RGVmaW5pdGlvbn0gKi9cbiAgZnVuY3Rpb24gZGVmaW5pdGlvbihpZGVudGlmaWVyKSB7XG4gICAgY29uc3QgaWQgPSBjbGVhbihpZGVudGlmaWVyKVxuICAgIC8vIFRvIGRvOiBuZXh0IG1ham9yOiByZXR1cm4gYHVuZGVmaW5lZGAgd2hlbiBub3QgZm91bmQuXG4gICAgcmV0dXJuIGlkICYmIG93bi5jYWxsKGNhY2hlLCBpZCkgPyBjYWNoZVtpZF0gOiBudWxsXG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFt2YWx1ZV1cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGNsZWFuKHZhbHVlKSB7XG4gIHJldHVybiBTdHJpbmcodmFsdWUgfHwgJycpLnRvVXBwZXJDYXNlKClcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5Gb290bm90ZVJlZmVyZW5jZX0gRm9vdG5vdGVSZWZlcmVuY2VcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50fSBFbGVtZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9zdGF0ZS5qcycpLlN0YXRlfSBTdGF0ZVxuICovXG5cbmltcG9ydCB7bm9ybWFsaXplVXJpfSBmcm9tICdtaWNyb21hcmstdXRpbC1zYW5pdGl6ZS11cmknXG5cbi8qKlxuICogVHVybiBhbiBtZGFzdCBgZm9vdG5vdGVSZWZlcmVuY2VgIG5vZGUgaW50byBoYXN0LlxuICpcbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiAgIEluZm8gcGFzc2VkIGFyb3VuZC5cbiAqIEBwYXJhbSB7Rm9vdG5vdGVSZWZlcmVuY2V9IG5vZGVcbiAqICAgbWRhc3Qgbm9kZS5cbiAqIEByZXR1cm5zIHtFbGVtZW50fVxuICogICBoYXN0IG5vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmb290bm90ZVJlZmVyZW5jZShzdGF0ZSwgbm9kZSkge1xuICBjb25zdCBpZCA9IFN0cmluZyhub2RlLmlkZW50aWZpZXIpLnRvVXBwZXJDYXNlKClcbiAgY29uc3Qgc2FmZUlkID0gbm9ybWFsaXplVXJpKGlkLnRvTG93ZXJDYXNlKCkpXG4gIGNvbnN0IGluZGV4ID0gc3RhdGUuZm9vdG5vdGVPcmRlci5pbmRleE9mKGlkKVxuICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgbGV0IGNvdW50ZXJcblxuICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgc3RhdGUuZm9vdG5vdGVPcmRlci5wdXNoKGlkKVxuICAgIHN0YXRlLmZvb3Rub3RlQ291bnRzW2lkXSA9IDFcbiAgICBjb3VudGVyID0gc3RhdGUuZm9vdG5vdGVPcmRlci5sZW5ndGhcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5mb290bm90ZUNvdW50c1tpZF0rK1xuICAgIGNvdW50ZXIgPSBpbmRleCArIDFcbiAgfVxuXG4gIGNvbnN0IHJldXNlQ291bnRlciA9IHN0YXRlLmZvb3Rub3RlQ291bnRzW2lkXVxuXG4gIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgY29uc3QgbGluayA9IHtcbiAgICB0eXBlOiAnZWxlbWVudCcsXG4gICAgdGFnTmFtZTogJ2EnLFxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgIGhyZWY6ICcjJyArIHN0YXRlLmNsb2JiZXJQcmVmaXggKyAnZm4tJyArIHNhZmVJZCxcbiAgICAgIGlkOlxuICAgICAgICBzdGF0ZS5jbG9iYmVyUHJlZml4ICtcbiAgICAgICAgJ2ZucmVmLScgK1xuICAgICAgICBzYWZlSWQgK1xuICAgICAgICAocmV1c2VDb3VudGVyID4gMSA/ICctJyArIHJldXNlQ291bnRlciA6ICcnKSxcbiAgICAgIGRhdGFGb290bm90ZVJlZjogdHJ1ZSxcbiAgICAgIGFyaWFEZXNjcmliZWRCeTogWydmb290bm90ZS1sYWJlbCddXG4gICAgfSxcbiAgICBjaGlsZHJlbjogW3t0eXBlOiAndGV4dCcsIHZhbHVlOiBTdHJpbmcoY291bnRlcil9XVxuICB9XG4gIHN0YXRlLnBhdGNoKG5vZGUsIGxpbmspXG5cbiAgLyoqIEB0eXBlIHtFbGVtZW50fSAqL1xuICBjb25zdCBzdXAgPSB7XG4gICAgdHlwZTogJ2VsZW1lbnQnLFxuICAgIHRhZ05hbWU6ICdzdXAnLFxuICAgIHByb3BlcnRpZXM6IHt9LFxuICAgIGNoaWxkcmVuOiBbbGlua11cbiAgfVxuICBzdGF0ZS5wYXRjaChub2RlLCBzdXApXG4gIHJldHVybiBzdGF0ZS5hcHBseURhdGEobm9kZSwgc3VwKVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRWxlbWVudENvbnRlbnR9IEVsZW1lbnRDb250ZW50XG4gKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5Db250ZW50fSBDb250ZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLlJlZmVyZW5jZX0gUmVmZXJlbmNlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLlJvb3R9IFJvb3RcbiAqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL3N0YXRlLmpzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7Um9vdCB8IENvbnRlbnR9IE5vZGVzXG4gKiBAdHlwZWRlZiB7RXh0cmFjdDxOb2RlcywgUmVmZXJlbmNlPn0gUmVmZXJlbmNlc1xuICovXG5cbi8vIFRvIGRvOiBuZXh0IG1ham9yOiBhbHdheXMgcmV0dXJuIGFycmF5LlxuXG4vKipcbiAqIFJldHVybiB0aGUgY29udGVudCBvZiBhIHJlZmVyZW5jZSB3aXRob3V0IGRlZmluaXRpb24gYXMgcGxhaW4gdGV4dC5cbiAqXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQuXG4gKiBAcGFyYW0ge1JlZmVyZW5jZXN9IG5vZGVcbiAqICAgUmVmZXJlbmNlIG5vZGUgKGltYWdlLCBsaW5rKS5cbiAqIEByZXR1cm5zIHtFbGVtZW50Q29udGVudCB8IEFycmF5PEVsZW1lbnRDb250ZW50Pn1cbiAqICAgaGFzdCBjb250ZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmV2ZXJ0KHN0YXRlLCBub2RlKSB7XG4gIGNvbnN0IHN1YnR5cGUgPSBub2RlLnJlZmVyZW5jZVR5cGVcbiAgbGV0IHN1ZmZpeCA9ICddJ1xuXG4gIGlmIChzdWJ0eXBlID09PSAnY29sbGFwc2VkJykge1xuICAgIHN1ZmZpeCArPSAnW10nXG4gIH0gZWxzZSBpZiAoc3VidHlwZSA9PT0gJ2Z1bGwnKSB7XG4gICAgc3VmZml4ICs9ICdbJyArIChub2RlLmxhYmVsIHx8IG5vZGUuaWRlbnRpZmllcikgKyAnXSdcbiAgfVxuXG4gIGlmIChub2RlLnR5cGUgPT09ICdpbWFnZVJlZmVyZW5jZScpIHtcbiAgICByZXR1cm4ge3R5cGU6ICd0ZXh0JywgdmFsdWU6ICchWycgKyBub2RlLmFsdCArIHN1ZmZpeH1cbiAgfVxuXG4gIGNvbnN0IGNvbnRlbnRzID0gc3RhdGUuYWxsKG5vZGUpXG4gIGNvbnN0IGhlYWQgPSBjb250ZW50c1swXVxuXG4gIGlmIChoZWFkICYmIGhlYWQudHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgaGVhZC52YWx1ZSA9ICdbJyArIGhlYWQudmFsdWVcbiAgfSBlbHNlIHtcbiAgICBjb250ZW50cy51bnNoaWZ0KHt0eXBlOiAndGV4dCcsIHZhbHVlOiAnWyd9KVxuICB9XG5cbiAgY29uc3QgdGFpbCA9IGNvbnRlbnRzW2NvbnRlbnRzLmxlbmd0aCAtIDFdXG5cbiAgaWYgKHRhaWwgJiYgdGFpbC50eXBlID09PSAndGV4dCcpIHtcbiAgICB0YWlsLnZhbHVlICs9IHN1ZmZpeFxuICB9IGVsc2Uge1xuICAgIGNvbnRlbnRzLnB1c2goe3R5cGU6ICd0ZXh0JywgdmFsdWU6IHN1ZmZpeH0pXG4gIH1cblxuICByZXR1cm4gY29udGVudHNcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnR9IEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50Q29udGVudH0gRWxlbWVudENvbnRlbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5Qcm9wZXJ0aWVzfSBQcm9wZXJ0aWVzXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkNvbnRlbnR9IENvbnRlbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuTGlzdEl0ZW19IExpc3RJdGVtXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLlBhcmVudH0gUGFyZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLlJvb3R9IFJvb3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3N0YXRlLmpzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7Um9vdCB8IENvbnRlbnR9IE5vZGVzXG4gKiBAdHlwZWRlZiB7RXh0cmFjdDxOb2RlcywgUGFyZW50Pn0gUGFyZW50c1xuICovXG5cbi8qKlxuICogVHVybiBhbiBtZGFzdCBgbGlzdEl0ZW1gIG5vZGUgaW50byBoYXN0LlxuICpcbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiAgIEluZm8gcGFzc2VkIGFyb3VuZC5cbiAqIEBwYXJhbSB7TGlzdEl0ZW19IG5vZGVcbiAqICAgbWRhc3Qgbm9kZS5cbiAqIEBwYXJhbSB7UGFyZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IHBhcmVudFxuICogICBQYXJlbnQgb2YgYG5vZGVgLlxuICogQHJldHVybnMge0VsZW1lbnR9XG4gKiAgIGhhc3Qgbm9kZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxpc3RJdGVtKHN0YXRlLCBub2RlLCBwYXJlbnQpIHtcbiAgY29uc3QgcmVzdWx0cyA9IHN0YXRlLmFsbChub2RlKVxuICBjb25zdCBsb29zZSA9IHBhcmVudCA/IGxpc3RMb29zZShwYXJlbnQpIDogbGlzdEl0ZW1Mb29zZShub2RlKVxuICAvKiogQHR5cGUge1Byb3BlcnRpZXN9ICovXG4gIGNvbnN0IHByb3BlcnRpZXMgPSB7fVxuICAvKiogQHR5cGUge0FycmF5PEVsZW1lbnRDb250ZW50Pn0gKi9cbiAgY29uc3QgY2hpbGRyZW4gPSBbXVxuXG4gIGlmICh0eXBlb2Ygbm9kZS5jaGVja2VkID09PSAnYm9vbGVhbicpIHtcbiAgICBjb25zdCBoZWFkID0gcmVzdWx0c1swXVxuICAgIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgICBsZXQgcGFyYWdyYXBoXG5cbiAgICBpZiAoaGVhZCAmJiBoZWFkLnR5cGUgPT09ICdlbGVtZW50JyAmJiBoZWFkLnRhZ05hbWUgPT09ICdwJykge1xuICAgICAgcGFyYWdyYXBoID0gaGVhZFxuICAgIH0gZWxzZSB7XG4gICAgICBwYXJhZ3JhcGggPSB7dHlwZTogJ2VsZW1lbnQnLCB0YWdOYW1lOiAncCcsIHByb3BlcnRpZXM6IHt9LCBjaGlsZHJlbjogW119XG4gICAgICByZXN1bHRzLnVuc2hpZnQocGFyYWdyYXBoKVxuICAgIH1cblxuICAgIGlmIChwYXJhZ3JhcGguY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgcGFyYWdyYXBoLmNoaWxkcmVuLnVuc2hpZnQoe3R5cGU6ICd0ZXh0JywgdmFsdWU6ICcgJ30pXG4gICAgfVxuXG4gICAgcGFyYWdyYXBoLmNoaWxkcmVuLnVuc2hpZnQoe1xuICAgICAgdHlwZTogJ2VsZW1lbnQnLFxuICAgICAgdGFnTmFtZTogJ2lucHV0JyxcbiAgICAgIHByb3BlcnRpZXM6IHt0eXBlOiAnY2hlY2tib3gnLCBjaGVja2VkOiBub2RlLmNoZWNrZWQsIGRpc2FibGVkOiB0cnVlfSxcbiAgICAgIGNoaWxkcmVuOiBbXVxuICAgIH0pXG5cbiAgICAvLyBBY2NvcmRpbmcgdG8gZ2l0aHViLW1hcmtkb3duLWNzcywgdGhpcyBjbGFzcyBoaWRlcyBidWxsZXQuXG4gICAgLy8gU2VlOiA8aHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9naXRodWItbWFya2Rvd24tY3NzPi5cbiAgICBwcm9wZXJ0aWVzLmNsYXNzTmFtZSA9IFsndGFzay1saXN0LWl0ZW0nXVxuICB9XG5cbiAgbGV0IGluZGV4ID0gLTFcblxuICB3aGlsZSAoKytpbmRleCA8IHJlc3VsdHMubGVuZ3RoKSB7XG4gICAgY29uc3QgY2hpbGQgPSByZXN1bHRzW2luZGV4XVxuXG4gICAgLy8gQWRkIGVvbHMgYmVmb3JlIG5vZGVzLCBleGNlcHQgaWYgdGhpcyBpcyBhIGxvb3NlLCBmaXJzdCBwYXJhZ3JhcGguXG4gICAgaWYgKFxuICAgICAgbG9vc2UgfHxcbiAgICAgIGluZGV4ICE9PSAwIHx8XG4gICAgICBjaGlsZC50eXBlICE9PSAnZWxlbWVudCcgfHxcbiAgICAgIGNoaWxkLnRhZ05hbWUgIT09ICdwJ1xuICAgICkge1xuICAgICAgY2hpbGRyZW4ucHVzaCh7dHlwZTogJ3RleHQnLCB2YWx1ZTogJ1xcbid9KVxuICAgIH1cblxuICAgIGlmIChjaGlsZC50eXBlID09PSAnZWxlbWVudCcgJiYgY2hpbGQudGFnTmFtZSA9PT0gJ3AnICYmICFsb29zZSkge1xuICAgICAgY2hpbGRyZW4ucHVzaCguLi5jaGlsZC5jaGlsZHJlbilcbiAgICB9IGVsc2Uge1xuICAgICAgY2hpbGRyZW4ucHVzaChjaGlsZClcbiAgICB9XG4gIH1cblxuICBjb25zdCB0YWlsID0gcmVzdWx0c1tyZXN1bHRzLmxlbmd0aCAtIDFdXG5cbiAgLy8gQWRkIGEgZmluYWwgZW9sLlxuICBpZiAodGFpbCAmJiAobG9vc2UgfHwgdGFpbC50eXBlICE9PSAnZWxlbWVudCcgfHwgdGFpbC50YWdOYW1lICE9PSAncCcpKSB7XG4gICAgY2hpbGRyZW4ucHVzaCh7dHlwZTogJ3RleHQnLCB2YWx1ZTogJ1xcbid9KVxuICB9XG5cbiAgLyoqIEB0eXBlIHtFbGVtZW50fSAqL1xuICBjb25zdCByZXN1bHQgPSB7dHlwZTogJ2VsZW1lbnQnLCB0YWdOYW1lOiAnbGknLCBwcm9wZXJ0aWVzLCBjaGlsZHJlbn1cbiAgc3RhdGUucGF0Y2gobm9kZSwgcmVzdWx0KVxuICByZXR1cm4gc3RhdGUuYXBwbHlEYXRhKG5vZGUsIHJlc3VsdClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1BhcmVudHN9IG5vZGVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGxpc3RMb29zZShub2RlKSB7XG4gIGxldCBsb29zZSA9IGZhbHNlXG4gIGlmIChub2RlLnR5cGUgPT09ICdsaXN0Jykge1xuICAgIGxvb3NlID0gbm9kZS5zcHJlYWQgfHwgZmFsc2VcbiAgICBjb25zdCBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW5cbiAgICBsZXQgaW5kZXggPSAtMVxuXG4gICAgd2hpbGUgKCFsb29zZSAmJiArK2luZGV4IDwgY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICBsb29zZSA9IGxpc3RJdGVtTG9vc2UoY2hpbGRyZW5baW5kZXhdKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsb29zZVxufVxuXG4vKipcbiAqIEBwYXJhbSB7TGlzdEl0ZW19IG5vZGVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGxpc3RJdGVtTG9vc2Uobm9kZSkge1xuICBjb25zdCBzcHJlYWQgPSBub2RlLnNwcmVhZFxuXG4gIHJldHVybiBzcHJlYWQgPT09IHVuZGVmaW5lZCB8fCBzcHJlYWQgPT09IG51bGxcbiAgICA/IG5vZGUuY2hpbGRyZW4ubGVuZ3RoID4gMVxuICAgIDogc3ByZWFkXG59XG4iLCJjb25zdCB0YWIgPSA5IC8qIGBcXHRgICovXG5jb25zdCBzcGFjZSA9IDMyIC8qIGAgYCAqL1xuXG4vKipcbiAqIFJlbW92ZSBpbml0aWFsIGFuZCBmaW5hbCBzcGFjZXMgYW5kIHRhYnMgYXQgdGhlIGxpbmUgYnJlYWtzIGluIGB2YWx1ZWAuXG4gKiBEb2VzIG5vdCB0cmltIGluaXRpYWwgYW5kIGZpbmFsIHNwYWNlcyBhbmQgdGFicyBvZiB0aGUgdmFsdWUgaXRzZWxmLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogICBWYWx1ZSB0byB0cmltLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqICAgVHJpbW1lZCB2YWx1ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyaW1MaW5lcyh2YWx1ZSkge1xuICBjb25zdCBzb3VyY2UgPSBTdHJpbmcodmFsdWUpXG4gIGNvbnN0IHNlYXJjaCA9IC9cXHI/XFxufFxcci9nXG4gIGxldCBtYXRjaCA9IHNlYXJjaC5leGVjKHNvdXJjZSlcbiAgbGV0IGxhc3QgPSAwXG4gIC8qKiBAdHlwZSB7QXJyYXk8c3RyaW5nPn0gKi9cbiAgY29uc3QgbGluZXMgPSBbXVxuXG4gIHdoaWxlIChtYXRjaCkge1xuICAgIGxpbmVzLnB1c2goXG4gICAgICB0cmltTGluZShzb3VyY2Uuc2xpY2UobGFzdCwgbWF0Y2guaW5kZXgpLCBsYXN0ID4gMCwgdHJ1ZSksXG4gICAgICBtYXRjaFswXVxuICAgIClcblxuICAgIGxhc3QgPSBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aFxuICAgIG1hdGNoID0gc2VhcmNoLmV4ZWMoc291cmNlKVxuICB9XG5cbiAgbGluZXMucHVzaCh0cmltTGluZShzb3VyY2Uuc2xpY2UobGFzdCksIGxhc3QgPiAwLCBmYWxzZSkpXG5cbiAgcmV0dXJuIGxpbmVzLmpvaW4oJycpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiAgIExpbmUgdG8gdHJpbS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RhcnRcbiAqICAgV2hldGhlciB0byB0cmltIHRoZSBzdGFydCBvZiB0aGUgbGluZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gZW5kXG4gKiAgIFdoZXRoZXIgdG8gdHJpbSB0aGUgZW5kIG9mIHRoZSBsaW5lLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqICAgVHJpbW1lZCBsaW5lLlxuICovXG5mdW5jdGlvbiB0cmltTGluZSh2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICBsZXQgc3RhcnRJbmRleCA9IDBcbiAgbGV0IGVuZEluZGV4ID0gdmFsdWUubGVuZ3RoXG5cbiAgaWYgKHN0YXJ0KSB7XG4gICAgbGV0IGNvZGUgPSB2YWx1ZS5jb2RlUG9pbnRBdChzdGFydEluZGV4KVxuXG4gICAgd2hpbGUgKGNvZGUgPT09IHRhYiB8fCBjb2RlID09PSBzcGFjZSkge1xuICAgICAgc3RhcnRJbmRleCsrXG4gICAgICBjb2RlID0gdmFsdWUuY29kZVBvaW50QXQoc3RhcnRJbmRleClcbiAgICB9XG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgbGV0IGNvZGUgPSB2YWx1ZS5jb2RlUG9pbnRBdChlbmRJbmRleCAtIDEpXG5cbiAgICB3aGlsZSAoY29kZSA9PT0gdGFiIHx8IGNvZGUgPT09IHNwYWNlKSB7XG4gICAgICBlbmRJbmRleC0tXG4gICAgICBjb2RlID0gdmFsdWUuY29kZVBvaW50QXQoZW5kSW5kZXggLSAxKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBlbmRJbmRleCA+IHN0YXJ0SW5kZXggPyB2YWx1ZS5zbGljZShzdGFydEluZGV4LCBlbmRJbmRleCkgOiAnJ1xufVxuIiwiaW1wb3J0IHtibG9ja3F1b3RlfSBmcm9tICcuL2Jsb2NrcXVvdGUuanMnXG5pbXBvcnQge2hhcmRCcmVha30gZnJvbSAnLi9icmVhay5qcydcbmltcG9ydCB7Y29kZX0gZnJvbSAnLi9jb2RlLmpzJ1xuaW1wb3J0IHtzdHJpa2V0aHJvdWdofSBmcm9tICcuL2RlbGV0ZS5qcydcbmltcG9ydCB7ZW1waGFzaXN9IGZyb20gJy4vZW1waGFzaXMuanMnXG5pbXBvcnQge2Zvb3Rub3RlUmVmZXJlbmNlfSBmcm9tICcuL2Zvb3Rub3RlLXJlZmVyZW5jZS5qcydcbmltcG9ydCB7Zm9vdG5vdGV9IGZyb20gJy4vZm9vdG5vdGUuanMnXG5pbXBvcnQge2hlYWRpbmd9IGZyb20gJy4vaGVhZGluZy5qcydcbmltcG9ydCB7aHRtbH0gZnJvbSAnLi9odG1sLmpzJ1xuaW1wb3J0IHtpbWFnZVJlZmVyZW5jZX0gZnJvbSAnLi9pbWFnZS1yZWZlcmVuY2UuanMnXG5pbXBvcnQge2ltYWdlfSBmcm9tICcuL2ltYWdlLmpzJ1xuaW1wb3J0IHtpbmxpbmVDb2RlfSBmcm9tICcuL2lubGluZS1jb2RlLmpzJ1xuaW1wb3J0IHtsaW5rUmVmZXJlbmNlfSBmcm9tICcuL2xpbmstcmVmZXJlbmNlLmpzJ1xuaW1wb3J0IHtsaW5rfSBmcm9tICcuL2xpbmsuanMnXG5pbXBvcnQge2xpc3RJdGVtfSBmcm9tICcuL2xpc3QtaXRlbS5qcydcbmltcG9ydCB7bGlzdH0gZnJvbSAnLi9saXN0LmpzJ1xuaW1wb3J0IHtwYXJhZ3JhcGh9IGZyb20gJy4vcGFyYWdyYXBoLmpzJ1xuaW1wb3J0IHtyb290fSBmcm9tICcuL3Jvb3QuanMnXG5pbXBvcnQge3N0cm9uZ30gZnJvbSAnLi9zdHJvbmcuanMnXG5pbXBvcnQge3RhYmxlfSBmcm9tICcuL3RhYmxlLmpzJ1xuaW1wb3J0IHt0YWJsZVJvd30gZnJvbSAnLi90YWJsZS1yb3cuanMnXG5pbXBvcnQge3RhYmxlQ2VsbH0gZnJvbSAnLi90YWJsZS1jZWxsLmpzJ1xuaW1wb3J0IHt0ZXh0fSBmcm9tICcuL3RleHQuanMnXG5pbXBvcnQge3RoZW1hdGljQnJlYWt9IGZyb20gJy4vdGhlbWF0aWMtYnJlYWsuanMnXG5cbi8qKlxuICogRGVmYXVsdCBoYW5kbGVycyBmb3Igbm9kZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBoYW5kbGVycyA9IHtcbiAgYmxvY2txdW90ZSxcbiAgYnJlYWs6IGhhcmRCcmVhayxcbiAgY29kZSxcbiAgZGVsZXRlOiBzdHJpa2V0aHJvdWdoLFxuICBlbXBoYXNpcyxcbiAgZm9vdG5vdGVSZWZlcmVuY2UsXG4gIGZvb3Rub3RlLFxuICBoZWFkaW5nLFxuICBodG1sLFxuICBpbWFnZVJlZmVyZW5jZSxcbiAgaW1hZ2UsXG4gIGlubGluZUNvZGUsXG4gIGxpbmtSZWZlcmVuY2UsXG4gIGxpbmssXG4gIGxpc3RJdGVtLFxuICBsaXN0LFxuICBwYXJhZ3JhcGgsXG4gIHJvb3QsXG4gIHN0cm9uZyxcbiAgdGFibGUsXG4gIHRhYmxlQ2VsbCxcbiAgdGFibGVSb3csXG4gIHRleHQsXG4gIHRoZW1hdGljQnJlYWssXG4gIHRvbWw6IGlnbm9yZSxcbiAgeWFtbDogaWdub3JlLFxuICBkZWZpbml0aW9uOiBpZ25vcmUsXG4gIGZvb3Rub3RlRGVmaW5pdGlvbjogaWdub3JlXG59XG5cbi8vIFJldHVybiBub3RoaW5nIGZvciBub2RlcyB0aGF0IGFyZSBpZ25vcmVkLlxuZnVuY3Rpb24gaWdub3JlKCkge1xuICAvLyBUbyBkbzogbmV4dCBtYWpvcjogcmV0dXJuIGB1bmRlZmluZWRgLlxuICByZXR1cm4gbnVsbFxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRWxlbWVudH0gRWxlbWVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5CbG9ja3F1b3RlfSBCbG9ja3F1b3RlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9zdGF0ZS5qcycpLlN0YXRlfSBTdGF0ZVxuICovXG5cbi8qKlxuICogVHVybiBhbiBtZGFzdCBgYmxvY2txdW90ZWAgbm9kZSBpbnRvIGhhc3QuXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICogQHBhcmFtIHtCbG9ja3F1b3RlfSBub2RlXG4gKiAgIG1kYXN0IG5vZGUuXG4gKiBAcmV0dXJucyB7RWxlbWVudH1cbiAqICAgaGFzdCBub2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYmxvY2txdW90ZShzdGF0ZSwgbm9kZSkge1xuICAvKiogQHR5cGUge0VsZW1lbnR9ICovXG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICB0eXBlOiAnZWxlbWVudCcsXG4gICAgdGFnTmFtZTogJ2Jsb2NrcXVvdGUnLFxuICAgIHByb3BlcnRpZXM6IHt9LFxuICAgIGNoaWxkcmVuOiBzdGF0ZS53cmFwKHN0YXRlLmFsbChub2RlKSwgdHJ1ZSlcbiAgfVxuICBzdGF0ZS5wYXRjaChub2RlLCByZXN1bHQpXG4gIHJldHVybiBzdGF0ZS5hcHBseURhdGEobm9kZSwgcmVzdWx0KVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRWxlbWVudH0gRWxlbWVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLlRleHR9IFRleHRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuQnJlYWt9IEJyZWFrXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9zdGF0ZS5qcycpLlN0YXRlfSBTdGF0ZVxuICovXG5cbi8qKlxuICogVHVybiBhbiBtZGFzdCBgYnJlYWtgIG5vZGUgaW50byBoYXN0LlxuICpcbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiAgIEluZm8gcGFzc2VkIGFyb3VuZC5cbiAqIEBwYXJhbSB7QnJlYWt9IG5vZGVcbiAqICAgbWRhc3Qgbm9kZS5cbiAqIEByZXR1cm5zIHtBcnJheTxFbGVtZW50IHwgVGV4dD59XG4gKiAgIGhhc3QgZWxlbWVudCBjb250ZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFyZEJyZWFrKHN0YXRlLCBub2RlKSB7XG4gIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgY29uc3QgcmVzdWx0ID0ge3R5cGU6ICdlbGVtZW50JywgdGFnTmFtZTogJ2JyJywgcHJvcGVydGllczoge30sIGNoaWxkcmVuOiBbXX1cbiAgc3RhdGUucGF0Y2gobm9kZSwgcmVzdWx0KVxuICByZXR1cm4gW3N0YXRlLmFwcGx5RGF0YShub2RlLCByZXN1bHQpLCB7dHlwZTogJ3RleHQnLCB2YWx1ZTogJ1xcbid9XVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRWxlbWVudH0gRWxlbWVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLlByb3BlcnRpZXN9IFByb3BlcnRpZXNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuQ29kZX0gQ29kZVxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vc3RhdGUuanMnKS5TdGF0ZX0gU3RhdGVcblxuICovXG5cbi8qKlxuICogVHVybiBhbiBtZGFzdCBgY29kZWAgbm9kZSBpbnRvIGhhc3QuXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICogQHBhcmFtIHtDb2RlfSBub2RlXG4gKiAgIG1kYXN0IG5vZGUuXG4gKiBAcmV0dXJucyB7RWxlbWVudH1cbiAqICAgaGFzdCBub2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29kZShzdGF0ZSwgbm9kZSkge1xuICBjb25zdCB2YWx1ZSA9IG5vZGUudmFsdWUgPyBub2RlLnZhbHVlICsgJ1xcbicgOiAnJ1xuICAvLyBUbyBkbzogbmV4dCBtYWpvciwgdXNlIGBub2RlLmxhbmdgIHcvbyByZWdleCwgdGhlIHNwbGl0dGluZ+KAmXMgYmVlbiBnb2luZ1xuICAvLyBvbiBmb3IgeWVhcnMgaW4gcmVtYXJrIG5vdy5cbiAgY29uc3QgbGFuZyA9IG5vZGUubGFuZyA/IG5vZGUubGFuZy5tYXRjaCgvXlteIFxcdF0rKD89WyBcXHRdfCQpLykgOiBudWxsXG4gIC8qKiBAdHlwZSB7UHJvcGVydGllc30gKi9cbiAgY29uc3QgcHJvcGVydGllcyA9IHt9XG5cbiAgaWYgKGxhbmcpIHtcbiAgICBwcm9wZXJ0aWVzLmNsYXNzTmFtZSA9IFsnbGFuZ3VhZ2UtJyArIGxhbmddXG4gIH1cblxuICAvLyBDcmVhdGUgYDxjb2RlPmAuXG4gIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgbGV0IHJlc3VsdCA9IHtcbiAgICB0eXBlOiAnZWxlbWVudCcsXG4gICAgdGFnTmFtZTogJ2NvZGUnLFxuICAgIHByb3BlcnRpZXMsXG4gICAgY2hpbGRyZW46IFt7dHlwZTogJ3RleHQnLCB2YWx1ZX1dXG4gIH1cblxuICBpZiAobm9kZS5tZXRhKSB7XG4gICAgcmVzdWx0LmRhdGEgPSB7bWV0YTogbm9kZS5tZXRhfVxuICB9XG5cbiAgc3RhdGUucGF0Y2gobm9kZSwgcmVzdWx0KVxuICByZXN1bHQgPSBzdGF0ZS5hcHBseURhdGEobm9kZSwgcmVzdWx0KVxuXG4gIC8vIENyZWF0ZSBgPHByZT5gLlxuICByZXN1bHQgPSB7dHlwZTogJ2VsZW1lbnQnLCB0YWdOYW1lOiAncHJlJywgcHJvcGVydGllczoge30sIGNoaWxkcmVuOiBbcmVzdWx0XX1cbiAgc3RhdGUucGF0Y2gobm9kZSwgcmVzdWx0KVxuICByZXR1cm4gcmVzdWx0XG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50fSBFbGVtZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkRlbGV0ZX0gRGVsZXRlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9zdGF0ZS5qcycpLlN0YXRlfSBTdGF0ZVxuXG4gKi9cblxuLyoqXG4gKiBUdXJuIGFuIG1kYXN0IGBkZWxldGVgIG5vZGUgaW50byBoYXN0LlxuICpcbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiAgIEluZm8gcGFzc2VkIGFyb3VuZC5cbiAqIEBwYXJhbSB7RGVsZXRlfSBub2RlXG4gKiAgIG1kYXN0IG5vZGUuXG4gKiBAcmV0dXJucyB7RWxlbWVudH1cbiAqICAgaGFzdCBub2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RyaWtldGhyb3VnaChzdGF0ZSwgbm9kZSkge1xuICAvKiogQHR5cGUge0VsZW1lbnR9ICovXG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICB0eXBlOiAnZWxlbWVudCcsXG4gICAgdGFnTmFtZTogJ2RlbCcsXG4gICAgcHJvcGVydGllczoge30sXG4gICAgY2hpbGRyZW46IHN0YXRlLmFsbChub2RlKVxuICB9XG4gIHN0YXRlLnBhdGNoKG5vZGUsIHJlc3VsdClcbiAgcmV0dXJuIHN0YXRlLmFwcGx5RGF0YShub2RlLCByZXN1bHQpXG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50fSBFbGVtZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkVtcGhhc2lzfSBFbXBoYXNpc1xuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vc3RhdGUuanMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuXG4vKipcbiAqIFR1cm4gYW4gbWRhc3QgYGVtcGhhc2lzYCBub2RlIGludG8gaGFzdC5cbiAqXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQuXG4gKiBAcGFyYW0ge0VtcGhhc2lzfSBub2RlXG4gKiAgIG1kYXN0IG5vZGUuXG4gKiBAcmV0dXJucyB7RWxlbWVudH1cbiAqICAgaGFzdCBub2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZW1waGFzaXMoc3RhdGUsIG5vZGUpIHtcbiAgLyoqIEB0eXBlIHtFbGVtZW50fSAqL1xuICBjb25zdCByZXN1bHQgPSB7XG4gICAgdHlwZTogJ2VsZW1lbnQnLFxuICAgIHRhZ05hbWU6ICdlbScsXG4gICAgcHJvcGVydGllczoge30sXG4gICAgY2hpbGRyZW46IHN0YXRlLmFsbChub2RlKVxuICB9XG4gIHN0YXRlLnBhdGNoKG5vZGUsIHJlc3VsdClcbiAgcmV0dXJuIHN0YXRlLmFwcGx5RGF0YShub2RlLCByZXN1bHQpXG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50fSBFbGVtZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkZvb3Rub3RlfSBGb290bm90ZVxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vc3RhdGUuanMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuXG5pbXBvcnQge2Zvb3Rub3RlUmVmZXJlbmNlfSBmcm9tICcuL2Zvb3Rub3RlLXJlZmVyZW5jZS5qcydcblxuLy8gVG8gZG86IHdoZW4gYm90aDpcbi8vICogPGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb21hcmsvbWljcm9tYXJrLWV4dGVuc2lvbi1mb290bm90ZT5cbi8vICogPGh0dHBzOi8vZ2l0aHViLmNvbS9zeW50YXgtdHJlZS9tZGFzdC11dGlsLWZvb3Rub3RlPlxuLy8g4oCmYXJlIGFyY2hpdmVkLCByZW1vdmUgdGhpcyAoYWxzbyBmcm9tIG1kYXN0KS5cbi8vIFRoZXNlIGlubGluZSBub3RlcyBhcmUgbm90IHVzZWQgaW4gR0ZNLlxuXG4vKipcbiAqIFR1cm4gYW4gbWRhc3QgYGZvb3Rub3RlYCBub2RlIGludG8gaGFzdC5cbiAqXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQuXG4gKiBAcGFyYW0ge0Zvb3Rub3RlfSBub2RlXG4gKiAgIG1kYXN0IG5vZGUuXG4gKiBAcmV0dXJucyB7RWxlbWVudH1cbiAqICAgaGFzdCBub2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZm9vdG5vdGUoc3RhdGUsIG5vZGUpIHtcbiAgY29uc3QgZm9vdG5vdGVCeUlkID0gc3RhdGUuZm9vdG5vdGVCeUlkXG4gIGxldCBubyA9IDFcblxuICB3aGlsZSAobm8gaW4gZm9vdG5vdGVCeUlkKSBubysrXG5cbiAgY29uc3QgaWRlbnRpZmllciA9IFN0cmluZyhubylcblxuICBmb290bm90ZUJ5SWRbaWRlbnRpZmllcl0gPSB7XG4gICAgdHlwZTogJ2Zvb3Rub3RlRGVmaW5pdGlvbicsXG4gICAgaWRlbnRpZmllcixcbiAgICBjaGlsZHJlbjogW3t0eXBlOiAncGFyYWdyYXBoJywgY2hpbGRyZW46IG5vZGUuY2hpbGRyZW59XSxcbiAgICBwb3NpdGlvbjogbm9kZS5wb3NpdGlvblxuICB9XG5cbiAgcmV0dXJuIGZvb3Rub3RlUmVmZXJlbmNlKHN0YXRlLCB7XG4gICAgdHlwZTogJ2Zvb3Rub3RlUmVmZXJlbmNlJyxcbiAgICBpZGVudGlmaWVyLFxuICAgIHBvc2l0aW9uOiBub2RlLnBvc2l0aW9uXG4gIH0pXG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50fSBFbGVtZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkhlYWRpbmd9IEhlYWRpbmdcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3N0YXRlLmpzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuLyoqXG4gKiBUdXJuIGFuIG1kYXN0IGBoZWFkaW5nYCBub2RlIGludG8gaGFzdC5cbiAqXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQuXG4gKiBAcGFyYW0ge0hlYWRpbmd9IG5vZGVcbiAqICAgbWRhc3Qgbm9kZS5cbiAqIEByZXR1cm5zIHtFbGVtZW50fVxuICogICBoYXN0IG5vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoZWFkaW5nKHN0YXRlLCBub2RlKSB7XG4gIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICB0YWdOYW1lOiAnaCcgKyBub2RlLmRlcHRoLFxuICAgIHByb3BlcnRpZXM6IHt9LFxuICAgIGNoaWxkcmVuOiBzdGF0ZS5hbGwobm9kZSlcbiAgfVxuICBzdGF0ZS5wYXRjaChub2RlLCByZXN1bHQpXG4gIHJldHVybiBzdGF0ZS5hcHBseURhdGEobm9kZSwgcmVzdWx0KVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRWxlbWVudH0gRWxlbWVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5IVE1MfSBIdG1sXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9zdGF0ZS5qcycpLlN0YXRlfSBTdGF0ZVxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vaW5kZXguanMnKS5SYXd9IFJhd1xuICovXG5cbi8qKlxuICogVHVybiBhbiBtZGFzdCBgaHRtbGAgbm9kZSBpbnRvIGhhc3QgKGByYXdgIG5vZGUgaW4gZGFuZ2Vyb3VzIG1vZGUsIG90aGVyd2lzZVxuICogbm90aGluZykuXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICogQHBhcmFtIHtIdG1sfSBub2RlXG4gKiAgIG1kYXN0IG5vZGUuXG4gKiBAcmV0dXJucyB7UmF3IHwgRWxlbWVudCB8IG51bGx9XG4gKiAgIGhhc3Qgbm9kZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGh0bWwoc3RhdGUsIG5vZGUpIHtcbiAgaWYgKHN0YXRlLmRhbmdlcm91cykge1xuICAgIC8qKiBAdHlwZSB7UmF3fSAqL1xuICAgIGNvbnN0IHJlc3VsdCA9IHt0eXBlOiAncmF3JywgdmFsdWU6IG5vZGUudmFsdWV9XG4gICAgc3RhdGUucGF0Y2gobm9kZSwgcmVzdWx0KVxuICAgIHJldHVybiBzdGF0ZS5hcHBseURhdGEobm9kZSwgcmVzdWx0KVxuICB9XG5cbiAgLy8gVG8gZG86IG5leHQgbWFqb3I6IHJldHVybiBgdW5kZWZpbmVkYC5cbiAgcmV0dXJuIG51bGxcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnRDb250ZW50fSBFbGVtZW50Q29udGVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnR9IEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5Qcm9wZXJ0aWVzfSBQcm9wZXJ0aWVzXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkltYWdlUmVmZXJlbmNlfSBJbWFnZVJlZmVyZW5jZVxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vc3RhdGUuanMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuXG5pbXBvcnQge25vcm1hbGl6ZVVyaX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtc2FuaXRpemUtdXJpJ1xuaW1wb3J0IHtyZXZlcnR9IGZyb20gJy4uL3JldmVydC5qcydcblxuLyoqXG4gKiBUdXJuIGFuIG1kYXN0IGBpbWFnZVJlZmVyZW5jZWAgbm9kZSBpbnRvIGhhc3QuXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICogQHBhcmFtIHtJbWFnZVJlZmVyZW5jZX0gbm9kZVxuICogICBtZGFzdCBub2RlLlxuICogQHJldHVybnMge0VsZW1lbnRDb250ZW50IHwgQXJyYXk8RWxlbWVudENvbnRlbnQ+fVxuICogICBoYXN0IG5vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbWFnZVJlZmVyZW5jZShzdGF0ZSwgbm9kZSkge1xuICBjb25zdCBkZWYgPSBzdGF0ZS5kZWZpbml0aW9uKG5vZGUuaWRlbnRpZmllcilcblxuICBpZiAoIWRlZikge1xuICAgIHJldHVybiByZXZlcnQoc3RhdGUsIG5vZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1Byb3BlcnRpZXN9ICovXG4gIGNvbnN0IHByb3BlcnRpZXMgPSB7c3JjOiBub3JtYWxpemVVcmkoZGVmLnVybCB8fCAnJyksIGFsdDogbm9kZS5hbHR9XG5cbiAgaWYgKGRlZi50aXRsZSAhPT0gbnVsbCAmJiBkZWYudGl0bGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHByb3BlcnRpZXMudGl0bGUgPSBkZWYudGl0bGVcbiAgfVxuXG4gIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgY29uc3QgcmVzdWx0ID0ge3R5cGU6ICdlbGVtZW50JywgdGFnTmFtZTogJ2ltZycsIHByb3BlcnRpZXMsIGNoaWxkcmVuOiBbXX1cbiAgc3RhdGUucGF0Y2gobm9kZSwgcmVzdWx0KVxuICByZXR1cm4gc3RhdGUuYXBwbHlEYXRhKG5vZGUsIHJlc3VsdClcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnR9IEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5Qcm9wZXJ0aWVzfSBQcm9wZXJ0aWVzXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkltYWdlfSBJbWFnZVxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vc3RhdGUuanMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuXG5pbXBvcnQge25vcm1hbGl6ZVVyaX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtc2FuaXRpemUtdXJpJ1xuXG4vKipcbiAqIFR1cm4gYW4gbWRhc3QgYGltYWdlYCBub2RlIGludG8gaGFzdC5cbiAqXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQuXG4gKiBAcGFyYW0ge0ltYWdlfSBub2RlXG4gKiAgIG1kYXN0IG5vZGUuXG4gKiBAcmV0dXJucyB7RWxlbWVudH1cbiAqICAgaGFzdCBub2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaW1hZ2Uoc3RhdGUsIG5vZGUpIHtcbiAgLyoqIEB0eXBlIHtQcm9wZXJ0aWVzfSAqL1xuICBjb25zdCBwcm9wZXJ0aWVzID0ge3NyYzogbm9ybWFsaXplVXJpKG5vZGUudXJsKX1cblxuICBpZiAobm9kZS5hbHQgIT09IG51bGwgJiYgbm9kZS5hbHQgIT09IHVuZGVmaW5lZCkge1xuICAgIHByb3BlcnRpZXMuYWx0ID0gbm9kZS5hbHRcbiAgfVxuXG4gIGlmIChub2RlLnRpdGxlICE9PSBudWxsICYmIG5vZGUudGl0bGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHByb3BlcnRpZXMudGl0bGUgPSBub2RlLnRpdGxlXG4gIH1cblxuICAvKiogQHR5cGUge0VsZW1lbnR9ICovXG4gIGNvbnN0IHJlc3VsdCA9IHt0eXBlOiAnZWxlbWVudCcsIHRhZ05hbWU6ICdpbWcnLCBwcm9wZXJ0aWVzLCBjaGlsZHJlbjogW119XG4gIHN0YXRlLnBhdGNoKG5vZGUsIHJlc3VsdClcbiAgcmV0dXJuIHN0YXRlLmFwcGx5RGF0YShub2RlLCByZXN1bHQpXG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50fSBFbGVtZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuVGV4dH0gVGV4dFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5JbmxpbmVDb2RlfSBJbmxpbmVDb2RlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9zdGF0ZS5qcycpLlN0YXRlfSBTdGF0ZVxuICovXG5cbi8qKlxuICogVHVybiBhbiBtZGFzdCBgaW5saW5lQ29kZWAgbm9kZSBpbnRvIGhhc3QuXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICogQHBhcmFtIHtJbmxpbmVDb2RlfSBub2RlXG4gKiAgIG1kYXN0IG5vZGUuXG4gKiBAcmV0dXJucyB7RWxlbWVudH1cbiAqICAgaGFzdCBub2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5saW5lQ29kZShzdGF0ZSwgbm9kZSkge1xuICAvKiogQHR5cGUge1RleHR9ICovXG4gIGNvbnN0IHRleHQgPSB7dHlwZTogJ3RleHQnLCB2YWx1ZTogbm9kZS52YWx1ZS5yZXBsYWNlKC9cXHI/XFxufFxcci9nLCAnICcpfVxuICBzdGF0ZS5wYXRjaChub2RlLCB0ZXh0KVxuXG4gIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICB0YWdOYW1lOiAnY29kZScsXG4gICAgcHJvcGVydGllczoge30sXG4gICAgY2hpbGRyZW46IFt0ZXh0XVxuICB9XG4gIHN0YXRlLnBhdGNoKG5vZGUsIHJlc3VsdClcbiAgcmV0dXJuIHN0YXRlLmFwcGx5RGF0YShub2RlLCByZXN1bHQpXG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50fSBFbGVtZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRWxlbWVudENvbnRlbnR9IEVsZW1lbnRDb250ZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuUHJvcGVydGllc30gUHJvcGVydGllc1xuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5MaW5rUmVmZXJlbmNlfSBMaW5rUmVmZXJlbmNlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9zdGF0ZS5qcycpLlN0YXRlfSBTdGF0ZVxuICovXG5cbmltcG9ydCB7bm9ybWFsaXplVXJpfSBmcm9tICdtaWNyb21hcmstdXRpbC1zYW5pdGl6ZS11cmknXG5pbXBvcnQge3JldmVydH0gZnJvbSAnLi4vcmV2ZXJ0LmpzJ1xuXG4vKipcbiAqIFR1cm4gYW4gbWRhc3QgYGxpbmtSZWZlcmVuY2VgIG5vZGUgaW50byBoYXN0LlxuICpcbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiAgIEluZm8gcGFzc2VkIGFyb3VuZC5cbiAqIEBwYXJhbSB7TGlua1JlZmVyZW5jZX0gbm9kZVxuICogICBtZGFzdCBub2RlLlxuICogQHJldHVybnMge0VsZW1lbnRDb250ZW50IHwgQXJyYXk8RWxlbWVudENvbnRlbnQ+fVxuICogICBoYXN0IG5vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsaW5rUmVmZXJlbmNlKHN0YXRlLCBub2RlKSB7XG4gIGNvbnN0IGRlZiA9IHN0YXRlLmRlZmluaXRpb24obm9kZS5pZGVudGlmaWVyKVxuXG4gIGlmICghZGVmKSB7XG4gICAgcmV0dXJuIHJldmVydChzdGF0ZSwgbm9kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7UHJvcGVydGllc30gKi9cbiAgY29uc3QgcHJvcGVydGllcyA9IHtocmVmOiBub3JtYWxpemVVcmkoZGVmLnVybCB8fCAnJyl9XG5cbiAgaWYgKGRlZi50aXRsZSAhPT0gbnVsbCAmJiBkZWYudGl0bGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHByb3BlcnRpZXMudGl0bGUgPSBkZWYudGl0bGVcbiAgfVxuXG4gIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICB0YWdOYW1lOiAnYScsXG4gICAgcHJvcGVydGllcyxcbiAgICBjaGlsZHJlbjogc3RhdGUuYWxsKG5vZGUpXG4gIH1cbiAgc3RhdGUucGF0Y2gobm9kZSwgcmVzdWx0KVxuICByZXR1cm4gc3RhdGUuYXBwbHlEYXRhKG5vZGUsIHJlc3VsdClcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnR9IEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5Qcm9wZXJ0aWVzfSBQcm9wZXJ0aWVzXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkxpbmt9IExpbmtcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3N0YXRlLmpzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuaW1wb3J0IHtub3JtYWxpemVVcml9IGZyb20gJ21pY3JvbWFyay11dGlsLXNhbml0aXplLXVyaSdcblxuLyoqXG4gKiBUdXJuIGFuIG1kYXN0IGBsaW5rYCBub2RlIGludG8gaGFzdC5cbiAqXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQuXG4gKiBAcGFyYW0ge0xpbmt9IG5vZGVcbiAqICAgbWRhc3Qgbm9kZS5cbiAqIEByZXR1cm5zIHtFbGVtZW50fVxuICogICBoYXN0IG5vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsaW5rKHN0YXRlLCBub2RlKSB7XG4gIC8qKiBAdHlwZSB7UHJvcGVydGllc30gKi9cbiAgY29uc3QgcHJvcGVydGllcyA9IHtocmVmOiBub3JtYWxpemVVcmkobm9kZS51cmwpfVxuXG4gIGlmIChub2RlLnRpdGxlICE9PSBudWxsICYmIG5vZGUudGl0bGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHByb3BlcnRpZXMudGl0bGUgPSBub2RlLnRpdGxlXG4gIH1cblxuICAvKiogQHR5cGUge0VsZW1lbnR9ICovXG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICB0eXBlOiAnZWxlbWVudCcsXG4gICAgdGFnTmFtZTogJ2EnLFxuICAgIHByb3BlcnRpZXMsXG4gICAgY2hpbGRyZW46IHN0YXRlLmFsbChub2RlKVxuICB9XG4gIHN0YXRlLnBhdGNoKG5vZGUsIHJlc3VsdClcbiAgcmV0dXJuIHN0YXRlLmFwcGx5RGF0YShub2RlLCByZXN1bHQpXG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50fSBFbGVtZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuUHJvcGVydGllc30gUHJvcGVydGllc1xuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5MaXN0fSBMaXN0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9zdGF0ZS5qcycpLlN0YXRlfSBTdGF0ZVxuICovXG5cbi8qKlxuICogVHVybiBhbiBtZGFzdCBgbGlzdGAgbm9kZSBpbnRvIGhhc3QuXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICogQHBhcmFtIHtMaXN0fSBub2RlXG4gKiAgIG1kYXN0IG5vZGUuXG4gKiBAcmV0dXJucyB7RWxlbWVudH1cbiAqICAgaGFzdCBub2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbGlzdChzdGF0ZSwgbm9kZSkge1xuICAvKiogQHR5cGUge1Byb3BlcnRpZXN9ICovXG4gIGNvbnN0IHByb3BlcnRpZXMgPSB7fVxuICBjb25zdCByZXN1bHRzID0gc3RhdGUuYWxsKG5vZGUpXG4gIGxldCBpbmRleCA9IC0xXG5cbiAgaWYgKHR5cGVvZiBub2RlLnN0YXJ0ID09PSAnbnVtYmVyJyAmJiBub2RlLnN0YXJ0ICE9PSAxKSB7XG4gICAgcHJvcGVydGllcy5zdGFydCA9IG5vZGUuc3RhcnRcbiAgfVxuXG4gIC8vIExpa2UgR2l0SHViLCBhZGQgYSBjbGFzcyBmb3IgY3VzdG9tIHN0eWxpbmcuXG4gIHdoaWxlICgrK2luZGV4IDwgcmVzdWx0cy5sZW5ndGgpIHtcbiAgICBjb25zdCBjaGlsZCA9IHJlc3VsdHNbaW5kZXhdXG5cbiAgICBpZiAoXG4gICAgICBjaGlsZC50eXBlID09PSAnZWxlbWVudCcgJiZcbiAgICAgIGNoaWxkLnRhZ05hbWUgPT09ICdsaScgJiZcbiAgICAgIGNoaWxkLnByb3BlcnRpZXMgJiZcbiAgICAgIEFycmF5LmlzQXJyYXkoY2hpbGQucHJvcGVydGllcy5jbGFzc05hbWUpICYmXG4gICAgICBjaGlsZC5wcm9wZXJ0aWVzLmNsYXNzTmFtZS5pbmNsdWRlcygndGFzay1saXN0LWl0ZW0nKVxuICAgICkge1xuICAgICAgcHJvcGVydGllcy5jbGFzc05hbWUgPSBbJ2NvbnRhaW5zLXRhc2stbGlzdCddXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICB0YWdOYW1lOiBub2RlLm9yZGVyZWQgPyAnb2wnIDogJ3VsJyxcbiAgICBwcm9wZXJ0aWVzLFxuICAgIGNoaWxkcmVuOiBzdGF0ZS53cmFwKHJlc3VsdHMsIHRydWUpXG4gIH1cbiAgc3RhdGUucGF0Y2gobm9kZSwgcmVzdWx0KVxuICByZXR1cm4gc3RhdGUuYXBwbHlEYXRhKG5vZGUsIHJlc3VsdClcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnR9IEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuUGFyYWdyYXBofSBQYXJhZ3JhcGhcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3N0YXRlLmpzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuLyoqXG4gKiBUdXJuIGFuIG1kYXN0IGBwYXJhZ3JhcGhgIG5vZGUgaW50byBoYXN0LlxuICpcbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiAgIEluZm8gcGFzc2VkIGFyb3VuZC5cbiAqIEBwYXJhbSB7UGFyYWdyYXBofSBub2RlXG4gKiAgIG1kYXN0IG5vZGUuXG4gKiBAcmV0dXJucyB7RWxlbWVudH1cbiAqICAgaGFzdCBub2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyYWdyYXBoKHN0YXRlLCBub2RlKSB7XG4gIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICB0YWdOYW1lOiAncCcsXG4gICAgcHJvcGVydGllczoge30sXG4gICAgY2hpbGRyZW46IHN0YXRlLmFsbChub2RlKVxuICB9XG4gIHN0YXRlLnBhdGNoKG5vZGUsIHJlc3VsdClcbiAgcmV0dXJuIHN0YXRlLmFwcGx5RGF0YShub2RlLCByZXN1bHQpXG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5Sb290fSBIYXN0Um9vdFxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnR9IEhhc3RFbGVtZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLlJvb3R9IE1kYXN0Um9vdFxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vc3RhdGUuanMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuXG4vKipcbiAqIFR1cm4gYW4gbWRhc3QgYHJvb3RgIG5vZGUgaW50byBoYXN0LlxuICpcbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiAgIEluZm8gcGFzc2VkIGFyb3VuZC5cbiAqIEBwYXJhbSB7TWRhc3RSb290fSBub2RlXG4gKiAgIG1kYXN0IG5vZGUuXG4gKiBAcmV0dXJucyB7SGFzdFJvb3QgfCBIYXN0RWxlbWVudH1cbiAqICAgaGFzdCBub2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcm9vdChzdGF0ZSwgbm9kZSkge1xuICAvKiogQHR5cGUge0hhc3RSb290fSAqL1xuICBjb25zdCByZXN1bHQgPSB7dHlwZTogJ3Jvb3QnLCBjaGlsZHJlbjogc3RhdGUud3JhcChzdGF0ZS5hbGwobm9kZSkpfVxuICBzdGF0ZS5wYXRjaChub2RlLCByZXN1bHQpXG4gIHJldHVybiBzdGF0ZS5hcHBseURhdGEobm9kZSwgcmVzdWx0KVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRWxlbWVudH0gRWxlbWVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5TdHJvbmd9IFN0cm9uZ1xuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vc3RhdGUuanMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuXG4vKipcbiAqIFR1cm4gYW4gbWRhc3QgYHN0cm9uZ2Agbm9kZSBpbnRvIGhhc3QuXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICogQHBhcmFtIHtTdHJvbmd9IG5vZGVcbiAqICAgbWRhc3Qgbm9kZS5cbiAqIEByZXR1cm5zIHtFbGVtZW50fVxuICogICBoYXN0IG5vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJvbmcoc3RhdGUsIG5vZGUpIHtcbiAgLyoqIEB0eXBlIHtFbGVtZW50fSAqL1xuICBjb25zdCByZXN1bHQgPSB7XG4gICAgdHlwZTogJ2VsZW1lbnQnLFxuICAgIHRhZ05hbWU6ICdzdHJvbmcnLFxuICAgIHByb3BlcnRpZXM6IHt9LFxuICAgIGNoaWxkcmVuOiBzdGF0ZS5hbGwobm9kZSlcbiAgfVxuICBzdGF0ZS5wYXRjaChub2RlLCByZXN1bHQpXG4gIHJldHVybiBzdGF0ZS5hcHBseURhdGEobm9kZSwgcmVzdWx0KVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRWxlbWVudH0gRWxlbWVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5UYWJsZX0gVGFibGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3N0YXRlLmpzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuaW1wb3J0IHtwb2ludFN0YXJ0LCBwb2ludEVuZH0gZnJvbSAndW5pc3QtdXRpbC1wb3NpdGlvbidcblxuLyoqXG4gKiBUdXJuIGFuIG1kYXN0IGB0YWJsZWAgbm9kZSBpbnRvIGhhc3QuXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICogQHBhcmFtIHtUYWJsZX0gbm9kZVxuICogICBtZGFzdCBub2RlLlxuICogQHJldHVybnMge0VsZW1lbnR9XG4gKiAgIGhhc3Qgbm9kZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRhYmxlKHN0YXRlLCBub2RlKSB7XG4gIGNvbnN0IHJvd3MgPSBzdGF0ZS5hbGwobm9kZSlcbiAgY29uc3QgZmlyc3RSb3cgPSByb3dzLnNoaWZ0KClcbiAgLyoqIEB0eXBlIHtBcnJheTxFbGVtZW50Pn0gKi9cbiAgY29uc3QgdGFibGVDb250ZW50ID0gW11cblxuICBpZiAoZmlyc3RSb3cpIHtcbiAgICAvKiogQHR5cGUge0VsZW1lbnR9ICovXG4gICAgY29uc3QgaGVhZCA9IHtcbiAgICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICAgIHRhZ05hbWU6ICd0aGVhZCcsXG4gICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgIGNoaWxkcmVuOiBzdGF0ZS53cmFwKFtmaXJzdFJvd10sIHRydWUpXG4gICAgfVxuICAgIHN0YXRlLnBhdGNoKG5vZGUuY2hpbGRyZW5bMF0sIGhlYWQpXG4gICAgdGFibGVDb250ZW50LnB1c2goaGVhZClcbiAgfVxuXG4gIGlmIChyb3dzLmxlbmd0aCA+IDApIHtcbiAgICAvKiogQHR5cGUge0VsZW1lbnR9ICovXG4gICAgY29uc3QgYm9keSA9IHtcbiAgICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICAgIHRhZ05hbWU6ICd0Ym9keScsXG4gICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgIGNoaWxkcmVuOiBzdGF0ZS53cmFwKHJvd3MsIHRydWUpXG4gICAgfVxuXG4gICAgY29uc3Qgc3RhcnQgPSBwb2ludFN0YXJ0KG5vZGUuY2hpbGRyZW5bMV0pXG4gICAgY29uc3QgZW5kID0gcG9pbnRFbmQobm9kZS5jaGlsZHJlbltub2RlLmNoaWxkcmVuLmxlbmd0aCAtIDFdKVxuICAgIGlmIChzdGFydC5saW5lICYmIGVuZC5saW5lKSBib2R5LnBvc2l0aW9uID0ge3N0YXJ0LCBlbmR9XG4gICAgdGFibGVDb250ZW50LnB1c2goYm9keSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICB0YWdOYW1lOiAndGFibGUnLFxuICAgIHByb3BlcnRpZXM6IHt9LFxuICAgIGNoaWxkcmVuOiBzdGF0ZS53cmFwKHRhYmxlQ29udGVudCwgdHJ1ZSlcbiAgfVxuICBzdGF0ZS5wYXRjaChub2RlLCByZXN1bHQpXG4gIHJldHVybiBzdGF0ZS5hcHBseURhdGEobm9kZSwgcmVzdWx0KVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRWxlbWVudH0gRWxlbWVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5UYWJsZUNlbGx9IFRhYmxlQ2VsbFxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vc3RhdGUuanMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuXG4vKipcbiAqIFR1cm4gYW4gbWRhc3QgYHRhYmxlQ2VsbGAgbm9kZSBpbnRvIGhhc3QuXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICogQHBhcmFtIHtUYWJsZUNlbGx9IG5vZGVcbiAqICAgbWRhc3Qgbm9kZS5cbiAqIEByZXR1cm5zIHtFbGVtZW50fVxuICogICBoYXN0IG5vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0YWJsZUNlbGwoc3RhdGUsIG5vZGUpIHtcbiAgLy8gTm90ZTogdGhpcyBmdW5jdGlvbiBpcyBub3JtYWxseSBub3QgY2FsbGVkOiBzZWUgYHRhYmxlLXJvd2AgZm9yIGhvdyByb3dzXG4gIC8vIGFuZCB0aGVpciBjZWxscyBhcmUgY29tcGlsZWQuXG4gIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICB0YWdOYW1lOiAndGQnLCAvLyBBc3N1bWUgYm9keSBjZWxsLlxuICAgIHByb3BlcnRpZXM6IHt9LFxuICAgIGNoaWxkcmVuOiBzdGF0ZS5hbGwobm9kZSlcbiAgfVxuICBzdGF0ZS5wYXRjaChub2RlLCByZXN1bHQpXG4gIHJldHVybiBzdGF0ZS5hcHBseURhdGEobm9kZSwgcmVzdWx0KVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuUHJvcGVydGllc30gUHJvcGVydGllc1xuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnR9IEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50Q29udGVudH0gRWxlbWVudENvbnRlbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuQ29udGVudH0gQ29udGVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5QYXJlbnR9IFBhcmVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5Sb290fSBSb290XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLlRhYmxlUm93fSBUYWJsZVJvd1xuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vc3RhdGUuanMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtSb290IHwgQ29udGVudH0gTm9kZXNcbiAqIEB0eXBlZGVmIHtFeHRyYWN0PE5vZGVzLCBQYXJlbnQ+fSBQYXJlbnRzXG4gKi9cblxuLyoqXG4gKiBUdXJuIGFuIG1kYXN0IGB0YWJsZVJvd2Agbm9kZSBpbnRvIGhhc3QuXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICogQHBhcmFtIHtUYWJsZVJvd30gbm9kZVxuICogICBtZGFzdCBub2RlLlxuICogQHBhcmFtIHtQYXJlbnRzIHwgbnVsbCB8IHVuZGVmaW5lZH0gcGFyZW50XG4gKiAgIFBhcmVudCBvZiBgbm9kZWAuXG4gKiBAcmV0dXJucyB7RWxlbWVudH1cbiAqICAgaGFzdCBub2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdGFibGVSb3coc3RhdGUsIG5vZGUsIHBhcmVudCkge1xuICBjb25zdCBzaWJsaW5ncyA9IHBhcmVudCA/IHBhcmVudC5jaGlsZHJlbiA6IHVuZGVmaW5lZFxuICAvLyBHZW5lcmF0ZSBhIGJvZHkgcm93IHdoZW4gd2l0aG91dCBwYXJlbnQuXG4gIGNvbnN0IHJvd0luZGV4ID0gc2libGluZ3MgPyBzaWJsaW5ncy5pbmRleE9mKG5vZGUpIDogMVxuICBjb25zdCB0YWdOYW1lID0gcm93SW5kZXggPT09IDAgPyAndGgnIDogJ3RkJ1xuICBjb25zdCBhbGlnbiA9IHBhcmVudCAmJiBwYXJlbnQudHlwZSA9PT0gJ3RhYmxlJyA/IHBhcmVudC5hbGlnbiA6IHVuZGVmaW5lZFxuICBjb25zdCBsZW5ndGggPSBhbGlnbiA/IGFsaWduLmxlbmd0aCA6IG5vZGUuY2hpbGRyZW4ubGVuZ3RoXG4gIGxldCBjZWxsSW5kZXggPSAtMVxuICAvKiogQHR5cGUge0FycmF5PEVsZW1lbnRDb250ZW50Pn0gKi9cbiAgY29uc3QgY2VsbHMgPSBbXVxuXG4gIHdoaWxlICgrK2NlbGxJbmRleCA8IGxlbmd0aCkge1xuICAgIC8vIE5vdGU6IGNhbiBhbHNvIGJlIHVuZGVmaW5lZC5cbiAgICBjb25zdCBjZWxsID0gbm9kZS5jaGlsZHJlbltjZWxsSW5kZXhdXG4gICAgLyoqIEB0eXBlIHtQcm9wZXJ0aWVzfSAqL1xuICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7fVxuICAgIGNvbnN0IGFsaWduVmFsdWUgPSBhbGlnbiA/IGFsaWduW2NlbGxJbmRleF0gOiB1bmRlZmluZWRcblxuICAgIGlmIChhbGlnblZhbHVlKSB7XG4gICAgICBwcm9wZXJ0aWVzLmFsaWduID0gYWxpZ25WYWx1ZVxuICAgIH1cblxuICAgIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgICBsZXQgcmVzdWx0ID0ge3R5cGU6ICdlbGVtZW50JywgdGFnTmFtZSwgcHJvcGVydGllcywgY2hpbGRyZW46IFtdfVxuXG4gICAgaWYgKGNlbGwpIHtcbiAgICAgIHJlc3VsdC5jaGlsZHJlbiA9IHN0YXRlLmFsbChjZWxsKVxuICAgICAgc3RhdGUucGF0Y2goY2VsbCwgcmVzdWx0KVxuICAgICAgcmVzdWx0ID0gc3RhdGUuYXBwbHlEYXRhKG5vZGUsIHJlc3VsdClcbiAgICB9XG5cbiAgICBjZWxscy5wdXNoKHJlc3VsdClcbiAgfVxuXG4gIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICB0YWdOYW1lOiAndHInLFxuICAgIHByb3BlcnRpZXM6IHt9LFxuICAgIGNoaWxkcmVuOiBzdGF0ZS53cmFwKGNlbGxzLCB0cnVlKVxuICB9XG4gIHN0YXRlLnBhdGNoKG5vZGUsIHJlc3VsdClcbiAgcmV0dXJuIHN0YXRlLmFwcGx5RGF0YShub2RlLCByZXN1bHQpXG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50fSBIYXN0RWxlbWVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLlRleHR9IEhhc3RUZXh0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLlRleHR9IE1kYXN0VGV4dFxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vc3RhdGUuanMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuXG5pbXBvcnQge3RyaW1MaW5lc30gZnJvbSAndHJpbS1saW5lcydcblxuLyoqXG4gKiBUdXJuIGFuIG1kYXN0IGB0ZXh0YCBub2RlIGludG8gaGFzdC5cbiAqXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQuXG4gKiBAcGFyYW0ge01kYXN0VGV4dH0gbm9kZVxuICogICBtZGFzdCBub2RlLlxuICogQHJldHVybnMge0hhc3RUZXh0IHwgSGFzdEVsZW1lbnR9XG4gKiAgIGhhc3Qgbm9kZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRleHQoc3RhdGUsIG5vZGUpIHtcbiAgLyoqIEB0eXBlIHtIYXN0VGV4dH0gKi9cbiAgY29uc3QgcmVzdWx0ID0ge3R5cGU6ICd0ZXh0JywgdmFsdWU6IHRyaW1MaW5lcyhTdHJpbmcobm9kZS52YWx1ZSkpfVxuICBzdGF0ZS5wYXRjaChub2RlLCByZXN1bHQpXG4gIHJldHVybiBzdGF0ZS5hcHBseURhdGEobm9kZSwgcmVzdWx0KVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRWxlbWVudH0gRWxlbWVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5UaGVtYXRpY0JyZWFrfSBUaGVtYXRpY0JyZWFrXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9zdGF0ZS5qcycpLlN0YXRlfSBTdGF0ZVxuICovXG5cbi8qKlxuICogVHVybiBhbiBtZGFzdCBgdGhlbWF0aWNCcmVha2Agbm9kZSBpbnRvIGhhc3QuXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICogQHBhcmFtIHtUaGVtYXRpY0JyZWFrfSBub2RlXG4gKiAgIG1kYXN0IG5vZGUuXG4gKiBAcmV0dXJucyB7RWxlbWVudH1cbiAqICAgaGFzdCBub2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdGhlbWF0aWNCcmVhayhzdGF0ZSwgbm9kZSkge1xuICAvKiogQHR5cGUge0VsZW1lbnR9ICovXG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICB0eXBlOiAnZWxlbWVudCcsXG4gICAgdGFnTmFtZTogJ2hyJyxcbiAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICBjaGlsZHJlbjogW11cbiAgfVxuICBzdGF0ZS5wYXRjaChub2RlLCByZXN1bHQpXG4gIHJldHVybiBzdGF0ZS5hcHBseURhdGEobm9kZSwgcmVzdWx0KVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuQ29udGVudH0gSGFzdENvbnRlbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50fSBIYXN0RWxlbWVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnRDb250ZW50fSBIYXN0RWxlbWVudENvbnRlbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5Qcm9wZXJ0aWVzfSBIYXN0UHJvcGVydGllc1xuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLlJvb3R9IEhhc3RSb290XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuVGV4dH0gSGFzdFRleHRcbiAqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkNvbnRlbnR9IE1kYXN0Q29udGVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5EZWZpbml0aW9ufSBNZGFzdERlZmluaXRpb25cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuRm9vdG5vdGVEZWZpbml0aW9ufSBNZGFzdEZvb3Rub3RlRGVmaW5pdGlvblxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5QYXJlbnR9IE1kYXN0UGFyZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLlJvb3R9IE1kYXN0Um9vdFxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge0hhc3RSb290IHwgSGFzdENvbnRlbnR9IEhhc3ROb2Rlc1xuICogQHR5cGVkZWYge01kYXN0Um9vdCB8IE1kYXN0Q29udGVudH0gTWRhc3ROb2Rlc1xuICogQHR5cGVkZWYge0V4dHJhY3Q8TWRhc3ROb2RlcywgTWRhc3RQYXJlbnQ+fSBNZGFzdFBhcmVudHNcbiAqXG4gKiBAdHlwZWRlZiBFbWJlZGRlZEhhc3RGaWVsZHNcbiAqICAgaGFzdCBmaWVsZHMuXG4gKiBAcHJvcGVydHkge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtoTmFtZV1cbiAqICAgR2VuZXJhdGUgYSBzcGVjaWZpYyBlbGVtZW50IHdpdGggdGhpcyB0YWcgbmFtZSBpbnN0ZWFkLlxuICogQHByb3BlcnR5IHtIYXN0UHJvcGVydGllcyB8IG51bGwgfCB1bmRlZmluZWR9IFtoUHJvcGVydGllc11cbiAqICAgR2VuZXJhdGUgYW4gZWxlbWVudCB3aXRoIHRoZXNlIHByb3BlcnRpZXMgaW5zdGVhZC5cbiAqIEBwcm9wZXJ0eSB7QXJyYXk8SGFzdEVsZW1lbnRDb250ZW50PiB8IG51bGwgfCB1bmRlZmluZWR9IFtoQ2hpbGRyZW5dXG4gKiAgIEdlbmVyYXRlIGFuIGVsZW1lbnQgd2l0aCB0aGlzIGNvbnRlbnQgaW5zdGVhZC5cbiAqXG4gKiBAdHlwZWRlZiB7UmVjb3JkPHN0cmluZywgdW5rbm93bj4gJiBFbWJlZGRlZEhhc3RGaWVsZHN9IE1kYXN0RGF0YVxuICogICBtZGFzdCBkYXRhIHdpdGggZW1iZWRkZWQgaGFzdCBmaWVsZHMuXG4gKlxuICogQHR5cGVkZWYge01kYXN0Tm9kZXMgJiB7ZGF0YT86IE1kYXN0RGF0YSB8IG51bGwgfCB1bmRlZmluZWR9fSBNZGFzdE5vZGVXaXRoRGF0YVxuICogICBtZGFzdCBub2RlIHdpdGggZW1iZWRkZWQgaGFzdCBkYXRhLlxuICpcbiAqIEB0eXBlZGVmIFBvaW50TGlrZVxuICogICBQb2ludC1saWtlIHZhbHVlLlxuICogQHByb3BlcnR5IHtudW1iZXIgfCBudWxsIHwgdW5kZWZpbmVkfSBbbGluZV1cbiAqICAgTGluZS5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NvbHVtbl1cbiAqICAgQ29sdW1uLlxuICogQHByb3BlcnR5IHtudW1iZXIgfCBudWxsIHwgdW5kZWZpbmVkfSBbb2Zmc2V0XVxuICogICBPZmZzZXQuXG4gKlxuICogQHR5cGVkZWYgUG9zaXRpb25MaWtlXG4gKiAgIFBvc2l0aW9uLWxpa2UgdmFsdWUuXG4gKiBAcHJvcGVydHkge1BvaW50TGlrZSB8IG51bGwgfCB1bmRlZmluZWR9IFtzdGFydF1cbiAqICAgUG9pbnQtbGlrZSB2YWx1ZS5cbiAqIEBwcm9wZXJ0eSB7UG9pbnRMaWtlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2VuZF1cbiAqICAgUG9pbnQtbGlrZSB2YWx1ZS5cbiAqXG4gKiBAY2FsbGJhY2sgSGFuZGxlclxuICogICBIYW5kbGUgYSBub2RlLlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICogQHBhcmFtIHthbnl9IG5vZGVcbiAqICAgbWRhc3Qgbm9kZSB0byBoYW5kbGUuXG4gKiBAcGFyYW0ge01kYXN0UGFyZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IHBhcmVudFxuICogICBQYXJlbnQgb2YgYG5vZGVgLlxuICogQHJldHVybnMge0hhc3RFbGVtZW50Q29udGVudCB8IEFycmF5PEhhc3RFbGVtZW50Q29udGVudD4gfCBudWxsIHwgdW5kZWZpbmVkfVxuICogICBoYXN0IG5vZGUuXG4gKlxuICogQGNhbGxiYWNrIEhGdW5jdGlvblByb3BzXG4gKiAgIFNpZ25hdHVyZSBvZiBgc3RhdGVgIGZvciB3aGVuIHByb3BzIGFyZSBwYXNzZWQuXG4gKiBAcGFyYW0ge01kYXN0Tm9kZXMgfCBQb3NpdGlvbkxpa2UgfCBudWxsIHwgdW5kZWZpbmVkfSBub2RlXG4gKiAgIG1kYXN0IG5vZGUgb3IgdW5pc3QgcG9zaXRpb24uXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnTmFtZVxuICogICBIVE1MIHRhZyBuYW1lLlxuICogQHBhcmFtIHtIYXN0UHJvcGVydGllc30gcHJvcHNcbiAqICAgUHJvcGVydGllcy5cbiAqIEBwYXJhbSB7QXJyYXk8SGFzdEVsZW1lbnRDb250ZW50PiB8IG51bGwgfCB1bmRlZmluZWR9IFtjaGlsZHJlbl1cbiAqICAgaGFzdCBjb250ZW50LlxuICogQHJldHVybnMge0hhc3RFbGVtZW50fVxuICogICBDb21waWxlZCBlbGVtZW50LlxuICpcbiAqIEBjYWxsYmFjayBIRnVuY3Rpb25Ob1Byb3BzXG4gKiAgIFNpZ25hdHVyZSBvZiBgc3RhdGVgIGZvciB3aGVuIG5vIHByb3BzIGFyZSBwYXNzZWQuXG4gKiBAcGFyYW0ge01kYXN0Tm9kZXMgfCBQb3NpdGlvbkxpa2UgfCBudWxsIHwgdW5kZWZpbmVkfSBub2RlXG4gKiAgIG1kYXN0IG5vZGUgb3IgdW5pc3QgcG9zaXRpb24uXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnTmFtZVxuICogICBIVE1MIHRhZyBuYW1lLlxuICogQHBhcmFtIHtBcnJheTxIYXN0RWxlbWVudENvbnRlbnQ+IHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NoaWxkcmVuXVxuICogICBoYXN0IGNvbnRlbnQuXG4gKiBAcmV0dXJucyB7SGFzdEVsZW1lbnR9XG4gKiAgIENvbXBpbGVkIGVsZW1lbnQuXG4gKlxuICogQHR5cGVkZWYgSEZpZWxkc1xuICogICBJbmZvIG9uIGBzdGF0ZWAuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGRhbmdlcm91c1xuICogICBXaGV0aGVyIEhUTUwgaXMgYWxsb3dlZC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjbG9iYmVyUHJlZml4XG4gKiAgIFByZWZpeCB0byB1c2UgdG8gcHJldmVudCBET00gY2xvYmJlcmluZy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBmb290bm90ZUxhYmVsXG4gKiAgIExhYmVsIHRvIHVzZSB0byBpbnRyb2R1Y2UgdGhlIGZvb3Rub3RlIHNlY3Rpb24uXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZm9vdG5vdGVMYWJlbFRhZ05hbWVcbiAqICAgSFRNTCB1c2VkIGZvciB0aGUgZm9vdG5vdGUgbGFiZWwuXG4gKiBAcHJvcGVydHkge0hhc3RQcm9wZXJ0aWVzfSBmb290bm90ZUxhYmVsUHJvcGVydGllc1xuICogICBQcm9wZXJ0aWVzIG9uIHRoZSBIVE1MIHRhZyB1c2VkIGZvciB0aGUgZm9vdG5vdGUgbGFiZWwuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZm9vdG5vdGVCYWNrTGFiZWxcbiAqICAgTGFiZWwgdG8gdXNlIGZyb20gYmFja3JlZmVyZW5jZXMgYmFjayB0byB0aGVpciBmb290bm90ZSBjYWxsLlxuICogQHByb3BlcnR5IHsoaWRlbnRpZmllcjogc3RyaW5nKSA9PiBNZGFzdERlZmluaXRpb24gfCBudWxsfSBkZWZpbml0aW9uXG4gKiAgIERlZmluaXRpb24gY2FjaGUuXG4gKiBAcHJvcGVydHkge1JlY29yZDxzdHJpbmcsIE1kYXN0Rm9vdG5vdGVEZWZpbml0aW9uPn0gZm9vdG5vdGVCeUlkXG4gKiAgIEZvb3Rub3RlIGRlZmluaXRpb25zIGJ5IHRoZWlyIGlkZW50aWZpZXIuXG4gKiBAcHJvcGVydHkge0FycmF5PHN0cmluZz59IGZvb3Rub3RlT3JkZXJcbiAqICAgSWRlbnRpZmllcnMgb2Ygb3JkZXIgd2hlbiBmb290bm90ZSBjYWxscyBmaXJzdCBhcHBlYXIgaW4gdHJlZSBvcmRlci5cbiAqIEBwcm9wZXJ0eSB7UmVjb3JkPHN0cmluZywgbnVtYmVyPn0gZm9vdG5vdGVDb3VudHNcbiAqICAgQ291bnRzIGZvciBob3cgb2Z0ZW4gdGhlIHNhbWUgZm9vdG5vdGUgd2FzIGNhbGxlZC5cbiAqIEBwcm9wZXJ0eSB7SGFuZGxlcnN9IGhhbmRsZXJzXG4gKiAgIEFwcGxpZWQgaGFuZGxlcnMuXG4gKiBAcHJvcGVydHkge0hhbmRsZXJ9IHVua25vd25IYW5kbGVyXG4gKiAgIEhhbmRsZXIgZm9yIGFueSBub25lIG5vdCBpbiBgcGFzc1Rocm91Z2hgIG9yIG90aGVyd2lzZSBoYW5kbGVkLlxuICogQHByb3BlcnR5IHsoZnJvbTogTWRhc3ROb2Rlcywgbm9kZTogSGFzdE5vZGVzKSA9PiB2b2lkfSBwYXRjaFxuICogICBDb3B5IGEgbm9kZeKAmXMgcG9zaXRpb25hbCBpbmZvLlxuICogQHByb3BlcnR5IHs8VHlwZSBleHRlbmRzIEhhc3ROb2Rlcz4oZnJvbTogTWRhc3ROb2RlcywgdG86IFR5cGUpID0+IFR5cGUgfCBIYXN0RWxlbWVudH0gYXBwbHlEYXRhXG4gKiAgIEhvbm9yIHRoZSBgZGF0YWAgb2YgYGZyb21gLCBhbmQgZ2VuZXJhdGUgYW4gZWxlbWVudCBpbnN0ZWFkIG9mIGBub2RlYC5cbiAqIEBwcm9wZXJ0eSB7KG5vZGU6IE1kYXN0Tm9kZXMsIHBhcmVudDogTWRhc3RQYXJlbnRzIHwgbnVsbCB8IHVuZGVmaW5lZCkgPT4gSGFzdEVsZW1lbnRDb250ZW50IHwgQXJyYXk8SGFzdEVsZW1lbnRDb250ZW50PiB8IG51bGwgfCB1bmRlZmluZWR9IG9uZVxuICogICBUcmFuc2Zvcm0gYW4gbWRhc3Qgbm9kZSB0byBoYXN0LlxuICogQHByb3BlcnR5IHsobm9kZTogTWRhc3ROb2RlcykgPT4gQXJyYXk8SGFzdEVsZW1lbnRDb250ZW50Pn0gYWxsXG4gKiAgIFRyYW5zZm9ybSB0aGUgY2hpbGRyZW4gb2YgYW4gbWRhc3QgcGFyZW50IHRvIGhhc3QuXG4gKiBAcHJvcGVydHkgezxUeXBlIGV4dGVuZHMgSGFzdENvbnRlbnQ+KG5vZGVzOiBBcnJheTxUeXBlPiwgbG9vc2U/OiBib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZCkgPT4gQXJyYXk8VHlwZSB8IEhhc3RUZXh0Pn0gd3JhcFxuICogICBXcmFwIGBub2Rlc2Agd2l0aCBsaW5lIGVuZGluZ3MgYmV0d2VlbiBlYWNoIG5vZGUsIGFkZHMgaW5pdGlhbC9maW5hbCBsaW5lIGVuZGluZ3Mgd2hlbiBgbG9vc2VgLlxuICogQHByb3BlcnR5IHsobGVmdDogTWRhc3ROb2RlV2l0aERhdGEgfCBQb3NpdGlvbkxpa2UgfCBudWxsIHwgdW5kZWZpbmVkLCByaWdodDogSGFzdEVsZW1lbnRDb250ZW50KSA9PiBIYXN0RWxlbWVudENvbnRlbnR9IGF1Z21lbnRcbiAqICAgTGlrZSBgc3RhdGVgIGJ1dCBsb3dlci1sZXZlbCBhbmQgdXNhYmxlIG9uIG5vbi1lbGVtZW50cy5cbiAqICAgRGVwcmVjYXRlZDogdXNlIGBwYXRjaGAgYW5kIGBhcHBseURhdGFgLlxuICogQHByb3BlcnR5IHtBcnJheTxzdHJpbmc+fSBwYXNzVGhyb3VnaFxuICogICBMaXN0IG9mIG5vZGUgdHlwZXMgdG8gcGFzcyB0aHJvdWdoIHVudG91Y2hlZCAoZXhjZXB0IGZvciB0aGVpciBjaGlsZHJlbikuXG4gKlxuICogQHR5cGVkZWYgT3B0aW9uc1xuICogICBDb25maWd1cmF0aW9uIChvcHRpb25hbCkuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW4gfCBudWxsIHwgdW5kZWZpbmVkfSBbYWxsb3dEYW5nZXJvdXNIdG1sPWZhbHNlXVxuICogICBXaGV0aGVyIHRvIHBlcnNpc3QgcmF3IEhUTUwgaW4gbWFya2Rvd24gaW4gdGhlIGhhc3QgdHJlZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2Nsb2JiZXJQcmVmaXg9J3VzZXItY29udGVudC0nXVxuICogICBQcmVmaXggdG8gdXNlIGJlZm9yZSB0aGUgYGlkYCBhdHRyaWJ1dGUgb24gZm9vdG5vdGVzIHRvIHByZXZlbnQgaXQgZnJvbVxuICogICAqY2xvYmJlcmluZyouXG4gKiBAcHJvcGVydHkge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtmb290bm90ZUJhY2tMYWJlbD0nQmFjayB0byBjb250ZW50J11cbiAqICAgTGFiZWwgdG8gdXNlIGZyb20gYmFja3JlZmVyZW5jZXMgYmFjayB0byB0aGVpciBmb290bm90ZSBjYWxsIChhZmZlY3RzXG4gKiAgIHNjcmVlbiByZWFkZXJzKS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2Zvb3Rub3RlTGFiZWw9J0Zvb3Rub3RlcyddXG4gKiAgIExhYmVsIHRvIHVzZSBmb3IgdGhlIGZvb3Rub3RlcyBzZWN0aW9uIChhZmZlY3RzIHNjcmVlbiByZWFkZXJzKS5cbiAqIEBwcm9wZXJ0eSB7SGFzdFByb3BlcnRpZXMgfCBudWxsIHwgdW5kZWZpbmVkfSBbZm9vdG5vdGVMYWJlbFByb3BlcnRpZXM9e2NsYXNzTmFtZTogWydzci1vbmx5J119XVxuICogICBQcm9wZXJ0aWVzIHRvIHVzZSBvbiB0aGUgZm9vdG5vdGUgbGFiZWwgKG5vdGUgdGhhdCBgaWQ6ICdmb290bm90ZS1sYWJlbCdgXG4gKiAgIGlzIGFsd2F5cyBhZGRlZCBhcyBmb290bm90ZSBjYWxscyB1c2UgaXQgd2l0aCBgYXJpYS1kZXNjcmliZWRieWAgdG9cbiAqICAgcHJvdmlkZSBhbiBhY2Nlc3NpYmxlIGxhYmVsKS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2Zvb3Rub3RlTGFiZWxUYWdOYW1lPSdoMiddXG4gKiAgIFRhZyBuYW1lIHRvIHVzZSBmb3IgdGhlIGZvb3Rub3RlIGxhYmVsLlxuICogQHByb3BlcnR5IHtIYW5kbGVycyB8IG51bGwgfCB1bmRlZmluZWR9IFtoYW5kbGVyc11cbiAqICAgRXh0cmEgaGFuZGxlcnMgZm9yIG5vZGVzLlxuICogQHByb3BlcnR5IHtBcnJheTxzdHJpbmc+IHwgbnVsbCB8IHVuZGVmaW5lZH0gW3Bhc3NUaHJvdWdoXVxuICogICBMaXN0IG9mIGN1c3RvbSBtZGFzdCBub2RlIHR5cGVzIHRvIHBhc3MgdGhyb3VnaCAoa2VlcCkgaW4gaGFzdCAobm90ZSB0aGF0XG4gKiAgIHRoZSBub2RlIGl0c2VsZiBpcyBwYXNzZWQsIGJ1dCBldmVudHVhbCBjaGlsZHJlbiBhcmUgdHJhbnNmb3JtZWQpLlxuICogQHByb3BlcnR5IHtIYW5kbGVyIHwgbnVsbCB8IHVuZGVmaW5lZH0gW3Vua25vd25IYW5kbGVyXVxuICogICBIYW5kbGVyIGZvciBhbGwgdW5rbm93biBub2Rlcy5cbiAqXG4gKiBAdHlwZWRlZiB7UmVjb3JkPHN0cmluZywgSGFuZGxlcj59IEhhbmRsZXJzXG4gKiAgIEhhbmRsZSBub2Rlcy5cbiAqXG4gKiBAdHlwZWRlZiB7SEZ1bmN0aW9uUHJvcHMgJiBIRnVuY3Rpb25Ob1Byb3BzICYgSEZpZWxkc30gU3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICovXG5cbmltcG9ydCB7dmlzaXR9IGZyb20gJ3VuaXN0LXV0aWwtdmlzaXQnXG5pbXBvcnQge3Bvc2l0aW9uLCBwb2ludFN0YXJ0LCBwb2ludEVuZH0gZnJvbSAndW5pc3QtdXRpbC1wb3NpdGlvbidcbmltcG9ydCB7Z2VuZXJhdGVkfSBmcm9tICd1bmlzdC11dGlsLWdlbmVyYXRlZCdcbmltcG9ydCB7ZGVmaW5pdGlvbnN9IGZyb20gJ21kYXN0LXV0aWwtZGVmaW5pdGlvbnMnXG5pbXBvcnQge2hhbmRsZXJzfSBmcm9tICcuL2hhbmRsZXJzL2luZGV4LmpzJ1xuXG5jb25zdCBvd24gPSB7fS5oYXNPd25Qcm9wZXJ0eVxuXG4vKipcbiAqIENyZWF0ZSBgc3RhdGVgIGZyb20gYW4gbWRhc3QgdHJlZS5cbiAqXG4gKiBAcGFyYW0ge01kYXN0Tm9kZXN9IHRyZWVcbiAqICAgbWRhc3Qgbm9kZSB0byB0cmFuc2Zvcm0uXG4gKiBAcGFyYW0ge09wdGlvbnMgfCBudWxsIHwgdW5kZWZpbmVkfSBbb3B0aW9uc11cbiAqICAgQ29uZmlndXJhdGlvbi5cbiAqIEByZXR1cm5zIHtTdGF0ZX1cbiAqICAgYHN0YXRlYCBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0YXRlKHRyZWUsIG9wdGlvbnMpIHtcbiAgY29uc3Qgc2V0dGluZ3MgPSBvcHRpb25zIHx8IHt9XG4gIGNvbnN0IGRhbmdlcm91cyA9IHNldHRpbmdzLmFsbG93RGFuZ2Vyb3VzSHRtbCB8fCBmYWxzZVxuICAvKiogQHR5cGUge1JlY29yZDxzdHJpbmcsIE1kYXN0Rm9vdG5vdGVEZWZpbml0aW9uPn0gKi9cbiAgY29uc3QgZm9vdG5vdGVCeUlkID0ge31cblxuICAvLyBUbyBkbzogbmV4dCBtYWpvcjogYWRkIGBvcHRpb25zYCB0byBzdGF0ZSwgcmVtb3ZlOlxuICAvLyBgZGFuZ2Vyb3VzYCwgYGNsb2JiZXJQcmVmaXhgLCBgZm9vdG5vdGVMYWJlbGAsIGBmb290bm90ZUxhYmVsVGFnTmFtZWAsXG4gIC8vIGBmb290bm90ZUxhYmVsUHJvcGVydGllc2AsIGBmb290bm90ZUJhY2tMYWJlbGAsIGBwYXNzVGhyb3VnaGAsXG4gIC8vIGB1bmtub3duSGFuZGxlcmAuXG5cbiAgLy8gVG8gZG86IG5leHQgbWFqb3I6IG1vdmUgdG8gYHN0YXRlLm9wdGlvbnMuYWxsb3dEYW5nZXJvdXNIdG1sYC5cbiAgc3RhdGUuZGFuZ2Vyb3VzID0gZGFuZ2Vyb3VzXG4gIC8vIFRvIGRvOiBuZXh0IG1ham9yOiBtb3ZlIHRvIGBzdGF0ZS5vcHRpb25zYC5cbiAgc3RhdGUuY2xvYmJlclByZWZpeCA9XG4gICAgc2V0dGluZ3MuY2xvYmJlclByZWZpeCA9PT0gdW5kZWZpbmVkIHx8IHNldHRpbmdzLmNsb2JiZXJQcmVmaXggPT09IG51bGxcbiAgICAgID8gJ3VzZXItY29udGVudC0nXG4gICAgICA6IHNldHRpbmdzLmNsb2JiZXJQcmVmaXhcbiAgLy8gVG8gZG86IG5leHQgbWFqb3I6IG1vdmUgdG8gYHN0YXRlLm9wdGlvbnNgLlxuICBzdGF0ZS5mb290bm90ZUxhYmVsID0gc2V0dGluZ3MuZm9vdG5vdGVMYWJlbCB8fCAnRm9vdG5vdGVzJ1xuICAvLyBUbyBkbzogbmV4dCBtYWpvcjogbW92ZSB0byBgc3RhdGUub3B0aW9uc2AuXG4gIHN0YXRlLmZvb3Rub3RlTGFiZWxUYWdOYW1lID0gc2V0dGluZ3MuZm9vdG5vdGVMYWJlbFRhZ05hbWUgfHwgJ2gyJ1xuICAvLyBUbyBkbzogbmV4dCBtYWpvcjogbW92ZSB0byBgc3RhdGUub3B0aW9uc2AuXG4gIHN0YXRlLmZvb3Rub3RlTGFiZWxQcm9wZXJ0aWVzID0gc2V0dGluZ3MuZm9vdG5vdGVMYWJlbFByb3BlcnRpZXMgfHwge1xuICAgIGNsYXNzTmFtZTogWydzci1vbmx5J11cbiAgfVxuICAvLyBUbyBkbzogbmV4dCBtYWpvcjogbW92ZSB0byBgc3RhdGUub3B0aW9uc2AuXG4gIHN0YXRlLmZvb3Rub3RlQmFja0xhYmVsID0gc2V0dGluZ3MuZm9vdG5vdGVCYWNrTGFiZWwgfHwgJ0JhY2sgdG8gY29udGVudCdcbiAgLy8gVG8gZG86IG5leHQgbWFqb3I6IG1vdmUgdG8gYHN0YXRlLm9wdGlvbnNgLlxuICBzdGF0ZS51bmtub3duSGFuZGxlciA9IHNldHRpbmdzLnVua25vd25IYW5kbGVyXG4gIC8vIFRvIGRvOiBuZXh0IG1ham9yOiBtb3ZlIHRvIGBzdGF0ZS5vcHRpb25zYC5cbiAgc3RhdGUucGFzc1Rocm91Z2ggPSBzZXR0aW5ncy5wYXNzVGhyb3VnaFxuXG4gIHN0YXRlLmhhbmRsZXJzID0gey4uLmhhbmRsZXJzLCAuLi5zZXR0aW5ncy5oYW5kbGVyc31cblxuICAvLyBUbyBkbzogbmV4dCBtYWpvcjogcmVwbGFjZSB1dGlsaXR5IHdpdGggYGRlZmluaXRpb25CeUlkYCBvYmplY3QsIHNvIHdlXG4gIC8vIG9ubHkgd2FsayBvbmNlIChhcyB3ZSBuZWVkIGZvb3Rub3RlcyB0b28pLlxuICBzdGF0ZS5kZWZpbml0aW9uID0gZGVmaW5pdGlvbnModHJlZSlcbiAgc3RhdGUuZm9vdG5vdGVCeUlkID0gZm9vdG5vdGVCeUlkXG4gIC8qKiBAdHlwZSB7QXJyYXk8c3RyaW5nPn0gKi9cbiAgc3RhdGUuZm9vdG5vdGVPcmRlciA9IFtdXG4gIC8qKiBAdHlwZSB7UmVjb3JkPHN0cmluZywgbnVtYmVyPn0gKi9cbiAgc3RhdGUuZm9vdG5vdGVDb3VudHMgPSB7fVxuXG4gIHN0YXRlLnBhdGNoID0gcGF0Y2hcbiAgc3RhdGUuYXBwbHlEYXRhID0gYXBwbHlEYXRhXG4gIHN0YXRlLm9uZSA9IG9uZUJvdW5kXG4gIHN0YXRlLmFsbCA9IGFsbEJvdW5kXG4gIHN0YXRlLndyYXAgPSB3cmFwXG4gIC8vIFRvIGRvOiBuZXh0IG1ham9yOiByZW1vdmUgYGF1Z21lbnRgLlxuICBzdGF0ZS5hdWdtZW50ID0gYXVnbWVudFxuXG4gIHZpc2l0KHRyZWUsICdmb290bm90ZURlZmluaXRpb24nLCAoZGVmaW5pdGlvbikgPT4ge1xuICAgIGNvbnN0IGlkID0gU3RyaW5nKGRlZmluaXRpb24uaWRlbnRpZmllcikudG9VcHBlckNhc2UoKVxuXG4gICAgLy8gTWltaWNrIENNIGJlaGF2aW9yIG9mIGxpbmsgZGVmaW5pdGlvbnMuXG4gICAgLy8gU2VlOiA8aHR0cHM6Ly9naXRodWIuY29tL3N5bnRheC10cmVlL21kYXN0LXV0aWwtZGVmaW5pdGlvbnMvYmxvYi84MjkwOTk5L2luZGV4LmpzI0wyNj4uXG4gICAgaWYgKCFvd24uY2FsbChmb290bm90ZUJ5SWQsIGlkKSkge1xuICAgICAgZm9vdG5vdGVCeUlkW2lkXSA9IGRlZmluaXRpb25cbiAgICB9XG4gIH0pXG5cbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBIdXNoLCBpdOKAmXMgZmluZSFcbiAgcmV0dXJuIHN0YXRlXG5cbiAgLyoqXG4gICAqIEZpbmFsaXNlIHRoZSBjcmVhdGVkIGByaWdodGAsIGEgaGFzdCBub2RlLCBmcm9tIGBsZWZ0YCwgYW4gbWRhc3Qgbm9kZS5cbiAgICpcbiAgICogQHBhcmFtIHtNZGFzdE5vZGVXaXRoRGF0YSB8IFBvc2l0aW9uTGlrZSB8IG51bGwgfCB1bmRlZmluZWR9IGxlZnRcbiAgICogQHBhcmFtIHtIYXN0RWxlbWVudENvbnRlbnR9IHJpZ2h0XG4gICAqIEByZXR1cm5zIHtIYXN0RWxlbWVudENvbnRlbnR9XG4gICAqL1xuICAvKiBjOCBpZ25vcmUgc3RhcnQgKi9cbiAgLy8gVG8gZG86IG5leHQgbWFqb3I6IHJlbW92ZS5cbiAgZnVuY3Rpb24gYXVnbWVudChsZWZ0LCByaWdodCkge1xuICAgIC8vIEhhbmRsZSBgZGF0YS5oTmFtZWAsIGBkYXRhLmhQcm9wZXJ0aWVzLCBgZGF0YS5oQ2hpbGRyZW5gLlxuICAgIGlmIChsZWZ0ICYmICdkYXRhJyBpbiBsZWZ0ICYmIGxlZnQuZGF0YSkge1xuICAgICAgLyoqIEB0eXBlIHtNZGFzdERhdGF9ICovXG4gICAgICBjb25zdCBkYXRhID0gbGVmdC5kYXRhXG5cbiAgICAgIGlmIChkYXRhLmhOYW1lKSB7XG4gICAgICAgIGlmIChyaWdodC50eXBlICE9PSAnZWxlbWVudCcpIHtcbiAgICAgICAgICByaWdodCA9IHtcbiAgICAgICAgICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICAgICAgICAgIHRhZ05hbWU6ICcnLFxuICAgICAgICAgICAgcHJvcGVydGllczoge30sXG4gICAgICAgICAgICBjaGlsZHJlbjogW11cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByaWdodC50YWdOYW1lID0gZGF0YS5oTmFtZVxuICAgICAgfVxuXG4gICAgICBpZiAocmlnaHQudHlwZSA9PT0gJ2VsZW1lbnQnICYmIGRhdGEuaFByb3BlcnRpZXMpIHtcbiAgICAgICAgcmlnaHQucHJvcGVydGllcyA9IHsuLi5yaWdodC5wcm9wZXJ0aWVzLCAuLi5kYXRhLmhQcm9wZXJ0aWVzfVxuICAgICAgfVxuXG4gICAgICBpZiAoJ2NoaWxkcmVuJyBpbiByaWdodCAmJiByaWdodC5jaGlsZHJlbiAmJiBkYXRhLmhDaGlsZHJlbikge1xuICAgICAgICByaWdodC5jaGlsZHJlbiA9IGRhdGEuaENoaWxkcmVuXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGxlZnQpIHtcbiAgICAgIGNvbnN0IGN0eCA9ICd0eXBlJyBpbiBsZWZ0ID8gbGVmdCA6IHtwb3NpdGlvbjogbGVmdH1cblxuICAgICAgaWYgKCFnZW5lcmF0ZWQoY3R4KSkge1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBmaW5lLlxuICAgICAgICByaWdodC5wb3NpdGlvbiA9IHtzdGFydDogcG9pbnRTdGFydChjdHgpLCBlbmQ6IHBvaW50RW5kKGN0eCl9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJpZ2h0XG4gIH1cbiAgLyogYzggaWdub3JlIHN0b3AgKi9cblxuICAvKipcbiAgICogQ3JlYXRlIGFuIGVsZW1lbnQgZm9yIGBub2RlYC5cbiAgICpcbiAgICogQHR5cGUge0hGdW5jdGlvblByb3BzfVxuICAgKi9cbiAgLyogYzggaWdub3JlIHN0YXJ0ICovXG4gIC8vIFRvIGRvOiBuZXh0IG1ham9yOiByZW1vdmUuXG4gIGZ1bmN0aW9uIHN0YXRlKG5vZGUsIHRhZ05hbWUsIHByb3BzLCBjaGlsZHJlbikge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHByb3BzKSkge1xuICAgICAgY2hpbGRyZW4gPSBwcm9wc1xuICAgICAgcHJvcHMgPSB7fVxuICAgIH1cblxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgYXVnbWVudGluZyBhbiBlbGVtZW50IHlpZWxkcyBhbiBlbGVtZW50LlxuICAgIHJldHVybiBhdWdtZW50KG5vZGUsIHtcbiAgICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICAgIHRhZ05hbWUsXG4gICAgICBwcm9wZXJ0aWVzOiBwcm9wcyB8fCB7fSxcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlbiB8fCBbXVxuICAgIH0pXG4gIH1cbiAgLyogYzggaWdub3JlIHN0b3AgKi9cblxuICAvKipcbiAgICogVHJhbnNmb3JtIGFuIG1kYXN0IG5vZGUgaW50byBhIGhhc3Qgbm9kZS5cbiAgICpcbiAgICogQHBhcmFtIHtNZGFzdE5vZGVzfSBub2RlXG4gICAqICAgbWRhc3Qgbm9kZS5cbiAgICogQHBhcmFtIHtNZGFzdFBhcmVudHMgfCBudWxsIHwgdW5kZWZpbmVkfSBbcGFyZW50XVxuICAgKiAgIFBhcmVudCBvZiBgbm9kZWAuXG4gICAqIEByZXR1cm5zIHtIYXN0RWxlbWVudENvbnRlbnQgfCBBcnJheTxIYXN0RWxlbWVudENvbnRlbnQ+IHwgbnVsbCB8IHVuZGVmaW5lZH1cbiAgICogICBSZXN1bHRpbmcgaGFzdCBub2RlLlxuICAgKi9cbiAgZnVuY3Rpb24gb25lQm91bmQobm9kZSwgcGFyZW50KSB7XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogdGhhdOKAmXMgYSBzdGF0ZSA6KVxuICAgIHJldHVybiBvbmUoc3RhdGUsIG5vZGUsIHBhcmVudClcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2Zvcm0gdGhlIGNoaWxkcmVuIG9mIGFuIG1kYXN0IG5vZGUgaW50byBoYXN0IG5vZGVzLlxuICAgKlxuICAgKiBAcGFyYW0ge01kYXN0Tm9kZXN9IHBhcmVudFxuICAgKiAgIG1kYXN0IG5vZGUgdG8gY29tcGlsZVxuICAgKiBAcmV0dXJucyB7QXJyYXk8SGFzdEVsZW1lbnRDb250ZW50Pn1cbiAgICogICBSZXN1bHRpbmcgaGFzdCBub2Rlcy5cbiAgICovXG4gIGZ1bmN0aW9uIGFsbEJvdW5kKHBhcmVudCkge1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IHRoYXTigJlzIGEgc3RhdGUgOilcbiAgICByZXR1cm4gYWxsKHN0YXRlLCBwYXJlbnQpXG4gIH1cbn1cblxuLyoqXG4gKiBDb3B5IGEgbm9kZeKAmXMgcG9zaXRpb25hbCBpbmZvLlxuICpcbiAqIEBwYXJhbSB7TWRhc3ROb2Rlc30gZnJvbVxuICogICBtZGFzdCBub2RlIHRvIGNvcHkgZnJvbS5cbiAqIEBwYXJhbSB7SGFzdE5vZGVzfSB0b1xuICogICBoYXN0IG5vZGUgdG8gY29weSBpbnRvLlxuICogQHJldHVybnMge3ZvaWR9XG4gKiAgIE5vdGhpbmcuXG4gKi9cbmZ1bmN0aW9uIHBhdGNoKGZyb20sIHRvKSB7XG4gIGlmIChmcm9tLnBvc2l0aW9uKSB0by5wb3NpdGlvbiA9IHBvc2l0aW9uKGZyb20pXG59XG5cbi8qKlxuICogSG9ub3IgdGhlIGBkYXRhYCBvZiBgZnJvbWAgYW5kIG1heWJlIGdlbmVyYXRlIGFuIGVsZW1lbnQgaW5zdGVhZCBvZiBgdG9gLlxuICpcbiAqIEB0ZW1wbGF0ZSB7SGFzdE5vZGVzfSBUeXBlXG4gKiAgIE5vZGUgdHlwZS5cbiAqIEBwYXJhbSB7TWRhc3ROb2Rlc30gZnJvbVxuICogICBtZGFzdCBub2RlIHRvIHVzZSBkYXRhIGZyb20uXG4gKiBAcGFyYW0ge1R5cGV9IHRvXG4gKiAgIGhhc3Qgbm9kZSB0byBjaGFuZ2UuXG4gKiBAcmV0dXJucyB7VHlwZSB8IEhhc3RFbGVtZW50fVxuICogICBOb3RoaW5nLlxuICovXG5mdW5jdGlvbiBhcHBseURhdGEoZnJvbSwgdG8pIHtcbiAgLyoqIEB0eXBlIHtUeXBlIHwgSGFzdEVsZW1lbnR9ICovXG4gIGxldCByZXN1bHQgPSB0b1xuXG4gIC8vIEhhbmRsZSBgZGF0YS5oTmFtZWAsIGBkYXRhLmhQcm9wZXJ0aWVzLCBgZGF0YS5oQ2hpbGRyZW5gLlxuICBpZiAoZnJvbSAmJiBmcm9tLmRhdGEpIHtcbiAgICBjb25zdCBoTmFtZSA9IGZyb20uZGF0YS5oTmFtZVxuICAgIGNvbnN0IGhDaGlsZHJlbiA9IGZyb20uZGF0YS5oQ2hpbGRyZW5cbiAgICBjb25zdCBoUHJvcGVydGllcyA9IGZyb20uZGF0YS5oUHJvcGVydGllc1xuXG4gICAgaWYgKHR5cGVvZiBoTmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIFRyYW5zZm9ybWluZyB0aGUgbm9kZSByZXN1bHRlZCBpbiBhbiBlbGVtZW50IHdpdGggYSBkaWZmZXJlbnQgbmFtZVxuICAgICAgLy8gdGhhbiB3YW50ZWQ6XG4gICAgICBpZiAocmVzdWx0LnR5cGUgPT09ICdlbGVtZW50Jykge1xuICAgICAgICByZXN1bHQudGFnTmFtZSA9IGhOYW1lXG4gICAgICB9XG4gICAgICAvLyBUcmFuc2Zvcm1pbmcgdGhlIG5vZGUgcmVzdWx0ZWQgaW4gYSBub24tZWxlbWVudCwgd2hpY2ggaGFwcGVucyBmb3JcbiAgICAgIC8vIHJhdywgdGV4dCwgYW5kIHJvb3Qgbm9kZXMgKHVubGVzcyBjdXN0b20gaGFuZGxlcnMgYXJlIHBhc3NlZCkuXG4gICAgICAvLyBUaGUgaW50ZW50IGlzIGxpa2VseSB0byBrZWVwIHRoZSBjb250ZW50IGFyb3VuZCAob3RoZXJ3aXNlOiBwYXNzXG4gICAgICAvLyBgaENoaWxkcmVuYCkuXG4gICAgICBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0ge1xuICAgICAgICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICAgICAgICB0YWdOYW1lOiBoTmFtZSxcbiAgICAgICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgICAgICBjaGlsZHJlbjogW11cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRvIGRvOiBuZXh0IG1ham9yOiB0YWtlIHRoZSBjaGlsZHJlbiBmcm9tIHRoZSBgcm9vdGAsIG9yIGluamVjdCB0aGVcbiAgICAgICAgLy8gcmF3L3RleHQvY29tbWVudCBvciBzbyBpbnRvIHRoZSBlbGVtZW50P1xuICAgICAgICAvLyBpZiAoJ2NoaWxkcmVuJyBpbiBub2RlKSB7XG4gICAgICAgIC8vICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogYXNzdW1lIGBjaGlsZHJlbmAgYXJlIGFsbG93ZWQgaW4gZWxlbWVudHMuXG4gICAgICAgIC8vICAgcmVzdWx0LmNoaWxkcmVuID0gbm9kZS5jaGlsZHJlblxuICAgICAgICAvLyB9IGVsc2Uge1xuICAgICAgICAvLyAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IGFzc3VtZSBgbm9kZWAgaXMgYWxsb3dlZCBpbiBlbGVtZW50cy5cbiAgICAgICAgLy8gICByZXN1bHQuY2hpbGRyZW4ucHVzaChub2RlKVxuICAgICAgICAvLyB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHJlc3VsdC50eXBlID09PSAnZWxlbWVudCcgJiYgaFByb3BlcnRpZXMpIHtcbiAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzID0gey4uLnJlc3VsdC5wcm9wZXJ0aWVzLCAuLi5oUHJvcGVydGllc31cbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAnY2hpbGRyZW4nIGluIHJlc3VsdCAmJlxuICAgICAgcmVzdWx0LmNoaWxkcmVuICYmXG4gICAgICBoQ2hpbGRyZW4gIT09IG51bGwgJiZcbiAgICAgIGhDaGlsZHJlbiAhPT0gdW5kZWZpbmVkXG4gICAgKSB7XG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBhc3N1bWUgdmFsaWQgY2hpbGRyZW4gYXJlIGRlZmluZWQuXG4gICAgICByZXN1bHQuY2hpbGRyZW4gPSBoQ2hpbGRyZW5cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0XG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIG1kYXN0IG5vZGUgaW50byBhIGhhc3Qgbm9kZS5cbiAqXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQuXG4gKiBAcGFyYW0ge01kYXN0Tm9kZXN9IG5vZGVcbiAqICAgbWRhc3Qgbm9kZS5cbiAqIEBwYXJhbSB7TWRhc3RQYXJlbnRzIHwgbnVsbCB8IHVuZGVmaW5lZH0gW3BhcmVudF1cbiAqICAgUGFyZW50IG9mIGBub2RlYC5cbiAqIEByZXR1cm5zIHtIYXN0RWxlbWVudENvbnRlbnQgfCBBcnJheTxIYXN0RWxlbWVudENvbnRlbnQ+IHwgbnVsbCB8IHVuZGVmaW5lZH1cbiAqICAgUmVzdWx0aW5nIGhhc3Qgbm9kZS5cbiAqL1xuLy8gVG8gZG86IG5leHQgbWFqb3I6IGRvIG5vdCBleHBvc2UsIGtlZXAgYm91bmQuXG5leHBvcnQgZnVuY3Rpb24gb25lKHN0YXRlLCBub2RlLCBwYXJlbnQpIHtcbiAgY29uc3QgdHlwZSA9IG5vZGUgJiYgbm9kZS50eXBlXG5cbiAgLy8gRmFpbCBvbiBub24tbm9kZXMuXG4gIGlmICghdHlwZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgbm9kZSwgZ290IGAnICsgbm9kZSArICdgJylcbiAgfVxuXG4gIGlmIChvd24uY2FsbChzdGF0ZS5oYW5kbGVycywgdHlwZSkpIHtcbiAgICByZXR1cm4gc3RhdGUuaGFuZGxlcnNbdHlwZV0oc3RhdGUsIG5vZGUsIHBhcmVudClcbiAgfVxuXG4gIGlmIChzdGF0ZS5wYXNzVGhyb3VnaCAmJiBzdGF0ZS5wYXNzVGhyb3VnaC5pbmNsdWRlcyh0eXBlKSkge1xuICAgIC8vIFRvIGRvOiBuZXh0IG1ham9yOiBkZWVwIGNsb25lLlxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IHR5cGVzIG9mIHBhc3NlZCB0aHJvdWdoIG5vZGVzIGFyZSBleHBlY3RlZCB0byBiZSBhZGRlZCBtYW51YWxseS5cbiAgICByZXR1cm4gJ2NoaWxkcmVuJyBpbiBub2RlID8gey4uLm5vZGUsIGNoaWxkcmVuOiBhbGwoc3RhdGUsIG5vZGUpfSA6IG5vZGVcbiAgfVxuXG4gIGlmIChzdGF0ZS51bmtub3duSGFuZGxlcikge1xuICAgIHJldHVybiBzdGF0ZS51bmtub3duSGFuZGxlcihzdGF0ZSwgbm9kZSwgcGFyZW50KVxuICB9XG5cbiAgcmV0dXJuIGRlZmF1bHRVbmtub3duSGFuZGxlcihzdGF0ZSwgbm9kZSlcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGNoaWxkcmVuIG9mIGFuIG1kYXN0IG5vZGUgaW50byBoYXN0IG5vZGVzLlxuICpcbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiAgIEluZm8gcGFzc2VkIGFyb3VuZC5cbiAqIEBwYXJhbSB7TWRhc3ROb2Rlc30gcGFyZW50XG4gKiAgIG1kYXN0IG5vZGUgdG8gY29tcGlsZVxuICogQHJldHVybnMge0FycmF5PEhhc3RFbGVtZW50Q29udGVudD59XG4gKiAgIFJlc3VsdGluZyBoYXN0IG5vZGVzLlxuICovXG4vLyBUbyBkbzogbmV4dCBtYWpvcjogZG8gbm90IGV4cG9zZSwga2VlcCBib3VuZC5cbmV4cG9ydCBmdW5jdGlvbiBhbGwoc3RhdGUsIHBhcmVudCkge1xuICAvKiogQHR5cGUge0FycmF5PEhhc3RFbGVtZW50Q29udGVudD59ICovXG4gIGNvbnN0IHZhbHVlcyA9IFtdXG5cbiAgaWYgKCdjaGlsZHJlbicgaW4gcGFyZW50KSB7XG4gICAgY29uc3Qgbm9kZXMgPSBwYXJlbnQuY2hpbGRyZW5cbiAgICBsZXQgaW5kZXggPSAtMVxuICAgIHdoaWxlICgrK2luZGV4IDwgbm9kZXMubGVuZ3RoKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBvbmUoc3RhdGUsIG5vZGVzW2luZGV4XSwgcGFyZW50KVxuXG4gICAgICAvLyBUbyBkbzogc2VlIGlmIHdlIHZhbiBjbGVhbiB0aGlzPyBDYW4gd2UgbWVyZ2UgdGV4dHM/XG4gICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgIGlmIChpbmRleCAmJiBub2Rlc1tpbmRleCAtIDFdLnR5cGUgPT09ICdicmVhaycpIHtcbiAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkocmVzdWx0KSAmJiByZXN1bHQudHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgICByZXN1bHQudmFsdWUgPSByZXN1bHQudmFsdWUucmVwbGFjZSgvXlxccysvLCAnJylcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkocmVzdWx0KSAmJiByZXN1bHQudHlwZSA9PT0gJ2VsZW1lbnQnKSB7XG4gICAgICAgICAgICBjb25zdCBoZWFkID0gcmVzdWx0LmNoaWxkcmVuWzBdXG5cbiAgICAgICAgICAgIGlmIChoZWFkICYmIGhlYWQudHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgICAgIGhlYWQudmFsdWUgPSBoZWFkLnZhbHVlLnJlcGxhY2UoL15cXHMrLywgJycpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0KSkge1xuICAgICAgICAgIHZhbHVlcy5wdXNoKC4uLnJlc3VsdClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZXMucHVzaChyZXN1bHQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdmFsdWVzXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIHVua25vd24gbm9kZS5cbiAqXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQuXG4gKiBAcGFyYW0ge01kYXN0Tm9kZXN9IG5vZGVcbiAqICAgVW5rbm93biBtZGFzdCBub2RlLlxuICogQHJldHVybnMge0hhc3RUZXh0IHwgSGFzdEVsZW1lbnR9XG4gKiAgIFJlc3VsdGluZyBoYXN0IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGRlZmF1bHRVbmtub3duSGFuZGxlcihzdGF0ZSwgbm9kZSkge1xuICBjb25zdCBkYXRhID0gbm9kZS5kYXRhIHx8IHt9XG4gIC8qKiBAdHlwZSB7SGFzdFRleHQgfCBIYXN0RWxlbWVudH0gKi9cbiAgY29uc3QgcmVzdWx0ID1cbiAgICAndmFsdWUnIGluIG5vZGUgJiZcbiAgICAhKG93bi5jYWxsKGRhdGEsICdoUHJvcGVydGllcycpIHx8IG93bi5jYWxsKGRhdGEsICdoQ2hpbGRyZW4nKSlcbiAgICAgID8ge3R5cGU6ICd0ZXh0JywgdmFsdWU6IG5vZGUudmFsdWV9XG4gICAgICA6IHtcbiAgICAgICAgICB0eXBlOiAnZWxlbWVudCcsXG4gICAgICAgICAgdGFnTmFtZTogJ2RpdicsXG4gICAgICAgICAgcHJvcGVydGllczoge30sXG4gICAgICAgICAgY2hpbGRyZW46IGFsbChzdGF0ZSwgbm9kZSlcbiAgICAgICAgfVxuXG4gIHN0YXRlLnBhdGNoKG5vZGUsIHJlc3VsdClcbiAgcmV0dXJuIHN0YXRlLmFwcGx5RGF0YShub2RlLCByZXN1bHQpXG59XG5cbi8qKlxuICogV3JhcCBgbm9kZXNgIHdpdGggbGluZSBlbmRpbmdzIGJldHdlZW4gZWFjaCBub2RlLlxuICpcbiAqIEB0ZW1wbGF0ZSB7SGFzdENvbnRlbnR9IFR5cGVcbiAqICAgTm9kZSB0eXBlLlxuICogQHBhcmFtIHtBcnJheTxUeXBlPn0gbm9kZXNcbiAqICAgTGlzdCBvZiBub2RlcyB0byB3cmFwLlxuICogQHBhcmFtIHtib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2xvb3NlPWZhbHNlXVxuICogICBXaGV0aGVyIHRvIGFkZCBsaW5lIGVuZGluZ3MgYXQgc3RhcnQgYW5kIGVuZC5cbiAqIEByZXR1cm5zIHtBcnJheTxUeXBlIHwgSGFzdFRleHQ+fVxuICogICBXcmFwcGVkIG5vZGVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gd3JhcChub2RlcywgbG9vc2UpIHtcbiAgLyoqIEB0eXBlIHtBcnJheTxUeXBlIHwgSGFzdFRleHQ+fSAqL1xuICBjb25zdCByZXN1bHQgPSBbXVxuICBsZXQgaW5kZXggPSAtMVxuXG4gIGlmIChsb29zZSkge1xuICAgIHJlc3VsdC5wdXNoKHt0eXBlOiAndGV4dCcsIHZhbHVlOiAnXFxuJ30pXG4gIH1cblxuICB3aGlsZSAoKytpbmRleCA8IG5vZGVzLmxlbmd0aCkge1xuICAgIGlmIChpbmRleCkgcmVzdWx0LnB1c2goe3R5cGU6ICd0ZXh0JywgdmFsdWU6ICdcXG4nfSlcbiAgICByZXN1bHQucHVzaChub2Rlc1tpbmRleF0pXG4gIH1cblxuICBpZiAobG9vc2UgJiYgbm9kZXMubGVuZ3RoID4gMCkge1xuICAgIHJlc3VsdC5wdXNoKHt0eXBlOiAndGV4dCcsIHZhbHVlOiAnXFxuJ30pXG4gIH1cblxuICByZXR1cm4gcmVzdWx0XG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5Db250ZW50fSBIYXN0Q29udGVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLlJvb3R9IEhhc3RSb290XG4gKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5Db250ZW50fSBNZGFzdENvbnRlbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuUm9vdH0gTWRhc3RSb290XG4gKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi9zdGF0ZS5qcycpLk9wdGlvbnN9IE9wdGlvbnNcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtIYXN0Um9vdCB8IEhhc3RDb250ZW50fSBIYXN0Tm9kZXNcbiAqIEB0eXBlZGVmIHtNZGFzdFJvb3QgfCBNZGFzdENvbnRlbnR9IE1kYXN0Tm9kZXNcbiAqL1xuXG5pbXBvcnQge2Zvb3Rlcn0gZnJvbSAnLi9mb290ZXIuanMnXG5pbXBvcnQge2NyZWF0ZVN0YXRlfSBmcm9tICcuL3N0YXRlLmpzJ1xuXG4vKipcbiAqIFRyYW5zZm9ybSBtZGFzdCB0byBoYXN0LlxuICpcbiAqICMjIyMjIE5vdGVzXG4gKlxuICogIyMjIyMjIEhUTUxcbiAqXG4gKiBSYXcgSFRNTCBpcyBhdmFpbGFibGUgaW4gbWRhc3QgYXMgYGh0bWxgIG5vZGVzIGFuZCBjYW4gYmUgZW1iZWRkZWQgaW4gaGFzdFxuICogYXMgc2VtaXN0YW5kYXJkIGByYXdgIG5vZGVzLlxuICogTW9zdCB1dGlsaXRpZXMgaWdub3JlIGByYXdgIG5vZGVzIGJ1dCB0d28gbm90YWJsZSBvbmVzIGRvbuKAmXQ6XG4gKlxuICogKiAgIGBoYXN0LXV0aWwtdG8taHRtbGAgYWxzbyBoYXMgYW4gb3B0aW9uIGBhbGxvd0Rhbmdlcm91c0h0bWxgIHdoaWNoIHdpbGxcbiAqICAgICBvdXRwdXQgdGhlIHJhdyBIVE1MLlxuICogICAgIFRoaXMgaXMgdHlwaWNhbGx5IGRpc2NvdXJhZ2VkIGFzIG5vdGVkIGJ5IHRoZSBvcHRpb24gbmFtZSBidXQgaXMgdXNlZnVsXG4gKiAgICAgaWYgeW91IGNvbXBsZXRlbHkgdHJ1c3QgYXV0aG9yc1xuICogKiAgIGBoYXN0LXV0aWwtcmF3YCBjYW4gaGFuZGxlIHRoZSByYXcgZW1iZWRkZWQgSFRNTCBzdHJpbmdzIGJ5IHBhcnNpbmcgdGhlbVxuICogICAgIGludG8gc3RhbmRhcmQgaGFzdCBub2RlcyAoYGVsZW1lbnRgLCBgdGV4dGAsIGV0YykuXG4gKiAgICAgVGhpcyBpcyBhIGhlYXZ5IHRhc2sgYXMgaXQgbmVlZHMgYSBmdWxsIEhUTUwgcGFyc2VyLCBidXQgaXQgaXMgdGhlIG9ubHlcbiAqICAgICB3YXkgdG8gc3VwcG9ydCB1bnRydXN0ZWQgY29udGVudFxuICpcbiAqICMjIyMjIyBGb290bm90ZXNcbiAqXG4gKiBNYW55IG9wdGlvbnMgc3VwcG9ydGVkIGhlcmUgcmVsYXRlIHRvIGZvb3Rub3Rlcy5cbiAqIEZvb3Rub3RlcyBhcmUgbm90IHNwZWNpZmllZCBieSBDb21tb25NYXJrLCB3aGljaCB3ZSBmb2xsb3cgYnkgZGVmYXVsdC5cbiAqIFRoZXkgYXJlIHN1cHBvcnRlZCBieSBHaXRIdWIsIHNvIGZvb3Rub3RlcyBjYW4gYmUgZW5hYmxlZCBpbiBtYXJrZG93biB3aXRoXG4gKiBgbWRhc3QtdXRpbC1nZm1gLlxuICpcbiAqIFRoZSBvcHRpb25zIGBmb290bm90ZUJhY2tMYWJlbGAgYW5kIGBmb290bm90ZUxhYmVsYCBkZWZpbmUgbmF0dXJhbCBsYW5ndWFnZVxuICogdGhhdCBleHBsYWlucyBmb290bm90ZXMsIHdoaWNoIGlzIGhpZGRlbiBmb3Igc2lnaHRlZCB1c2VycyBidXQgc2hvd24gdG9cbiAqIGFzc2lzdGl2ZSB0ZWNobm9sb2d5LlxuICogV2hlbiB5b3VyIHBhZ2UgaXMgbm90IGluIEVuZ2xpc2gsIHlvdSBtdXN0IGRlZmluZSB0cmFuc2xhdGVkIHZhbHVlcy5cbiAqXG4gKiBCYWNrIHJlZmVyZW5jZXMgdXNlIEFSSUEgYXR0cmlidXRlcywgYnV0IHRoZSBzZWN0aW9uIGxhYmVsIGl0c2VsZiB1c2VzIGFcbiAqIGhlYWRpbmcgdGhhdCBpcyBoaWRkZW4gd2l0aCBhbiBgc3Itb25seWAgY2xhc3MuXG4gKiBUbyBzaG93IGl0IHRvIHNpZ2h0ZWQgdXNlcnMsIGRlZmluZSBkaWZmZXJlbnQgYXR0cmlidXRlcyBpblxuICogYGZvb3Rub3RlTGFiZWxQcm9wZXJ0aWVzYC5cbiAqXG4gKiAjIyMjIyMgQ2xvYmJlcmluZ1xuICpcbiAqIEZvb3Rub3RlcyBpbnRyb2R1Y2VzIGEgcHJvYmxlbSwgYXMgaXQgbGlua3MgZm9vdG5vdGUgY2FsbHMgdG8gZm9vdG5vdGVcbiAqIGRlZmluaXRpb25zIG9uIHRoZSBwYWdlIHRocm91Z2ggYGlkYCBhdHRyaWJ1dGVzIGdlbmVyYXRlZCBmcm9tIHVzZXIgY29udGVudCxcbiAqIHdoaWNoIHJlc3VsdHMgaW4gRE9NIGNsb2JiZXJpbmcuXG4gKlxuICogRE9NIGNsb2JiZXJpbmcgaXMgdGhpczpcbiAqXG4gKiBgYGBodG1sXG4gKiA8cCBpZD14PjwvcD5cbiAqIDxzY3JpcHQ+YWxlcnQoeCkgLy8gYHhgIG5vdyByZWZlcnMgdG8gdGhlIERPTSBgcCN4YCBlbGVtZW50PC9zY3JpcHQ+XG4gKiBgYGBcbiAqXG4gKiBFbGVtZW50cyBieSB0aGVpciBJRCBhcmUgbWFkZSBhdmFpbGFibGUgYnkgYnJvd3NlcnMgb24gdGhlIGB3aW5kb3dgIG9iamVjdCxcbiAqIHdoaWNoIGlzIGEgc2VjdXJpdHkgcmlzay5cbiAqIFVzaW5nIGEgcHJlZml4IHNvbHZlcyB0aGlzIHByb2JsZW0uXG4gKlxuICogTW9yZSBpbmZvcm1hdGlvbiBvbiBob3cgdG8gaGFuZGxlIGNsb2JiZXJpbmcgYW5kIHRoZSBwcmVmaXggaXMgZXhwbGFpbmVkIGluXG4gKiBFeGFtcGxlOiBoZWFkaW5ncyAoRE9NIGNsb2JiZXJpbmcpIGluIGByZWh5cGUtc2FuaXRpemVgLlxuICpcbiAqICMjIyMjIyBVbmtub3duIG5vZGVzXG4gKlxuICogVW5rbm93biBub2RlcyBhcmUgbm9kZXMgd2l0aCBhIHR5cGUgdGhhdCBpc27igJl0IGluIGBoYW5kbGVyc2Agb3IgYHBhc3NUaHJvdWdoYC5cbiAqIFRoZSBkZWZhdWx0IGJlaGF2aW9yIGZvciB1bmtub3duIG5vZGVzIGlzOlxuICpcbiAqICogICB3aGVuIHRoZSBub2RlIGhhcyBhIGB2YWx1ZWAgKGFuZCBkb2VzbuKAmXQgaGF2ZSBgZGF0YS5oTmFtZWAsXG4gKiAgICAgYGRhdGEuaFByb3BlcnRpZXNgLCBvciBgZGF0YS5oQ2hpbGRyZW5gLCBzZWUgbGF0ZXIpLCBjcmVhdGUgYSBoYXN0IGB0ZXh0YFxuICogICAgIG5vZGVcbiAqICogICBvdGhlcndpc2UsIGNyZWF0ZSBhIGA8ZGl2PmAgZWxlbWVudCAod2hpY2ggY291bGQgYmUgY2hhbmdlZCB3aXRoXG4gKiAgICAgYGRhdGEuaE5hbWVgKSwgd2l0aCBpdHMgY2hpbGRyZW4gbWFwcGVkIGZyb20gbWRhc3QgdG8gaGFzdCBhcyB3ZWxsXG4gKlxuICogVGhpcyBiZWhhdmlvciBjYW4gYmUgY2hhbmdlZCBieSBwYXNzaW5nIGFuIGB1bmtub3duSGFuZGxlcmAuXG4gKlxuICogQHBhcmFtIHtNZGFzdE5vZGVzfSB0cmVlXG4gKiAgIG1kYXN0IHRyZWUuXG4gKiBAcGFyYW0ge09wdGlvbnMgfCBudWxsIHwgdW5kZWZpbmVkfSBbb3B0aW9uc11cbiAqICAgQ29uZmlndXJhdGlvbi5cbiAqIEByZXR1cm5zIHtIYXN0Tm9kZXMgfCBudWxsIHwgdW5kZWZpbmVkfVxuICogICBoYXN0IHRyZWUuXG4gKi9cbi8vIFRvIGRvOiBuZXh0IG1ham9yOiBhbHdheXMgcmV0dXJuIGEgc2luZ2xlIGByb290YC5cbmV4cG9ydCBmdW5jdGlvbiB0b0hhc3QodHJlZSwgb3B0aW9ucykge1xuICBjb25zdCBzdGF0ZSA9IGNyZWF0ZVN0YXRlKHRyZWUsIG9wdGlvbnMpXG4gIGNvbnN0IG5vZGUgPSBzdGF0ZS5vbmUodHJlZSwgbnVsbClcbiAgY29uc3QgZm9vdCA9IGZvb3RlcihzdGF0ZSlcblxuICBpZiAoZm9vdCkge1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgSWYgdGhlcmXigJlzIGEgZm9vdGVyLCB0aGVyZSB3ZXJlIGRlZmluaXRpb25zLCBtZWFuaW5nIGJsb2NrXG4gICAgLy8gY29udGVudC5cbiAgICAvLyBTbyBhc3N1bWUgYG5vZGVgIGlzIGEgcGFyZW50IG5vZGUuXG4gICAgbm9kZS5jaGlsZHJlbi5wdXNoKHt0eXBlOiAndGV4dCcsIHZhbHVlOiAnXFxuJ30sIGZvb3QpXG4gIH1cblxuICAvLyBUbyBkbzogbmV4dCBtYWpvcjogYWx3YXlzIHJldHVybiByb290P1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShub2RlKSA/IHt0eXBlOiAncm9vdCcsIGNoaWxkcmVuOiBub2RlfSA6IG5vZGVcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYgUG9pbnRMaWtlXG4gKiBAcHJvcGVydHkge251bWJlciB8IG51bGwgfCB1bmRlZmluZWR9IFtsaW5lXVxuICogQHByb3BlcnR5IHtudW1iZXIgfCBudWxsIHwgdW5kZWZpbmVkfSBbY29sdW1uXVxuICogQHByb3BlcnR5IHtudW1iZXIgfCBudWxsIHwgdW5kZWZpbmVkfSBbb2Zmc2V0XVxuICpcbiAqIEB0eXBlZGVmIFBvc2l0aW9uTGlrZVxuICogQHByb3BlcnR5IHtQb2ludExpa2UgfCBudWxsIHwgdW5kZWZpbmVkfSBbc3RhcnRdXG4gKiBAcHJvcGVydHkge1BvaW50TGlrZSB8IG51bGwgfCB1bmRlZmluZWR9IFtlbmRdXG4gKlxuICogQHR5cGVkZWYgTm9kZUxpa2VcbiAqIEBwcm9wZXJ0eSB7UG9zaXRpb25MaWtlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW3Bvc2l0aW9uXVxuICovXG5cbi8qKlxuICogQ2hlY2sgaWYgYG5vZGVgIGlzIGdlbmVyYXRlZC5cbiAqXG4gKiBAcGFyYW0ge05vZGVMaWtlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW25vZGVdXG4gKiAgIE5vZGUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqICAgV2hldGhlciBgbm9kZWAgaXMgZ2VuZXJhdGVkIChkb2VzIG5vdCBoYXZlIHBvc2l0aW9uYWwgaW5mbykuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZWQobm9kZSkge1xuICByZXR1cm4gKFxuICAgICFub2RlIHx8XG4gICAgIW5vZGUucG9zaXRpb24gfHxcbiAgICAhbm9kZS5wb3NpdGlvbi5zdGFydCB8fFxuICAgICFub2RlLnBvc2l0aW9uLnN0YXJ0LmxpbmUgfHxcbiAgICAhbm9kZS5wb3NpdGlvbi5zdGFydC5jb2x1bW4gfHxcbiAgICAhbm9kZS5wb3NpdGlvbi5lbmQgfHxcbiAgICAhbm9kZS5wb3NpdGlvbi5lbmQubGluZSB8fFxuICAgICFub2RlLnBvc2l0aW9uLmVuZC5jb2x1bW5cbiAgKVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRWxlbWVudH0gRWxlbWVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnRDb250ZW50fSBFbGVtZW50Q29udGVudFxuICpcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vc3RhdGUuanMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuXG5pbXBvcnQge25vcm1hbGl6ZVVyaX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtc2FuaXRpemUtdXJpJ1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgaGFzdCBmb290ZXIgZm9yIGNhbGxlZCBmb290bm90ZSBkZWZpbml0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQuXG4gKiBAcmV0dXJucyB7RWxlbWVudCB8IHVuZGVmaW5lZH1cbiAqICAgYHNlY3Rpb25gIGVsZW1lbnQgb3IgYHVuZGVmaW5lZGAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmb290ZXIoc3RhdGUpIHtcbiAgLyoqIEB0eXBlIHtBcnJheTxFbGVtZW50Q29udGVudD59ICovXG4gIGNvbnN0IGxpc3RJdGVtcyA9IFtdXG4gIGxldCBpbmRleCA9IC0xXG5cbiAgd2hpbGUgKCsraW5kZXggPCBzdGF0ZS5mb290bm90ZU9yZGVyLmxlbmd0aCkge1xuICAgIGNvbnN0IGRlZiA9IHN0YXRlLmZvb3Rub3RlQnlJZFtzdGF0ZS5mb290bm90ZU9yZGVyW2luZGV4XV1cblxuICAgIGlmICghZGVmKSB7XG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIGNvbnN0IGNvbnRlbnQgPSBzdGF0ZS5hbGwoZGVmKVxuICAgIGNvbnN0IGlkID0gU3RyaW5nKGRlZi5pZGVudGlmaWVyKS50b1VwcGVyQ2FzZSgpXG4gICAgY29uc3Qgc2FmZUlkID0gbm9ybWFsaXplVXJpKGlkLnRvTG93ZXJDYXNlKCkpXG4gICAgbGV0IHJlZmVyZW5jZUluZGV4ID0gMFxuICAgIC8qKiBAdHlwZSB7QXJyYXk8RWxlbWVudENvbnRlbnQ+fSAqL1xuICAgIGNvbnN0IGJhY2tSZWZlcmVuY2VzID0gW11cblxuICAgIHdoaWxlICgrK3JlZmVyZW5jZUluZGV4IDw9IHN0YXRlLmZvb3Rub3RlQ291bnRzW2lkXSkge1xuICAgICAgLyoqIEB0eXBlIHtFbGVtZW50fSAqL1xuICAgICAgY29uc3QgYmFja1JlZmVyZW5jZSA9IHtcbiAgICAgICAgdHlwZTogJ2VsZW1lbnQnLFxuICAgICAgICB0YWdOYW1lOiAnYScsXG4gICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICBocmVmOlxuICAgICAgICAgICAgJyMnICtcbiAgICAgICAgICAgIHN0YXRlLmNsb2JiZXJQcmVmaXggK1xuICAgICAgICAgICAgJ2ZucmVmLScgK1xuICAgICAgICAgICAgc2FmZUlkICtcbiAgICAgICAgICAgIChyZWZlcmVuY2VJbmRleCA+IDEgPyAnLScgKyByZWZlcmVuY2VJbmRleCA6ICcnKSxcbiAgICAgICAgICBkYXRhRm9vdG5vdGVCYWNrcmVmOiB0cnVlLFxuICAgICAgICAgIGNsYXNzTmFtZTogWydkYXRhLWZvb3Rub3RlLWJhY2tyZWYnXSxcbiAgICAgICAgICBhcmlhTGFiZWw6IHN0YXRlLmZvb3Rub3RlQmFja0xhYmVsXG4gICAgICAgIH0sXG4gICAgICAgIGNoaWxkcmVuOiBbe3R5cGU6ICd0ZXh0JywgdmFsdWU6ICfihqknfV1cbiAgICAgIH1cblxuICAgICAgaWYgKHJlZmVyZW5jZUluZGV4ID4gMSkge1xuICAgICAgICBiYWNrUmVmZXJlbmNlLmNoaWxkcmVuLnB1c2goe1xuICAgICAgICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICAgICAgICB0YWdOYW1lOiAnc3VwJyxcbiAgICAgICAgICBjaGlsZHJlbjogW3t0eXBlOiAndGV4dCcsIHZhbHVlOiBTdHJpbmcocmVmZXJlbmNlSW5kZXgpfV1cbiAgICAgICAgfSlcbiAgICAgIH1cblxuICAgICAgaWYgKGJhY2tSZWZlcmVuY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYmFja1JlZmVyZW5jZXMucHVzaCh7dHlwZTogJ3RleHQnLCB2YWx1ZTogJyAnfSlcbiAgICAgIH1cblxuICAgICAgYmFja1JlZmVyZW5jZXMucHVzaChiYWNrUmVmZXJlbmNlKVxuICAgIH1cblxuICAgIGNvbnN0IHRhaWwgPSBjb250ZW50W2NvbnRlbnQubGVuZ3RoIC0gMV1cblxuICAgIGlmICh0YWlsICYmIHRhaWwudHlwZSA9PT0gJ2VsZW1lbnQnICYmIHRhaWwudGFnTmFtZSA9PT0gJ3AnKSB7XG4gICAgICBjb25zdCB0YWlsVGFpbCA9IHRhaWwuY2hpbGRyZW5bdGFpbC5jaGlsZHJlbi5sZW5ndGggLSAxXVxuICAgICAgaWYgKHRhaWxUYWlsICYmIHRhaWxUYWlsLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICB0YWlsVGFpbC52YWx1ZSArPSAnICdcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhaWwuY2hpbGRyZW4ucHVzaCh7dHlwZTogJ3RleHQnLCB2YWx1ZTogJyAnfSlcbiAgICAgIH1cblxuICAgICAgdGFpbC5jaGlsZHJlbi5wdXNoKC4uLmJhY2tSZWZlcmVuY2VzKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZW50LnB1c2goLi4uYmFja1JlZmVyZW5jZXMpXG4gICAgfVxuXG4gICAgLyoqIEB0eXBlIHtFbGVtZW50fSAqL1xuICAgIGNvbnN0IGxpc3RJdGVtID0ge1xuICAgICAgdHlwZTogJ2VsZW1lbnQnLFxuICAgICAgdGFnTmFtZTogJ2xpJyxcbiAgICAgIHByb3BlcnRpZXM6IHtpZDogc3RhdGUuY2xvYmJlclByZWZpeCArICdmbi0nICsgc2FmZUlkfSxcbiAgICAgIGNoaWxkcmVuOiBzdGF0ZS53cmFwKGNvbnRlbnQsIHRydWUpXG4gICAgfVxuXG4gICAgc3RhdGUucGF0Y2goZGVmLCBsaXN0SXRlbSlcblxuICAgIGxpc3RJdGVtcy5wdXNoKGxpc3RJdGVtKVxuICB9XG5cbiAgaWYgKGxpc3RJdGVtcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdHlwZTogJ2VsZW1lbnQnLFxuICAgIHRhZ05hbWU6ICdzZWN0aW9uJyxcbiAgICBwcm9wZXJ0aWVzOiB7ZGF0YUZvb3Rub3RlczogdHJ1ZSwgY2xhc3NOYW1lOiBbJ2Zvb3Rub3RlcyddfSxcbiAgICBjaGlsZHJlbjogW1xuICAgICAge1xuICAgICAgICB0eXBlOiAnZWxlbWVudCcsXG4gICAgICAgIHRhZ05hbWU6IHN0YXRlLmZvb3Rub3RlTGFiZWxUYWdOYW1lLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgLy8gVG8gZG86IHVzZSBzdHJ1Y3R1cmVkIGNsb25lLlxuICAgICAgICAgIC4uLkpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc3RhdGUuZm9vdG5vdGVMYWJlbFByb3BlcnRpZXMpKSxcbiAgICAgICAgICBpZDogJ2Zvb3Rub3RlLWxhYmVsJ1xuICAgICAgICB9LFxuICAgICAgICBjaGlsZHJlbjogW3t0eXBlOiAndGV4dCcsIHZhbHVlOiBzdGF0ZS5mb290bm90ZUxhYmVsfV1cbiAgICAgIH0sXG4gICAgICB7dHlwZTogJ3RleHQnLCB2YWx1ZTogJ1xcbid9LFxuICAgICAge1xuICAgICAgICB0eXBlOiAnZWxlbWVudCcsXG4gICAgICAgIHRhZ05hbWU6ICdvbCcsXG4gICAgICAgIHByb3BlcnRpZXM6IHt9LFxuICAgICAgICBjaGlsZHJlbjogc3RhdGUud3JhcChsaXN0SXRlbXMsIHRydWUpXG4gICAgICB9LFxuICAgICAge3R5cGU6ICd0ZXh0JywgdmFsdWU6ICdcXG4nfVxuICAgIF1cbiAgfVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuUm9vdH0gSGFzdFJvb3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuUm9vdH0gTWRhc3RSb290XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdC11dGlsLXRvLWhhc3QnKS5PcHRpb25zfSBPcHRpb25zXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlmaWVkJykuUHJvY2Vzc29yPGFueSwgYW55LCBhbnksIGFueT59IFByb2Nlc3NvclxuICpcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0LXV0aWwtdG8taGFzdCcpfSBEb05vdFRvdWNoQXNUaGlzSW1wb3J0SW5jbHVkZXNSYXdJblRyZWVcbiAqL1xuXG5pbXBvcnQge3RvSGFzdH0gZnJvbSAnbWRhc3QtdXRpbC10by1oYXN0J1xuXG4vLyBOb3RlOiB0aGUgYDxNZGFzdFJvb3QsIEhhc3RSb290PmAgb3ZlcmxvYWQgZG9lc27igJl0IHNlZW0gdG8gd29yayA6JyhcblxuLyoqXG4gKiBQbHVnaW4gdGhhdCB0dXJucyBtYXJrZG93biBpbnRvIEhUTUwgdG8gc3VwcG9ydCByZWh5cGUuXG4gKlxuICogKiAgIElmIGEgZGVzdGluYXRpb24gcHJvY2Vzc29yIGlzIGdpdmVuLCB0aGF0IHByb2Nlc3NvciBydW5zIHdpdGggYSBuZXcgSFRNTFxuICogICAgIChoYXN0KSB0cmVlIChicmlkZ2UtbW9kZSkuXG4gKiAgICAgQXMgdGhlIGdpdmVuIHByb2Nlc3NvciBydW5zIHdpdGggYSBoYXN0IHRyZWUsIGFuZCByZWh5cGUgcGx1Z2lucyBzdXBwb3J0XG4gKiAgICAgaGFzdCwgdGhhdCBtZWFucyByZWh5cGUgcGx1Z2lucyBjYW4gYmUgdXNlZCB3aXRoIHRoZSBnaXZlbiBwcm9jZXNzb3IuXG4gKiAgICAgVGhlIGhhc3QgdHJlZSBpcyBkaXNjYXJkZWQgaW4gdGhlIGVuZC5cbiAqICAgICBJdOKAmXMgaGlnaGx5IHVubGlrZWx5IHRoYXQgeW91IHdhbnQgdG8gZG8gdGhpcy5cbiAqICogICBUaGUgY29tbW9uIGNhc2UgaXMgdG8gbm90IHBhc3MgYSBkZXN0aW5hdGlvbiBwcm9jZXNzb3IsIGluIHdoaWNoIGNhc2UgdGhlXG4gKiAgICAgY3VycmVudCBwcm9jZXNzb3IgY29udGludWVzIHJ1bm5pbmcgd2l0aCBhIG5ldyBIVE1MIChoYXN0KSB0cmVlXG4gKiAgICAgKG11dGF0ZS1tb2RlKS5cbiAqICAgICBBcyB0aGUgY3VycmVudCBwcm9jZXNzb3IgY29udGludWVzIHdpdGggYSBoYXN0IHRyZWUsIGFuZCByZWh5cGUgcGx1Z2luc1xuICogICAgIHN1cHBvcnQgaGFzdCwgdGhhdCBtZWFucyByZWh5cGUgcGx1Z2lucyBjYW4gYmUgdXNlZCBhZnRlclxuICogICAgIGByZW1hcmstcmVoeXBlYC5cbiAqICAgICBJdOKAmXMgbGlrZWx5IHRoYXQgdGhpcyBpcyB3aGF0IHlvdSB3YW50IHRvIGRvLlxuICpcbiAqIEBwYXJhbSBkZXN0aW5hdGlvblxuICogICBPcHRpb25hbCB1bmlmaWVkIHByb2Nlc3Nvci5cbiAqIEBwYXJhbSBvcHRpb25zXG4gKiAgIE9wdGlvbnMgcGFzc2VkIHRvIGBtZGFzdC11dGlsLXRvLWhhc3RgLlxuICovXG5jb25zdCByZW1hcmtSZWh5cGUgPVxuICAvKiogQHR5cGUgeyhpbXBvcnQoJ3VuaWZpZWQnKS5QbHVnaW48W1Byb2Nlc3NvciwgT3B0aW9ucz9dfFtudWxsfHVuZGVmaW5lZCwgT3B0aW9ucz9dfFtPcHRpb25zXXxbXSwgTWRhc3RSb290Pil9ICovXG4gIChcbiAgICBmdW5jdGlvbiAoZGVzdGluYXRpb24sIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBkZXN0aW5hdGlvbiAmJiAncnVuJyBpbiBkZXN0aW5hdGlvblxuICAgICAgICA/IGJyaWRnZShkZXN0aW5hdGlvbiwgb3B0aW9ucylcbiAgICAgICAgOiBtdXRhdGUoZGVzdGluYXRpb24gfHwgb3B0aW9ucylcbiAgICB9XG4gIClcblxuZXhwb3J0IGRlZmF1bHQgcmVtYXJrUmVoeXBlXG5cbi8qKlxuICogQnJpZGdlLW1vZGUuXG4gKiBSdW5zIHRoZSBkZXN0aW5hdGlvbiB3aXRoIHRoZSBuZXcgaGFzdCB0cmVlLlxuICpcbiAqIEB0eXBlIHtpbXBvcnQoJ3VuaWZpZWQnKS5QbHVnaW48W1Byb2Nlc3NvciwgT3B0aW9ucz9dLCBNZGFzdFJvb3Q+fVxuICovXG5mdW5jdGlvbiBicmlkZ2UoZGVzdGluYXRpb24sIG9wdGlvbnMpIHtcbiAgcmV0dXJuIChub2RlLCBmaWxlLCBuZXh0KSA9PiB7XG4gICAgZGVzdGluYXRpb24ucnVuKHRvSGFzdChub2RlLCBvcHRpb25zKSwgZmlsZSwgKGVycm9yKSA9PiB7XG4gICAgICBuZXh0KGVycm9yKVxuICAgIH0pXG4gIH1cbn1cblxuLyoqXG4gKiBNdXRhdGUtbW9kZS5cbiAqIEZ1cnRoZXIgcGx1Z2lucyBydW4gb24gdGhlIGhhc3QgdHJlZS5cbiAqXG4gKiBAdHlwZSB7aW1wb3J0KCd1bmlmaWVkJykuUGx1Z2luPFtPcHRpb25zP118dm9pZFtdLCBNZGFzdFJvb3QsIEhhc3RSb290Pn1cbiAqL1xuZnVuY3Rpb24gbXV0YXRlKG9wdGlvbnMpIHtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvcjogYXNzdW1lIGEgY29ycmVzcG9uZGluZyBub2RlIGlzIHJldHVybmVkIGJ5IGB0b0hhc3RgLlxuICByZXR1cm4gKG5vZGUpID0+IHRvSGFzdChub2RlLCBvcHRpb25zKVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL2luZm8uanMnKS5JbmZvfSBJbmZvXG4gKiBAdHlwZWRlZiB7T2JqZWN0LjxzdHJpbmcsIEluZm8+fSBQcm9wZXJ0aWVzXG4gKiBAdHlwZWRlZiB7T2JqZWN0LjxzdHJpbmcsIHN0cmluZz59IE5vcm1hbFxuICovXG5cbmV4cG9ydCBjbGFzcyBTY2hlbWEge1xuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7UHJvcGVydGllc30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtOb3JtYWx9IG5vcm1hbFxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3NwYWNlXVxuICAgKi9cbiAgY29uc3RydWN0b3IocHJvcGVydHksIG5vcm1hbCwgc3BhY2UpIHtcbiAgICB0aGlzLnByb3BlcnR5ID0gcHJvcGVydHlcbiAgICB0aGlzLm5vcm1hbCA9IG5vcm1hbFxuICAgIGlmIChzcGFjZSkge1xuICAgICAgdGhpcy5zcGFjZSA9IHNwYWNlXG4gICAgfVxuICB9XG59XG5cbi8qKiBAdHlwZSB7UHJvcGVydGllc30gKi9cblNjaGVtYS5wcm90b3R5cGUucHJvcGVydHkgPSB7fVxuLyoqIEB0eXBlIHtOb3JtYWx9ICovXG5TY2hlbWEucHJvdG90eXBlLm5vcm1hbCA9IHt9XG4vKiogQHR5cGUge3N0cmluZ3xudWxsfSAqL1xuU2NoZW1hLnByb3RvdHlwZS5zcGFjZSA9IG51bGxcbiIsImltcG9ydCB7U2NoZW1hfSBmcm9tICcuL3NjaGVtYS5qcydcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL3NjaGVtYS5qcycpLlByb3BlcnRpZXN9IFByb3BlcnRpZXNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vc2NoZW1hLmpzJykuTm9ybWFsfSBOb3JtYWxcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL3NjaGVtYS5qcycpLlNjaGVtYVtdfSBkZWZpbml0aW9uc1xuICogQHBhcmFtIHtzdHJpbmd9IHNwYWNlXG4gKiBAcmV0dXJucyB7aW1wb3J0KCcuL3NjaGVtYS5qcycpLlNjaGVtYX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlKGRlZmluaXRpb25zLCBzcGFjZSkge1xuICAvKiogQHR5cGUge1Byb3BlcnRpZXN9ICovXG4gIHZhciBwcm9wZXJ0eSA9IHt9XG4gIC8qKiBAdHlwZSB7Tm9ybWFsfSAqL1xuICB2YXIgbm9ybWFsID0ge31cbiAgdmFyIGluZGV4ID0gLTFcblxuICB3aGlsZSAoKytpbmRleCA8IGRlZmluaXRpb25zLmxlbmd0aCkge1xuICAgIE9iamVjdC5hc3NpZ24ocHJvcGVydHksIGRlZmluaXRpb25zW2luZGV4XS5wcm9wZXJ0eSlcbiAgICBPYmplY3QuYXNzaWduKG5vcm1hbCwgZGVmaW5pdGlvbnNbaW5kZXhdLm5vcm1hbClcbiAgfVxuXG4gIHJldHVybiBuZXcgU2NoZW1hKHByb3BlcnR5LCBub3JtYWwsIHNwYWNlKVxufVxuIiwiLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlLnRvTG93ZXJDYXNlKClcbn1cbiIsImV4cG9ydCBjbGFzcyBJbmZvIHtcbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtzdHJpbmd9IGF0dHJpYnV0ZVxuICAgKi9cbiAgY29uc3RydWN0b3IocHJvcGVydHksIGF0dHJpYnV0ZSkge1xuICAgIHRoaXMucHJvcGVydHkgPSBwcm9wZXJ0eVxuICAgIHRoaXMuYXR0cmlidXRlID0gYXR0cmlidXRlXG4gIH1cbn1cblxuLyoqIEB0eXBlIHtzdHJpbmd8bnVsbH0gKi9cbkluZm8ucHJvdG90eXBlLnNwYWNlID0gbnVsbFxuSW5mby5wcm90b3R5cGUuYXR0cmlidXRlID0gbnVsbFxuSW5mby5wcm90b3R5cGUucHJvcGVydHkgPSBudWxsXG5JbmZvLnByb3RvdHlwZS5ib29sZWFuID0gZmFsc2VcbkluZm8ucHJvdG90eXBlLmJvb2xlYW5pc2ggPSBmYWxzZVxuSW5mby5wcm90b3R5cGUub3ZlcmxvYWRlZEJvb2xlYW4gPSBmYWxzZVxuSW5mby5wcm90b3R5cGUubnVtYmVyID0gZmFsc2VcbkluZm8ucHJvdG90eXBlLmNvbW1hU2VwYXJhdGVkID0gZmFsc2VcbkluZm8ucHJvdG90eXBlLnNwYWNlU2VwYXJhdGVkID0gZmFsc2VcbkluZm8ucHJvdG90eXBlLmNvbW1hT3JTcGFjZVNlcGFyYXRlZCA9IGZhbHNlXG5JbmZvLnByb3RvdHlwZS5tdXN0VXNlUHJvcGVydHkgPSBmYWxzZVxuSW5mby5wcm90b3R5cGUuZGVmaW5lZCA9IGZhbHNlXG4iLCJ2YXIgcG93ZXJzID0gMFxuXG5leHBvcnQgdmFyIGJvb2xlYW4gPSBpbmNyZW1lbnQoKVxuZXhwb3J0IHZhciBib29sZWFuaXNoID0gaW5jcmVtZW50KClcbmV4cG9ydCB2YXIgb3ZlcmxvYWRlZEJvb2xlYW4gPSBpbmNyZW1lbnQoKVxuZXhwb3J0IHZhciBudW1iZXIgPSBpbmNyZW1lbnQoKVxuZXhwb3J0IHZhciBzcGFjZVNlcGFyYXRlZCA9IGluY3JlbWVudCgpXG5leHBvcnQgdmFyIGNvbW1hU2VwYXJhdGVkID0gaW5jcmVtZW50KClcbmV4cG9ydCB2YXIgY29tbWFPclNwYWNlU2VwYXJhdGVkID0gaW5jcmVtZW50KClcblxuZnVuY3Rpb24gaW5jcmVtZW50KCkge1xuICByZXR1cm4gMiAqKiArK3Bvd2Vyc1xufVxuIiwiaW1wb3J0IHtJbmZvfSBmcm9tICcuL2luZm8uanMnXG5pbXBvcnQgKiBhcyB0eXBlcyBmcm9tICcuL3R5cGVzLmpzJ1xuXG52YXIgY2hlY2tzID0gT2JqZWN0LmtleXModHlwZXMpXG5cbmV4cG9ydCBjbGFzcyBEZWZpbmVkSW5mbyBleHRlbmRzIEluZm8ge1xuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eVxuICAgKiBAcGFyYW0ge3N0cmluZ30gYXR0cmlidXRlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbbWFza11cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtzcGFjZV1cbiAgICovXG4gIGNvbnN0cnVjdG9yKHByb3BlcnR5LCBhdHRyaWJ1dGUsIG1hc2ssIHNwYWNlKSB7XG4gICAgdmFyIGluZGV4ID0gLTFcblxuICAgIHN1cGVyKHByb3BlcnR5LCBhdHRyaWJ1dGUpXG5cbiAgICBtYXJrKHRoaXMsICdzcGFjZScsIHNwYWNlKVxuXG4gICAgd2hpbGUgKCsraW5kZXggPCBjaGVja3MubGVuZ3RoKSB7XG4gICAgICBtYXJrKFxuICAgICAgICB0aGlzLFxuICAgICAgICBjaGVja3NbaW5kZXhdLFxuICAgICAgICAobWFzayAmIHR5cGVzW2NoZWNrc1tpbmRleF1dKSA9PT0gdHlwZXNbY2hlY2tzW2luZGV4XV1cbiAgICAgIClcbiAgICB9XG4gIH1cbn1cblxuRGVmaW5lZEluZm8ucHJvdG90eXBlLmRlZmluZWQgPSB0cnVlXG5cbi8qKlxuICogQHBhcmFtIHtJbnN0YW5jZVR5cGU8dHlwZW9mIERlZmluZWRJbmZvPn0gdmFsdWVzXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKiBAcGFyYW0ge3Vua25vd259IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIG1hcmsodmFsdWVzLCBrZXksIHZhbHVlKSB7XG4gIGlmICh2YWx1ZSkge1xuICAgIHZhbHVlc1trZXldID0gdmFsdWVcbiAgfVxufVxuIiwiaW1wb3J0IHtub3JtYWxpemV9IGZyb20gJy4uL25vcm1hbGl6ZS5qcydcbmltcG9ydCB7U2NoZW1hfSBmcm9tICcuL3NjaGVtYS5qcydcbmltcG9ydCB7RGVmaW5lZEluZm99IGZyb20gJy4vZGVmaW5lZC1pbmZvLmpzJ1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vc2NoZW1hLmpzJykuUHJvcGVydGllc30gUHJvcGVydGllc1xuICogQHR5cGVkZWYge2ltcG9ydCgnLi9zY2hlbWEuanMnKS5Ob3JtYWx9IE5vcm1hbFxuICogQHR5cGVkZWYge2ltcG9ydCgnLi9pbmZvLmpzJykuSW5mb30gSW5mb1xuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdC48c3RyaW5nLCBzdHJpbmc+fSBBdHRyaWJ1dGVzXG4gKlxuICogQHR5cGVkZWYge09iamVjdH0gRGVmaW5pdGlvblxuICogQHByb3BlcnR5IHtPYmplY3QuPHN0cmluZywgbnVtYmVyfG51bGw+fSBwcm9wZXJ0aWVzXG4gKiBAcHJvcGVydHkgeyhhdHRyaWJ1dGVzOiBBdHRyaWJ1dGVzLCBwcm9wZXJ0eTogc3RyaW5nKSA9PiBzdHJpbmd9IHRyYW5zZm9ybVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtzcGFjZV1cbiAqIEBwcm9wZXJ0eSB7QXR0cmlidXRlc30gW2F0dHJpYnV0ZXNdXG4gKiBAcHJvcGVydHkge0FycmF5LjxzdHJpbmc+fSBbbXVzdFVzZVByb3BlcnR5XVxuICovXG5cbnZhciBvd24gPSB7fS5oYXNPd25Qcm9wZXJ0eVxuXG4vKipcbiAqIEBwYXJhbSB7RGVmaW5pdGlvbn0gZGVmaW5pdGlvblxuICogQHJldHVybnMge2ltcG9ydCgnLi9zY2hlbWEuanMnKS5TY2hlbWF9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoZGVmaW5pdGlvbikge1xuICAvKiogQHR5cGUge1Byb3BlcnRpZXN9ICovXG4gIHZhciBwcm9wZXJ0eSA9IHt9XG4gIC8qKiBAdHlwZSB7Tm9ybWFsfSAqL1xuICB2YXIgbm9ybWFsID0ge31cbiAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gIHZhciBwcm9wXG4gIC8qKiBAdHlwZSB7SW5mb30gKi9cbiAgdmFyIGluZm9cblxuICBmb3IgKHByb3AgaW4gZGVmaW5pdGlvbi5wcm9wZXJ0aWVzKSB7XG4gICAgaWYgKG93bi5jYWxsKGRlZmluaXRpb24ucHJvcGVydGllcywgcHJvcCkpIHtcbiAgICAgIGluZm8gPSBuZXcgRGVmaW5lZEluZm8oXG4gICAgICAgIHByb3AsXG4gICAgICAgIGRlZmluaXRpb24udHJhbnNmb3JtKGRlZmluaXRpb24uYXR0cmlidXRlcywgcHJvcCksXG4gICAgICAgIGRlZmluaXRpb24ucHJvcGVydGllc1twcm9wXSxcbiAgICAgICAgZGVmaW5pdGlvbi5zcGFjZVxuICAgICAgKVxuXG4gICAgICBpZiAoXG4gICAgICAgIGRlZmluaXRpb24ubXVzdFVzZVByb3BlcnR5ICYmXG4gICAgICAgIGRlZmluaXRpb24ubXVzdFVzZVByb3BlcnR5LmluY2x1ZGVzKHByb3ApXG4gICAgICApIHtcbiAgICAgICAgaW5mby5tdXN0VXNlUHJvcGVydHkgPSB0cnVlXG4gICAgICB9XG5cbiAgICAgIHByb3BlcnR5W3Byb3BdID0gaW5mb1xuXG4gICAgICBub3JtYWxbbm9ybWFsaXplKHByb3ApXSA9IHByb3BcbiAgICAgIG5vcm1hbFtub3JtYWxpemUoaW5mby5hdHRyaWJ1dGUpXSA9IHByb3BcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNjaGVtYShwcm9wZXJ0eSwgbm9ybWFsLCBkZWZpbml0aW9uLnNwYWNlKVxufVxuIiwiaW1wb3J0IHtjcmVhdGV9IGZyb20gJy4vdXRpbC9jcmVhdGUuanMnXG5cbmV4cG9ydCB2YXIgeGxpbmsgPSBjcmVhdGUoe1xuICBzcGFjZTogJ3hsaW5rJyxcbiAgdHJhbnNmb3JtOiB4bGlua1RyYW5zZm9ybSxcbiAgcHJvcGVydGllczoge1xuICAgIHhMaW5rQWN0dWF0ZTogbnVsbCxcbiAgICB4TGlua0FyY1JvbGU6IG51bGwsXG4gICAgeExpbmtIcmVmOiBudWxsLFxuICAgIHhMaW5rUm9sZTogbnVsbCxcbiAgICB4TGlua1Nob3c6IG51bGwsXG4gICAgeExpbmtUaXRsZTogbnVsbCxcbiAgICB4TGlua1R5cGU6IG51bGxcbiAgfVxufSlcblxuLyoqXG4gKiBAcGFyYW0ge3Vua25vd259IF9cbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiB4bGlua1RyYW5zZm9ybShfLCBwcm9wKSB7XG4gIHJldHVybiAneGxpbms6JyArIHByb3Auc2xpY2UoNSkudG9Mb3dlckNhc2UoKVxufVxuIiwiaW1wb3J0IHtjcmVhdGV9IGZyb20gJy4vdXRpbC9jcmVhdGUuanMnXG5cbmV4cG9ydCB2YXIgeG1sID0gY3JlYXRlKHtcbiAgc3BhY2U6ICd4bWwnLFxuICB0cmFuc2Zvcm06IHhtbFRyYW5zZm9ybSxcbiAgcHJvcGVydGllczoge3htbExhbmc6IG51bGwsIHhtbEJhc2U6IG51bGwsIHhtbFNwYWNlOiBudWxsfVxufSlcblxuLyoqXG4gKiBAcGFyYW0ge3Vua25vd259IF9cbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiB4bWxUcmFuc2Zvcm0oXywgcHJvcCkge1xuICByZXR1cm4gJ3htbDonICsgcHJvcC5zbGljZSgzKS50b0xvd2VyQ2FzZSgpXG59XG4iLCIvKipcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsIHN0cmluZz59IGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYXNlU2Vuc2l0aXZlVHJhbnNmb3JtKGF0dHJpYnV0ZXMsIGF0dHJpYnV0ZSkge1xuICByZXR1cm4gYXR0cmlidXRlIGluIGF0dHJpYnV0ZXMgPyBhdHRyaWJ1dGVzW2F0dHJpYnV0ZV0gOiBhdHRyaWJ1dGVcbn1cbiIsImltcG9ydCB7Y2FzZVNlbnNpdGl2ZVRyYW5zZm9ybX0gZnJvbSAnLi9jYXNlLXNlbnNpdGl2ZS10cmFuc2Zvcm0uanMnXG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywgc3RyaW5nPn0gYXR0cmlidXRlc1xuICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5XG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FzZUluc2Vuc2l0aXZlVHJhbnNmb3JtKGF0dHJpYnV0ZXMsIHByb3BlcnR5KSB7XG4gIHJldHVybiBjYXNlU2Vuc2l0aXZlVHJhbnNmb3JtKGF0dHJpYnV0ZXMsIHByb3BlcnR5LnRvTG93ZXJDYXNlKCkpXG59XG4iLCJpbXBvcnQge2NyZWF0ZX0gZnJvbSAnLi91dGlsL2NyZWF0ZS5qcydcbmltcG9ydCB7Y2FzZUluc2Vuc2l0aXZlVHJhbnNmb3JtfSBmcm9tICcuL3V0aWwvY2FzZS1pbnNlbnNpdGl2ZS10cmFuc2Zvcm0uanMnXG5cbmV4cG9ydCB2YXIgeG1sbnMgPSBjcmVhdGUoe1xuICBzcGFjZTogJ3htbG5zJyxcbiAgYXR0cmlidXRlczoge3htbG5zeGxpbms6ICd4bWxuczp4bGluayd9LFxuICB0cmFuc2Zvcm06IGNhc2VJbnNlbnNpdGl2ZVRyYW5zZm9ybSxcbiAgcHJvcGVydGllczoge3htbG5zOiBudWxsLCB4bWxuc1hMaW5rOiBudWxsfVxufSlcbiIsImltcG9ydCB7Ym9vbGVhbmlzaCwgbnVtYmVyLCBzcGFjZVNlcGFyYXRlZH0gZnJvbSAnLi91dGlsL3R5cGVzLmpzJ1xuaW1wb3J0IHtjcmVhdGV9IGZyb20gJy4vdXRpbC9jcmVhdGUuanMnXG5cbmV4cG9ydCB2YXIgYXJpYSA9IGNyZWF0ZSh7XG4gIHRyYW5zZm9ybTogYXJpYVRyYW5zZm9ybSxcbiAgcHJvcGVydGllczoge1xuICAgIGFyaWFBY3RpdmVEZXNjZW5kYW50OiBudWxsLFxuICAgIGFyaWFBdG9taWM6IGJvb2xlYW5pc2gsXG4gICAgYXJpYUF1dG9Db21wbGV0ZTogbnVsbCxcbiAgICBhcmlhQnVzeTogYm9vbGVhbmlzaCxcbiAgICBhcmlhQ2hlY2tlZDogYm9vbGVhbmlzaCxcbiAgICBhcmlhQ29sQ291bnQ6IG51bWJlcixcbiAgICBhcmlhQ29sSW5kZXg6IG51bWJlcixcbiAgICBhcmlhQ29sU3BhbjogbnVtYmVyLFxuICAgIGFyaWFDb250cm9sczogc3BhY2VTZXBhcmF0ZWQsXG4gICAgYXJpYUN1cnJlbnQ6IG51bGwsXG4gICAgYXJpYURlc2NyaWJlZEJ5OiBzcGFjZVNlcGFyYXRlZCxcbiAgICBhcmlhRGV0YWlsczogbnVsbCxcbiAgICBhcmlhRGlzYWJsZWQ6IGJvb2xlYW5pc2gsXG4gICAgYXJpYURyb3BFZmZlY3Q6IHNwYWNlU2VwYXJhdGVkLFxuICAgIGFyaWFFcnJvck1lc3NhZ2U6IG51bGwsXG4gICAgYXJpYUV4cGFuZGVkOiBib29sZWFuaXNoLFxuICAgIGFyaWFGbG93VG86IHNwYWNlU2VwYXJhdGVkLFxuICAgIGFyaWFHcmFiYmVkOiBib29sZWFuaXNoLFxuICAgIGFyaWFIYXNQb3B1cDogbnVsbCxcbiAgICBhcmlhSGlkZGVuOiBib29sZWFuaXNoLFxuICAgIGFyaWFJbnZhbGlkOiBudWxsLFxuICAgIGFyaWFLZXlTaG9ydGN1dHM6IG51bGwsXG4gICAgYXJpYUxhYmVsOiBudWxsLFxuICAgIGFyaWFMYWJlbGxlZEJ5OiBzcGFjZVNlcGFyYXRlZCxcbiAgICBhcmlhTGV2ZWw6IG51bWJlcixcbiAgICBhcmlhTGl2ZTogbnVsbCxcbiAgICBhcmlhTW9kYWw6IGJvb2xlYW5pc2gsXG4gICAgYXJpYU11bHRpTGluZTogYm9vbGVhbmlzaCxcbiAgICBhcmlhTXVsdGlTZWxlY3RhYmxlOiBib29sZWFuaXNoLFxuICAgIGFyaWFPcmllbnRhdGlvbjogbnVsbCxcbiAgICBhcmlhT3duczogc3BhY2VTZXBhcmF0ZWQsXG4gICAgYXJpYVBsYWNlaG9sZGVyOiBudWxsLFxuICAgIGFyaWFQb3NJblNldDogbnVtYmVyLFxuICAgIGFyaWFQcmVzc2VkOiBib29sZWFuaXNoLFxuICAgIGFyaWFSZWFkT25seTogYm9vbGVhbmlzaCxcbiAgICBhcmlhUmVsZXZhbnQ6IG51bGwsXG4gICAgYXJpYVJlcXVpcmVkOiBib29sZWFuaXNoLFxuICAgIGFyaWFSb2xlRGVzY3JpcHRpb246IHNwYWNlU2VwYXJhdGVkLFxuICAgIGFyaWFSb3dDb3VudDogbnVtYmVyLFxuICAgIGFyaWFSb3dJbmRleDogbnVtYmVyLFxuICAgIGFyaWFSb3dTcGFuOiBudW1iZXIsXG4gICAgYXJpYVNlbGVjdGVkOiBib29sZWFuaXNoLFxuICAgIGFyaWFTZXRTaXplOiBudW1iZXIsXG4gICAgYXJpYVNvcnQ6IG51bGwsXG4gICAgYXJpYVZhbHVlTWF4OiBudW1iZXIsXG4gICAgYXJpYVZhbHVlTWluOiBudW1iZXIsXG4gICAgYXJpYVZhbHVlTm93OiBudW1iZXIsXG4gICAgYXJpYVZhbHVlVGV4dDogbnVsbCxcbiAgICByb2xlOiBudWxsXG4gIH1cbn0pXG5cbi8qKlxuICogQHBhcmFtIHt1bmtub3dufSBfXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gYXJpYVRyYW5zZm9ybShfLCBwcm9wKSB7XG4gIHJldHVybiBwcm9wID09PSAncm9sZScgPyBwcm9wIDogJ2FyaWEtJyArIHByb3Auc2xpY2UoNCkudG9Mb3dlckNhc2UoKVxufVxuIiwiaW1wb3J0IHtcbiAgYm9vbGVhbixcbiAgb3ZlcmxvYWRlZEJvb2xlYW4sXG4gIGJvb2xlYW5pc2gsXG4gIG51bWJlcixcbiAgc3BhY2VTZXBhcmF0ZWQsXG4gIGNvbW1hU2VwYXJhdGVkXG59IGZyb20gJy4vdXRpbC90eXBlcy5qcydcbmltcG9ydCB7Y3JlYXRlfSBmcm9tICcuL3V0aWwvY3JlYXRlLmpzJ1xuaW1wb3J0IHtjYXNlSW5zZW5zaXRpdmVUcmFuc2Zvcm19IGZyb20gJy4vdXRpbC9jYXNlLWluc2Vuc2l0aXZlLXRyYW5zZm9ybS5qcydcblxuZXhwb3J0IHZhciBodG1sID0gY3JlYXRlKHtcbiAgc3BhY2U6ICdodG1sJyxcbiAgYXR0cmlidXRlczoge1xuICAgIGFjY2VwdGNoYXJzZXQ6ICdhY2NlcHQtY2hhcnNldCcsXG4gICAgY2xhc3NuYW1lOiAnY2xhc3MnLFxuICAgIGh0bWxmb3I6ICdmb3InLFxuICAgIGh0dHBlcXVpdjogJ2h0dHAtZXF1aXYnXG4gIH0sXG4gIHRyYW5zZm9ybTogY2FzZUluc2Vuc2l0aXZlVHJhbnNmb3JtLFxuICBtdXN0VXNlUHJvcGVydHk6IFsnY2hlY2tlZCcsICdtdWx0aXBsZScsICdtdXRlZCcsICdzZWxlY3RlZCddLFxuICBwcm9wZXJ0aWVzOiB7XG4gICAgLy8gU3RhbmRhcmQgUHJvcGVydGllcy5cbiAgICBhYmJyOiBudWxsLFxuICAgIGFjY2VwdDogY29tbWFTZXBhcmF0ZWQsXG4gICAgYWNjZXB0Q2hhcnNldDogc3BhY2VTZXBhcmF0ZWQsXG4gICAgYWNjZXNzS2V5OiBzcGFjZVNlcGFyYXRlZCxcbiAgICBhY3Rpb246IG51bGwsXG4gICAgYWxsb3c6IG51bGwsXG4gICAgYWxsb3dGdWxsU2NyZWVuOiBib29sZWFuLFxuICAgIGFsbG93UGF5bWVudFJlcXVlc3Q6IGJvb2xlYW4sXG4gICAgYWxsb3dVc2VyTWVkaWE6IGJvb2xlYW4sXG4gICAgYWx0OiBudWxsLFxuICAgIGFzOiBudWxsLFxuICAgIGFzeW5jOiBib29sZWFuLFxuICAgIGF1dG9DYXBpdGFsaXplOiBudWxsLFxuICAgIGF1dG9Db21wbGV0ZTogc3BhY2VTZXBhcmF0ZWQsXG4gICAgYXV0b0ZvY3VzOiBib29sZWFuLFxuICAgIGF1dG9QbGF5OiBib29sZWFuLFxuICAgIGNhcHR1cmU6IGJvb2xlYW4sXG4gICAgY2hhclNldDogbnVsbCxcbiAgICBjaGVja2VkOiBib29sZWFuLFxuICAgIGNpdGU6IG51bGwsXG4gICAgY2xhc3NOYW1lOiBzcGFjZVNlcGFyYXRlZCxcbiAgICBjb2xzOiBudW1iZXIsXG4gICAgY29sU3BhbjogbnVsbCxcbiAgICBjb250ZW50OiBudWxsLFxuICAgIGNvbnRlbnRFZGl0YWJsZTogYm9vbGVhbmlzaCxcbiAgICBjb250cm9sczogYm9vbGVhbixcbiAgICBjb250cm9sc0xpc3Q6IHNwYWNlU2VwYXJhdGVkLFxuICAgIGNvb3JkczogbnVtYmVyIHwgY29tbWFTZXBhcmF0ZWQsXG4gICAgY3Jvc3NPcmlnaW46IG51bGwsXG4gICAgZGF0YTogbnVsbCxcbiAgICBkYXRlVGltZTogbnVsbCxcbiAgICBkZWNvZGluZzogbnVsbCxcbiAgICBkZWZhdWx0OiBib29sZWFuLFxuICAgIGRlZmVyOiBib29sZWFuLFxuICAgIGRpcjogbnVsbCxcbiAgICBkaXJOYW1lOiBudWxsLFxuICAgIGRpc2FibGVkOiBib29sZWFuLFxuICAgIGRvd25sb2FkOiBvdmVybG9hZGVkQm9vbGVhbixcbiAgICBkcmFnZ2FibGU6IGJvb2xlYW5pc2gsXG4gICAgZW5jVHlwZTogbnVsbCxcbiAgICBlbnRlcktleUhpbnQ6IG51bGwsXG4gICAgZm9ybTogbnVsbCxcbiAgICBmb3JtQWN0aW9uOiBudWxsLFxuICAgIGZvcm1FbmNUeXBlOiBudWxsLFxuICAgIGZvcm1NZXRob2Q6IG51bGwsXG4gICAgZm9ybU5vVmFsaWRhdGU6IGJvb2xlYW4sXG4gICAgZm9ybVRhcmdldDogbnVsbCxcbiAgICBoZWFkZXJzOiBzcGFjZVNlcGFyYXRlZCxcbiAgICBoZWlnaHQ6IG51bWJlcixcbiAgICBoaWRkZW46IGJvb2xlYW4sXG4gICAgaGlnaDogbnVtYmVyLFxuICAgIGhyZWY6IG51bGwsXG4gICAgaHJlZkxhbmc6IG51bGwsXG4gICAgaHRtbEZvcjogc3BhY2VTZXBhcmF0ZWQsXG4gICAgaHR0cEVxdWl2OiBzcGFjZVNlcGFyYXRlZCxcbiAgICBpZDogbnVsbCxcbiAgICBpbWFnZVNpemVzOiBudWxsLFxuICAgIGltYWdlU3JjU2V0OiBjb21tYVNlcGFyYXRlZCxcbiAgICBpbnB1dE1vZGU6IG51bGwsXG4gICAgaW50ZWdyaXR5OiBudWxsLFxuICAgIGlzOiBudWxsLFxuICAgIGlzTWFwOiBib29sZWFuLFxuICAgIGl0ZW1JZDogbnVsbCxcbiAgICBpdGVtUHJvcDogc3BhY2VTZXBhcmF0ZWQsXG4gICAgaXRlbVJlZjogc3BhY2VTZXBhcmF0ZWQsXG4gICAgaXRlbVNjb3BlOiBib29sZWFuLFxuICAgIGl0ZW1UeXBlOiBzcGFjZVNlcGFyYXRlZCxcbiAgICBraW5kOiBudWxsLFxuICAgIGxhYmVsOiBudWxsLFxuICAgIGxhbmc6IG51bGwsXG4gICAgbGFuZ3VhZ2U6IG51bGwsXG4gICAgbGlzdDogbnVsbCxcbiAgICBsb2FkaW5nOiBudWxsLFxuICAgIGxvb3A6IGJvb2xlYW4sXG4gICAgbG93OiBudW1iZXIsXG4gICAgbWFuaWZlc3Q6IG51bGwsXG4gICAgbWF4OiBudWxsLFxuICAgIG1heExlbmd0aDogbnVtYmVyLFxuICAgIG1lZGlhOiBudWxsLFxuICAgIG1ldGhvZDogbnVsbCxcbiAgICBtaW46IG51bGwsXG4gICAgbWluTGVuZ3RoOiBudW1iZXIsXG4gICAgbXVsdGlwbGU6IGJvb2xlYW4sXG4gICAgbXV0ZWQ6IGJvb2xlYW4sXG4gICAgbmFtZTogbnVsbCxcbiAgICBub25jZTogbnVsbCxcbiAgICBub01vZHVsZTogYm9vbGVhbixcbiAgICBub1ZhbGlkYXRlOiBib29sZWFuLFxuICAgIG9uQWJvcnQ6IG51bGwsXG4gICAgb25BZnRlclByaW50OiBudWxsLFxuICAgIG9uQXV4Q2xpY2s6IG51bGwsXG4gICAgb25CZWZvcmVQcmludDogbnVsbCxcbiAgICBvbkJlZm9yZVVubG9hZDogbnVsbCxcbiAgICBvbkJsdXI6IG51bGwsXG4gICAgb25DYW5jZWw6IG51bGwsXG4gICAgb25DYW5QbGF5OiBudWxsLFxuICAgIG9uQ2FuUGxheVRocm91Z2g6IG51bGwsXG4gICAgb25DaGFuZ2U6IG51bGwsXG4gICAgb25DbGljazogbnVsbCxcbiAgICBvbkNsb3NlOiBudWxsLFxuICAgIG9uQ29udGV4dE1lbnU6IG51bGwsXG4gICAgb25Db3B5OiBudWxsLFxuICAgIG9uQ3VlQ2hhbmdlOiBudWxsLFxuICAgIG9uQ3V0OiBudWxsLFxuICAgIG9uRGJsQ2xpY2s6IG51bGwsXG4gICAgb25EcmFnOiBudWxsLFxuICAgIG9uRHJhZ0VuZDogbnVsbCxcbiAgICBvbkRyYWdFbnRlcjogbnVsbCxcbiAgICBvbkRyYWdFeGl0OiBudWxsLFxuICAgIG9uRHJhZ0xlYXZlOiBudWxsLFxuICAgIG9uRHJhZ092ZXI6IG51bGwsXG4gICAgb25EcmFnU3RhcnQ6IG51bGwsXG4gICAgb25Ecm9wOiBudWxsLFxuICAgIG9uRHVyYXRpb25DaGFuZ2U6IG51bGwsXG4gICAgb25FbXB0aWVkOiBudWxsLFxuICAgIG9uRW5kZWQ6IG51bGwsXG4gICAgb25FcnJvcjogbnVsbCxcbiAgICBvbkZvY3VzOiBudWxsLFxuICAgIG9uRm9ybURhdGE6IG51bGwsXG4gICAgb25IYXNoQ2hhbmdlOiBudWxsLFxuICAgIG9uSW5wdXQ6IG51bGwsXG4gICAgb25JbnZhbGlkOiBudWxsLFxuICAgIG9uS2V5RG93bjogbnVsbCxcbiAgICBvbktleVByZXNzOiBudWxsLFxuICAgIG9uS2V5VXA6IG51bGwsXG4gICAgb25MYW5ndWFnZUNoYW5nZTogbnVsbCxcbiAgICBvbkxvYWQ6IG51bGwsXG4gICAgb25Mb2FkZWREYXRhOiBudWxsLFxuICAgIG9uTG9hZGVkTWV0YWRhdGE6IG51bGwsXG4gICAgb25Mb2FkRW5kOiBudWxsLFxuICAgIG9uTG9hZFN0YXJ0OiBudWxsLFxuICAgIG9uTWVzc2FnZTogbnVsbCxcbiAgICBvbk1lc3NhZ2VFcnJvcjogbnVsbCxcbiAgICBvbk1vdXNlRG93bjogbnVsbCxcbiAgICBvbk1vdXNlRW50ZXI6IG51bGwsXG4gICAgb25Nb3VzZUxlYXZlOiBudWxsLFxuICAgIG9uTW91c2VNb3ZlOiBudWxsLFxuICAgIG9uTW91c2VPdXQ6IG51bGwsXG4gICAgb25Nb3VzZU92ZXI6IG51bGwsXG4gICAgb25Nb3VzZVVwOiBudWxsLFxuICAgIG9uT2ZmbGluZTogbnVsbCxcbiAgICBvbk9ubGluZTogbnVsbCxcbiAgICBvblBhZ2VIaWRlOiBudWxsLFxuICAgIG9uUGFnZVNob3c6IG51bGwsXG4gICAgb25QYXN0ZTogbnVsbCxcbiAgICBvblBhdXNlOiBudWxsLFxuICAgIG9uUGxheTogbnVsbCxcbiAgICBvblBsYXlpbmc6IG51bGwsXG4gICAgb25Qb3BTdGF0ZTogbnVsbCxcbiAgICBvblByb2dyZXNzOiBudWxsLFxuICAgIG9uUmF0ZUNoYW5nZTogbnVsbCxcbiAgICBvblJlamVjdGlvbkhhbmRsZWQ6IG51bGwsXG4gICAgb25SZXNldDogbnVsbCxcbiAgICBvblJlc2l6ZTogbnVsbCxcbiAgICBvblNjcm9sbDogbnVsbCxcbiAgICBvblNlY3VyaXR5UG9saWN5VmlvbGF0aW9uOiBudWxsLFxuICAgIG9uU2Vla2VkOiBudWxsLFxuICAgIG9uU2Vla2luZzogbnVsbCxcbiAgICBvblNlbGVjdDogbnVsbCxcbiAgICBvblNsb3RDaGFuZ2U6IG51bGwsXG4gICAgb25TdGFsbGVkOiBudWxsLFxuICAgIG9uU3RvcmFnZTogbnVsbCxcbiAgICBvblN1Ym1pdDogbnVsbCxcbiAgICBvblN1c3BlbmQ6IG51bGwsXG4gICAgb25UaW1lVXBkYXRlOiBudWxsLFxuICAgIG9uVG9nZ2xlOiBudWxsLFxuICAgIG9uVW5oYW5kbGVkUmVqZWN0aW9uOiBudWxsLFxuICAgIG9uVW5sb2FkOiBudWxsLFxuICAgIG9uVm9sdW1lQ2hhbmdlOiBudWxsLFxuICAgIG9uV2FpdGluZzogbnVsbCxcbiAgICBvbldoZWVsOiBudWxsLFxuICAgIG9wZW46IGJvb2xlYW4sXG4gICAgb3B0aW11bTogbnVtYmVyLFxuICAgIHBhdHRlcm46IG51bGwsXG4gICAgcGluZzogc3BhY2VTZXBhcmF0ZWQsXG4gICAgcGxhY2Vob2xkZXI6IG51bGwsXG4gICAgcGxheXNJbmxpbmU6IGJvb2xlYW4sXG4gICAgcG9zdGVyOiBudWxsLFxuICAgIHByZWxvYWQ6IG51bGwsXG4gICAgcmVhZE9ubHk6IGJvb2xlYW4sXG4gICAgcmVmZXJyZXJQb2xpY3k6IG51bGwsXG4gICAgcmVsOiBzcGFjZVNlcGFyYXRlZCxcbiAgICByZXF1aXJlZDogYm9vbGVhbixcbiAgICByZXZlcnNlZDogYm9vbGVhbixcbiAgICByb3dzOiBudW1iZXIsXG4gICAgcm93U3BhbjogbnVtYmVyLFxuICAgIHNhbmRib3g6IHNwYWNlU2VwYXJhdGVkLFxuICAgIHNjb3BlOiBudWxsLFxuICAgIHNjb3BlZDogYm9vbGVhbixcbiAgICBzZWFtbGVzczogYm9vbGVhbixcbiAgICBzZWxlY3RlZDogYm9vbGVhbixcbiAgICBzaGFwZTogbnVsbCxcbiAgICBzaXplOiBudW1iZXIsXG4gICAgc2l6ZXM6IG51bGwsXG4gICAgc2xvdDogbnVsbCxcbiAgICBzcGFuOiBudW1iZXIsXG4gICAgc3BlbGxDaGVjazogYm9vbGVhbmlzaCxcbiAgICBzcmM6IG51bGwsXG4gICAgc3JjRG9jOiBudWxsLFxuICAgIHNyY0xhbmc6IG51bGwsXG4gICAgc3JjU2V0OiBjb21tYVNlcGFyYXRlZCxcbiAgICBzdGFydDogbnVtYmVyLFxuICAgIHN0ZXA6IG51bGwsXG4gICAgc3R5bGU6IG51bGwsXG4gICAgdGFiSW5kZXg6IG51bWJlcixcbiAgICB0YXJnZXQ6IG51bGwsXG4gICAgdGl0bGU6IG51bGwsXG4gICAgdHJhbnNsYXRlOiBudWxsLFxuICAgIHR5cGU6IG51bGwsXG4gICAgdHlwZU11c3RNYXRjaDogYm9vbGVhbixcbiAgICB1c2VNYXA6IG51bGwsXG4gICAgdmFsdWU6IGJvb2xlYW5pc2gsXG4gICAgd2lkdGg6IG51bWJlcixcbiAgICB3cmFwOiBudWxsLFxuXG4gICAgLy8gTGVnYWN5LlxuICAgIC8vIFNlZTogaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jb3RoZXItZWxlbWVudHMsLWF0dHJpYnV0ZXMtYW5kLWFwaXNcbiAgICBhbGlnbjogbnVsbCwgLy8gU2V2ZXJhbC4gVXNlIENTUyBgdGV4dC1hbGlnbmAgaW5zdGVhZCxcbiAgICBhTGluazogbnVsbCwgLy8gYDxib2R5PmAuIFVzZSBDU1MgYGE6YWN0aXZlIHtjb2xvcn1gIGluc3RlYWRcbiAgICBhcmNoaXZlOiBzcGFjZVNlcGFyYXRlZCwgLy8gYDxvYmplY3Q+YC4gTGlzdCBvZiBVUklzIHRvIGFyY2hpdmVzXG4gICAgYXhpczogbnVsbCwgLy8gYDx0ZD5gIGFuZCBgPHRoPmAuIFVzZSBgc2NvcGVgIG9uIGA8dGg+YFxuICAgIGJhY2tncm91bmQ6IG51bGwsIC8vIGA8Ym9keT5gLiBVc2UgQ1NTIGBiYWNrZ3JvdW5kLWltYWdlYCBpbnN0ZWFkXG4gICAgYmdDb2xvcjogbnVsbCwgLy8gYDxib2R5PmAgYW5kIHRhYmxlIGVsZW1lbnRzLiBVc2UgQ1NTIGBiYWNrZ3JvdW5kLWNvbG9yYCBpbnN0ZWFkXG4gICAgYm9yZGVyOiBudW1iZXIsIC8vIGA8dGFibGU+YC4gVXNlIENTUyBgYm9yZGVyLXdpZHRoYCBpbnN0ZWFkLFxuICAgIGJvcmRlckNvbG9yOiBudWxsLCAvLyBgPHRhYmxlPmAuIFVzZSBDU1MgYGJvcmRlci1jb2xvcmAgaW5zdGVhZCxcbiAgICBib3R0b21NYXJnaW46IG51bWJlciwgLy8gYDxib2R5PmBcbiAgICBjZWxsUGFkZGluZzogbnVsbCwgLy8gYDx0YWJsZT5gXG4gICAgY2VsbFNwYWNpbmc6IG51bGwsIC8vIGA8dGFibGU+YFxuICAgIGNoYXI6IG51bGwsIC8vIFNldmVyYWwgdGFibGUgZWxlbWVudHMuIFdoZW4gYGFsaWduPWNoYXJgLCBzZXRzIHRoZSBjaGFyYWN0ZXIgdG8gYWxpZ24gb25cbiAgICBjaGFyT2ZmOiBudWxsLCAvLyBTZXZlcmFsIHRhYmxlIGVsZW1lbnRzLiBXaGVuIGBjaGFyYCwgb2Zmc2V0cyB0aGUgYWxpZ25tZW50XG4gICAgY2xhc3NJZDogbnVsbCwgLy8gYDxvYmplY3Q+YFxuICAgIGNsZWFyOiBudWxsLCAvLyBgPGJyPmAuIFVzZSBDU1MgYGNsZWFyYCBpbnN0ZWFkXG4gICAgY29kZTogbnVsbCwgLy8gYDxvYmplY3Q+YFxuICAgIGNvZGVCYXNlOiBudWxsLCAvLyBgPG9iamVjdD5gXG4gICAgY29kZVR5cGU6IG51bGwsIC8vIGA8b2JqZWN0PmBcbiAgICBjb2xvcjogbnVsbCwgLy8gYDxmb250PmAgYW5kIGA8aHI+YC4gVXNlIENTUyBpbnN0ZWFkXG4gICAgY29tcGFjdDogYm9vbGVhbiwgLy8gTGlzdHMuIFVzZSBDU1MgdG8gcmVkdWNlIHNwYWNlIGJldHdlZW4gaXRlbXMgaW5zdGVhZFxuICAgIGRlY2xhcmU6IGJvb2xlYW4sIC8vIGA8b2JqZWN0PmBcbiAgICBldmVudDogbnVsbCwgLy8gYDxzY3JpcHQ+YFxuICAgIGZhY2U6IG51bGwsIC8vIGA8Zm9udD5gLiBVc2UgQ1NTIGluc3RlYWRcbiAgICBmcmFtZTogbnVsbCwgLy8gYDx0YWJsZT5gXG4gICAgZnJhbWVCb3JkZXI6IG51bGwsIC8vIGA8aWZyYW1lPmAuIFVzZSBDU1MgYGJvcmRlcmAgaW5zdGVhZFxuICAgIGhTcGFjZTogbnVtYmVyLCAvLyBgPGltZz5gIGFuZCBgPG9iamVjdD5gXG4gICAgbGVmdE1hcmdpbjogbnVtYmVyLCAvLyBgPGJvZHk+YFxuICAgIGxpbms6IG51bGwsIC8vIGA8Ym9keT5gLiBVc2UgQ1NTIGBhOmxpbmsge2NvbG9yOiAqfWAgaW5zdGVhZFxuICAgIGxvbmdEZXNjOiBudWxsLCAvLyBgPGZyYW1lPmAsIGA8aWZyYW1lPmAsIGFuZCBgPGltZz5gLiBVc2UgYW4gYDxhPmBcbiAgICBsb3dTcmM6IG51bGwsIC8vIGA8aW1nPmAuIFVzZSBhIGA8cGljdHVyZT5gXG4gICAgbWFyZ2luSGVpZ2h0OiBudW1iZXIsIC8vIGA8Ym9keT5gXG4gICAgbWFyZ2luV2lkdGg6IG51bWJlciwgLy8gYDxib2R5PmBcbiAgICBub1Jlc2l6ZTogYm9vbGVhbiwgLy8gYDxmcmFtZT5gXG4gICAgbm9IcmVmOiBib29sZWFuLCAvLyBgPGFyZWE+YC4gVXNlIG5vIGhyZWYgaW5zdGVhZCBvZiBhbiBleHBsaWNpdCBgbm9ocmVmYFxuICAgIG5vU2hhZGU6IGJvb2xlYW4sIC8vIGA8aHI+YC4gVXNlIGJhY2tncm91bmQtY29sb3IgYW5kIGhlaWdodCBpbnN0ZWFkIG9mIGJvcmRlcnNcbiAgICBub1dyYXA6IGJvb2xlYW4sIC8vIGA8dGQ+YCBhbmQgYDx0aD5gXG4gICAgb2JqZWN0OiBudWxsLCAvLyBgPGFwcGxldD5gXG4gICAgcHJvZmlsZTogbnVsbCwgLy8gYDxoZWFkPmBcbiAgICBwcm9tcHQ6IG51bGwsIC8vIGA8aXNpbmRleD5gXG4gICAgcmV2OiBudWxsLCAvLyBgPGxpbms+YFxuICAgIHJpZ2h0TWFyZ2luOiBudW1iZXIsIC8vIGA8Ym9keT5gXG4gICAgcnVsZXM6IG51bGwsIC8vIGA8dGFibGU+YFxuICAgIHNjaGVtZTogbnVsbCwgLy8gYDxtZXRhPmBcbiAgICBzY3JvbGxpbmc6IGJvb2xlYW5pc2gsIC8vIGA8ZnJhbWU+YC4gVXNlIG92ZXJmbG93IGluIHRoZSBjaGlsZCBjb250ZXh0XG4gICAgc3RhbmRieTogbnVsbCwgLy8gYDxvYmplY3Q+YFxuICAgIHN1bW1hcnk6IG51bGwsIC8vIGA8dGFibGU+YFxuICAgIHRleHQ6IG51bGwsIC8vIGA8Ym9keT5gLiBVc2UgQ1NTIGBjb2xvcmAgaW5zdGVhZFxuICAgIHRvcE1hcmdpbjogbnVtYmVyLCAvLyBgPGJvZHk+YFxuICAgIHZhbHVlVHlwZTogbnVsbCwgLy8gYDxwYXJhbT5gXG4gICAgdmVyc2lvbjogbnVsbCwgLy8gYDxodG1sPmAuIFVzZSBhIGRvY3R5cGUuXG4gICAgdkFsaWduOiBudWxsLCAvLyBTZXZlcmFsLiBVc2UgQ1NTIGB2ZXJ0aWNhbC1hbGlnbmAgaW5zdGVhZFxuICAgIHZMaW5rOiBudWxsLCAvLyBgPGJvZHk+YC4gVXNlIENTUyBgYTp2aXNpdGVkIHtjb2xvcn1gIGluc3RlYWRcbiAgICB2U3BhY2U6IG51bWJlciwgLy8gYDxpbWc+YCBhbmQgYDxvYmplY3Q+YFxuXG4gICAgLy8gTm9uLXN0YW5kYXJkIFByb3BlcnRpZXMuXG4gICAgYWxsb3dUcmFuc3BhcmVuY3k6IG51bGwsXG4gICAgYXV0b0NvcnJlY3Q6IG51bGwsXG4gICAgYXV0b1NhdmU6IG51bGwsXG4gICAgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmU6IGJvb2xlYW4sXG4gICAgZGlzYWJsZVJlbW90ZVBsYXliYWNrOiBib29sZWFuLFxuICAgIHByZWZpeDogbnVsbCxcbiAgICBwcm9wZXJ0eTogbnVsbCxcbiAgICByZXN1bHRzOiBudW1iZXIsXG4gICAgc2VjdXJpdHk6IG51bGwsXG4gICAgdW5zZWxlY3RhYmxlOiBudWxsXG4gIH1cbn0pXG4iLCJpbXBvcnQge1xuICBib29sZWFuLFxuICBudW1iZXIsXG4gIHNwYWNlU2VwYXJhdGVkLFxuICBjb21tYVNlcGFyYXRlZCxcbiAgY29tbWFPclNwYWNlU2VwYXJhdGVkXG59IGZyb20gJy4vdXRpbC90eXBlcy5qcydcbmltcG9ydCB7Y3JlYXRlfSBmcm9tICcuL3V0aWwvY3JlYXRlLmpzJ1xuaW1wb3J0IHtjYXNlU2Vuc2l0aXZlVHJhbnNmb3JtfSBmcm9tICcuL3V0aWwvY2FzZS1zZW5zaXRpdmUtdHJhbnNmb3JtLmpzJ1xuXG5leHBvcnQgdmFyIHN2ZyA9IGNyZWF0ZSh7XG4gIHNwYWNlOiAnc3ZnJyxcbiAgYXR0cmlidXRlczoge1xuICAgIGFjY2VudEhlaWdodDogJ2FjY2VudC1oZWlnaHQnLFxuICAgIGFsaWdubWVudEJhc2VsaW5lOiAnYWxpZ25tZW50LWJhc2VsaW5lJyxcbiAgICBhcmFiaWNGb3JtOiAnYXJhYmljLWZvcm0nLFxuICAgIGJhc2VsaW5lU2hpZnQ6ICdiYXNlbGluZS1zaGlmdCcsXG4gICAgY2FwSGVpZ2h0OiAnY2FwLWhlaWdodCcsXG4gICAgY2xhc3NOYW1lOiAnY2xhc3MnLFxuICAgIGNsaXBQYXRoOiAnY2xpcC1wYXRoJyxcbiAgICBjbGlwUnVsZTogJ2NsaXAtcnVsZScsXG4gICAgY29sb3JJbnRlcnBvbGF0aW9uOiAnY29sb3ItaW50ZXJwb2xhdGlvbicsXG4gICAgY29sb3JJbnRlcnBvbGF0aW9uRmlsdGVyczogJ2NvbG9yLWludGVycG9sYXRpb24tZmlsdGVycycsXG4gICAgY29sb3JQcm9maWxlOiAnY29sb3ItcHJvZmlsZScsXG4gICAgY29sb3JSZW5kZXJpbmc6ICdjb2xvci1yZW5kZXJpbmcnLFxuICAgIGNyb3NzT3JpZ2luOiAnY3Jvc3NvcmlnaW4nLFxuICAgIGRhdGFUeXBlOiAnZGF0YXR5cGUnLFxuICAgIGRvbWluYW50QmFzZWxpbmU6ICdkb21pbmFudC1iYXNlbGluZScsXG4gICAgZW5hYmxlQmFja2dyb3VuZDogJ2VuYWJsZS1iYWNrZ3JvdW5kJyxcbiAgICBmaWxsT3BhY2l0eTogJ2ZpbGwtb3BhY2l0eScsXG4gICAgZmlsbFJ1bGU6ICdmaWxsLXJ1bGUnLFxuICAgIGZsb29kQ29sb3I6ICdmbG9vZC1jb2xvcicsXG4gICAgZmxvb2RPcGFjaXR5OiAnZmxvb2Qtb3BhY2l0eScsXG4gICAgZm9udEZhbWlseTogJ2ZvbnQtZmFtaWx5JyxcbiAgICBmb250U2l6ZTogJ2ZvbnQtc2l6ZScsXG4gICAgZm9udFNpemVBZGp1c3Q6ICdmb250LXNpemUtYWRqdXN0JyxcbiAgICBmb250U3RyZXRjaDogJ2ZvbnQtc3RyZXRjaCcsXG4gICAgZm9udFN0eWxlOiAnZm9udC1zdHlsZScsXG4gICAgZm9udFZhcmlhbnQ6ICdmb250LXZhcmlhbnQnLFxuICAgIGZvbnRXZWlnaHQ6ICdmb250LXdlaWdodCcsXG4gICAgZ2x5cGhOYW1lOiAnZ2x5cGgtbmFtZScsXG4gICAgZ2x5cGhPcmllbnRhdGlvbkhvcml6b250YWw6ICdnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsJyxcbiAgICBnbHlwaE9yaWVudGF0aW9uVmVydGljYWw6ICdnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCcsXG4gICAgaHJlZkxhbmc6ICdocmVmbGFuZycsXG4gICAgaG9yaXpBZHZYOiAnaG9yaXotYWR2LXgnLFxuICAgIGhvcml6T3JpZ2luWDogJ2hvcml6LW9yaWdpbi14JyxcbiAgICBob3Jpek9yaWdpblk6ICdob3Jpei1vcmlnaW4teScsXG4gICAgaW1hZ2VSZW5kZXJpbmc6ICdpbWFnZS1yZW5kZXJpbmcnLFxuICAgIGxldHRlclNwYWNpbmc6ICdsZXR0ZXItc3BhY2luZycsXG4gICAgbGlnaHRpbmdDb2xvcjogJ2xpZ2h0aW5nLWNvbG9yJyxcbiAgICBtYXJrZXJFbmQ6ICdtYXJrZXItZW5kJyxcbiAgICBtYXJrZXJNaWQ6ICdtYXJrZXItbWlkJyxcbiAgICBtYXJrZXJTdGFydDogJ21hcmtlci1zdGFydCcsXG4gICAgbmF2RG93bjogJ25hdi1kb3duJyxcbiAgICBuYXZEb3duTGVmdDogJ25hdi1kb3duLWxlZnQnLFxuICAgIG5hdkRvd25SaWdodDogJ25hdi1kb3duLXJpZ2h0JyxcbiAgICBuYXZMZWZ0OiAnbmF2LWxlZnQnLFxuICAgIG5hdk5leHQ6ICduYXYtbmV4dCcsXG4gICAgbmF2UHJldjogJ25hdi1wcmV2JyxcbiAgICBuYXZSaWdodDogJ25hdi1yaWdodCcsXG4gICAgbmF2VXA6ICduYXYtdXAnLFxuICAgIG5hdlVwTGVmdDogJ25hdi11cC1sZWZ0JyxcbiAgICBuYXZVcFJpZ2h0OiAnbmF2LXVwLXJpZ2h0JyxcbiAgICBvbkFib3J0OiAnb25hYm9ydCcsXG4gICAgb25BY3RpdmF0ZTogJ29uYWN0aXZhdGUnLFxuICAgIG9uQWZ0ZXJQcmludDogJ29uYWZ0ZXJwcmludCcsXG4gICAgb25CZWZvcmVQcmludDogJ29uYmVmb3JlcHJpbnQnLFxuICAgIG9uQmVnaW46ICdvbmJlZ2luJyxcbiAgICBvbkNhbmNlbDogJ29uY2FuY2VsJyxcbiAgICBvbkNhblBsYXk6ICdvbmNhbnBsYXknLFxuICAgIG9uQ2FuUGxheVRocm91Z2g6ICdvbmNhbnBsYXl0aHJvdWdoJyxcbiAgICBvbkNoYW5nZTogJ29uY2hhbmdlJyxcbiAgICBvbkNsaWNrOiAnb25jbGljaycsXG4gICAgb25DbG9zZTogJ29uY2xvc2UnLFxuICAgIG9uQ29weTogJ29uY29weScsXG4gICAgb25DdWVDaGFuZ2U6ICdvbmN1ZWNoYW5nZScsXG4gICAgb25DdXQ6ICdvbmN1dCcsXG4gICAgb25EYmxDbGljazogJ29uZGJsY2xpY2snLFxuICAgIG9uRHJhZzogJ29uZHJhZycsXG4gICAgb25EcmFnRW5kOiAnb25kcmFnZW5kJyxcbiAgICBvbkRyYWdFbnRlcjogJ29uZHJhZ2VudGVyJyxcbiAgICBvbkRyYWdFeGl0OiAnb25kcmFnZXhpdCcsXG4gICAgb25EcmFnTGVhdmU6ICdvbmRyYWdsZWF2ZScsXG4gICAgb25EcmFnT3ZlcjogJ29uZHJhZ292ZXInLFxuICAgIG9uRHJhZ1N0YXJ0OiAnb25kcmFnc3RhcnQnLFxuICAgIG9uRHJvcDogJ29uZHJvcCcsXG4gICAgb25EdXJhdGlvbkNoYW5nZTogJ29uZHVyYXRpb25jaGFuZ2UnLFxuICAgIG9uRW1wdGllZDogJ29uZW1wdGllZCcsXG4gICAgb25FbmQ6ICdvbmVuZCcsXG4gICAgb25FbmRlZDogJ29uZW5kZWQnLFxuICAgIG9uRXJyb3I6ICdvbmVycm9yJyxcbiAgICBvbkZvY3VzOiAnb25mb2N1cycsXG4gICAgb25Gb2N1c0luOiAnb25mb2N1c2luJyxcbiAgICBvbkZvY3VzT3V0OiAnb25mb2N1c291dCcsXG4gICAgb25IYXNoQ2hhbmdlOiAnb25oYXNoY2hhbmdlJyxcbiAgICBvbklucHV0OiAnb25pbnB1dCcsXG4gICAgb25JbnZhbGlkOiAnb25pbnZhbGlkJyxcbiAgICBvbktleURvd246ICdvbmtleWRvd24nLFxuICAgIG9uS2V5UHJlc3M6ICdvbmtleXByZXNzJyxcbiAgICBvbktleVVwOiAnb25rZXl1cCcsXG4gICAgb25Mb2FkOiAnb25sb2FkJyxcbiAgICBvbkxvYWRlZERhdGE6ICdvbmxvYWRlZGRhdGEnLFxuICAgIG9uTG9hZGVkTWV0YWRhdGE6ICdvbmxvYWRlZG1ldGFkYXRhJyxcbiAgICBvbkxvYWRTdGFydDogJ29ubG9hZHN0YXJ0JyxcbiAgICBvbk1lc3NhZ2U6ICdvbm1lc3NhZ2UnLFxuICAgIG9uTW91c2VEb3duOiAnb25tb3VzZWRvd24nLFxuICAgIG9uTW91c2VFbnRlcjogJ29ubW91c2VlbnRlcicsXG4gICAgb25Nb3VzZUxlYXZlOiAnb25tb3VzZWxlYXZlJyxcbiAgICBvbk1vdXNlTW92ZTogJ29ubW91c2Vtb3ZlJyxcbiAgICBvbk1vdXNlT3V0OiAnb25tb3VzZW91dCcsXG4gICAgb25Nb3VzZU92ZXI6ICdvbm1vdXNlb3ZlcicsXG4gICAgb25Nb3VzZVVwOiAnb25tb3VzZXVwJyxcbiAgICBvbk1vdXNlV2hlZWw6ICdvbm1vdXNld2hlZWwnLFxuICAgIG9uT2ZmbGluZTogJ29ub2ZmbGluZScsXG4gICAgb25PbmxpbmU6ICdvbm9ubGluZScsXG4gICAgb25QYWdlSGlkZTogJ29ucGFnZWhpZGUnLFxuICAgIG9uUGFnZVNob3c6ICdvbnBhZ2VzaG93JyxcbiAgICBvblBhc3RlOiAnb25wYXN0ZScsXG4gICAgb25QYXVzZTogJ29ucGF1c2UnLFxuICAgIG9uUGxheTogJ29ucGxheScsXG4gICAgb25QbGF5aW5nOiAnb25wbGF5aW5nJyxcbiAgICBvblBvcFN0YXRlOiAnb25wb3BzdGF0ZScsXG4gICAgb25Qcm9ncmVzczogJ29ucHJvZ3Jlc3MnLFxuICAgIG9uUmF0ZUNoYW5nZTogJ29ucmF0ZWNoYW5nZScsXG4gICAgb25SZXBlYXQ6ICdvbnJlcGVhdCcsXG4gICAgb25SZXNldDogJ29ucmVzZXQnLFxuICAgIG9uUmVzaXplOiAnb25yZXNpemUnLFxuICAgIG9uU2Nyb2xsOiAnb25zY3JvbGwnLFxuICAgIG9uU2Vla2VkOiAnb25zZWVrZWQnLFxuICAgIG9uU2Vla2luZzogJ29uc2Vla2luZycsXG4gICAgb25TZWxlY3Q6ICdvbnNlbGVjdCcsXG4gICAgb25TaG93OiAnb25zaG93JyxcbiAgICBvblN0YWxsZWQ6ICdvbnN0YWxsZWQnLFxuICAgIG9uU3RvcmFnZTogJ29uc3RvcmFnZScsXG4gICAgb25TdWJtaXQ6ICdvbnN1Ym1pdCcsXG4gICAgb25TdXNwZW5kOiAnb25zdXNwZW5kJyxcbiAgICBvblRpbWVVcGRhdGU6ICdvbnRpbWV1cGRhdGUnLFxuICAgIG9uVG9nZ2xlOiAnb250b2dnbGUnLFxuICAgIG9uVW5sb2FkOiAnb251bmxvYWQnLFxuICAgIG9uVm9sdW1lQ2hhbmdlOiAnb252b2x1bWVjaGFuZ2UnLFxuICAgIG9uV2FpdGluZzogJ29ud2FpdGluZycsXG4gICAgb25ab29tOiAnb256b29tJyxcbiAgICBvdmVybGluZVBvc2l0aW9uOiAnb3ZlcmxpbmUtcG9zaXRpb24nLFxuICAgIG92ZXJsaW5lVGhpY2tuZXNzOiAnb3ZlcmxpbmUtdGhpY2tuZXNzJyxcbiAgICBwYWludE9yZGVyOiAncGFpbnQtb3JkZXInLFxuICAgIHBhbm9zZTE6ICdwYW5vc2UtMScsXG4gICAgcG9pbnRlckV2ZW50czogJ3BvaW50ZXItZXZlbnRzJyxcbiAgICByZWZlcnJlclBvbGljeTogJ3JlZmVycmVycG9saWN5JyxcbiAgICByZW5kZXJpbmdJbnRlbnQ6ICdyZW5kZXJpbmctaW50ZW50JyxcbiAgICBzaGFwZVJlbmRlcmluZzogJ3NoYXBlLXJlbmRlcmluZycsXG4gICAgc3RvcENvbG9yOiAnc3RvcC1jb2xvcicsXG4gICAgc3RvcE9wYWNpdHk6ICdzdG9wLW9wYWNpdHknLFxuICAgIHN0cmlrZXRocm91Z2hQb3NpdGlvbjogJ3N0cmlrZXRocm91Z2gtcG9zaXRpb24nLFxuICAgIHN0cmlrZXRocm91Z2hUaGlja25lc3M6ICdzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcycsXG4gICAgc3Ryb2tlRGFzaEFycmF5OiAnc3Ryb2tlLWRhc2hhcnJheScsXG4gICAgc3Ryb2tlRGFzaE9mZnNldDogJ3N0cm9rZS1kYXNob2Zmc2V0JyxcbiAgICBzdHJva2VMaW5lQ2FwOiAnc3Ryb2tlLWxpbmVjYXAnLFxuICAgIHN0cm9rZUxpbmVKb2luOiAnc3Ryb2tlLWxpbmVqb2luJyxcbiAgICBzdHJva2VNaXRlckxpbWl0OiAnc3Ryb2tlLW1pdGVybGltaXQnLFxuICAgIHN0cm9rZU9wYWNpdHk6ICdzdHJva2Utb3BhY2l0eScsXG4gICAgc3Ryb2tlV2lkdGg6ICdzdHJva2Utd2lkdGgnLFxuICAgIHRhYkluZGV4OiAndGFiaW5kZXgnLFxuICAgIHRleHRBbmNob3I6ICd0ZXh0LWFuY2hvcicsXG4gICAgdGV4dERlY29yYXRpb246ICd0ZXh0LWRlY29yYXRpb24nLFxuICAgIHRleHRSZW5kZXJpbmc6ICd0ZXh0LXJlbmRlcmluZycsXG4gICAgdHlwZU9mOiAndHlwZW9mJyxcbiAgICB1bmRlcmxpbmVQb3NpdGlvbjogJ3VuZGVybGluZS1wb3NpdGlvbicsXG4gICAgdW5kZXJsaW5lVGhpY2tuZXNzOiAndW5kZXJsaW5lLXRoaWNrbmVzcycsXG4gICAgdW5pY29kZUJpZGk6ICd1bmljb2RlLWJpZGknLFxuICAgIHVuaWNvZGVSYW5nZTogJ3VuaWNvZGUtcmFuZ2UnLFxuICAgIHVuaXRzUGVyRW06ICd1bml0cy1wZXItZW0nLFxuICAgIHZBbHBoYWJldGljOiAndi1hbHBoYWJldGljJyxcbiAgICB2SGFuZ2luZzogJ3YtaGFuZ2luZycsXG4gICAgdklkZW9ncmFwaGljOiAndi1pZGVvZ3JhcGhpYycsXG4gICAgdk1hdGhlbWF0aWNhbDogJ3YtbWF0aGVtYXRpY2FsJyxcbiAgICB2ZWN0b3JFZmZlY3Q6ICd2ZWN0b3ItZWZmZWN0JyxcbiAgICB2ZXJ0QWR2WTogJ3ZlcnQtYWR2LXknLFxuICAgIHZlcnRPcmlnaW5YOiAndmVydC1vcmlnaW4teCcsXG4gICAgdmVydE9yaWdpblk6ICd2ZXJ0LW9yaWdpbi15JyxcbiAgICB3b3JkU3BhY2luZzogJ3dvcmQtc3BhY2luZycsXG4gICAgd3JpdGluZ01vZGU6ICd3cml0aW5nLW1vZGUnLFxuICAgIHhIZWlnaHQ6ICd4LWhlaWdodCcsXG4gICAgLy8gVGhlc2Ugd2VyZSBjYW1lbGNhc2VkIGluIFRpbnkuIE5vdyBsb3dlcmNhc2VkIGluIFNWRyAyXG4gICAgcGxheWJhY2tPcmRlcjogJ3BsYXliYWNrb3JkZXInLFxuICAgIHRpbWVsaW5lQmVnaW46ICd0aW1lbGluZWJlZ2luJ1xuICB9LFxuICB0cmFuc2Zvcm06IGNhc2VTZW5zaXRpdmVUcmFuc2Zvcm0sXG4gIHByb3BlcnRpZXM6IHtcbiAgICBhYm91dDogY29tbWFPclNwYWNlU2VwYXJhdGVkLFxuICAgIGFjY2VudEhlaWdodDogbnVtYmVyLFxuICAgIGFjY3VtdWxhdGU6IG51bGwsXG4gICAgYWRkaXRpdmU6IG51bGwsXG4gICAgYWxpZ25tZW50QmFzZWxpbmU6IG51bGwsXG4gICAgYWxwaGFiZXRpYzogbnVtYmVyLFxuICAgIGFtcGxpdHVkZTogbnVtYmVyLFxuICAgIGFyYWJpY0Zvcm06IG51bGwsXG4gICAgYXNjZW50OiBudW1iZXIsXG4gICAgYXR0cmlidXRlTmFtZTogbnVsbCxcbiAgICBhdHRyaWJ1dGVUeXBlOiBudWxsLFxuICAgIGF6aW11dGg6IG51bWJlcixcbiAgICBiYW5kd2lkdGg6IG51bGwsXG4gICAgYmFzZWxpbmVTaGlmdDogbnVsbCxcbiAgICBiYXNlRnJlcXVlbmN5OiBudWxsLFxuICAgIGJhc2VQcm9maWxlOiBudWxsLFxuICAgIGJib3g6IG51bGwsXG4gICAgYmVnaW46IG51bGwsXG4gICAgYmlhczogbnVtYmVyLFxuICAgIGJ5OiBudWxsLFxuICAgIGNhbGNNb2RlOiBudWxsLFxuICAgIGNhcEhlaWdodDogbnVtYmVyLFxuICAgIGNsYXNzTmFtZTogc3BhY2VTZXBhcmF0ZWQsXG4gICAgY2xpcDogbnVsbCxcbiAgICBjbGlwUGF0aDogbnVsbCxcbiAgICBjbGlwUGF0aFVuaXRzOiBudWxsLFxuICAgIGNsaXBSdWxlOiBudWxsLFxuICAgIGNvbG9yOiBudWxsLFxuICAgIGNvbG9ySW50ZXJwb2xhdGlvbjogbnVsbCxcbiAgICBjb2xvckludGVycG9sYXRpb25GaWx0ZXJzOiBudWxsLFxuICAgIGNvbG9yUHJvZmlsZTogbnVsbCxcbiAgICBjb2xvclJlbmRlcmluZzogbnVsbCxcbiAgICBjb250ZW50OiBudWxsLFxuICAgIGNvbnRlbnRTY3JpcHRUeXBlOiBudWxsLFxuICAgIGNvbnRlbnRTdHlsZVR5cGU6IG51bGwsXG4gICAgY3Jvc3NPcmlnaW46IG51bGwsXG4gICAgY3Vyc29yOiBudWxsLFxuICAgIGN4OiBudWxsLFxuICAgIGN5OiBudWxsLFxuICAgIGQ6IG51bGwsXG4gICAgZGF0YVR5cGU6IG51bGwsXG4gICAgZGVmYXVsdEFjdGlvbjogbnVsbCxcbiAgICBkZXNjZW50OiBudW1iZXIsXG4gICAgZGlmZnVzZUNvbnN0YW50OiBudW1iZXIsXG4gICAgZGlyZWN0aW9uOiBudWxsLFxuICAgIGRpc3BsYXk6IG51bGwsXG4gICAgZHVyOiBudWxsLFxuICAgIGRpdmlzb3I6IG51bWJlcixcbiAgICBkb21pbmFudEJhc2VsaW5lOiBudWxsLFxuICAgIGRvd25sb2FkOiBib29sZWFuLFxuICAgIGR4OiBudWxsLFxuICAgIGR5OiBudWxsLFxuICAgIGVkZ2VNb2RlOiBudWxsLFxuICAgIGVkaXRhYmxlOiBudWxsLFxuICAgIGVsZXZhdGlvbjogbnVtYmVyLFxuICAgIGVuYWJsZUJhY2tncm91bmQ6IG51bGwsXG4gICAgZW5kOiBudWxsLFxuICAgIGV2ZW50OiBudWxsLFxuICAgIGV4cG9uZW50OiBudW1iZXIsXG4gICAgZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZDogbnVsbCxcbiAgICBmaWxsOiBudWxsLFxuICAgIGZpbGxPcGFjaXR5OiBudW1iZXIsXG4gICAgZmlsbFJ1bGU6IG51bGwsXG4gICAgZmlsdGVyOiBudWxsLFxuICAgIGZpbHRlclJlczogbnVsbCxcbiAgICBmaWx0ZXJVbml0czogbnVsbCxcbiAgICBmbG9vZENvbG9yOiBudWxsLFxuICAgIGZsb29kT3BhY2l0eTogbnVsbCxcbiAgICBmb2N1c2FibGU6IG51bGwsXG4gICAgZm9jdXNIaWdobGlnaHQ6IG51bGwsXG4gICAgZm9udEZhbWlseTogbnVsbCxcbiAgICBmb250U2l6ZTogbnVsbCxcbiAgICBmb250U2l6ZUFkanVzdDogbnVsbCxcbiAgICBmb250U3RyZXRjaDogbnVsbCxcbiAgICBmb250U3R5bGU6IG51bGwsXG4gICAgZm9udFZhcmlhbnQ6IG51bGwsXG4gICAgZm9udFdlaWdodDogbnVsbCxcbiAgICBmb3JtYXQ6IG51bGwsXG4gICAgZnI6IG51bGwsXG4gICAgZnJvbTogbnVsbCxcbiAgICBmeDogbnVsbCxcbiAgICBmeTogbnVsbCxcbiAgICBnMTogY29tbWFTZXBhcmF0ZWQsXG4gICAgZzI6IGNvbW1hU2VwYXJhdGVkLFxuICAgIGdseXBoTmFtZTogY29tbWFTZXBhcmF0ZWQsXG4gICAgZ2x5cGhPcmllbnRhdGlvbkhvcml6b250YWw6IG51bGwsXG4gICAgZ2x5cGhPcmllbnRhdGlvblZlcnRpY2FsOiBudWxsLFxuICAgIGdseXBoUmVmOiBudWxsLFxuICAgIGdyYWRpZW50VHJhbnNmb3JtOiBudWxsLFxuICAgIGdyYWRpZW50VW5pdHM6IG51bGwsXG4gICAgaGFuZGxlcjogbnVsbCxcbiAgICBoYW5naW5nOiBudW1iZXIsXG4gICAgaGF0Y2hDb250ZW50VW5pdHM6IG51bGwsXG4gICAgaGF0Y2hVbml0czogbnVsbCxcbiAgICBoZWlnaHQ6IG51bGwsXG4gICAgaHJlZjogbnVsbCxcbiAgICBocmVmTGFuZzogbnVsbCxcbiAgICBob3JpekFkdlg6IG51bWJlcixcbiAgICBob3Jpek9yaWdpblg6IG51bWJlcixcbiAgICBob3Jpek9yaWdpblk6IG51bWJlcixcbiAgICBpZDogbnVsbCxcbiAgICBpZGVvZ3JhcGhpYzogbnVtYmVyLFxuICAgIGltYWdlUmVuZGVyaW5nOiBudWxsLFxuICAgIGluaXRpYWxWaXNpYmlsaXR5OiBudWxsLFxuICAgIGluOiBudWxsLFxuICAgIGluMjogbnVsbCxcbiAgICBpbnRlcmNlcHQ6IG51bWJlcixcbiAgICBrOiBudW1iZXIsXG4gICAgazE6IG51bWJlcixcbiAgICBrMjogbnVtYmVyLFxuICAgIGszOiBudW1iZXIsXG4gICAgazQ6IG51bWJlcixcbiAgICBrZXJuZWxNYXRyaXg6IGNvbW1hT3JTcGFjZVNlcGFyYXRlZCxcbiAgICBrZXJuZWxVbml0TGVuZ3RoOiBudWxsLFxuICAgIGtleVBvaW50czogbnVsbCwgLy8gU0VNSV9DT0xPTl9TRVBBUkFURURcbiAgICBrZXlTcGxpbmVzOiBudWxsLCAvLyBTRU1JX0NPTE9OX1NFUEFSQVRFRFxuICAgIGtleVRpbWVzOiBudWxsLCAvLyBTRU1JX0NPTE9OX1NFUEFSQVRFRFxuICAgIGtlcm5pbmc6IG51bGwsXG4gICAgbGFuZzogbnVsbCxcbiAgICBsZW5ndGhBZGp1c3Q6IG51bGwsXG4gICAgbGV0dGVyU3BhY2luZzogbnVsbCxcbiAgICBsaWdodGluZ0NvbG9yOiBudWxsLFxuICAgIGxpbWl0aW5nQ29uZUFuZ2xlOiBudW1iZXIsXG4gICAgbG9jYWw6IG51bGwsXG4gICAgbWFya2VyRW5kOiBudWxsLFxuICAgIG1hcmtlck1pZDogbnVsbCxcbiAgICBtYXJrZXJTdGFydDogbnVsbCxcbiAgICBtYXJrZXJIZWlnaHQ6IG51bGwsXG4gICAgbWFya2VyVW5pdHM6IG51bGwsXG4gICAgbWFya2VyV2lkdGg6IG51bGwsXG4gICAgbWFzazogbnVsbCxcbiAgICBtYXNrQ29udGVudFVuaXRzOiBudWxsLFxuICAgIG1hc2tVbml0czogbnVsbCxcbiAgICBtYXRoZW1hdGljYWw6IG51bGwsXG4gICAgbWF4OiBudWxsLFxuICAgIG1lZGlhOiBudWxsLFxuICAgIG1lZGlhQ2hhcmFjdGVyRW5jb2Rpbmc6IG51bGwsXG4gICAgbWVkaWFDb250ZW50RW5jb2RpbmdzOiBudWxsLFxuICAgIG1lZGlhU2l6ZTogbnVtYmVyLFxuICAgIG1lZGlhVGltZTogbnVsbCxcbiAgICBtZXRob2Q6IG51bGwsXG4gICAgbWluOiBudWxsLFxuICAgIG1vZGU6IG51bGwsXG4gICAgbmFtZTogbnVsbCxcbiAgICBuYXZEb3duOiBudWxsLFxuICAgIG5hdkRvd25MZWZ0OiBudWxsLFxuICAgIG5hdkRvd25SaWdodDogbnVsbCxcbiAgICBuYXZMZWZ0OiBudWxsLFxuICAgIG5hdk5leHQ6IG51bGwsXG4gICAgbmF2UHJldjogbnVsbCxcbiAgICBuYXZSaWdodDogbnVsbCxcbiAgICBuYXZVcDogbnVsbCxcbiAgICBuYXZVcExlZnQ6IG51bGwsXG4gICAgbmF2VXBSaWdodDogbnVsbCxcbiAgICBudW1PY3RhdmVzOiBudWxsLFxuICAgIG9ic2VydmVyOiBudWxsLFxuICAgIG9mZnNldDogbnVsbCxcbiAgICBvbkFib3J0OiBudWxsLFxuICAgIG9uQWN0aXZhdGU6IG51bGwsXG4gICAgb25BZnRlclByaW50OiBudWxsLFxuICAgIG9uQmVmb3JlUHJpbnQ6IG51bGwsXG4gICAgb25CZWdpbjogbnVsbCxcbiAgICBvbkNhbmNlbDogbnVsbCxcbiAgICBvbkNhblBsYXk6IG51bGwsXG4gICAgb25DYW5QbGF5VGhyb3VnaDogbnVsbCxcbiAgICBvbkNoYW5nZTogbnVsbCxcbiAgICBvbkNsaWNrOiBudWxsLFxuICAgIG9uQ2xvc2U6IG51bGwsXG4gICAgb25Db3B5OiBudWxsLFxuICAgIG9uQ3VlQ2hhbmdlOiBudWxsLFxuICAgIG9uQ3V0OiBudWxsLFxuICAgIG9uRGJsQ2xpY2s6IG51bGwsXG4gICAgb25EcmFnOiBudWxsLFxuICAgIG9uRHJhZ0VuZDogbnVsbCxcbiAgICBvbkRyYWdFbnRlcjogbnVsbCxcbiAgICBvbkRyYWdFeGl0OiBudWxsLFxuICAgIG9uRHJhZ0xlYXZlOiBudWxsLFxuICAgIG9uRHJhZ092ZXI6IG51bGwsXG4gICAgb25EcmFnU3RhcnQ6IG51bGwsXG4gICAgb25Ecm9wOiBudWxsLFxuICAgIG9uRHVyYXRpb25DaGFuZ2U6IG51bGwsXG4gICAgb25FbXB0aWVkOiBudWxsLFxuICAgIG9uRW5kOiBudWxsLFxuICAgIG9uRW5kZWQ6IG51bGwsXG4gICAgb25FcnJvcjogbnVsbCxcbiAgICBvbkZvY3VzOiBudWxsLFxuICAgIG9uRm9jdXNJbjogbnVsbCxcbiAgICBvbkZvY3VzT3V0OiBudWxsLFxuICAgIG9uSGFzaENoYW5nZTogbnVsbCxcbiAgICBvbklucHV0OiBudWxsLFxuICAgIG9uSW52YWxpZDogbnVsbCxcbiAgICBvbktleURvd246IG51bGwsXG4gICAgb25LZXlQcmVzczogbnVsbCxcbiAgICBvbktleVVwOiBudWxsLFxuICAgIG9uTG9hZDogbnVsbCxcbiAgICBvbkxvYWRlZERhdGE6IG51bGwsXG4gICAgb25Mb2FkZWRNZXRhZGF0YTogbnVsbCxcbiAgICBvbkxvYWRTdGFydDogbnVsbCxcbiAgICBvbk1lc3NhZ2U6IG51bGwsXG4gICAgb25Nb3VzZURvd246IG51bGwsXG4gICAgb25Nb3VzZUVudGVyOiBudWxsLFxuICAgIG9uTW91c2VMZWF2ZTogbnVsbCxcbiAgICBvbk1vdXNlTW92ZTogbnVsbCxcbiAgICBvbk1vdXNlT3V0OiBudWxsLFxuICAgIG9uTW91c2VPdmVyOiBudWxsLFxuICAgIG9uTW91c2VVcDogbnVsbCxcbiAgICBvbk1vdXNlV2hlZWw6IG51bGwsXG4gICAgb25PZmZsaW5lOiBudWxsLFxuICAgIG9uT25saW5lOiBudWxsLFxuICAgIG9uUGFnZUhpZGU6IG51bGwsXG4gICAgb25QYWdlU2hvdzogbnVsbCxcbiAgICBvblBhc3RlOiBudWxsLFxuICAgIG9uUGF1c2U6IG51bGwsXG4gICAgb25QbGF5OiBudWxsLFxuICAgIG9uUGxheWluZzogbnVsbCxcbiAgICBvblBvcFN0YXRlOiBudWxsLFxuICAgIG9uUHJvZ3Jlc3M6IG51bGwsXG4gICAgb25SYXRlQ2hhbmdlOiBudWxsLFxuICAgIG9uUmVwZWF0OiBudWxsLFxuICAgIG9uUmVzZXQ6IG51bGwsXG4gICAgb25SZXNpemU6IG51bGwsXG4gICAgb25TY3JvbGw6IG51bGwsXG4gICAgb25TZWVrZWQ6IG51bGwsXG4gICAgb25TZWVraW5nOiBudWxsLFxuICAgIG9uU2VsZWN0OiBudWxsLFxuICAgIG9uU2hvdzogbnVsbCxcbiAgICBvblN0YWxsZWQ6IG51bGwsXG4gICAgb25TdG9yYWdlOiBudWxsLFxuICAgIG9uU3VibWl0OiBudWxsLFxuICAgIG9uU3VzcGVuZDogbnVsbCxcbiAgICBvblRpbWVVcGRhdGU6IG51bGwsXG4gICAgb25Ub2dnbGU6IG51bGwsXG4gICAgb25VbmxvYWQ6IG51bGwsXG4gICAgb25Wb2x1bWVDaGFuZ2U6IG51bGwsXG4gICAgb25XYWl0aW5nOiBudWxsLFxuICAgIG9uWm9vbTogbnVsbCxcbiAgICBvcGFjaXR5OiBudWxsLFxuICAgIG9wZXJhdG9yOiBudWxsLFxuICAgIG9yZGVyOiBudWxsLFxuICAgIG9yaWVudDogbnVsbCxcbiAgICBvcmllbnRhdGlvbjogbnVsbCxcbiAgICBvcmlnaW46IG51bGwsXG4gICAgb3ZlcmZsb3c6IG51bGwsXG4gICAgb3ZlcmxheTogbnVsbCxcbiAgICBvdmVybGluZVBvc2l0aW9uOiBudW1iZXIsXG4gICAgb3ZlcmxpbmVUaGlja25lc3M6IG51bWJlcixcbiAgICBwYWludE9yZGVyOiBudWxsLFxuICAgIHBhbm9zZTE6IG51bGwsXG4gICAgcGF0aDogbnVsbCxcbiAgICBwYXRoTGVuZ3RoOiBudW1iZXIsXG4gICAgcGF0dGVybkNvbnRlbnRVbml0czogbnVsbCxcbiAgICBwYXR0ZXJuVHJhbnNmb3JtOiBudWxsLFxuICAgIHBhdHRlcm5Vbml0czogbnVsbCxcbiAgICBwaGFzZTogbnVsbCxcbiAgICBwaW5nOiBzcGFjZVNlcGFyYXRlZCxcbiAgICBwaXRjaDogbnVsbCxcbiAgICBwbGF5YmFja09yZGVyOiBudWxsLFxuICAgIHBvaW50ZXJFdmVudHM6IG51bGwsXG4gICAgcG9pbnRzOiBudWxsLFxuICAgIHBvaW50c0F0WDogbnVtYmVyLFxuICAgIHBvaW50c0F0WTogbnVtYmVyLFxuICAgIHBvaW50c0F0WjogbnVtYmVyLFxuICAgIHByZXNlcnZlQWxwaGE6IG51bGwsXG4gICAgcHJlc2VydmVBc3BlY3RSYXRpbzogbnVsbCxcbiAgICBwcmltaXRpdmVVbml0czogbnVsbCxcbiAgICBwcm9wYWdhdGU6IG51bGwsXG4gICAgcHJvcGVydHk6IGNvbW1hT3JTcGFjZVNlcGFyYXRlZCxcbiAgICByOiBudWxsLFxuICAgIHJhZGl1czogbnVsbCxcbiAgICByZWZlcnJlclBvbGljeTogbnVsbCxcbiAgICByZWZYOiBudWxsLFxuICAgIHJlZlk6IG51bGwsXG4gICAgcmVsOiBjb21tYU9yU3BhY2VTZXBhcmF0ZWQsXG4gICAgcmV2OiBjb21tYU9yU3BhY2VTZXBhcmF0ZWQsXG4gICAgcmVuZGVyaW5nSW50ZW50OiBudWxsLFxuICAgIHJlcGVhdENvdW50OiBudWxsLFxuICAgIHJlcGVhdER1cjogbnVsbCxcbiAgICByZXF1aXJlZEV4dGVuc2lvbnM6IGNvbW1hT3JTcGFjZVNlcGFyYXRlZCxcbiAgICByZXF1aXJlZEZlYXR1cmVzOiBjb21tYU9yU3BhY2VTZXBhcmF0ZWQsXG4gICAgcmVxdWlyZWRGb250czogY29tbWFPclNwYWNlU2VwYXJhdGVkLFxuICAgIHJlcXVpcmVkRm9ybWF0czogY29tbWFPclNwYWNlU2VwYXJhdGVkLFxuICAgIHJlc291cmNlOiBudWxsLFxuICAgIHJlc3RhcnQ6IG51bGwsXG4gICAgcmVzdWx0OiBudWxsLFxuICAgIHJvdGF0ZTogbnVsbCxcbiAgICByeDogbnVsbCxcbiAgICByeTogbnVsbCxcbiAgICBzY2FsZTogbnVsbCxcbiAgICBzZWVkOiBudWxsLFxuICAgIHNoYXBlUmVuZGVyaW5nOiBudWxsLFxuICAgIHNpZGU6IG51bGwsXG4gICAgc2xvcGU6IG51bGwsXG4gICAgc25hcHNob3RUaW1lOiBudWxsLFxuICAgIHNwZWN1bGFyQ29uc3RhbnQ6IG51bWJlcixcbiAgICBzcGVjdWxhckV4cG9uZW50OiBudW1iZXIsXG4gICAgc3ByZWFkTWV0aG9kOiBudWxsLFxuICAgIHNwYWNpbmc6IG51bGwsXG4gICAgc3RhcnRPZmZzZXQ6IG51bGwsXG4gICAgc3RkRGV2aWF0aW9uOiBudWxsLFxuICAgIHN0ZW1oOiBudWxsLFxuICAgIHN0ZW12OiBudWxsLFxuICAgIHN0aXRjaFRpbGVzOiBudWxsLFxuICAgIHN0b3BDb2xvcjogbnVsbCxcbiAgICBzdG9wT3BhY2l0eTogbnVsbCxcbiAgICBzdHJpa2V0aHJvdWdoUG9zaXRpb246IG51bWJlcixcbiAgICBzdHJpa2V0aHJvdWdoVGhpY2tuZXNzOiBudW1iZXIsXG4gICAgc3RyaW5nOiBudWxsLFxuICAgIHN0cm9rZTogbnVsbCxcbiAgICBzdHJva2VEYXNoQXJyYXk6IGNvbW1hT3JTcGFjZVNlcGFyYXRlZCxcbiAgICBzdHJva2VEYXNoT2Zmc2V0OiBudWxsLFxuICAgIHN0cm9rZUxpbmVDYXA6IG51bGwsXG4gICAgc3Ryb2tlTGluZUpvaW46IG51bGwsXG4gICAgc3Ryb2tlTWl0ZXJMaW1pdDogbnVtYmVyLFxuICAgIHN0cm9rZU9wYWNpdHk6IG51bWJlcixcbiAgICBzdHJva2VXaWR0aDogbnVsbCxcbiAgICBzdHlsZTogbnVsbCxcbiAgICBzdXJmYWNlU2NhbGU6IG51bWJlcixcbiAgICBzeW5jQmVoYXZpb3I6IG51bGwsXG4gICAgc3luY0JlaGF2aW9yRGVmYXVsdDogbnVsbCxcbiAgICBzeW5jTWFzdGVyOiBudWxsLFxuICAgIHN5bmNUb2xlcmFuY2U6IG51bGwsXG4gICAgc3luY1RvbGVyYW5jZURlZmF1bHQ6IG51bGwsXG4gICAgc3lzdGVtTGFuZ3VhZ2U6IGNvbW1hT3JTcGFjZVNlcGFyYXRlZCxcbiAgICB0YWJJbmRleDogbnVtYmVyLFxuICAgIHRhYmxlVmFsdWVzOiBudWxsLFxuICAgIHRhcmdldDogbnVsbCxcbiAgICB0YXJnZXRYOiBudW1iZXIsXG4gICAgdGFyZ2V0WTogbnVtYmVyLFxuICAgIHRleHRBbmNob3I6IG51bGwsXG4gICAgdGV4dERlY29yYXRpb246IG51bGwsXG4gICAgdGV4dFJlbmRlcmluZzogbnVsbCxcbiAgICB0ZXh0TGVuZ3RoOiBudWxsLFxuICAgIHRpbWVsaW5lQmVnaW46IG51bGwsXG4gICAgdGl0bGU6IG51bGwsXG4gICAgdHJhbnNmb3JtQmVoYXZpb3I6IG51bGwsXG4gICAgdHlwZTogbnVsbCxcbiAgICB0eXBlT2Y6IGNvbW1hT3JTcGFjZVNlcGFyYXRlZCxcbiAgICB0bzogbnVsbCxcbiAgICB0cmFuc2Zvcm06IG51bGwsXG4gICAgdTE6IG51bGwsXG4gICAgdTI6IG51bGwsXG4gICAgdW5kZXJsaW5lUG9zaXRpb246IG51bWJlcixcbiAgICB1bmRlcmxpbmVUaGlja25lc3M6IG51bWJlcixcbiAgICB1bmljb2RlOiBudWxsLFxuICAgIHVuaWNvZGVCaWRpOiBudWxsLFxuICAgIHVuaWNvZGVSYW5nZTogbnVsbCxcbiAgICB1bml0c1BlckVtOiBudW1iZXIsXG4gICAgdmFsdWVzOiBudWxsLFxuICAgIHZBbHBoYWJldGljOiBudW1iZXIsXG4gICAgdk1hdGhlbWF0aWNhbDogbnVtYmVyLFxuICAgIHZlY3RvckVmZmVjdDogbnVsbCxcbiAgICB2SGFuZ2luZzogbnVtYmVyLFxuICAgIHZJZGVvZ3JhcGhpYzogbnVtYmVyLFxuICAgIHZlcnNpb246IG51bGwsXG4gICAgdmVydEFkdlk6IG51bWJlcixcbiAgICB2ZXJ0T3JpZ2luWDogbnVtYmVyLFxuICAgIHZlcnRPcmlnaW5ZOiBudW1iZXIsXG4gICAgdmlld0JveDogbnVsbCxcbiAgICB2aWV3VGFyZ2V0OiBudWxsLFxuICAgIHZpc2liaWxpdHk6IG51bGwsXG4gICAgd2lkdGg6IG51bGwsXG4gICAgd2lkdGhzOiBudWxsLFxuICAgIHdvcmRTcGFjaW5nOiBudWxsLFxuICAgIHdyaXRpbmdNb2RlOiBudWxsLFxuICAgIHg6IG51bGwsXG4gICAgeDE6IG51bGwsXG4gICAgeDI6IG51bGwsXG4gICAgeENoYW5uZWxTZWxlY3RvcjogbnVsbCxcbiAgICB4SGVpZ2h0OiBudW1iZXIsXG4gICAgeTogbnVsbCxcbiAgICB5MTogbnVsbCxcbiAgICB5MjogbnVsbCxcbiAgICB5Q2hhbm5lbFNlbGVjdG9yOiBudWxsLFxuICAgIHo6IG51bGwsXG4gICAgem9vbUFuZFBhbjogbnVsbFxuICB9XG59KVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL2xpYi91dGlsL2luZm8uanMnKS5JbmZvfSBJbmZvXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL2xpYi91dGlsL3NjaGVtYS5qcycpLlNjaGVtYX0gU2NoZW1hXG4gKi9cblxuaW1wb3J0IHttZXJnZX0gZnJvbSAnLi9saWIvdXRpbC9tZXJnZS5qcydcbmltcG9ydCB7eGxpbmt9IGZyb20gJy4vbGliL3hsaW5rLmpzJ1xuaW1wb3J0IHt4bWx9IGZyb20gJy4vbGliL3htbC5qcydcbmltcG9ydCB7eG1sbnN9IGZyb20gJy4vbGliL3htbG5zLmpzJ1xuaW1wb3J0IHthcmlhfSBmcm9tICcuL2xpYi9hcmlhLmpzJ1xuaW1wb3J0IHtodG1sIGFzIGh0bWxCYXNlfSBmcm9tICcuL2xpYi9odG1sLmpzJ1xuaW1wb3J0IHtzdmcgYXMgc3ZnQmFzZX0gZnJvbSAnLi9saWIvc3ZnLmpzJ1xuXG5leHBvcnQge2ZpbmR9IGZyb20gJy4vbGliL2ZpbmQuanMnXG5leHBvcnQge2hhc3RUb1JlYWN0fSBmcm9tICcuL2xpYi9oYXN0LXRvLXJlYWN0LmpzJ1xuZXhwb3J0IHtub3JtYWxpemV9IGZyb20gJy4vbGliL25vcm1hbGl6ZS5qcydcbmV4cG9ydCB2YXIgaHRtbCA9IG1lcmdlKFt4bWwsIHhsaW5rLCB4bWxucywgYXJpYSwgaHRtbEJhc2VdLCAnaHRtbCcpXG5leHBvcnQgdmFyIHN2ZyA9IG1lcmdlKFt4bWwsIHhsaW5rLCB4bWxucywgYXJpYSwgc3ZnQmFzZV0sICdzdmcnKVxuIiwiaW1wb3J0IHt2aXNpdH0gZnJvbSAndW5pc3QtdXRpbC12aXNpdCdcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlzdCcpLk5vZGV9IE5vZGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5Sb290fSBSb290XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRWxlbWVudH0gRWxlbWVudFxuICpcbiAqIEBjYWxsYmFjayBBbGxvd0VsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge0VsZW1lbnR8Um9vdH0gcGFyZW50XG4gKiBAcmV0dXJucyB7Ym9vbGVhbnx1bmRlZmluZWR9XG4gKlxuICogQHR5cGVkZWYgT3B0aW9uc1xuICogQHByb3BlcnR5IHtBcnJheTxzdHJpbmc+fSBbYWxsb3dlZEVsZW1lbnRzXVxuICogQHByb3BlcnR5IHtBcnJheTxzdHJpbmc+fSBbZGlzYWxsb3dlZEVsZW1lbnRzPVtdXVxuICogQHByb3BlcnR5IHtBbGxvd0VsZW1lbnR9IFthbGxvd0VsZW1lbnRdXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFt1bndyYXBEaXNhbGxvd2VkPWZhbHNlXVxuICovXG5cbi8qKlxuICogQHR5cGUge2ltcG9ydCgndW5pZmllZCcpLlBsdWdpbjxbT3B0aW9uc10sIFJvb3Q+fVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZWh5cGVGaWx0ZXIob3B0aW9ucykge1xuICBpZiAob3B0aW9ucy5hbGxvd2VkRWxlbWVudHMgJiYgb3B0aW9ucy5kaXNhbGxvd2VkRWxlbWVudHMpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ09ubHkgb25lIG9mIGBhbGxvd2VkRWxlbWVudHNgIGFuZCBgZGlzYWxsb3dlZEVsZW1lbnRzYCBzaG91bGQgYmUgZGVmaW5lZCdcbiAgICApXG4gIH1cblxuICBpZiAoXG4gICAgb3B0aW9ucy5hbGxvd2VkRWxlbWVudHMgfHxcbiAgICBvcHRpb25zLmRpc2FsbG93ZWRFbGVtZW50cyB8fFxuICAgIG9wdGlvbnMuYWxsb3dFbGVtZW50XG4gICkge1xuICAgIHJldHVybiAodHJlZSkgPT4ge1xuICAgICAgdmlzaXQodHJlZSwgJ2VsZW1lbnQnLCAobm9kZSwgaW5kZXgsIHBhcmVudF8pID0+IHtcbiAgICAgICAgY29uc3QgcGFyZW50ID0gLyoqIEB0eXBlIHtFbGVtZW50fFJvb3R9ICovIChwYXJlbnRfKVxuICAgICAgICAvKiogQHR5cGUge2Jvb2xlYW58dW5kZWZpbmVkfSAqL1xuICAgICAgICBsZXQgcmVtb3ZlXG5cbiAgICAgICAgaWYgKG9wdGlvbnMuYWxsb3dlZEVsZW1lbnRzKSB7XG4gICAgICAgICAgcmVtb3ZlID0gIW9wdGlvbnMuYWxsb3dlZEVsZW1lbnRzLmluY2x1ZGVzKG5vZGUudGFnTmFtZSlcbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmRpc2FsbG93ZWRFbGVtZW50cykge1xuICAgICAgICAgIHJlbW92ZSA9IG9wdGlvbnMuZGlzYWxsb3dlZEVsZW1lbnRzLmluY2x1ZGVzKG5vZGUudGFnTmFtZSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcmVtb3ZlICYmIG9wdGlvbnMuYWxsb3dFbGVtZW50ICYmIHR5cGVvZiBpbmRleCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICByZW1vdmUgPSAhb3B0aW9ucy5hbGxvd0VsZW1lbnQobm9kZSwgaW5kZXgsIHBhcmVudClcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZW1vdmUgJiYgdHlwZW9mIGluZGV4ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIGlmIChvcHRpb25zLnVud3JhcERpc2FsbG93ZWQgJiYgbm9kZS5jaGlsZHJlbikge1xuICAgICAgICAgICAgcGFyZW50LmNoaWxkcmVuLnNwbGljZShpbmRleCwgMSwgLi4ubm9kZS5jaGlsZHJlbilcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyZW50LmNoaWxkcmVuLnNwbGljZShpbmRleCwgMSlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gaW5kZXhcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICAgIH0pXG4gICAgfVxuICB9XG59XG4iLCIvKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyAqaW50ZXItZWxlbWVudCB3aGl0ZXNwYWNlKi5cbiAqXG4gKiBAcGFyYW0ge3Vua25vd259IHRoaW5nXG4gKiAgIFRoaW5nIHRvIGNoZWNrICh0eXBpY2FsbHkgYE5vZGVgIG9yIGBzdHJpbmdgKS5cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICogICBXaGV0aGVyIHRoZSBgdmFsdWVgIGlzIGludGVyLWVsZW1lbnQgd2hpdGVzcGFjZSAoYGJvb2xlYW5gKTogY29uc2lzdGluZyBvZlxuICogICB6ZXJvIG9yIG1vcmUgb2Ygc3BhY2UsIHRhYiAoYFxcdGApLCBsaW5lIGZlZWQgKGBcXG5gKSwgY2FycmlhZ2UgcmV0dXJuXG4gKiAgIChgXFxyYCksIG9yIGZvcm0gZmVlZCAoYFxcZmApLlxuICogICBJZiBhIG5vZGUgaXMgcGFzc2VkIGl0IG11c3QgYmUgYSBgVGV4dGAgbm9kZSwgd2hvc2UgYHZhbHVlYCBmaWVsZCBpc1xuICogICBjaGVja2VkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gd2hpdGVzcGFjZSh0aGluZykge1xuICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgY29uc3QgdmFsdWUgPVxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgbG9va3MgbGlrZSBhIG5vZGUuXG4gICAgdGhpbmcgJiYgdHlwZW9mIHRoaW5nID09PSAnb2JqZWN0JyAmJiB0aGluZy50eXBlID09PSAndGV4dCdcbiAgICAgID8gLy8gQHRzLWV4cGVjdC1lcnJvciBsb29rcyBsaWtlIGEgdGV4dC5cbiAgICAgICAgdGhpbmcudmFsdWUgfHwgJydcbiAgICAgIDogdGhpbmdcblxuICAvLyBIVE1MIHdoaXRlc3BhY2UgZXhwcmVzc2lvbi5cbiAgLy8gU2VlIDxodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jYXNjaWktd2hpdGVzcGFjZT4uXG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLnJlcGxhY2UoL1sgXFx0XFxuXFxmXFxyXS9nLCAnJykgPT09ICcnXG59XG4iLCJpbXBvcnQge25vcm1hbGl6ZX0gZnJvbSAnLi9ub3JtYWxpemUuanMnXG5pbXBvcnQge0RlZmluZWRJbmZvfSBmcm9tICcuL3V0aWwvZGVmaW5lZC1pbmZvLmpzJ1xuaW1wb3J0IHtJbmZvfSBmcm9tICcuL3V0aWwvaW5mby5qcydcblxudmFyIHZhbGlkID0gL15kYXRhWy1cXHcuOl0rJC9pXG52YXIgZGFzaCA9IC8tW2Etel0vZ1xudmFyIGNhcCA9IC9bQS1aXS9nXG5cbi8qKlxuICogQHBhcmFtIHtpbXBvcnQoJy4vdXRpbC9zY2hlbWEuanMnKS5TY2hlbWF9IHNjaGVtYVxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJucyB7aW1wb3J0KCcuL3V0aWwvaW5mby5qcycpLkluZm99XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaW5kKHNjaGVtYSwgdmFsdWUpIHtcbiAgdmFyIG5vcm1hbCA9IG5vcm1hbGl6ZSh2YWx1ZSlcbiAgdmFyIHByb3AgPSB2YWx1ZVxuICB2YXIgVHlwZSA9IEluZm9cblxuICBpZiAobm9ybWFsIGluIHNjaGVtYS5ub3JtYWwpIHtcbiAgICByZXR1cm4gc2NoZW1hLnByb3BlcnR5W3NjaGVtYS5ub3JtYWxbbm9ybWFsXV1cbiAgfVxuXG4gIGlmIChub3JtYWwubGVuZ3RoID4gNCAmJiBub3JtYWwuc2xpY2UoMCwgNCkgPT09ICdkYXRhJyAmJiB2YWxpZC50ZXN0KHZhbHVlKSkge1xuICAgIC8vIEF0dHJpYnV0ZSBvciBwcm9wZXJ0eS5cbiAgICBpZiAodmFsdWUuY2hhckF0KDQpID09PSAnLScpIHtcbiAgICAgIHByb3AgPSBkYXRhc2V0VG9Qcm9wZXJ0eSh2YWx1ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgPSBkYXRhc2V0VG9BdHRyaWJ1dGUodmFsdWUpXG4gICAgfVxuXG4gICAgVHlwZSA9IERlZmluZWRJbmZvXG4gIH1cblxuICByZXR1cm4gbmV3IFR5cGUocHJvcCwgdmFsdWUpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGF0dHJpYnV0ZVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZGF0YXNldFRvUHJvcGVydHkoYXR0cmlidXRlKSB7XG4gIHZhciB2YWx1ZSA9IGF0dHJpYnV0ZS5zbGljZSg1KS5yZXBsYWNlKGRhc2gsIGNhbWVsY2FzZSlcbiAgcmV0dXJuICdkYXRhJyArIHZhbHVlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdmFsdWUuc2xpY2UoMSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHlcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGRhdGFzZXRUb0F0dHJpYnV0ZShwcm9wZXJ0eSkge1xuICB2YXIgdmFsdWUgPSBwcm9wZXJ0eS5zbGljZSg0KVxuXG4gIGlmIChkYXNoLnRlc3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIHByb3BlcnR5XG4gIH1cblxuICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoY2FwLCBrZWJhYilcblxuICBpZiAodmFsdWUuY2hhckF0KDApICE9PSAnLScpIHtcbiAgICB2YWx1ZSA9ICctJyArIHZhbHVlXG4gIH1cblxuICByZXR1cm4gJ2RhdGEnICsgdmFsdWVcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gJDBcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGtlYmFiKCQwKSB7XG4gIHJldHVybiAnLScgKyAkMC50b0xvd2VyQ2FzZSgpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9ICQwXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBjYW1lbGNhc2UoJDApIHtcbiAgcmV0dXJuICQwLmNoYXJBdCgxKS50b1VwcGVyQ2FzZSgpXG59XG4iLCJleHBvcnQgdmFyIGhhc3RUb1JlYWN0ID0ge1xuICBjbGFzc0lkOiAnY2xhc3NJRCcsXG4gIGRhdGFUeXBlOiAnZGF0YXR5cGUnLFxuICBpdGVtSWQ6ICdpdGVtSUQnLFxuICBzdHJva2VEYXNoQXJyYXk6ICdzdHJva2VEYXNoYXJyYXknLFxuICBzdHJva2VEYXNoT2Zmc2V0OiAnc3Ryb2tlRGFzaG9mZnNldCcsXG4gIHN0cm9rZUxpbmVDYXA6ICdzdHJva2VMaW5lY2FwJyxcbiAgc3Ryb2tlTGluZUpvaW46ICdzdHJva2VMaW5lam9pbicsXG4gIHN0cm9rZU1pdGVyTGltaXQ6ICdzdHJva2VNaXRlcmxpbWl0JyxcbiAgdHlwZU9mOiAndHlwZW9mJyxcbiAgeExpbmtBY3R1YXRlOiAneGxpbmtBY3R1YXRlJyxcbiAgeExpbmtBcmNSb2xlOiAneGxpbmtBcmNyb2xlJyxcbiAgeExpbmtIcmVmOiAneGxpbmtIcmVmJyxcbiAgeExpbmtSb2xlOiAneGxpbmtSb2xlJyxcbiAgeExpbmtTaG93OiAneGxpbmtTaG93JyxcbiAgeExpbmtUaXRsZTogJ3hsaW5rVGl0bGUnLFxuICB4TGlua1R5cGU6ICd4bGlua1R5cGUnLFxuICB4bWxuc1hMaW5rOiAneG1sbnNYbGluaydcbn1cbiIsImltcG9ydCBTdHlsZVRvT2JqZWN0IGZyb20gJy4vaW5kZXguanMnO1xuXG5leHBvcnQgZGVmYXVsdCBTdHlsZVRvT2JqZWN0O1xuIiwiY29uc3QgcHJvdG9jb2xzID0gWydodHRwJywgJ2h0dHBzJywgJ21haWx0bycsICd0ZWwnXVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmlcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1cmlUcmFuc2Zvcm1lcih1cmkpIHtcbiAgY29uc3QgdXJsID0gKHVyaSB8fCAnJykudHJpbSgpXG4gIGNvbnN0IGZpcnN0ID0gdXJsLmNoYXJBdCgwKVxuXG4gIGlmIChmaXJzdCA9PT0gJyMnIHx8IGZpcnN0ID09PSAnLycpIHtcbiAgICByZXR1cm4gdXJsXG4gIH1cblxuICBjb25zdCBjb2xvbiA9IHVybC5pbmRleE9mKCc6JylcbiAgaWYgKGNvbG9uID09PSAtMSkge1xuICAgIHJldHVybiB1cmxcbiAgfVxuXG4gIGxldCBpbmRleCA9IC0xXG5cbiAgd2hpbGUgKCsraW5kZXggPCBwcm90b2NvbHMubGVuZ3RoKSB7XG4gICAgY29uc3QgcHJvdG9jb2wgPSBwcm90b2NvbHNbaW5kZXhdXG5cbiAgICBpZiAoXG4gICAgICBjb2xvbiA9PT0gcHJvdG9jb2wubGVuZ3RoICYmXG4gICAgICB1cmwuc2xpY2UoMCwgcHJvdG9jb2wubGVuZ3RoKS50b0xvd2VyQ2FzZSgpID09PSBwcm90b2NvbFxuICAgICkge1xuICAgICAgcmV0dXJuIHVybFxuICAgIH1cbiAgfVxuXG4gIGluZGV4ID0gdXJsLmluZGV4T2YoJz8nKVxuICBpZiAoaW5kZXggIT09IC0xICYmIGNvbG9uID4gaW5kZXgpIHtcbiAgICByZXR1cm4gdXJsXG4gIH1cblxuICBpbmRleCA9IHVybC5pbmRleE9mKCcjJylcbiAgaWYgKGluZGV4ICE9PSAtMSAmJiBjb2xvbiA+IGluZGV4KSB7XG4gICAgcmV0dXJuIHVybFxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNjcmlwdC11cmxcbiAgcmV0dXJuICdqYXZhc2NyaXB0OnZvaWQoMCknXG59XG4iLCIvKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdyZWFjdCcpLkNvbXBvbmVudFR5cGU8VD59IENvbXBvbmVudFR5cGU8VD5cbiAqL1xuXG4vKipcbiAqIEB0ZW1wbGF0ZSB7aW1wb3J0KCdyZWFjdCcpLkVsZW1lbnRUeXBlfSBUXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdyZWFjdCcpLkNvbXBvbmVudFByb3BzV2l0aG91dFJlZjxUPn0gQ29tcG9uZW50UHJvcHNXaXRob3V0UmVmPFQ+XG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdyZWFjdCcpLlJlYWN0Tm9kZX0gUmVhY3ROb2RlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlzdCcpLlBvc2l0aW9ufSBQb3NpdGlvblxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnR9IEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50Q29udGVudH0gRWxlbWVudENvbnRlbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5Sb290fSBSb290XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuVGV4dH0gVGV4dFxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkNvbW1lbnR9IENvbW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5Eb2NUeXBlfSBEb2N0eXBlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdwcm9wZXJ0eS1pbmZvcm1hdGlvbicpLkluZm99IEluZm9cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3Byb3BlcnR5LWluZm9ybWF0aW9uJykuU2NoZW1hfSBTY2hlbWFcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vY29tcGxleC10eXBlcy5qcycpLlJlYWN0TWFya2Rvd25Qcm9wc30gUmVhY3RNYXJrZG93blByb3BzXG4gKlxuICogQHR5cGVkZWYgUmF3XG4gKiBAcHJvcGVydHkgeydyYXcnfSB0eXBlXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdmFsdWVcbiAqXG4gKiBAdHlwZWRlZiBDb250ZXh0XG4gKiBAcHJvcGVydHkge09wdGlvbnN9IG9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7U2NoZW1hfSBzY2hlbWFcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBsaXN0RGVwdGhcbiAqXG4gKiBAY2FsbGJhY2sgVHJhbnNmb3JtTGlua1xuICogQHBhcmFtIHtzdHJpbmd9IGhyZWZcbiAqIEBwYXJhbSB7QXJyYXk8RWxlbWVudENvbnRlbnQ+fSBjaGlsZHJlblxuICogQHBhcmFtIHtzdHJpbmc/fSB0aXRsZVxuICogQHJldHVybnMge3N0cmluZ31cbiAqXG4gKiBAY2FsbGJhY2sgVHJhbnNmb3JtSW1hZ2VcbiAqIEBwYXJhbSB7c3RyaW5nfSBzcmNcbiAqIEBwYXJhbSB7c3RyaW5nfSBhbHRcbiAqIEBwYXJhbSB7c3RyaW5nP30gdGl0bGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKlxuICogQHR5cGVkZWYge2ltcG9ydCgncmVhY3QnKS5IVE1MQXR0cmlidXRlQW5jaG9yVGFyZ2V0fSBUcmFuc2Zvcm1MaW5rVGFyZ2V0VHlwZVxuICpcbiAqIEBjYWxsYmFjayBUcmFuc2Zvcm1MaW5rVGFyZ2V0XG4gKiBAcGFyYW0ge3N0cmluZ30gaHJlZlxuICogQHBhcmFtIHtBcnJheTxFbGVtZW50Q29udGVudD59IGNoaWxkcmVuXG4gKiBAcGFyYW0ge3N0cmluZz99IHRpdGxlXG4gKiBAcmV0dXJucyB7VHJhbnNmb3JtTGlua1RhcmdldFR5cGV8dW5kZWZpbmVkfVxuICpcbiAqIEB0eXBlZGVmIHtrZXlvZiBKU1guSW50cmluc2ljRWxlbWVudHN9IFJlYWN0TWFya2Rvd25OYW1lc1xuICpcbiAqIFRvIGRvOiBpcyBgZGF0YS1zb3VyY2Vwb3NgIHR5cGVhYmxlP1xuICpcbiAqIEB0eXBlZGVmIHtDb21wb25lbnRQcm9wc1dpdGhvdXRSZWY8J2NvZGUnPiAmIFJlYWN0TWFya2Rvd25Qcm9wcyAmIHtpbmxpbmU/OiBib29sZWFufX0gQ29kZVByb3BzXG4gKiBAdHlwZWRlZiB7Q29tcG9uZW50UHJvcHNXaXRob3V0UmVmPCdoMSc+ICYgUmVhY3RNYXJrZG93blByb3BzICYge2xldmVsOiBudW1iZXJ9fSBIZWFkaW5nUHJvcHNcbiAqIEB0eXBlZGVmIHtDb21wb25lbnRQcm9wc1dpdGhvdXRSZWY8J2xpJz4gJiBSZWFjdE1hcmtkb3duUHJvcHMgJiB7Y2hlY2tlZDogYm9vbGVhbnxudWxsLCBpbmRleDogbnVtYmVyLCBvcmRlcmVkOiBib29sZWFufX0gTGlQcm9wc1xuICogQHR5cGVkZWYge0NvbXBvbmVudFByb3BzV2l0aG91dFJlZjwnb2wnPiAmIFJlYWN0TWFya2Rvd25Qcm9wcyAmIHtkZXB0aDogbnVtYmVyLCBvcmRlcmVkOiB0cnVlfX0gT3JkZXJlZExpc3RQcm9wc1xuICogQHR5cGVkZWYge0NvbXBvbmVudFByb3BzV2l0aG91dFJlZjwndGQnPiAmIFJlYWN0TWFya2Rvd25Qcm9wcyAmIHtzdHlsZT86IFJlY29yZDxzdHJpbmcsIHVua25vd24+LCBpc0hlYWRlcjogZmFsc2V9fSBUYWJsZURhdGFDZWxsUHJvcHNcbiAqIEB0eXBlZGVmIHtDb21wb25lbnRQcm9wc1dpdGhvdXRSZWY8J3RoJz4gJiBSZWFjdE1hcmtkb3duUHJvcHMgJiB7c3R5bGU/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiwgaXNIZWFkZXI6IHRydWV9fSBUYWJsZUhlYWRlckNlbGxQcm9wc1xuICogQHR5cGVkZWYge0NvbXBvbmVudFByb3BzV2l0aG91dFJlZjwndHInPiAmIFJlYWN0TWFya2Rvd25Qcm9wcyAmIHtpc0hlYWRlcjogYm9vbGVhbn19IFRhYmxlUm93UHJvcHNcbiAqIEB0eXBlZGVmIHtDb21wb25lbnRQcm9wc1dpdGhvdXRSZWY8J3VsJz4gJiBSZWFjdE1hcmtkb3duUHJvcHMgJiB7ZGVwdGg6IG51bWJlciwgb3JkZXJlZDogZmFsc2V9fSBVbm9yZGVyZWRMaXN0UHJvcHNcbiAqXG4gKiBAdHlwZWRlZiB7Q29tcG9uZW50VHlwZTxDb2RlUHJvcHM+fSBDb2RlQ29tcG9uZW50XG4gKiBAdHlwZWRlZiB7Q29tcG9uZW50VHlwZTxIZWFkaW5nUHJvcHM+fSBIZWFkaW5nQ29tcG9uZW50XG4gKiBAdHlwZWRlZiB7Q29tcG9uZW50VHlwZTxMaVByb3BzPn0gTGlDb21wb25lbnRcbiAqIEB0eXBlZGVmIHtDb21wb25lbnRUeXBlPE9yZGVyZWRMaXN0UHJvcHM+fSBPcmRlcmVkTGlzdENvbXBvbmVudFxuICogQHR5cGVkZWYge0NvbXBvbmVudFR5cGU8VGFibGVEYXRhQ2VsbFByb3BzPn0gVGFibGVEYXRhQ2VsbENvbXBvbmVudFxuICogQHR5cGVkZWYge0NvbXBvbmVudFR5cGU8VGFibGVIZWFkZXJDZWxsUHJvcHM+fSBUYWJsZUhlYWRlckNlbGxDb21wb25lbnRcbiAqIEB0eXBlZGVmIHtDb21wb25lbnRUeXBlPFRhYmxlUm93UHJvcHM+fSBUYWJsZVJvd0NvbXBvbmVudFxuICogQHR5cGVkZWYge0NvbXBvbmVudFR5cGU8VW5vcmRlcmVkTGlzdFByb3BzPn0gVW5vcmRlcmVkTGlzdENvbXBvbmVudFxuICpcbiAqIEB0eXBlZGVmIFNwZWNpYWxDb21wb25lbnRzXG4gKiBAcHJvcGVydHkge0NvZGVDb21wb25lbnR8UmVhY3RNYXJrZG93bk5hbWVzfSBjb2RlXG4gKiBAcHJvcGVydHkge0hlYWRpbmdDb21wb25lbnR8UmVhY3RNYXJrZG93bk5hbWVzfSBoMVxuICogQHByb3BlcnR5IHtIZWFkaW5nQ29tcG9uZW50fFJlYWN0TWFya2Rvd25OYW1lc30gaDJcbiAqIEBwcm9wZXJ0eSB7SGVhZGluZ0NvbXBvbmVudHxSZWFjdE1hcmtkb3duTmFtZXN9IGgzXG4gKiBAcHJvcGVydHkge0hlYWRpbmdDb21wb25lbnR8UmVhY3RNYXJrZG93bk5hbWVzfSBoNFxuICogQHByb3BlcnR5IHtIZWFkaW5nQ29tcG9uZW50fFJlYWN0TWFya2Rvd25OYW1lc30gaDVcbiAqIEBwcm9wZXJ0eSB7SGVhZGluZ0NvbXBvbmVudHxSZWFjdE1hcmtkb3duTmFtZXN9IGg2XG4gKiBAcHJvcGVydHkge0xpQ29tcG9uZW50fFJlYWN0TWFya2Rvd25OYW1lc30gbGlcbiAqIEBwcm9wZXJ0eSB7T3JkZXJlZExpc3RDb21wb25lbnR8UmVhY3RNYXJrZG93bk5hbWVzfSBvbFxuICogQHByb3BlcnR5IHtUYWJsZURhdGFDZWxsQ29tcG9uZW50fFJlYWN0TWFya2Rvd25OYW1lc30gdGRcbiAqIEBwcm9wZXJ0eSB7VGFibGVIZWFkZXJDZWxsQ29tcG9uZW50fFJlYWN0TWFya2Rvd25OYW1lc30gdGhcbiAqIEBwcm9wZXJ0eSB7VGFibGVSb3dDb21wb25lbnR8UmVhY3RNYXJrZG93bk5hbWVzfSB0clxuICogQHByb3BlcnR5IHtVbm9yZGVyZWRMaXN0Q29tcG9uZW50fFJlYWN0TWFya2Rvd25OYW1lc30gdWxcbiAqXG4gKiBAdHlwZWRlZiB7UGFydGlhbDxPbWl0PGltcG9ydCgnLi9jb21wbGV4LXR5cGVzLmpzJykuTm9ybWFsQ29tcG9uZW50cywga2V5b2YgU3BlY2lhbENvbXBvbmVudHM+ICYgU3BlY2lhbENvbXBvbmVudHM+fSBDb21wb25lbnRzXG4gKlxuICogQHR5cGVkZWYgT3B0aW9uc1xuICogQHByb3BlcnR5IHtib29sZWFufSBbc291cmNlUG9zPWZhbHNlXVxuICogQHByb3BlcnR5IHtib29sZWFufSBbcmF3U291cmNlUG9zPWZhbHNlXVxuICogQHByb3BlcnR5IHtib29sZWFufSBbc2tpcEh0bWw9ZmFsc2VdXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtpbmNsdWRlRWxlbWVudEluZGV4PWZhbHNlXVxuICogQHByb3BlcnR5IHtudWxsfGZhbHNlfFRyYW5zZm9ybUxpbmt9IFt0cmFuc2Zvcm1MaW5rVXJpXVxuICogQHByb3BlcnR5IHtUcmFuc2Zvcm1JbWFnZX0gW3RyYW5zZm9ybUltYWdlVXJpXVxuICogQHByb3BlcnR5IHtUcmFuc2Zvcm1MaW5rVGFyZ2V0VHlwZXxUcmFuc2Zvcm1MaW5rVGFyZ2V0fSBbbGlua1RhcmdldF1cbiAqIEBwcm9wZXJ0eSB7Q29tcG9uZW50c30gW2NvbXBvbmVudHNdXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFJlYWN0SXMgZnJvbSAncmVhY3QtaXMnXG5pbXBvcnQge3doaXRlc3BhY2V9IGZyb20gJ2hhc3QtdXRpbC13aGl0ZXNwYWNlJ1xuaW1wb3J0IHtzdmcsIGZpbmQsIGhhc3RUb1JlYWN0fSBmcm9tICdwcm9wZXJ0eS1pbmZvcm1hdGlvbidcbmltcG9ydCB7c3RyaW5naWZ5IGFzIHNwYWNlc30gZnJvbSAnc3BhY2Utc2VwYXJhdGVkLXRva2VucydcbmltcG9ydCB7c3RyaW5naWZ5IGFzIGNvbW1hc30gZnJvbSAnY29tbWEtc2VwYXJhdGVkLXRva2VucydcbmltcG9ydCBzdHlsZSBmcm9tICdzdHlsZS10by1vYmplY3QnXG5pbXBvcnQge3VyaVRyYW5zZm9ybWVyfSBmcm9tICcuL3VyaS10cmFuc2Zvcm1lci5qcydcblxuY29uc3Qgb3duID0ge30uaGFzT3duUHJvcGVydHlcblxuLy8gVGhlIHRhYmxlLXJlbGF0ZWQgZWxlbWVudHMgdGhhdCBtdXN0IG5vdCBjb250YWluIHdoaXRlc3BhY2UgdGV4dCBhY2NvcmRpbmdcbi8vIHRvIFJlYWN0LlxuY29uc3QgdGFibGVFbGVtZW50cyA9IG5ldyBTZXQoWyd0YWJsZScsICd0aGVhZCcsICd0Ym9keScsICd0Zm9vdCcsICd0ciddKVxuXG4vKipcbiAqIEBwYXJhbSB7Q29udGV4dH0gY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fFJvb3R9IG5vZGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoaWxkcmVuVG9SZWFjdChjb250ZXh0LCBub2RlKSB7XG4gIC8qKiBAdHlwZSB7QXJyYXk8UmVhY3ROb2RlPn0gKi9cbiAgY29uc3QgY2hpbGRyZW4gPSBbXVxuICBsZXQgY2hpbGRJbmRleCA9IC0xXG4gIC8qKiBAdHlwZSB7Q29tbWVudHxEb2N0eXBlfEVsZW1lbnR8UmF3fFRleHR9ICovXG4gIGxldCBjaGlsZFxuXG4gIHdoaWxlICgrK2NoaWxkSW5kZXggPCBub2RlLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgIGNoaWxkID0gbm9kZS5jaGlsZHJlbltjaGlsZEluZGV4XVxuXG4gICAgaWYgKGNoaWxkLnR5cGUgPT09ICdlbGVtZW50Jykge1xuICAgICAgY2hpbGRyZW4ucHVzaCh0b1JlYWN0KGNvbnRleHQsIGNoaWxkLCBjaGlsZEluZGV4LCBub2RlKSlcbiAgICB9IGVsc2UgaWYgKGNoaWxkLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgLy8gQ3VycmVudGx5LCBhIHdhcm5pbmcgaXMgdHJpZ2dlcmVkIGJ5IHJlYWN0IGZvciAqYW55KiB3aGl0ZSBzcGFjZSBpblxuICAgICAgLy8gdGFibGVzLlxuICAgICAgLy8gU28gd2UgZHJvcCBpdC5cbiAgICAgIC8vIFNlZTogPGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9wdWxsLzcwODE+LlxuICAgICAgLy8gU2VlOiA8aHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvNzUxNT4uXG4gICAgICAvLyBTZWU6IDxodHRwczovL2dpdGh1Yi5jb20vcmVtYXJranMvcmVtYXJrLXJlYWN0L2lzc3Vlcy82ND4uXG4gICAgICAvLyBTZWU6IDxodHRwczovL2dpdGh1Yi5jb20vcmVtYXJranMvcmVhY3QtbWFya2Rvd24vaXNzdWVzLzU3Nj4uXG4gICAgICBpZiAoXG4gICAgICAgIG5vZGUudHlwZSAhPT0gJ2VsZW1lbnQnIHx8XG4gICAgICAgICF0YWJsZUVsZW1lbnRzLmhhcyhub2RlLnRhZ05hbWUpIHx8XG4gICAgICAgICF3aGl0ZXNwYWNlKGNoaWxkKVxuICAgICAgKSB7XG4gICAgICAgIGNoaWxkcmVuLnB1c2goY2hpbGQudmFsdWUpXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjaGlsZC50eXBlID09PSAncmF3JyAmJiAhY29udGV4dC5vcHRpb25zLnNraXBIdG1sKSB7XG4gICAgICAvLyBEZWZhdWx0IGJlaGF2aW9yIGlzIHRvIHNob3cgKGVuY29kZWQpIEhUTUwuXG4gICAgICBjaGlsZHJlbi5wdXNoKGNoaWxkLnZhbHVlKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjaGlsZHJlblxufVxuXG4vKipcbiAqIEBwYXJhbSB7Q29udGV4dH0gY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fSBub2RlXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7RWxlbWVudHxSb290fSBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gdG9SZWFjdChjb250ZXh0LCBub2RlLCBpbmRleCwgcGFyZW50KSB7XG4gIGNvbnN0IG9wdGlvbnMgPSBjb250ZXh0Lm9wdGlvbnNcbiAgY29uc3QgdHJhbnNmb3JtID1cbiAgICBvcHRpb25zLnRyYW5zZm9ybUxpbmtVcmkgPT09IHVuZGVmaW5lZFxuICAgICAgPyB1cmlUcmFuc2Zvcm1lclxuICAgICAgOiBvcHRpb25zLnRyYW5zZm9ybUxpbmtVcmlcbiAgY29uc3QgcGFyZW50U2NoZW1hID0gY29udGV4dC5zY2hlbWFcbiAgLyoqIEB0eXBlIHtSZWFjdE1hcmtkb3duTmFtZXN9ICovXG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgYXNzdW1lIGEga25vd24gSFRNTC9TVkcgZWxlbWVudC5cbiAgY29uc3QgbmFtZSA9IG5vZGUudGFnTmFtZVxuICAvKiogQHR5cGUge1JlY29yZDxzdHJpbmcsIHVua25vd24+fSAqL1xuICBjb25zdCBwcm9wZXJ0aWVzID0ge31cbiAgbGV0IHNjaGVtYSA9IHBhcmVudFNjaGVtYVxuICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgbGV0IHByb3BlcnR5XG5cbiAgaWYgKHBhcmVudFNjaGVtYS5zcGFjZSA9PT0gJ2h0bWwnICYmIG5hbWUgPT09ICdzdmcnKSB7XG4gICAgc2NoZW1hID0gc3ZnXG4gICAgY29udGV4dC5zY2hlbWEgPSBzY2hlbWFcbiAgfVxuXG4gIGlmIChub2RlLnByb3BlcnRpZXMpIHtcbiAgICBmb3IgKHByb3BlcnR5IGluIG5vZGUucHJvcGVydGllcykge1xuICAgICAgaWYgKG93bi5jYWxsKG5vZGUucHJvcGVydGllcywgcHJvcGVydHkpKSB7XG4gICAgICAgIGFkZFByb3BlcnR5KHByb3BlcnRpZXMsIHByb3BlcnR5LCBub2RlLnByb3BlcnRpZXNbcHJvcGVydHldLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChuYW1lID09PSAnb2wnIHx8IG5hbWUgPT09ICd1bCcpIHtcbiAgICBjb250ZXh0Lmxpc3REZXB0aCsrXG4gIH1cblxuICBjb25zdCBjaGlsZHJlbiA9IGNoaWxkcmVuVG9SZWFjdChjb250ZXh0LCBub2RlKVxuXG4gIGlmIChuYW1lID09PSAnb2wnIHx8IG5hbWUgPT09ICd1bCcpIHtcbiAgICBjb250ZXh0Lmxpc3REZXB0aC0tXG4gIH1cblxuICAvLyBSZXN0b3JlIHBhcmVudCBzY2hlbWEuXG4gIGNvbnRleHQuc2NoZW1hID0gcGFyZW50U2NoZW1hXG5cbiAgLy8gTm9kZXMgY3JlYXRlZCBieSBwbHVnaW5zIGRvIG5vdCBoYXZlIHBvc2l0aW9uYWwgaW5mbywgaW4gd2hpY2ggY2FzZSB3ZSB1c2VcbiAgLy8gYW4gb2JqZWN0IHRoYXQgbWF0Y2hlcyB0aGUgcG9zaXRpb24gaW50ZXJmYWNlLlxuICBjb25zdCBwb3NpdGlvbiA9IG5vZGUucG9zaXRpb24gfHwge1xuICAgIHN0YXJ0OiB7bGluZTogbnVsbCwgY29sdW1uOiBudWxsLCBvZmZzZXQ6IG51bGx9LFxuICAgIGVuZDoge2xpbmU6IG51bGwsIGNvbHVtbjogbnVsbCwgb2Zmc2V0OiBudWxsfVxuICB9XG4gIGNvbnN0IGNvbXBvbmVudCA9XG4gICAgb3B0aW9ucy5jb21wb25lbnRzICYmIG93bi5jYWxsKG9wdGlvbnMuY29tcG9uZW50cywgbmFtZSlcbiAgICAgID8gb3B0aW9ucy5jb21wb25lbnRzW25hbWVdXG4gICAgICA6IG5hbWVcbiAgY29uc3QgYmFzaWMgPSB0eXBlb2YgY29tcG9uZW50ID09PSAnc3RyaW5nJyB8fCBjb21wb25lbnQgPT09IFJlYWN0LkZyYWdtZW50XG5cbiAgaWYgKCFSZWFjdElzLmlzVmFsaWRFbGVtZW50VHlwZShjb21wb25lbnQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgIGBDb21wb25lbnQgZm9yIG5hbWUgXFxgJHtuYW1lfVxcYCBub3QgZGVmaW5lZCBvciBpcyBub3QgcmVuZGVyYWJsZWBcbiAgICApXG4gIH1cblxuICBwcm9wZXJ0aWVzLmtleSA9IGluZGV4XG5cbiAgaWYgKG5hbWUgPT09ICdhJyAmJiBvcHRpb25zLmxpbmtUYXJnZXQpIHtcbiAgICBwcm9wZXJ0aWVzLnRhcmdldCA9XG4gICAgICB0eXBlb2Ygb3B0aW9ucy5saW5rVGFyZ2V0ID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gb3B0aW9ucy5saW5rVGFyZ2V0KFxuICAgICAgICAgICAgU3RyaW5nKHByb3BlcnRpZXMuaHJlZiB8fCAnJyksXG4gICAgICAgICAgICBub2RlLmNoaWxkcmVuLFxuICAgICAgICAgICAgdHlwZW9mIHByb3BlcnRpZXMudGl0bGUgPT09ICdzdHJpbmcnID8gcHJvcGVydGllcy50aXRsZSA6IG51bGxcbiAgICAgICAgICApXG4gICAgICAgIDogb3B0aW9ucy5saW5rVGFyZ2V0XG4gIH1cblxuICBpZiAobmFtZSA9PT0gJ2EnICYmIHRyYW5zZm9ybSkge1xuICAgIHByb3BlcnRpZXMuaHJlZiA9IHRyYW5zZm9ybShcbiAgICAgIFN0cmluZyhwcm9wZXJ0aWVzLmhyZWYgfHwgJycpLFxuICAgICAgbm9kZS5jaGlsZHJlbixcbiAgICAgIHR5cGVvZiBwcm9wZXJ0aWVzLnRpdGxlID09PSAnc3RyaW5nJyA/IHByb3BlcnRpZXMudGl0bGUgOiBudWxsXG4gICAgKVxuICB9XG5cbiAgaWYgKFxuICAgICFiYXNpYyAmJlxuICAgIG5hbWUgPT09ICdjb2RlJyAmJlxuICAgIHBhcmVudC50eXBlID09PSAnZWxlbWVudCcgJiZcbiAgICBwYXJlbnQudGFnTmFtZSAhPT0gJ3ByZSdcbiAgKSB7XG4gICAgcHJvcGVydGllcy5pbmxpbmUgPSB0cnVlXG4gIH1cblxuICBpZiAoXG4gICAgIWJhc2ljICYmXG4gICAgKG5hbWUgPT09ICdoMScgfHxcbiAgICAgIG5hbWUgPT09ICdoMicgfHxcbiAgICAgIG5hbWUgPT09ICdoMycgfHxcbiAgICAgIG5hbWUgPT09ICdoNCcgfHxcbiAgICAgIG5hbWUgPT09ICdoNScgfHxcbiAgICAgIG5hbWUgPT09ICdoNicpXG4gICkge1xuICAgIHByb3BlcnRpZXMubGV2ZWwgPSBOdW1iZXIucGFyc2VJbnQobmFtZS5jaGFyQXQoMSksIDEwKVxuICB9XG5cbiAgaWYgKG5hbWUgPT09ICdpbWcnICYmIG9wdGlvbnMudHJhbnNmb3JtSW1hZ2VVcmkpIHtcbiAgICBwcm9wZXJ0aWVzLnNyYyA9IG9wdGlvbnMudHJhbnNmb3JtSW1hZ2VVcmkoXG4gICAgICBTdHJpbmcocHJvcGVydGllcy5zcmMgfHwgJycpLFxuICAgICAgU3RyaW5nKHByb3BlcnRpZXMuYWx0IHx8ICcnKSxcbiAgICAgIHR5cGVvZiBwcm9wZXJ0aWVzLnRpdGxlID09PSAnc3RyaW5nJyA/IHByb3BlcnRpZXMudGl0bGUgOiBudWxsXG4gICAgKVxuICB9XG5cbiAgaWYgKCFiYXNpYyAmJiBuYW1lID09PSAnbGknICYmIHBhcmVudC50eXBlID09PSAnZWxlbWVudCcpIHtcbiAgICBjb25zdCBpbnB1dCA9IGdldElucHV0RWxlbWVudChub2RlKVxuICAgIHByb3BlcnRpZXMuY2hlY2tlZCA9XG4gICAgICBpbnB1dCAmJiBpbnB1dC5wcm9wZXJ0aWVzID8gQm9vbGVhbihpbnB1dC5wcm9wZXJ0aWVzLmNoZWNrZWQpIDogbnVsbFxuICAgIHByb3BlcnRpZXMuaW5kZXggPSBnZXRFbGVtZW50c0JlZm9yZUNvdW50KHBhcmVudCwgbm9kZSlcbiAgICBwcm9wZXJ0aWVzLm9yZGVyZWQgPSBwYXJlbnQudGFnTmFtZSA9PT0gJ29sJ1xuICB9XG5cbiAgaWYgKCFiYXNpYyAmJiAobmFtZSA9PT0gJ29sJyB8fCBuYW1lID09PSAndWwnKSkge1xuICAgIHByb3BlcnRpZXMub3JkZXJlZCA9IG5hbWUgPT09ICdvbCdcbiAgICBwcm9wZXJ0aWVzLmRlcHRoID0gY29udGV4dC5saXN0RGVwdGhcbiAgfVxuXG4gIGlmIChuYW1lID09PSAndGQnIHx8IG5hbWUgPT09ICd0aCcpIHtcbiAgICBpZiAocHJvcGVydGllcy5hbGlnbikge1xuICAgICAgaWYgKCFwcm9wZXJ0aWVzLnN0eWxlKSBwcm9wZXJ0aWVzLnN0eWxlID0ge31cbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgYXNzdW1lIGBzdHlsZWAgaXMgYW4gb2JqZWN0XG4gICAgICBwcm9wZXJ0aWVzLnN0eWxlLnRleHRBbGlnbiA9IHByb3BlcnRpZXMuYWxpZ25cbiAgICAgIGRlbGV0ZSBwcm9wZXJ0aWVzLmFsaWduXG4gICAgfVxuXG4gICAgaWYgKCFiYXNpYykge1xuICAgICAgcHJvcGVydGllcy5pc0hlYWRlciA9IG5hbWUgPT09ICd0aCdcbiAgICB9XG4gIH1cblxuICBpZiAoIWJhc2ljICYmIG5hbWUgPT09ICd0cicgJiYgcGFyZW50LnR5cGUgPT09ICdlbGVtZW50Jykge1xuICAgIHByb3BlcnRpZXMuaXNIZWFkZXIgPSBCb29sZWFuKHBhcmVudC50YWdOYW1lID09PSAndGhlYWQnKVxuICB9XG5cbiAgLy8gSWYgYHNvdXJjZVBvc2AgaXMgZ2l2ZW4sIHBhc3Mgc291cmNlIGluZm9ybWF0aW9uIChsaW5lL2NvbHVtbiBpbmZvIGZyb20gbWFya2Rvd24gc291cmNlKS5cbiAgaWYgKG9wdGlvbnMuc291cmNlUG9zKSB7XG4gICAgcHJvcGVydGllc1snZGF0YS1zb3VyY2Vwb3MnXSA9IGZsYXR0ZW5Qb3NpdGlvbihwb3NpdGlvbilcbiAgfVxuXG4gIGlmICghYmFzaWMgJiYgb3B0aW9ucy5yYXdTb3VyY2VQb3MpIHtcbiAgICBwcm9wZXJ0aWVzLnNvdXJjZVBvc2l0aW9uID0gbm9kZS5wb3NpdGlvblxuICB9XG5cbiAgLy8gSWYgYGluY2x1ZGVFbGVtZW50SW5kZXhgIGlzIGdpdmVuLCBwYXNzIG5vZGUgaW5kZXggaW5mbyB0byBjb21wb25lbnRzLlxuICBpZiAoIWJhc2ljICYmIG9wdGlvbnMuaW5jbHVkZUVsZW1lbnRJbmRleCkge1xuICAgIHByb3BlcnRpZXMuaW5kZXggPSBnZXRFbGVtZW50c0JlZm9yZUNvdW50KHBhcmVudCwgbm9kZSlcbiAgICBwcm9wZXJ0aWVzLnNpYmxpbmdDb3VudCA9IGdldEVsZW1lbnRzQmVmb3JlQ291bnQocGFyZW50KVxuICB9XG5cbiAgaWYgKCFiYXNpYykge1xuICAgIHByb3BlcnRpZXMubm9kZSA9IG5vZGVcbiAgfVxuXG4gIC8vIEVuc3VyZSBubyBSZWFjdCB3YXJuaW5ncyBhcmUgZW1pdHRlZCBmb3Igdm9pZCBlbGVtZW50cyB3LyBjaGlsZHJlbi5cbiAgcmV0dXJuIGNoaWxkcmVuLmxlbmd0aCA+IDBcbiAgICA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wZXJ0aWVzLCBjaGlsZHJlbilcbiAgICA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wZXJ0aWVzKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudHxSb290fSBub2RlXG4gKiBAcmV0dXJucyB7RWxlbWVudD99XG4gKi9cbmZ1bmN0aW9uIGdldElucHV0RWxlbWVudChub2RlKSB7XG4gIGxldCBpbmRleCA9IC0xXG5cbiAgd2hpbGUgKCsraW5kZXggPCBub2RlLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgIGNvbnN0IGNoaWxkID0gbm9kZS5jaGlsZHJlbltpbmRleF1cblxuICAgIGlmIChjaGlsZC50eXBlID09PSAnZWxlbWVudCcgJiYgY2hpbGQudGFnTmFtZSA9PT0gJ2lucHV0Jykge1xuICAgICAgcmV0dXJuIGNoaWxkXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGxcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR8Um9vdH0gcGFyZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IFtub2RlXVxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZnVuY3Rpb24gZ2V0RWxlbWVudHNCZWZvcmVDb3VudChwYXJlbnQsIG5vZGUpIHtcbiAgbGV0IGluZGV4ID0gLTFcbiAgbGV0IGNvdW50ID0gMFxuXG4gIHdoaWxlICgrK2luZGV4IDwgcGFyZW50LmNoaWxkcmVuLmxlbmd0aCkge1xuICAgIGlmIChwYXJlbnQuY2hpbGRyZW5baW5kZXhdID09PSBub2RlKSBicmVha1xuICAgIGlmIChwYXJlbnQuY2hpbGRyZW5baW5kZXhdLnR5cGUgPT09ICdlbGVtZW50JykgY291bnQrK1xuICB9XG5cbiAgcmV0dXJuIGNvdW50XG59XG5cbi8qKlxuICogQHBhcmFtIHtSZWNvcmQ8c3RyaW5nLCB1bmtub3duPn0gcHJvcHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wXG4gKiBAcGFyYW0ge3Vua25vd259IHZhbHVlXG4gKiBAcGFyYW0ge0NvbnRleHR9IGN0eFxuICovXG5mdW5jdGlvbiBhZGRQcm9wZXJ0eShwcm9wcywgcHJvcCwgdmFsdWUsIGN0eCkge1xuICBjb25zdCBpbmZvID0gZmluZChjdHguc2NoZW1hLCBwcm9wKVxuICBsZXQgcmVzdWx0ID0gdmFsdWVcblxuICAvLyBJZ25vcmUgbnVsbGlzaCBhbmQgYE5hTmAgdmFsdWVzLlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIGlmIChyZXN1bHQgPT09IG51bGwgfHwgcmVzdWx0ID09PSB1bmRlZmluZWQgfHwgcmVzdWx0ICE9PSByZXN1bHQpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIEFjY2VwdCBgYXJyYXlgLlxuICAvLyBNb3N0IHByb3BzIGFyZSBzcGFjZS1zZXBhcmF0ZWQuXG4gIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcbiAgICByZXN1bHQgPSBpbmZvLmNvbW1hU2VwYXJhdGVkID8gY29tbWFzKHJlc3VsdCkgOiBzcGFjZXMocmVzdWx0KVxuICB9XG5cbiAgaWYgKGluZm8ucHJvcGVydHkgPT09ICdzdHlsZScgJiYgdHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXN1bHQgPSBwYXJzZVN0eWxlKHJlc3VsdClcbiAgfVxuXG4gIGlmIChpbmZvLnNwYWNlICYmIGluZm8ucHJvcGVydHkpIHtcbiAgICBwcm9wc1tcbiAgICAgIG93bi5jYWxsKGhhc3RUb1JlYWN0LCBpbmZvLnByb3BlcnR5KVxuICAgICAgICA/IGhhc3RUb1JlYWN0W2luZm8ucHJvcGVydHldXG4gICAgICAgIDogaW5mby5wcm9wZXJ0eVxuICAgIF0gPSByZXN1bHRcbiAgfSBlbHNlIGlmIChpbmZvLmF0dHJpYnV0ZSkge1xuICAgIHByb3BzW2luZm8uYXR0cmlidXRlXSA9IHJlc3VsdFxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJucyB7UmVjb3JkPHN0cmluZywgc3RyaW5nPn1cbiAqL1xuZnVuY3Rpb24gcGFyc2VTdHlsZSh2YWx1ZSkge1xuICAvKiogQHR5cGUge1JlY29yZDxzdHJpbmcsIHN0cmluZz59ICovXG4gIGNvbnN0IHJlc3VsdCA9IHt9XG5cbiAgdHJ5IHtcbiAgICBzdHlsZSh2YWx1ZSwgaXRlcmF0b3IpXG4gIH0gY2F0Y2gge1xuICAgIC8vIFNpbGVudC5cbiAgfVxuXG4gIHJldHVybiByZXN1bHRcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZcbiAgICovXG4gIGZ1bmN0aW9uIGl0ZXJhdG9yKG5hbWUsIHYpIHtcbiAgICBjb25zdCBrID0gbmFtZS5zbGljZSgwLCA0KSA9PT0gJy1tcy0nID8gYG1zLSR7bmFtZS5zbGljZSg0KX1gIDogbmFtZVxuICAgIHJlc3VsdFtrLnJlcGxhY2UoLy0oW2Etel0pL2csIHN0eWxlUmVwbGFjZXIpXSA9IHZcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7dW5rbm93bn0gX1xuICogQHBhcmFtIHtzdHJpbmd9ICQxXG4gKi9cbmZ1bmN0aW9uIHN0eWxlUmVwbGFjZXIoXywgJDEpIHtcbiAgcmV0dXJuICQxLnRvVXBwZXJDYXNlKClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1Bvc2l0aW9ufHtzdGFydDoge2xpbmU6IG51bGwsIGNvbHVtbjogbnVsbCwgb2Zmc2V0OiBudWxsfSwgZW5kOiB7bGluZTogbnVsbCwgY29sdW1uOiBudWxsLCBvZmZzZXQ6IG51bGx9fX0gcG9zXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGF0dGVuUG9zaXRpb24ocG9zKSB7XG4gIHJldHVybiBbXG4gICAgcG9zLnN0YXJ0LmxpbmUsXG4gICAgJzonLFxuICAgIHBvcy5zdGFydC5jb2x1bW4sXG4gICAgJy0nLFxuICAgIHBvcy5lbmQubGluZSxcbiAgICAnOicsXG4gICAgcG9zLmVuZC5jb2x1bW5cbiAgXVxuICAgIC5tYXAoU3RyaW5nKVxuICAgIC5qb2luKCcnKVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTdHJpbmdpZnlPcHRpb25zXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtwYWRMZWZ0PXRydWVdIFdoZXRoZXIgdG8gcGFkIGEgc3BhY2UgYmVmb3JlIGEgdG9rZW4gKGBib29sZWFuYCwgZGVmYXVsdDogYHRydWVgKS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3BhZFJpZ2h0PWZhbHNlXSBXaGV0aGVyIHRvIHBhZCBhIHNwYWNlIGFmdGVyIGEgdG9rZW4gKGBib29sZWFuYCwgZGVmYXVsdDogYGZhbHNlYCkuXG4gKi9cblxuLyoqXG4gKiBQYXJzZSBjb21tYSBzZXBhcmF0ZWQgdG9rZW5zIHRvIGFuIGFycmF5LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybnMge0FycmF5LjxzdHJpbmc+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UodmFsdWUpIHtcbiAgLyoqIEB0eXBlIHtBcnJheS48c3RyaW5nPn0gKi9cbiAgdmFyIHRva2VucyA9IFtdXG4gIHZhciBpbnB1dCA9IFN0cmluZyh2YWx1ZSB8fCAnJylcbiAgdmFyIGluZGV4ID0gaW5wdXQuaW5kZXhPZignLCcpXG4gIHZhciBzdGFydCA9IDBcbiAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICB2YXIgZW5kXG4gIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICB2YXIgdG9rZW5cblxuICB3aGlsZSAoIWVuZCkge1xuICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgIGluZGV4ID0gaW5wdXQubGVuZ3RoXG4gICAgICBlbmQgPSB0cnVlXG4gICAgfVxuXG4gICAgdG9rZW4gPSBpbnB1dC5zbGljZShzdGFydCwgaW5kZXgpLnRyaW0oKVxuXG4gICAgaWYgKHRva2VuIHx8ICFlbmQpIHtcbiAgICAgIHRva2Vucy5wdXNoKHRva2VuKVxuICAgIH1cblxuICAgIHN0YXJ0ID0gaW5kZXggKyAxXG4gICAgaW5kZXggPSBpbnB1dC5pbmRleE9mKCcsJywgc3RhcnQpXG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogU2VyaWFsaXplIGFuIGFycmF5IG9mIHN0cmluZ3MgdG8gY29tbWEgc2VwYXJhdGVkIHRva2Vucy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5LjxzdHJpbmd8bnVtYmVyPn0gdmFsdWVzXG4gKiBAcGFyYW0ge1N0cmluZ2lmeU9wdGlvbnN9IFtvcHRpb25zXVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeSh2YWx1ZXMsIG9wdGlvbnMpIHtcbiAgdmFyIHNldHRpbmdzID0gb3B0aW9ucyB8fCB7fVxuXG4gIC8vIEVuc3VyZSB0aGUgbGFzdCBlbXB0eSBlbnRyeSBpcyBzZWVuLlxuICBpZiAodmFsdWVzW3ZhbHVlcy5sZW5ndGggLSAxXSA9PT0gJycpIHtcbiAgICB2YWx1ZXMgPSB2YWx1ZXMuY29uY2F0KCcnKVxuICB9XG5cbiAgcmV0dXJuIHZhbHVlc1xuICAgIC5qb2luKFxuICAgICAgKHNldHRpbmdzLnBhZFJpZ2h0ID8gJyAnIDogJycpICtcbiAgICAgICAgJywnICtcbiAgICAgICAgKHNldHRpbmdzLnBhZExlZnQgPT09IGZhbHNlID8gJycgOiAnICcpXG4gICAgKVxuICAgIC50cmltKClcbn1cbiIsIi8qKlxuICogUGFyc2Ugc3BhY2Ugc2VwYXJhdGVkIHRva2VucyB0byBhbiBhcnJheSBvZiBzdHJpbmdzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBTcGFjZSBzZXBhcmF0ZWQgdG9rZW5zXG4gKiBAcmV0dXJucyB7QXJyYXkuPHN0cmluZz59IFRva2Vuc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UodmFsdWUpIHtcbiAgY29uc3QgaW5wdXQgPSBTdHJpbmcodmFsdWUgfHwgJycpLnRyaW0oKVxuICByZXR1cm4gaW5wdXQgPyBpbnB1dC5zcGxpdCgvWyBcXHRcXG5cXHJcXGZdKy9nKSA6IFtdXG59XG5cbi8qKlxuICogU2VyaWFsaXplIGFuIGFycmF5IG9mIHN0cmluZ3MgYXMgc3BhY2Ugc2VwYXJhdGVkIHRva2Vucy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5LjxzdHJpbmd8bnVtYmVyPn0gdmFsdWVzIFRva2Vuc1xuICogQHJldHVybnMge3N0cmluZ30gU3BhY2Ugc2VwYXJhdGVkIHRva2Vuc1xuICovXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5naWZ5KHZhbHVlcykge1xuICByZXR1cm4gdmFsdWVzLmpvaW4oJyAnKS50cmltKClcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgncmVhY3QnKS5SZWFjdE5vZGV9IFJlYWN0Tm9kZVxuICogQHR5cGVkZWYge2ltcG9ydCgncmVhY3QnKS5SZWFjdEVsZW1lbnQ8e30+fSBSZWFjdEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaWZpZWQnKS5QbHVnZ2FibGVMaXN0fSBQbHVnZ2FibGVMaXN0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuUm9vdH0gUm9vdFxuICogQHR5cGVkZWYge2ltcG9ydCgnLi9yZWh5cGUtZmlsdGVyLmpzJykuT3B0aW9uc30gRmlsdGVyT3B0aW9uc1xuICogQHR5cGVkZWYge2ltcG9ydCgnLi9hc3QtdG8tcmVhY3QuanMnKS5PcHRpb25zfSBUcmFuc2Zvcm1PcHRpb25zXG4gKlxuICogQHR5cGVkZWYgQ29yZU9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjaGlsZHJlblxuICpcbiAqIEB0eXBlZGVmIFBsdWdpbk9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7UGx1Z2dhYmxlTGlzdH0gW3JlbWFya1BsdWdpbnM9W11dXG4gKiBAcHJvcGVydHkge1BsdWdnYWJsZUxpc3R9IFtyZWh5cGVQbHVnaW5zPVtdXVxuICogQHByb3BlcnR5IHtpbXBvcnQoJ3JlbWFyay1yZWh5cGUnKS5PcHRpb25zIHwgdW5kZWZpbmVkfSBbcmVtYXJrUmVoeXBlT3B0aW9ucz17fV1cbiAqXG4gKiBAdHlwZWRlZiBMYXlvdXRPcHRpb25zXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2NsYXNzTmFtZV1cbiAqXG4gKiBAdHlwZWRlZiB7Q29yZU9wdGlvbnMgJiBQbHVnaW5PcHRpb25zICYgTGF5b3V0T3B0aW9ucyAmIEZpbHRlck9wdGlvbnMgJiBUcmFuc2Zvcm1PcHRpb25zfSBSZWFjdE1hcmtkb3duT3B0aW9uc1xuICpcbiAqIEB0eXBlZGVmIERlcHJlY2F0aW9uXG4gKiBAcHJvcGVydHkge3N0cmluZ30gaWRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdG9dXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtWRmlsZX0gZnJvbSAndmZpbGUnXG5pbXBvcnQge3VuaWZpZWR9IGZyb20gJ3VuaWZpZWQnXG5pbXBvcnQgcmVtYXJrUGFyc2UgZnJvbSAncmVtYXJrLXBhcnNlJ1xuaW1wb3J0IHJlbWFya1JlaHlwZSBmcm9tICdyZW1hcmstcmVoeXBlJ1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IHtodG1sfSBmcm9tICdwcm9wZXJ0eS1pbmZvcm1hdGlvbidcbmltcG9ydCByZWh5cGVGaWx0ZXIgZnJvbSAnLi9yZWh5cGUtZmlsdGVyLmpzJ1xuaW1wb3J0IHtjaGlsZHJlblRvUmVhY3R9IGZyb20gJy4vYXN0LXRvLXJlYWN0LmpzJ1xuXG5jb25zdCBvd24gPSB7fS5oYXNPd25Qcm9wZXJ0eVxuY29uc3QgY2hhbmdlbG9nID1cbiAgJ2h0dHBzOi8vZ2l0aHViLmNvbS9yZW1hcmtqcy9yZWFjdC1tYXJrZG93bi9ibG9iL21haW4vY2hhbmdlbG9nLm1kJ1xuXG4vKiogQHR5cGUge1JlY29yZDxzdHJpbmcsIERlcHJlY2F0aW9uPn0gKi9cbmNvbnN0IGRlcHJlY2F0ZWQgPSB7XG4gIHBsdWdpbnM6IHt0bzogJ3JlbWFya1BsdWdpbnMnLCBpZDogJ2NoYW5nZS1wbHVnaW5zLXRvLXJlbWFya3BsdWdpbnMnfSxcbiAgcmVuZGVyZXJzOiB7dG86ICdjb21wb25lbnRzJywgaWQ6ICdjaGFuZ2UtcmVuZGVyZXJzLXRvLWNvbXBvbmVudHMnfSxcbiAgYXN0UGx1Z2luczoge2lkOiAncmVtb3ZlLWJ1Z2d5LWh0bWwtaW4tbWFya2Rvd24tcGFyc2VyJ30sXG4gIGFsbG93RGFuZ2Vyb3VzSHRtbDoge2lkOiAncmVtb3ZlLWJ1Z2d5LWh0bWwtaW4tbWFya2Rvd24tcGFyc2VyJ30sXG4gIGVzY2FwZUh0bWw6IHtpZDogJ3JlbW92ZS1idWdneS1odG1sLWluLW1hcmtkb3duLXBhcnNlcid9LFxuICBzb3VyY2U6IHt0bzogJ2NoaWxkcmVuJywgaWQ6ICdjaGFuZ2Utc291cmNlLXRvLWNoaWxkcmVuJ30sXG4gIGFsbG93Tm9kZToge1xuICAgIHRvOiAnYWxsb3dFbGVtZW50JyxcbiAgICBpZDogJ3JlcGxhY2UtYWxsb3dub2RlLWFsbG93ZWR0eXBlcy1hbmQtZGlzYWxsb3dlZHR5cGVzJ1xuICB9LFxuICBhbGxvd2VkVHlwZXM6IHtcbiAgICB0bzogJ2FsbG93ZWRFbGVtZW50cycsXG4gICAgaWQ6ICdyZXBsYWNlLWFsbG93bm9kZS1hbGxvd2VkdHlwZXMtYW5kLWRpc2FsbG93ZWR0eXBlcydcbiAgfSxcbiAgZGlzYWxsb3dlZFR5cGVzOiB7XG4gICAgdG86ICdkaXNhbGxvd2VkRWxlbWVudHMnLFxuICAgIGlkOiAncmVwbGFjZS1hbGxvd25vZGUtYWxsb3dlZHR5cGVzLWFuZC1kaXNhbGxvd2VkdHlwZXMnXG4gIH0sXG4gIGluY2x1ZGVOb2RlSW5kZXg6IHtcbiAgICB0bzogJ2luY2x1ZGVFbGVtZW50SW5kZXgnLFxuICAgIGlkOiAnY2hhbmdlLWluY2x1ZGVub2RlaW5kZXgtdG8taW5jbHVkZWVsZW1lbnRpbmRleCdcbiAgfVxufVxuXG4vKipcbiAqIFJlYWN0IGNvbXBvbmVudCB0byByZW5kZXIgbWFya2Rvd24uXG4gKlxuICogQHBhcmFtIHtSZWFjdE1hcmtkb3duT3B0aW9uc30gb3B0aW9uc1xuICogQHJldHVybnMge1JlYWN0RWxlbWVudH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFJlYWN0TWFya2Rvd24ob3B0aW9ucykge1xuICBmb3IgKGNvbnN0IGtleSBpbiBkZXByZWNhdGVkKSB7XG4gICAgaWYgKG93bi5jYWxsKGRlcHJlY2F0ZWQsIGtleSkgJiYgb3duLmNhbGwob3B0aW9ucywga2V5KSkge1xuICAgICAgY29uc3QgZGVwcmVjYXRpb24gPSBkZXByZWNhdGVkW2tleV1cbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgYFtyZWFjdC1tYXJrZG93bl0gV2FybmluZzogcGxlYXNlICR7XG4gICAgICAgICAgZGVwcmVjYXRpb24udG8gPyBgdXNlIFxcYCR7ZGVwcmVjYXRpb24udG99XFxgIGluc3RlYWQgb2ZgIDogJ3JlbW92ZSdcbiAgICAgICAgfSBcXGAke2tleX1cXGAgKHNlZSA8JHtjaGFuZ2Vsb2d9IyR7ZGVwcmVjYXRpb24uaWR9PiBmb3IgbW9yZSBpbmZvKWBcbiAgICAgIClcbiAgICAgIGRlbGV0ZSBkZXByZWNhdGVkW2tleV1cbiAgICB9XG4gIH1cblxuICBjb25zdCBwcm9jZXNzb3IgPSB1bmlmaWVkKClcbiAgICAudXNlKHJlbWFya1BhcnNlKVxuICAgIC51c2Uob3B0aW9ucy5yZW1hcmtQbHVnaW5zIHx8IFtdKVxuICAgIC51c2UocmVtYXJrUmVoeXBlLCB7XG4gICAgICAuLi5vcHRpb25zLnJlbWFya1JlaHlwZU9wdGlvbnMsXG4gICAgICBhbGxvd0Rhbmdlcm91c0h0bWw6IHRydWVcbiAgICB9KVxuICAgIC51c2Uob3B0aW9ucy5yZWh5cGVQbHVnaW5zIHx8IFtdKVxuICAgIC51c2UocmVoeXBlRmlsdGVyLCBvcHRpb25zKVxuXG4gIGNvbnN0IGZpbGUgPSBuZXcgVkZpbGUoKVxuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5jaGlsZHJlbiA9PT0gJ3N0cmluZycpIHtcbiAgICBmaWxlLnZhbHVlID0gb3B0aW9ucy5jaGlsZHJlblxuICB9IGVsc2UgaWYgKG9wdGlvbnMuY2hpbGRyZW4gIT09IHVuZGVmaW5lZCAmJiBvcHRpb25zLmNoaWxkcmVuICE9PSBudWxsKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgYFtyZWFjdC1tYXJrZG93bl0gV2FybmluZzogcGxlYXNlIHBhc3MgYSBzdHJpbmcgYXMgXFxgY2hpbGRyZW5cXGAgKG5vdDogXFxgJHtvcHRpb25zLmNoaWxkcmVufVxcYClgXG4gICAgKVxuICB9XG5cbiAgY29uc3QgaGFzdE5vZGUgPSBwcm9jZXNzb3IucnVuU3luYyhwcm9jZXNzb3IucGFyc2UoZmlsZSksIGZpbGUpXG5cbiAgaWYgKGhhc3ROb2RlLnR5cGUgIT09ICdyb290Jykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGEgYHJvb3RgIG5vZGUnKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtSZWFjdEVsZW1lbnR9ICovXG4gIGxldCByZXN1bHQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgIFJlYWN0LkZyYWdtZW50LFxuICAgIHt9LFxuICAgIGNoaWxkcmVuVG9SZWFjdCh7b3B0aW9ucywgc2NoZW1hOiBodG1sLCBsaXN0RGVwdGg6IDB9LCBoYXN0Tm9kZSlcbiAgKVxuXG4gIGlmIChvcHRpb25zLmNsYXNzTmFtZSkge1xuICAgIHJlc3VsdCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtjbGFzc05hbWU6IG9wdGlvbnMuY2xhc3NOYW1lfSwgcmVzdWx0KVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5SZWFjdE1hcmtkb3duLnByb3BUeXBlcyA9IHtcbiAgLy8gQ29yZSBvcHRpb25zOlxuICBjaGlsZHJlbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgLy8gTGF5b3V0IG9wdGlvbnM6XG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLy8gRmlsdGVyIG9wdGlvbnM6XG4gIGFsbG93RWxlbWVudDogUHJvcFR5cGVzLmZ1bmMsXG4gIGFsbG93ZWRFbGVtZW50czogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyksXG4gIGRpc2FsbG93ZWRFbGVtZW50czogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyksXG4gIHVud3JhcERpc2FsbG93ZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvLyBQbHVnaW4gb3B0aW9uczpcbiAgcmVtYXJrUGx1Z2luczogUHJvcFR5cGVzLmFycmF5T2YoXG4gICAgUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICBQcm9wVHlwZXMub2JqZWN0LFxuICAgICAgUHJvcFR5cGVzLmZ1bmMsXG4gICAgICBQcm9wVHlwZXMuYXJyYXlPZihcbiAgICAgICAgUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICAgICAgUHJvcFR5cGVzLmJvb2wsXG4gICAgICAgICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgICBQcm9wVHlwZXMub2JqZWN0LFxuICAgICAgICAgIFByb3BUeXBlcy5mdW5jLFxuICAgICAgICAgIFByb3BUeXBlcy5hcnJheU9mKFxuICAgICAgICAgICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAgICAgICAvLyB0eXBlLWNvdmVyYWdlOmlnbm9yZS1uZXh0LWxpbmVcbiAgICAgICAgICAgIFByb3BUeXBlcy5hbnlcbiAgICAgICAgICApXG4gICAgICAgIF0pXG4gICAgICApXG4gICAgXSlcbiAgKSxcbiAgcmVoeXBlUGx1Z2luczogUHJvcFR5cGVzLmFycmF5T2YoXG4gICAgUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICBQcm9wVHlwZXMub2JqZWN0LFxuICAgICAgUHJvcFR5cGVzLmZ1bmMsXG4gICAgICBQcm9wVHlwZXMuYXJyYXlPZihcbiAgICAgICAgUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICAgICAgUHJvcFR5cGVzLmJvb2wsXG4gICAgICAgICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgICBQcm9wVHlwZXMub2JqZWN0LFxuICAgICAgICAgIFByb3BUeXBlcy5mdW5jLFxuICAgICAgICAgIFByb3BUeXBlcy5hcnJheU9mKFxuICAgICAgICAgICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAgICAgICAvLyB0eXBlLWNvdmVyYWdlOmlnbm9yZS1uZXh0LWxpbmVcbiAgICAgICAgICAgIFByb3BUeXBlcy5hbnlcbiAgICAgICAgICApXG4gICAgICAgIF0pXG4gICAgICApXG4gICAgXSlcbiAgKSxcbiAgLy8gVHJhbnNmb3JtIG9wdGlvbnM6XG4gIHNvdXJjZVBvczogUHJvcFR5cGVzLmJvb2wsXG4gIHJhd1NvdXJjZVBvczogUHJvcFR5cGVzLmJvb2wsXG4gIHNraXBIdG1sOiBQcm9wVHlwZXMuYm9vbCxcbiAgaW5jbHVkZUVsZW1lbnRJbmRleDogUHJvcFR5cGVzLmJvb2wsXG4gIHRyYW5zZm9ybUxpbmtVcmk6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuYm9vbF0pLFxuICBsaW5rVGFyZ2V0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pLFxuICB0cmFuc2Zvcm1JbWFnZVVyaTogUHJvcFR5cGVzLmZ1bmMsXG4gIGNvbXBvbmVudHM6IFByb3BUeXBlcy5vYmplY3Rcbn1cbiJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyIsIlVSTCIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzJfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfM19fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF80X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzVfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNl9fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF83X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzhfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfOV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xMF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xMV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xMl9fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xM19fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xNF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xNV9fXyIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfM19fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzRfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF81X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNl9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzdfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF84X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfOV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzEwX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMTFfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xMl9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzEzX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMTRfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xNV9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsInVybCIsIm9wdGlvbnMiLCJTdHJpbmciLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInRlc3QiLCJzbGljZSIsImhhc2giLCJuZWVkUXVvdGVzIiwicmVwbGFjZSIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJoYXNPd24iLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInRvU3RyIiwiZGVmaW5lUHJvcGVydHkiLCJnT1BEIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiaXNBcnJheSIsImFyciIsIkFycmF5IiwiY2FsbCIsImlzUGxhaW5PYmplY3QiLCJvYmoiLCJrZXkiLCJoYXNPd25Db25zdHJ1Y3RvciIsImhhc0lzUHJvdG90eXBlT2YiLCJjb25zdHJ1Y3RvciIsInNldFByb3BlcnR5IiwidGFyZ2V0IiwibmFtZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ2YWx1ZSIsIm5ld1ZhbHVlIiwid3JpdGFibGUiLCJnZXRQcm9wZXJ0eSIsImV4dGVuZCIsInNyYyIsImNvcHkiLCJjb3B5SXNBcnJheSIsImNsb25lIiwiYXJndW1lbnRzIiwiZGVlcCIsIkNPTU1FTlRfUkVHRVgiLCJORVdMSU5FX1JFR0VYIiwiV0hJVEVTUEFDRV9SRUdFWCIsIlBST1BFUlRZX1JFR0VYIiwiQ09MT05fUkVHRVgiLCJWQUxVRV9SRUdFWCIsIlNFTUlDT0xPTl9SRUdFWCIsIlRSSU1fUkVHRVgiLCJFTVBUWV9TVFJJTkciLCJ0cmltIiwic3RyIiwic3R5bGUiLCJUeXBlRXJyb3IiLCJsaW5lbm8iLCJjb2x1bW4iLCJ1cGRhdGVQb3NpdGlvbiIsImxpbmVzIiwibWF0Y2giLCJsYXN0SW5kZXhPZiIsInBvc2l0aW9uIiwic3RhcnQiLCJsaW5lIiwibm9kZSIsIlBvc2l0aW9uIiwid2hpdGVzcGFjZSIsImVuZCIsInNvdXJjZSIsImVycm9yc0xpc3QiLCJlcnJvciIsIm1zZyIsImVyciIsIkVycm9yIiwicmVhc29uIiwiZmlsZW5hbWUiLCJzaWxlbnQiLCJyZSIsIm0iLCJleGVjIiwiY29tbWVudHMiLCJydWxlcyIsImMiLCJjb21tZW50IiwicG9zIiwiY2hhckF0IiwidHlwZSIsImRlY2xhcmF0aW9uIiwicHJvcCIsInZhbCIsInJldCIsInByb3BlcnR5IiwiZGVjbCIsImRlY2xzIiwiZGVjbGFyYXRpb25zIiwiaXNCdWZmZXIiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwicHJvY2VzcyIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsInNldFRpbWVvdXQiLCJlIiwiY2xlYXJUaW1lb3V0IiwiY3VycmVudFF1ZXVlIiwicXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwidGltZW91dCIsImxlbiIsInJ1biIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJhcnJheSIsIm5vb3AiLCJuZXh0VGljayIsImFyZ3MiLCJhcHBseSIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsInNoaW0iLCJwcm9wcyIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsImxvY2F0aW9uIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsImlzUmVxdWlyZWQiLCJSZWFjdFByb3BUeXBlcyIsImJvb2wiLCJmdW5jIiwibnVtYmVyIiwib2JqZWN0Iiwic3RyaW5nIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImVsZW1lbnQiLCJlbGVtZW50VHlwZSIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiYWEiLCJjYSIsInAiLCJhIiwiYiIsImRhIiwiU2V0IiwiZWEiLCJmYSIsImhhIiwiYWRkIiwiaWEiLCJ3aW5kb3ciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJqYSIsImthIiwibGEiLCJtYSIsInYiLCJkIiwiZiIsImciLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwic2FuaXRpemVVUkwiLCJyZW1vdmVFbXB0eVN0cmluZyIsInoiLCJzcGxpdCIsImZvckVhY2giLCJ0b0xvd2VyQ2FzZSIsInJhIiwic2EiLCJ0b1VwcGVyQ2FzZSIsInRhIiwicGEiLCJpc05hTiIsInFhIiwib2EiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsInhsaW5rSHJlZiIsInVhIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJ2YSIsIlN5bWJvbCIsImZvciIsIndhIiwieWEiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiaXRlcmF0b3IiLCJLYSIsIkxhIiwiQSIsImFzc2lnbiIsIk1hIiwic3RhY2siLCJOYSIsIk9hIiwicHJlcGFyZVN0YWNrVHJhY2UiLCJzZXQiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwibCIsImgiLCJkaXNwbGF5TmFtZSIsImluY2x1ZGVzIiwiUGEiLCJ0YWciLCJyZW5kZXIiLCJRYSIsIiQkdHlwZW9mIiwiX2NvbnRleHQiLCJfcGF5bG9hZCIsIl9pbml0IiwiUmEiLCJTYSIsIlRhIiwibm9kZU5hbWUiLCJWYSIsIl92YWx1ZVRyYWNrZXIiLCJnZXQiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiVWEiLCJXYSIsImNoZWNrZWQiLCJYYSIsImFjdGl2ZUVsZW1lbnQiLCJib2R5IiwiWWEiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIlphIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsImFiIiwiYmIiLCJjYiIsImRiIiwib3duZXJEb2N1bWVudCIsImViIiwiZmIiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsImRpc2FibGVkIiwiZ2IiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImNoaWxkcmVuIiwiaGIiLCJpYiIsImpiIiwidGV4dENvbnRlbnQiLCJrYiIsImxiIiwibWIiLCJuYiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsInZhbHVlT2YiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJvYiIsImxhc3RDaGlsZCIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwicGIiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImFzcGVjdFJhdGlvIiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwicWIiLCJyYiIsInNiIiwiaW5kZXhPZiIsImtleXMiLCJzdWJzdHJpbmciLCJ0YiIsIm1lbnVpdGVtIiwiYXJlYSIsImJhc2UiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJpbnB1dCIsImtleWdlbiIsImxpbmsiLCJtZXRhIiwicGFyYW0iLCJ0cmFjayIsIndiciIsInViIiwidmIiLCJpcyIsIndiIiwieGIiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwieWIiLCJ6YiIsIkFiIiwiQmIiLCJDYiIsInN0YXRlTm9kZSIsIkRiIiwiRWIiLCJGYiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiS2IiLCJMYiIsIk1iIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJOYiIsIm9uRXJyb3IiLCJPYiIsIlBiIiwiUWIiLCJSYiIsIlNiIiwiVGIiLCJWYiIsImFsdGVybmF0ZSIsInJldHVybiIsImZsYWdzIiwiV2IiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsIlhiIiwiWmIiLCJjaGlsZCIsInNpYmxpbmciLCJjdXJyZW50IiwiWWIiLCIkYiIsImFjIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsImJjIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJjYyIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiZGMiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJCIiwidW5zdGFibGVfbm93IiwiZWMiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsImZjIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJnYyIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiaGMiLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsImljIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJqYyIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsImtjIiwibGMiLCJvYyIsIk1hdGgiLCJjbHozMiIsInBjIiwicWMiLCJsb2ciLCJMTjIiLCJyYyIsInNjIiwidGMiLCJ1YyIsInBlbmRpbmdMYW5lcyIsInN1c3BlbmRlZExhbmVzIiwicGluZ2VkTGFuZXMiLCJlbnRhbmdsZWRMYW5lcyIsImVudGFuZ2xlbWVudHMiLCJ2YyIsInhjIiwieWMiLCJ6YyIsIkFjIiwiZXZlbnRUaW1lcyIsIkNjIiwiQyIsIkRjIiwiRWMiLCJGYyIsIkdjIiwiSGMiLCJJYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJPYyIsIk1hcCIsIlBjIiwiUWMiLCJSYyIsIlNjIiwiZGVsZXRlIiwicG9pbnRlcklkIiwiVGMiLCJuYXRpdmVFdmVudCIsImJsb2NrZWRPbiIsImRvbUV2ZW50TmFtZSIsImV2ZW50U3lzdGVtRmxhZ3MiLCJ0YXJnZXRDb250YWluZXJzIiwiVmMiLCJXYyIsInByaW9yaXR5IiwiaXNEZWh5ZHJhdGVkIiwiY29udGFpbmVySW5mbyIsIlhjIiwiWWMiLCJkaXNwYXRjaEV2ZW50Iiwic2hpZnQiLCJaYyIsIiRjIiwiYWQiLCJiZCIsImNkIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJkZCIsImVkIiwidHJhbnNpdGlvbiIsImZkIiwiZ2QiLCJoZCIsIlVjIiwic3RvcFByb3BhZ2F0aW9uIiwiamQiLCJrZCIsImxkIiwibWQiLCJuZCIsIm9kIiwia2V5Q29kZSIsImNoYXJDb2RlIiwicGQiLCJxZCIsInJkIiwiX3JlYWN0TmFtZSIsIl90YXJnZXRJbnN0IiwiY3VycmVudFRhcmdldCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNQZXJzaXN0ZW50Iiwid2QiLCJ4ZCIsInlkIiwic2QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJEYXRlIiwibm93IiwiaXNUcnVzdGVkIiwidGQiLCJ1ZCIsInZpZXciLCJkZXRhaWwiLCJ2ZCIsIkFkIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiZ2V0TW9kaWZpZXJTdGF0ZSIsInpkIiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIkJkIiwiRGQiLCJkYXRhVHJhbnNmZXIiLCJGZCIsIkhkIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIklkIiwiY2xpcGJvYXJkRGF0YSIsIkpkIiwiTGQiLCJNZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJOZCIsIk9kIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlBkIiwiUWQiLCJmcm9tQ2hhckNvZGUiLCJjb2RlIiwicmVwZWF0IiwibG9jYWxlIiwid2hpY2giLCJSZCIsIlRkIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiVmQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiWGQiLCJZZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiWmQiLCIkZCIsImFlIiwiYmUiLCJkb2N1bWVudE1vZGUiLCJjZSIsImRlIiwiZWUiLCJmZSIsImdlIiwiaGUiLCJpZSIsImxlIiwiY29sb3IiLCJkYXRlIiwiZGF0ZXRpbWUiLCJlbWFpbCIsIm1vbnRoIiwicGFzc3dvcmQiLCJyYW5nZSIsInNlYXJjaCIsInRlbCIsInRleHQiLCJ0aW1lIiwid2VlayIsIm1lIiwibmUiLCJvZSIsImV2ZW50IiwicGUiLCJxZSIsInNlIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJ4ZSIsInllIiwiemUiLCJvbmlucHV0IiwiQWUiLCJkZXRhY2hFdmVudCIsIkJlIiwiQ2UiLCJhdHRhY2hFdmVudCIsIkRlIiwiRWUiLCJGZSIsIkhlIiwiSWUiLCJKZSIsIktlIiwib2Zmc2V0IiwibmV4dFNpYmxpbmciLCJMZSIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJNZSIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudFdpbmRvdyIsImhyZWYiLCJOZSIsImNvbnRlbnRFZGl0YWJsZSIsIk9lIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImRvY3VtZW50RWxlbWVudCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwibWluIiwiZGVmYXVsdFZpZXciLCJnZXRTZWxlY3Rpb24iLCJyYW5nZUNvdW50IiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJmb2N1cyIsIlBlIiwiUWUiLCJSZSIsIlNlIiwiVGUiLCJVZSIsIlZlIiwiV2UiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJYZSIsIlllIiwiWmUiLCJhbmltYXRpb24iLCIkZSIsImFmIiwiYmYiLCJjZiIsImRmIiwiZWYiLCJmZiIsImdmIiwiaGYiLCJsZiIsIm1mIiwibmYiLCJVYiIsImluc3RhbmNlIiwibGlzdGVuZXIiLCJEIiwib2YiLCJoYXMiLCJwZiIsInFmIiwicmYiLCJyYW5kb20iLCJzZiIsImJpbmQiLCJjYXB0dXJlIiwicGFzc2l2ZSIsIm4iLCJ0IiwiSiIsIngiLCJ1IiwidyIsIkYiLCJ0ZiIsInVmIiwicGFyZW50V2luZG93IiwidmYiLCJ3ZiIsIm5hIiwieGEiLCIkYSIsImJhIiwiamUiLCJjaGFyIiwia2UiLCJ1bnNoaWZ0IiwieGYiLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkNmIiwiRGYiLCJFZiIsIl9faHRtbCIsIkZmIiwiR2YiLCJIZiIsIlByb21pc2UiLCJKZiIsInF1ZXVlTWljcm90YXNrIiwicmVzb2x2ZSIsInRoZW4iLCJjYXRjaCIsIklmIiwiS2YiLCJMZiIsIk1mIiwicHJldmlvdXNTaWJsaW5nIiwiTmYiLCJPZiIsIlBmIiwiUWYiLCJSZiIsIlNmIiwiVGYiLCJVZiIsIkUiLCJHIiwiVmYiLCJIIiwiV2YiLCJYZiIsIllmIiwiY29udGV4dFR5cGVzIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiWmYiLCJjaGlsZENvbnRleHRUeXBlcyIsIiRmIiwiYWciLCJiZyIsImdldENoaWxkQ29udGV4dCIsImNnIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJkZyIsImVnIiwiZmciLCJnZyIsImhnIiwiamciLCJrZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJxZyIsInJnIiwic2ciLCJ0ZyIsInVnIiwidmciLCJ3ZyIsInhnIiwieWciLCJJIiwiemciLCJBZyIsIkJnIiwiZGVsZXRpb25zIiwiQ2ciLCJwZW5kaW5nUHJvcHMiLCJvdmVyZmxvdyIsInRyZWVDb250ZXh0IiwicmV0cnlMYW5lIiwiRGciLCJtb2RlIiwiRWciLCJGZyIsIkdnIiwibWVtb2l6ZWRQcm9wcyIsIkhnIiwiSWciLCJKZyIsIktnIiwiTGciLCJkZWZhdWx0UHJvcHMiLCJNZyIsIk5nIiwiT2ciLCJQZyIsIlFnIiwiUmciLCJfY3VycmVudFZhbHVlIiwiU2ciLCJjaGlsZExhbmVzIiwiVGciLCJkZXBlbmRlbmNpZXMiLCJmaXJzdENvbnRleHQiLCJsYW5lcyIsIlVnIiwiVmciLCJjb250ZXh0IiwibWVtb2l6ZWRWYWx1ZSIsIm5leHQiLCJXZyIsIlhnIiwiWWciLCJpbnRlcmxlYXZlZCIsIlpnIiwiJGciLCJhaCIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiZmlyc3RCYXNlVXBkYXRlIiwibGFzdEJhc2VVcGRhdGUiLCJzaGFyZWQiLCJwZW5kaW5nIiwiZWZmZWN0cyIsImJoIiwiY2giLCJldmVudFRpbWUiLCJsYW5lIiwicGF5bG9hZCIsImNhbGxiYWNrIiwiZGgiLCJLIiwiZWgiLCJmaCIsImdoIiwicSIsInIiLCJ5IiwiaGgiLCJpaCIsImpoIiwiQ29tcG9uZW50IiwicmVmcyIsImtoIiwibmgiLCJpc01vdW50ZWQiLCJfcmVhY3RJbnRlcm5hbHMiLCJlbnF1ZXVlU2V0U3RhdGUiLCJMIiwibGgiLCJtaCIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJvaCIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwicGgiLCJjb250ZXh0VHlwZSIsInN0YXRlIiwidXBkYXRlciIsInFoIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwicmgiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsInNoIiwicmVmIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsInRoIiwidWgiLCJ2aCIsImluZGV4Iiwid2giLCJ4aCIsInloIiwiaW1wbGVtZW50YXRpb24iLCJ6aCIsIkFoIiwiZG9uZSIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiSWgiLCJ0YWdOYW1lIiwiSmgiLCJLaCIsIkxoIiwiTSIsIk1oIiwicmV2ZWFsT3JkZXIiLCJOaCIsIk9oIiwiX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnkiLCJQaCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJRaCIsIlJoIiwiTiIsIk8iLCJQIiwiU2giLCJUaCIsIlVoIiwiVmgiLCJRIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiYmkiLCJjaSIsImJhc2VRdWV1ZSIsImRpIiwiZWkiLCJmaSIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJhY3Rpb24iLCJoYXNFYWdlclN0YXRlIiwiZWFnZXJTdGF0ZSIsImxhc3RSZW5kZXJlZFN0YXRlIiwiZGlzcGF0Y2giLCJnaSIsImhpIiwiaWkiLCJqaSIsImtpIiwiZ2V0U25hcHNob3QiLCJsaSIsIm1pIiwiUiIsIm5pIiwibGFzdEVmZmVjdCIsInN0b3JlcyIsIm9pIiwicGkiLCJxaSIsInJpIiwiY3JlYXRlIiwiZGVzdHJveSIsImRlcHMiLCJzaSIsInRpIiwidWkiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwiQWkiLCJCaSIsIkNpIiwiRGkiLCJFaSIsIkZpIiwiR2kiLCJIaSIsIklpIiwiSmkiLCJyZWFkQ29udGV4dCIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VJbnNlcnRpb25FZmZlY3QiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZVN0YXRlIiwidXNlRGVidWdWYWx1ZSIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwidXNlTXV0YWJsZVNvdXJjZSIsInVzZVN5bmNFeHRlcm5hbFN0b3JlIiwidXNlSWQiLCJ1bnN0YWJsZV9pc05ld1JlY29uY2lsZXIiLCJpZGVudGlmaWVyUHJlZml4IiwiS2kiLCJtZXNzYWdlIiwiZGlnZXN0IiwiTGkiLCJNaSIsImNvbnNvbGUiLCJOaSIsIldlYWtNYXAiLCJPaSIsIlBpIiwiUWkiLCJSaSIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImNvbXBvbmVudERpZENhdGNoIiwiU2kiLCJjb21wb25lbnRTdGFjayIsIlRpIiwicGluZ0NhY2hlIiwiVWkiLCJWaSIsIldpIiwiWGkiLCJSZWFjdEN1cnJlbnRPd25lciIsIllpIiwiWmkiLCIkaSIsImFqIiwiYmoiLCJjb21wYXJlIiwiY2oiLCJkaiIsImVqIiwiYmFzZUxhbmVzIiwiY2FjaGVQb29sIiwidHJhbnNpdGlvbnMiLCJmaiIsImdqIiwiaGoiLCJpaiIsImpqIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwia2oiLCJsaiIsInBlbmRpbmdDb250ZXh0IiwibWoiLCJBaiIsIkJqIiwiQ2oiLCJEaiIsIm5qIiwib2oiLCJwaiIsImZhbGxiYWNrIiwicWoiLCJyaiIsInRqIiwiZGF0YXNldCIsImRnc3QiLCJ1aiIsInZqIiwiX3JlYWN0UmV0cnkiLCJzaiIsInN1YnRyZWVGbGFncyIsIndqIiwieGoiLCJpc0JhY2t3YXJkcyIsInJlbmRlcmluZyIsInJlbmRlcmluZ1N0YXJ0VGltZSIsImxhc3QiLCJ0YWlsIiwidGFpbE1vZGUiLCJ5aiIsIkVqIiwiUyIsIkZqIiwiR2oiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIiwib25DbGljayIsIm9uY2xpY2siLCJzaXplIiwiY3JlYXRlRWxlbWVudE5TIiwiYXV0b0ZvY3VzIiwiY3JlYXRlVGV4dE5vZGUiLCJUIiwiSGoiLCJJaiIsIkpqIiwiS2oiLCJVIiwiTGoiLCJXZWFrU2V0IiwiViIsIk1qIiwiVyIsIk5qIiwiT2oiLCJRaiIsIlJqIiwiU2oiLCJUaiIsIlVqIiwiVmoiLCJXaiIsImluc2VydEJlZm9yZSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJYaiIsIlgiLCJZaiIsIlpqIiwiYWsiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiYmsiLCJjayIsImRrIiwiZWsiLCJmayIsImlzSGlkZGVuIiwiZ2siLCJoayIsImRpc3BsYXkiLCJpayIsImprIiwia2siLCJsayIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiV2siLCJtayIsImNlaWwiLCJuayIsIm9rIiwicGsiLCJZIiwiWiIsInFrIiwicmsiLCJzayIsInRrIiwidWsiLCJJbmZpbml0eSIsInZrIiwid2siLCJ4ayIsInlrIiwiemsiLCJBayIsIkJrIiwiQ2siLCJEayIsIkVrIiwiY2FsbGJhY2tOb2RlIiwiZXhwaXJhdGlvblRpbWVzIiwiZXhwaXJlZExhbmVzIiwid2MiLCJjYWxsYmFja1ByaW9yaXR5IiwiaWciLCJGayIsIkdrIiwiSGsiLCJJayIsIkprIiwiS2siLCJMayIsIk1rIiwiTmsiLCJPayIsIlBrIiwiZmluaXNoZWRXb3JrIiwiZmluaXNoZWRMYW5lcyIsIlFrIiwidGltZW91dEhhbmRsZSIsIlJrIiwiU2siLCJUayIsIlVrIiwiVmsiLCJtdXRhYmxlUmVhZExhbmVzIiwiQmMiLCJQaiIsIm9uQ29tbWl0RmliZXJSb290IiwibWMiLCJvblJlY292ZXJhYmxlRXJyb3IiLCJYayIsIm9uUG9zdENvbW1pdEZpYmVyUm9vdCIsIllrIiwiWmsiLCJhbCIsImlzUmVhY3RDb21wb25lbnQiLCJwZW5kaW5nQ2hpbGRyZW4iLCJibCIsIm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEiLCJjbCIsImNhY2hlIiwicGVuZGluZ1N1c3BlbnNlQm91bmRhcmllcyIsImVsIiwiZmwiLCJnbCIsImhsIiwiaWwiLCJqbCIsInpqIiwiJGsiLCJsbCIsInJlcG9ydEVycm9yIiwibWwiLCJfaW50ZXJuYWxSb290IiwibmwiLCJvbCIsInBsIiwicWwiLCJzbCIsInJsIiwidW5tb3VudCIsInVuc3RhYmxlX3NjaGVkdWxlSHlkcmF0aW9uIiwic3BsaWNlIiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJ0bCIsInVzaW5nQ2xpZW50RW50cnlQb2ludCIsIkV2ZW50cyIsInVsIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsInZsIiwicmVuZGVyZXJDb25maWciLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aCIsIm92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aCIsIm92ZXJyaWRlUHJvcHMiLCJvdmVycmlkZVByb3BzRGVsZXRlUGF0aCIsIm92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoIiwic2V0RXJyb3JIYW5kbGVyIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJyZWNvbmNpbGVyVmVyc2lvbiIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsIndsIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJjcmVhdGVQb3J0YWwiLCJkbCIsImNyZWF0ZVJvb3QiLCJ1bnN0YWJsZV9zdHJpY3RNb2RlIiwiZmluZERPTU5vZGUiLCJmbHVzaFN5bmMiLCJoeWRyYXRlIiwiaHlkcmF0ZVJvb3QiLCJoeWRyYXRlZFNvdXJjZXMiLCJfZ2V0VmVyc2lvbiIsIl9zb3VyY2UiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImNoZWNrRENFIiwiQ29udGV4dENvbnN1bWVyIiwiQ29udGV4dFByb3ZpZGVyIiwiRWxlbWVudCIsIkZvcndhcmRSZWYiLCJGcmFnbWVudCIsIkxhenkiLCJNZW1vIiwiUG9ydGFsIiwiUHJvZmlsZXIiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJTdXNwZW5zZUxpc3QiLCJpc0FzeW5jTW9kZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNFbGVtZW50IiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzTGF6eSIsImlzTWVtbyIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJpc1N1c3BlbnNlTGlzdCIsImlzVmFsaWRFbGVtZW50VHlwZSIsImdldE1vZHVsZUlkIiwidHlwZU9mIiwic2V0U3RhdGUiLCJmb3JjZVVwZGF0ZSIsIl9fc2VsZiIsIl9fc291cmNlIiwiZXNjYXBlIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJDaGlsZHJlbiIsImNvdW50IiwidG9BcnJheSIsIm9ubHkiLCJQdXJlQ29tcG9uZW50IiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlQ29udGV4dCIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsIl9kZWZhdWx0VmFsdWUiLCJfZ2xvYmFsTmFtZSIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJmb3J3YXJkUmVmIiwiaXNWYWxpZEVsZW1lbnQiLCJsYXp5IiwibWVtbyIsInN0YXJ0VHJhbnNpdGlvbiIsInVuc3RhYmxlX2FjdCIsInBvcCIsInNvcnRJbmRleCIsInBlcmZvcm1hbmNlIiwic2V0SW1tZWRpYXRlIiwic3RhcnRUaW1lIiwiZXhwaXJhdGlvblRpbWUiLCJwcmlvcml0eUxldmVsIiwibmF2aWdhdG9yIiwic2NoZWR1bGluZyIsImlzSW5wdXRQZW5kaW5nIiwiTWVzc2FnZUNoYW5uZWwiLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJ1bnN0YWJsZV9Qcm9maWxpbmciLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwiZmxvb3IiLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsInVuc3RhYmxlX25leHQiLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsImRlbGF5IiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwib2JqQSIsIm9iakIiLCJjb21wYXJlQ29udGV4dCIsImtleXNBIiwia2V5c0IiLCJiSGFzT3duUHJvcGVydHkiLCJpZHgiLCJ2YWx1ZUEiLCJ2YWx1ZUIiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsInNldEF0dHJpYnV0ZXMiLCJpbnNlcnQiLCJkb21BUEkiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJsb2NhbHMiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImluZGV4QnlJZGVudGlmaWVyIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJhcGkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZ2V0VGFyZ2V0IiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJwYXJzZSIsIlN0eWxlVG9PYmplY3QiLCJvdXRwdXQiLCJoYXNJdGVyYXRvciIsIl9fYXNzaWduIiwicyIsIl9fc3ByZWFkQXJyYXkiLCJ0byIsImZyb20iLCJwYWNrIiwiYXIiLCJTdXBwcmVzc2VkRXJyb3IiLCJNUyIsIk1PWiIsIldFQktJVCIsIkNPTU1FTlQiLCJERUNMQVJBVElPTiIsIklNUE9SVCIsIktFWUZSQU1FUyIsIkxBWUVSIiwiYWJzIiwicGF0dGVybiIsInJlcGxhY2VtZW50IiwiaW5kZXhvZiIsImNoYXJDb2RlQXQiLCJiZWdpbiIsImZpbHRlciIsImNoYXJhY3RlciIsImNoYXJhY3RlcnMiLCJyb290IiwicGFyZW50Iiwic2libGluZ3MiLCJsaWZ0IiwicHJldiIsInBlZWsiLCJjYXJldCIsInRva2VuIiwiZGVsaW1pdCIsImRlbGltaXRlciIsImVzY2FwaW5nIiwiY29tbWVudGVyIiwic2VyaWFsaXplIiwicHJlZml4Iiwic29tZSIsIl8iLCJwcmVmaXhlciIsImNvbXBpbGUiLCJkZWFsbG9jIiwiYWxsb2MiLCJydWxlIiwicnVsZXNldHMiLCJwc2V1ZG8iLCJwb2ludHMiLCJhdHJ1bGUiLCJwcmV2aW91cyIsInZhcmlhYmxlIiwic2Nhbm5pbmciLCJhbXBlcnNhbmQiLCJyZWZlcmVuY2UiLCJydWxlc2V0IiwicG9zdCIsImoiLCJ1bml0bGVzc0tleXMiLCJtc0dyaWRSb3ciLCJtc0dyaWRSb3dTcGFuIiwibXNHcmlkQ29sdW1uIiwibXNHcmlkQ29sdW1uU3BhbiIsIldlYmtpdExpbmVDbGFtcCIsIlJFQUNUX0FQUF9TQ19BVFRSIiwiU0NfQVRUUiIsIkJvb2xlYW4iLCJTQ19ESVNBQkxFX1NQRUVEWSIsIlJFQUNUX0FQUF9TQ19ESVNBQkxFX1NQRUVEWSIsImZyZWV6ZSIsInRoZW1lIiwiJCIsImdldERlZmF1bHRQcm9wcyIsIm1peGlucyIsInByb3BUeXBlcyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldFByb3RvdHlwZU9mIiwibyIsImdyb3VwU2l6ZXMiLCJVaW50MzJBcnJheSIsImluZGV4T2ZHcm91cCIsImluc2VydFJ1bGVzIiwiaW5zZXJ0UnVsZSIsImNsZWFyR3JvdXAiLCJkZWxldGVSdWxlIiwiZ2V0R3JvdXAiLCJnZXRSdWxlIiwiUmVnRXhwIiwicmVnaXN0ZXJOYW1lIiwicGFyc2VJbnQiLCJnZXRUYWciLCJzaGVldCIsInN0eWxlU2hlZXRzIiwib3duZXJOb2RlIiwiY3NzUnVsZXMiLCJub2RlcyIsImNoaWxkTm9kZXMiLCJfZSIsImlzU2VydmVyIiwidXNlQ1NTT01JbmplY3Rpb24iLCJncyIsIm5hbWVzIiwic2VydmVyIiwiZ2V0QXR0cmlidXRlIiwicmVnaXN0ZXJJZCIsInJlY29uc3RydWN0V2l0aE9wdGlvbnMiLCJhbGxvY2F0ZUdTSW5zdGFuY2UiLCJoYXNOYW1lRm9ySWQiLCJjbGVhck5hbWVzIiwiY2xlYXIiLCJjbGVhclJ1bGVzIiwiY2xlYXJUYWciLCJyZXBsYWNlQWxsIiwicGx1Z2lucyIsInN0YXJ0c1dpdGgiLCJlbmRzV2l0aCIsIm5hbWVzcGFjZSIsImNvbGxlY3Rpb24iLCJyZWR1Y2UiLCJzaG91bGRGb3J3YXJkUHJvcCIsInN0eWxpcyIsInN0eWxpc1BsdWdpbnMiLCJkaXNhYmxlQ1NTT01JbmplY3Rpb24iLCJlbmFibGVWZW5kb3JQcmVmaXhlcyIsImdldE5hbWUiLCJpc0NzcyIsIkdlIiwic3R5bGVkQ29tcG9uZW50SWQiLCJzdGF0aWNSdWxlc0lkIiwiaXNTdGF0aWMiLCJjb21wb25lbnRJZCIsImJhc2VIYXNoIiwiYmFzZVN0eWxlIiwiZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMiLCJhdHRycyIsInBhcmVudENvbXBvbmVudElkIiwiY29tcG9uZW50U3R5bGUiLCJmb2xkZWRDb21wb25lbnRJZHMiLCJjbGFzc05hbWUiLCJhcyIsImZvcndhcmRlZEFzIiwiX2ZvbGRlZERlZmF1bHRQcm9wcyIsImV0IiwidHQiLCJudCIsIm90Iiwid2l0aENvbmZpZyIsInJ0Iiwic3QiLCJpdCIsImNyZWF0ZVN0eWxlcyIsInJlbW92ZVN0eWxlcyIsInJlbmRlclN0eWxlcyIsImF0IiwiX2VtaXRTaGVldENTUyIsImdldFN0eWxlVGFncyIsInNlYWxlZCIsImdldFN0eWxlRWxlbWVudCIsInNlYWwiLCJjb2xsZWN0U3R5bGVzIiwiaW50ZXJsZWF2ZVdpdGhOb2RlU3RyZWFtIiwib3duIiwic3RyaW5naWZ5UG9zaXRpb24iLCJwb2ludCIsIlZGaWxlTWVzc2FnZSIsInBsYWNlIiwib3JpZ2luIiwicGFydHMiLCJzdXBlciIsInJ1bGVJZCIsImZpbGUiLCJmYXRhbCIsIm5vdGUiLCJwYXRoIiwiZXh0IiwiYXNzZXJ0UGF0aCIsInNlZW5Ob25TbGFzaCIsImZpcnN0Tm9uU2xhc2hFbmQiLCJleHRJbmRleCIsInVubWF0Y2hlZFNsYXNoIiwic3RhcnRQYXJ0Iiwic3RhcnREb3QiLCJwcmVEb3RTdGF0ZSIsInNlZ21lbnRzIiwiam9pbmVkIiwiYWJzb2x1dGUiLCJhbGxvd0Fib3ZlUm9vdCIsImxhc3RTbGFzaEluZGV4IiwibGFzdFNlZ21lbnRMZW5ndGgiLCJsYXN0U2xhc2giLCJkb3RzIiwibm9ybWFsaXplU3RyaW5nIiwibm9ybWFsaXplIiwicHJvYyIsImlzVXJsIiwiZmlsZVVSTE9yUGF0aCIsIlZGaWxlIiwibWVzc2FnZXMiLCJoaXN0b3J5Iiwic3RvcmVkIiwicHJvdG9jb2wiLCJob3N0bmFtZSIsInBhdGhuYW1lIiwidGhpcmQiLCJkZWNvZGVVUklDb21wb25lbnQiLCJnZXRQYXRoRnJvbVVSTFBvc2l4IiwidXJsVG9QYXRoIiwiYXNzZXJ0Tm9uRW1wdHkiLCJkaXJuYW1lIiwiYmFzZW5hbWUiLCJhc3NlcnRQYXJ0IiwiZXh0bmFtZSIsInN0ZW0iLCJlbmNvZGluZyIsImluZm8iLCJmYWlsIiwicGFydCIsImJhaWwiLCJ1bmlmaWVkIiwidHJhbnNmb3JtZXJzIiwiZm5zIiwicGlwZWxpbmUiLCJ2YWx1ZXMiLCJtaWRkbGV3YXJlSW5kZXgiLCJmbiIsIm1pZGRsZXdhcmUiLCJjYWxsZWQiLCJwYXJhbWV0ZXJzIiwiZm5FeHBlY3RzQ2FsbGJhY2siLCJ3cmFwIiwidXNlIiwibWlkZGVsd2FyZSIsInRyb3VnaCIsImF0dGFjaGVycyIsImZyb3plbiIsImZyZWV6ZUluZGV4IiwicHJvY2Vzc29yIiwiYXNzZXJ0VW5mcm96ZW4iLCJQYXJzZXIiLCJDb21waWxlciIsImF0dGFjaGVyIiwidHJhbnNmb3JtZXIiLCJOdW1iZXIiLCJQT1NJVElWRV9JTkZJTklUWSIsInNldHRpbmdzIiwiYWRkUGx1Z2luIiwiYWRkTGlzdCIsImFkZFByZXNldCIsInBsdWdpbiIsImVudHJ5IiwiZG9jIiwidmZpbGUiLCJhc3NlcnRQYXJzZXIiLCJuZXdhYmxlIiwiYXNzZXJ0Q29tcGlsZXIiLCJhc3NlcnROb2RlIiwiZXhlY3V0b3IiLCJyZWplY3QiLCJ0cmVlIiwicnVuU3luYyIsImNvbXBsZXRlIiwiYXNzZXJ0RG9uZSIsInByb2Nlc3NTeW5jIiwiZGVzdGluYXRpb24iLCJhc3luY05hbWUiLCJsb29rc0xpa2VBVkZpbGUiLCJvbmUiLCJpbmNsdWRlSW1hZ2VBbHQiLCJhbHQiLCJpdGVtcyIsImNodW5rU3RhcnQiLCJzeW50YXhFeHRlbnNpb24iLCJhbGwiLCJleHRlbnNpb24iLCJob29rIiwicmlnaHQiLCJjb25zdHJ1Y3RzIiwiZXhpc3RpbmciLCJiZWZvcmUiLCJhc2NpaUFscGhhIiwicmVnZXhDaGVjayIsImFzY2lpRGlnaXQiLCJhc2NpaUhleERpZ2l0IiwiYXNjaWlBbHBoYW51bWVyaWMiLCJhc2NpaVB1bmN0dWF0aW9uIiwiYXNjaWlBdGV4dCIsImFzY2lpQ29udHJvbCIsIm1hcmtkb3duTGluZUVuZGluZ09yU3BhY2UiLCJtYXJrZG93bkxpbmVFbmRpbmciLCJtYXJrZG93blNwYWNlIiwidW5pY29kZVdoaXRlc3BhY2UiLCJ1bmljb2RlUHVuY3R1YXRpb24iLCJyZWdleCIsImZhY3RvcnlTcGFjZSIsIm1heCIsImxpbWl0IiwiZW50ZXIiLCJjb25zdW1lIiwiZXhpdCIsInRva2VuaXplIiwiY29udGVudFN0YXJ0IiwiYXR0ZW1wdCIsInBhcnNlciIsImNvbnRlbnRJbml0aWFsIiwibGluZVN0YXJ0IiwiY29udGVudFR5cGUiLCJzZWxmIiwiY2hpbGRGbG93IiwiY2hpbGRUb2tlbiIsImxpbmVTdGFydE9mZnNldCIsImNvbnRpbnVlZCIsImNvbnRhaW5lclN0YXRlIiwiY29udGludWF0aW9uIiwiZG9jdW1lbnRDb250aW51ZSIsImNoZWNrTmV3Q29udGFpbmVycyIsIl9jbG9zZUZsb3ciLCJjbG9zZUZsb3ciLCJpbmRleEJlZm9yZUV4aXRzIiwiZXZlbnRzIiwiaW5kZXhCZWZvcmVGbG93IiwiZXhpdENvbnRhaW5lcnMiLCJkb2N1bWVudENvbnRpbnVlZCIsImN1cnJlbnRDb25zdHJ1Y3QiLCJjb25jcmV0ZSIsImZsb3dTdGFydCIsImludGVycnVwdCIsImNoZWNrIiwiY29udGFpbmVyQ29uc3RydWN0IiwidGhlcmVJc0FOZXdDb250YWluZXIiLCJ0aGVyZUlzTm9OZXdDb250YWluZXIiLCJjb250YWluZXJDb250aW51ZSIsImZsb3ciLCJfdG9rZW5pemVyIiwiZmxvd0NvbnRpbnVlIiwid3JpdGVUb0NoaWxkIiwiZW9mIiwic3RyZWFtIiwic2xpY2VTdHJlYW0iLCJkZWZpbmVTa2lwIiwid3JpdGUiLCJzZWVuIiwibm9rIiwiZGlzYWJsZSIsIm51bGwiLCJibGFua0xpbmUiLCJwYXJ0aWFsIiwic3VidG9rZW5pemUiLCJqdW1wcyIsImxpbmVJbmRleCIsIm90aGVySW5kZXgiLCJvdGhlckV2ZW50Iiwic3ViZXZlbnRzIiwibW9yZSIsIl9pc0luRmlyc3RDb250ZW50T2ZMaXN0SXRlbSIsInN1YmNvbnRlbnQiLCJfY29udGFpbmVyIiwiZXZlbnRJbmRleCIsInN0YXJ0UG9zaXRpb24iLCJzdGFydFBvc2l0aW9ucyIsInRva2VuaXplciIsImNoaWxkRXZlbnRzIiwiZ2FwcyIsImFkanVzdCIsImJyZWFrcyIsIl9nZm1UYXNrbGlzdEZpcnN0Q29udGVudE9mTGlzdEl0ZW0iLCJjb250ZW50RW5kIiwiY29udGludWF0aW9uQ29uc3RydWN0IiwiY29udGVudENvbnRpbnVlIiwicHJlZml4ZWQiLCJzbGljZVNlcmlhbGl6ZSIsImluaXRpYWwiLCJmbG93SW5pdGlhbCIsImFmdGVyQ29uc3RydWN0IiwicmVzb2x2ZXIiLCJyZXNvbHZlQWxsIiwiY3JlYXRlUmVzb2x2ZXIiLCJpbml0aWFsaXplRmFjdG9yeSIsImZpZWxkIiwibm90VGV4dCIsImF0QnJlYWsiLCJyZXNvbHZlQWxsTGluZVN1ZmZpeGVzIiwiZXh0cmFSZXNvbHZlciIsImNodW5rcyIsInRhYnMiLCJidWZmZXJJbmRleCIsImNodW5rIiwiX2J1ZmZlckluZGV4IiwiY3JlYXRlVG9rZW5pemVyIiwiaW5pdGlhbGl6ZSIsImNvbHVtblN0YXJ0IiwicmVzb2x2ZUFsbENvbnN0cnVjdHMiLCJjb25zdW1lZCIsImFjY291bnRGb3JQb3RlbnRpYWxTa2lwIiwiZmllbGRzIiwiY29uc3RydWN0RmFjdG9yeSIsImFkZFJlc3VsdCIsIm9uc3VjY2Vzc2Z1bGNoZWNrIiwiZXhwYW5kVGFicyIsImF0VGFiIiwic2VyaWFsaXplQ2h1bmtzIiwiY2h1bmtJbmRleCIsImdvIiwibWFpbiIsImV4cGVjdGVkQ29kZSIsInN0YXJ0SW5kZXgiLCJzdGFydEJ1ZmZlckluZGV4IiwiZW5kSW5kZXgiLCJlbmRCdWZmZXJJbmRleCIsInNsaWNlQ2h1bmtzIiwicmVzdG9yZSIsIm9ucmV0dXJuIiwicmV0dXJuU3RhdGUiLCJib2d1c1N0YXRlIiwibGlzdE9mQ29uc3RydWN0cyIsImNvbnN0cnVjdEluZGV4IiwiaGFuZGxlTGlzdE9mQ29uc3RydWN0cyIsImRlZiIsImhhbmRsZUNvbnN0cnVjdCIsInN0YXJ0UG9pbnQiLCJzdGFydFByZXZpb3VzIiwic3RhcnRDdXJyZW50Q29uc3RydWN0Iiwic3RhcnRFdmVudHNJbmRleCIsInN0YXJ0U3RhY2siLCJzdG9yZSIsInJlc29sdmVUbyIsInRoZW1hdGljQnJlYWsiLCJzZXF1ZW5jZSIsImluaXRpYWxTaXplIiwia2luZCIsImF0TWFya2VyIiwiaW5zaWRlIiwib25CbGFuayIsImxpc3RJdGVtUHJlZml4V2hpdGVzcGFjZUNvbnN0cnVjdCIsImVuZE9mUHJlZml4Iiwib3RoZXJQcmVmaXgiLCJpbml0aWFsQmxhbmtMaW5lIiwiZnVydGhlckJsYW5rTGluZXMiLCJub3RJbkN1cnJlbnRJdGVtIiwiaW5kZW50Q29uc3RydWN0IiwiYmxvY2tRdW90ZSIsIm9wZW4iLCJhZnRlciIsImZhY3RvcnlEZXN0aW5hdGlvbiIsImxpdGVyYWxUeXBlIiwibGl0ZXJhbE1hcmtlclR5cGUiLCJyYXdUeXBlIiwic3RyaW5nVHlwZSIsImJhbGFuY2UiLCJkZXN0aW5hdGlvbkVuY2xvc2VkQmVmb3JlIiwiZGVzdGluYXRpb25SYXciLCJkZXN0aW5hdGlvbkVuY2xvc2VkIiwiZGVzdGluYXRpb25FbmNsb3NlZEVzY2FwZSIsImRlc3RpbmF0aW9uUmF3RXNjYXBlIiwiZmFjdG9yeUxhYmVsIiwibWFya2VyVHlwZSIsImxhYmVsIiwibGFiZWxFc2NhcGUiLCJmYWN0b3J5VGl0bGUiLCJhdEZpcnN0VGl0bGVCcmVhayIsImF0VGl0bGVCcmVhayIsInRpdGxlRXNjYXBlIiwiZmFjdG9yeVdoaXRlc3BhY2UiLCJub3JtYWxpemVJZGVudGlmaWVyIiwiZGVmaW5pdGlvbiIsImxhYmVsQWZ0ZXIiLCJ0aXRsZUNvbnN0cnVjdCIsImRlZmluZWQiLCJjb2RlSW5kZW50ZWQiLCJhZnRlclN0YXJ0UHJlZml4IiwiYWZ0ZXJQcmVmaXgiLCJpbmRlbnRlZENvbnRlbnQiLCJoZWFkaW5nQXR4IiwiZmVuY2VPcGVuSW5zaWRlIiwiaGVhZGluZ0JyZWFrIiwic2V0ZXh0VW5kZXJsaW5lIiwicGFyYWdyYXBoIiwiY2xvc2luZ1NlcXVlbmNlIiwiY2xvc2luZ1NlcXVlbmNlRW5kIiwiaGVhZGluZyIsImh0bWxCbG9ja05hbWVzIiwiaHRtbFJhd05hbWVzIiwiaHRtbEZsb3ciLCJzdGFydFRhZyIsImJ1ZmZlciIsImRlY2xhcmF0aW9uU3RhcnQiLCJ0YWdDbG9zZVN0YXJ0IiwiY29udGludWF0aW9uRGVjbGFyYXRpb25JbnNpZGUiLCJjb21tZW50T3Blbkluc2lkZSIsImNkYXRhT3Blbkluc2lkZSIsImJhc2ljU2VsZkNsb3NpbmciLCJjb21wbGV0ZUF0dHJpYnV0ZU5hbWVCZWZvcmUiLCJjb21wbGV0ZUNsb3NpbmdUYWdBZnRlciIsImNvbXBsZXRlRW5kIiwiY29tcGxldGVBdHRyaWJ1dGVOYW1lIiwiY29tcGxldGVBdHRyaWJ1dGVOYW1lQWZ0ZXIiLCJjb21wbGV0ZUF0dHJpYnV0ZVZhbHVlQmVmb3JlIiwiY29tcGxldGVBdHRyaWJ1dGVWYWx1ZVF1b3RlZCIsImNvbXBsZXRlQXR0cmlidXRlVmFsdWVVbnF1b3RlZCIsImNvbXBsZXRlQXR0cmlidXRlVmFsdWVRdW90ZWRBZnRlciIsImNvbXBsZXRlQWZ0ZXIiLCJjb250aW51YXRpb25Db21tZW50SW5zaWRlIiwiY29udGludWF0aW9uUmF3VGFnT3BlbiIsImNvbnRpbnVhdGlvbkNsb3NlIiwiY29udGludWF0aW9uQ2hhcmFjdGVyRGF0YUluc2lkZSIsImNvbnRpbnVhdGlvbkF0TGluZUVuZGluZyIsIm5leHRCbGFua0NvbnN0cnVjdCIsImh0bWxDb250aW51ZVN0YXJ0IiwiaHRtbExpbmVFbmQiLCJjb250aW51YXRpb25SYXdFbmRUYWciLCJjb2RlRmVuY2VkIiwiY2xvc2luZ0ZlbmNlQ29uc3RydWN0Iiwic2l6ZU9wZW4iLCJub25MYXp5TGluZSIsImluaXRpYWxQcmVmaXgiLCJzZXF1ZW5jZU9wZW4iLCJpbmZvT3BlbiIsIm9wZW5BZnRlciIsImluZm9BZnRlciIsInNlbWljb2xvbiIsImRlY29kZUVudGl0eSIsImVudGl0eSIsImNoYXJhY3RlclJlZmVyZW5jZSIsIm51bWVyaWMiLCJjaGFyYWN0ZXJFc2NhcGUiLCJsaW5lRW5kaW5nIiwibGFiZWxFbmQiLCJsYWJlbFN0YXJ0IiwiX2JhbGFuY2VkIiwiX2luYWN0aXZlIiwiYmFsYW5jZWQiLCJhZnRlckxhYmVsRW5kIiwicmVzb3VyY2VDb25zdHJ1Y3QiLCJmdWxsUmVmZXJlbmNlQ29uc3RydWN0IiwiY29sbGFwc2VkUmVmZXJlbmNlQ29uc3RydWN0IiwiY2xvc2UiLCJncm91cCIsImluc2lkZVNwYW4iLCJkZXN0aW5hdGlvbkFmdGVyIiwiYmV0d2VlbiIsImFmdGVyTGFiZWwiLCJsYWJlbFN0YXJ0SW1hZ2UiLCJjbGFzc2lmeUNoYXJhY3RlciIsImF0dGVudGlvbiIsImF0dGVudGlvbk1hcmtlcnMiLCJfb3BlbiIsIl9jbG9zZSIsIm9wZW5pbmdTZXF1ZW5jZSIsIm5leHRFdmVudHMiLCJtb3ZlUG9pbnQiLCJhdXRvbGluayIsInNjaGVtZU9yRW1haWxBdGV4dCIsImVtYWlsQXRleHQiLCJzY2hlbWVJbnNpZGVPckVtYWlsQXRleHQiLCJ1cmxJbnNpZGUiLCJlbWFpbEF0U2lnbk9yRG90IiwiZW1haWxMYWJlbCIsImVtYWlsVmFsdWUiLCJodG1sVGV4dCIsImRlY2xhcmF0aW9uT3BlbiIsImluc3RydWN0aW9uIiwidGFnT3BlbiIsImNvbW1lbnRPcGVuIiwiY2RhdGFPcGVuIiwiY29tbWVudFN0YXJ0IiwiY29tbWVudFN0YXJ0RGFzaCIsImNvbW1lbnRDbG9zZSIsImF0TGluZUVuZGluZyIsImNkYXRhIiwiY2RhdGFDbG9zZSIsImNkYXRhRW5kIiwiaW5zdHJ1Y3Rpb25DbG9zZSIsInRhZ0Nsb3NlIiwidGFnQ2xvc2VCZXR3ZWVuIiwidGFnT3BlbkJldHdlZW4iLCJ0YWdPcGVuQXR0cmlidXRlTmFtZSIsInRhZ09wZW5BdHRyaWJ1dGVOYW1lQWZ0ZXIiLCJ0YWdPcGVuQXR0cmlidXRlVmFsdWVCZWZvcmUiLCJ0YWdPcGVuQXR0cmlidXRlVmFsdWVRdW90ZWQiLCJ0YWdPcGVuQXR0cmlidXRlVmFsdWVVbnF1b3RlZCIsInRhZ09wZW5BdHRyaWJ1dGVWYWx1ZVF1b3RlZEFmdGVyIiwibGFiZWxTdGFydExpbmsiLCJoYXJkQnJlYWtFc2NhcGUiLCJjb2RlVGV4dCIsImdhcCIsInRhaWxFeGl0SW5kZXgiLCJoZWFkRW50ZXJJbmRleCIsImRlY29kZU51bWVyaWNDaGFyYWN0ZXJSZWZlcmVuY2UiLCJjaGFyYWN0ZXJFc2NhcGVPclJlZmVyZW5jZSIsImRlY29kZSIsIiQwIiwiJDEiLCIkMiIsImhleCIsImZyb21NYXJrZG93biIsImNvbmZpZyIsImNvbmZpZ3VyZSIsInRyYW5zZm9ybXMiLCJjYW5Db250YWluRW9scyIsIm9wZW5lciIsImF1dG9saW5rUHJvdG9jb2wiLCJvbmVudGVyZGF0YSIsImF1dG9saW5rRW1haWwiLCJhdHhIZWFkaW5nIiwiY29kZUZsb3ciLCJjb2RlRmVuY2VkRmVuY2VJbmZvIiwiY29kZUZlbmNlZEZlbmNlTWV0YSIsImNvZGVUZXh0RGF0YSIsImNvZGVGbG93VmFsdWUiLCJkZWZpbml0aW9uRGVzdGluYXRpb25TdHJpbmciLCJkZWZpbml0aW9uTGFiZWxTdHJpbmciLCJkZWZpbml0aW9uVGl0bGVTdHJpbmciLCJlbXBoYXNpcyIsImhhcmRCcmVhayIsImhhcmRCcmVha1RyYWlsaW5nIiwiaHRtbCIsImh0bWxGbG93RGF0YSIsImh0bWxUZXh0RGF0YSIsImltYWdlIiwibGlzdEl0ZW0iLCJzcHJlYWQiLCJfc3ByZWFkIiwibGlzdEl0ZW1WYWx1ZSIsImdldERhdGEiLCJzZXREYXRhIiwibGlzdE9yZGVyZWQiLCJsaXN0VW5vcmRlcmVkIiwicmVmZXJlbmNlU3RyaW5nIiwicmVzb3VyY2VEZXN0aW5hdGlvblN0cmluZyIsInJlc291cmNlVGl0bGVTdHJpbmciLCJzZXRleHRIZWFkaW5nIiwic3Ryb25nIiwiY2xvc2VyIiwiYXR4SGVhZGluZ1NlcXVlbmNlIiwiZGVwdGgiLCJvbmV4aXRkYXRhIiwiY2hhcmFjdGVyRXNjYXBlVmFsdWUiLCJjaGFyYWN0ZXJSZWZlcmVuY2VNYXJrZXJIZXhhZGVjaW1hbCIsIm9uZXhpdGNoYXJhY3RlcnJlZmVyZW5jZW1hcmtlciIsImNoYXJhY3RlclJlZmVyZW5jZU1hcmtlck51bWVyaWMiLCJjaGFyYWN0ZXJSZWZlcmVuY2VWYWx1ZSIsInJlc3VtZSIsImNvZGVGZW5jZWRGZW5jZSIsImxhbmciLCJvbmV4aXRoYXJkYnJlYWsiLCJyZWZlcmVuY2VUeXBlIiwiZnJhZ21lbnQiLCJsYWJlbFRleHQiLCJhbmNlc3RvciIsImRlY29kZVN0cmluZyIsInJlc291cmNlIiwic2V0ZXh0SGVhZGluZ0xpbmVTZXF1ZW5jZSIsInNldGV4dEhlYWRpbmdUZXh0IiwibWRhc3RFeHRlbnNpb25zIiwidG9rZW5TdGFjayIsImxpc3RTdGFjayIsInByZXBhcmVMaXN0IiwiaGFuZGxlciIsImZpcnN0QmxhbmtMaW5lSW5kZXgiLCJjb250YWluZXJCYWxhbmNlIiwibGlzdFNwcmVhZCIsInRhaWxJbmRleCIsInRhaWxFdmVudCIsImFuZCIsIm9yZGVyZWQiLCJjb21waWxlciIsInBvc3Rwcm9jZXNzIiwiZXh0ZW5zaW9ucyIsImNvbWJpbmVFeHRlbnNpb25zIiwiYXRDYXJyaWFnZVJldHVybiIsImVuZFBvc2l0aW9uIiwibGFzdEluZGV4IiwicHJlcHJvY2VzcyIsImNvbWJpbmVkIiwibm9ybWFsaXplVXJpIiwic2tpcCIsImNvbnZlcnQiLCJjYXN0RmFjdG9yeSIsInRlc3RzIiwiY2hlY2tzIiwiYW55RmFjdG9yeSIsInByb3BzRmFjdG9yeSIsIkVYSVQiLCJ2aXNpdCIsInZpc2l0b3IiLCJyZXZlcnNlIiwic3RlcCIsImZhY3RvcnkiLCJwYXJlbnRzIiwic3VicmVzdWx0IiwiZ3JhbmRwYXJlbnRzIiwidG9SZXN1bHQiLCJ2aXNpdFBhcmVudHMiLCJwb2ludFN0YXJ0IiwicG9pbnRFbmQiLCJjbGVhbiIsImZvb3Rub3RlUmVmZXJlbmNlIiwic2FmZUlkIiwiZm9vdG5vdGVPcmRlciIsImNvdW50ZXIiLCJmb290bm90ZUNvdW50cyIsInJldXNlQ291bnRlciIsInByb3BlcnRpZXMiLCJjbG9iYmVyUHJlZml4IiwiZGF0YUZvb3Rub3RlUmVmIiwiYXJpYURlc2NyaWJlZEJ5IiwicGF0Y2giLCJzdXAiLCJhcHBseURhdGEiLCJyZXZlcnQiLCJzdWJ0eXBlIiwic3VmZml4IiwiY29udGVudHMiLCJsaXN0SXRlbUxvb3NlIiwidGFiIiwic3BhY2UiLCJ0cmltTGluZXMiLCJ0cmltTGluZSIsImNvZGVQb2ludEF0IiwiaGFuZGxlcnMiLCJibG9ja3F1b3RlIiwiYnJlYWsiLCJmb290bm90ZSIsImZvb3Rub3RlQnlJZCIsIm5vIiwiZGFuZ2Vyb3VzIiwiaW1hZ2VSZWZlcmVuY2UiLCJpbmxpbmVDb2RlIiwibGlua1JlZmVyZW5jZSIsInJlc3VsdHMiLCJsb29zZSIsImxpc3RMb29zZSIsInRhYmxlIiwicm93cyIsImZpcnN0Um93IiwidGFibGVDb250ZW50IiwidGFibGVDZWxsIiwidGFibGVSb3ciLCJhbGlnbiIsImNlbGxJbmRleCIsImNlbGxzIiwiY2VsbCIsImFsaWduVmFsdWUiLCJ0b21sIiwiaWdub3JlIiwieWFtbCIsImZvb3Rub3RlRGVmaW5pdGlvbiIsImhOYW1lIiwiaENoaWxkcmVuIiwiaFByb3BlcnRpZXMiLCJwYXNzVGhyb3VnaCIsInVua25vd25IYW5kbGVyIiwiZGVmYXVsdFVua25vd25IYW5kbGVyIiwidG9IYXN0IiwiYWxsb3dEYW5nZXJvdXNIdG1sIiwiZm9vdG5vdGVMYWJlbCIsImZvb3Rub3RlTGFiZWxUYWdOYW1lIiwiZm9vdG5vdGVMYWJlbFByb3BlcnRpZXMiLCJmb290bm90ZUJhY2tMYWJlbCIsImRlZmluaXRpb25zIiwiYXVnbWVudCIsImN0eCIsImNyZWF0ZVN0YXRlIiwiZm9vdCIsImxpc3RJdGVtcyIsInJlZmVyZW5jZUluZGV4IiwiYmFja1JlZmVyZW5jZXMiLCJiYWNrUmVmZXJlbmNlIiwiZGF0YUZvb3Rub3RlQmFja3JlZiIsImFyaWFMYWJlbCIsInRhaWxUYWlsIiwiZGF0YUZvb3Rub3RlcyIsImZvb3RlciIsImJyaWRnZSIsIm11dGF0ZSIsIlNjaGVtYSIsIm5vcm1hbCIsIm1lcmdlIiwiSW5mbyIsImF0dHJpYnV0ZSIsImJvb2xlYW4iLCJib29sZWFuaXNoIiwib3ZlcmxvYWRlZEJvb2xlYW4iLCJjb21tYVNlcGFyYXRlZCIsInNwYWNlU2VwYXJhdGVkIiwiY29tbWFPclNwYWNlU2VwYXJhdGVkIiwicG93ZXJzIiwiaW5jcmVtZW50IiwiRGVmaW5lZEluZm8iLCJtYXNrIiwibWFyayIsInRyYW5zZm9ybSIsInhsaW5rIiwieExpbmtBY3R1YXRlIiwieExpbmtBcmNSb2xlIiwieExpbmtIcmVmIiwieExpbmtSb2xlIiwieExpbmtTaG93IiwieExpbmtUaXRsZSIsInhMaW5rVHlwZSIsInhtbCIsInhtbExhbmciLCJ4bWxCYXNlIiwieG1sU3BhY2UiLCJjYXNlU2Vuc2l0aXZlVHJhbnNmb3JtIiwiY2FzZUluc2Vuc2l0aXZlVHJhbnNmb3JtIiwieG1sbnMiLCJ4bWxuc3hsaW5rIiwieG1sbnNYTGluayIsImFyaWEiLCJhcmlhQWN0aXZlRGVzY2VuZGFudCIsImFyaWFBdG9taWMiLCJhcmlhQXV0b0NvbXBsZXRlIiwiYXJpYUJ1c3kiLCJhcmlhQ2hlY2tlZCIsImFyaWFDb2xDb3VudCIsImFyaWFDb2xJbmRleCIsImFyaWFDb2xTcGFuIiwiYXJpYUNvbnRyb2xzIiwiYXJpYUN1cnJlbnQiLCJhcmlhRGV0YWlscyIsImFyaWFEaXNhYmxlZCIsImFyaWFEcm9wRWZmZWN0IiwiYXJpYUVycm9yTWVzc2FnZSIsImFyaWFFeHBhbmRlZCIsImFyaWFGbG93VG8iLCJhcmlhR3JhYmJlZCIsImFyaWFIYXNQb3B1cCIsImFyaWFIaWRkZW4iLCJhcmlhSW52YWxpZCIsImFyaWFLZXlTaG9ydGN1dHMiLCJhcmlhTGFiZWxsZWRCeSIsImFyaWFMZXZlbCIsImFyaWFMaXZlIiwiYXJpYU1vZGFsIiwiYXJpYU11bHRpTGluZSIsImFyaWFNdWx0aVNlbGVjdGFibGUiLCJhcmlhT3JpZW50YXRpb24iLCJhcmlhT3ducyIsImFyaWFQbGFjZWhvbGRlciIsImFyaWFQb3NJblNldCIsImFyaWFQcmVzc2VkIiwiYXJpYVJlYWRPbmx5IiwiYXJpYVJlbGV2YW50IiwiYXJpYVJlcXVpcmVkIiwiYXJpYVJvbGVEZXNjcmlwdGlvbiIsImFyaWFSb3dDb3VudCIsImFyaWFSb3dJbmRleCIsImFyaWFSb3dTcGFuIiwiYXJpYVNlbGVjdGVkIiwiYXJpYVNldFNpemUiLCJhcmlhU29ydCIsImFyaWFWYWx1ZU1heCIsImFyaWFWYWx1ZU1pbiIsImFyaWFWYWx1ZU5vdyIsImFyaWFWYWx1ZVRleHQiLCJyb2xlIiwiYWNjZXB0Y2hhcnNldCIsImNsYXNzbmFtZSIsImh0bWxmb3IiLCJodHRwZXF1aXYiLCJhYmJyIiwiYWNjZXB0IiwiYWNjZXB0Q2hhcnNldCIsImFjY2Vzc0tleSIsImFsbG93IiwiYWxsb3dGdWxsU2NyZWVuIiwiYWxsb3dQYXltZW50UmVxdWVzdCIsImFsbG93VXNlck1lZGlhIiwiYXN5bmMiLCJhdXRvQ2FwaXRhbGl6ZSIsImF1dG9Db21wbGV0ZSIsImF1dG9QbGF5IiwiY2hhclNldCIsImNpdGUiLCJjb2xzIiwiY29sU3BhbiIsImNvbnRyb2xzIiwiY29udHJvbHNMaXN0IiwiY29vcmRzIiwiY3Jvc3NPcmlnaW4iLCJkYXRlVGltZSIsImRlY29kaW5nIiwiZGVmZXIiLCJkaXJOYW1lIiwiZG93bmxvYWQiLCJkcmFnZ2FibGUiLCJlbmNUeXBlIiwiZW50ZXJLZXlIaW50IiwiZm9ybUFjdGlvbiIsImZvcm1FbmNUeXBlIiwiZm9ybU1ldGhvZCIsImZvcm1Ob1ZhbGlkYXRlIiwiZm9ybVRhcmdldCIsImhlYWRlcnMiLCJoaWRkZW4iLCJoaWdoIiwiaHJlZkxhbmciLCJodG1sRm9yIiwiaHR0cEVxdWl2IiwiaW1hZ2VTaXplcyIsImltYWdlU3JjU2V0IiwiaW5wdXRNb2RlIiwiaW50ZWdyaXR5IiwiaXNNYXAiLCJpdGVtSWQiLCJpdGVtUHJvcCIsIml0ZW1SZWYiLCJpdGVtU2NvcGUiLCJpdGVtVHlwZSIsImxhbmd1YWdlIiwibG9hZGluZyIsImxvb3AiLCJsb3ciLCJtYW5pZmVzdCIsIm1heExlbmd0aCIsIm1ldGhvZCIsIm1pbkxlbmd0aCIsIm11dGVkIiwibm9Nb2R1bGUiLCJub1ZhbGlkYXRlIiwib25BYm9ydCIsIm9uQWZ0ZXJQcmludCIsIm9uQXV4Q2xpY2siLCJvbkJlZm9yZVByaW50Iiwib25CZWZvcmVVbmxvYWQiLCJvbkJsdXIiLCJvbkNhbmNlbCIsIm9uQ2FuUGxheSIsIm9uQ2FuUGxheVRocm91Z2giLCJvbkNoYW5nZSIsIm9uQ2xvc2UiLCJvbkNvbnRleHRNZW51Iiwib25Db3B5Iiwib25DdWVDaGFuZ2UiLCJvbkN1dCIsIm9uRGJsQ2xpY2siLCJvbkRyYWciLCJvbkRyYWdFbmQiLCJvbkRyYWdFbnRlciIsIm9uRHJhZ0V4aXQiLCJvbkRyYWdMZWF2ZSIsIm9uRHJhZ092ZXIiLCJvbkRyYWdTdGFydCIsIm9uRHJvcCIsIm9uRHVyYXRpb25DaGFuZ2UiLCJvbkVtcHRpZWQiLCJvbkVuZGVkIiwib25Gb2N1cyIsIm9uRm9ybURhdGEiLCJvbkhhc2hDaGFuZ2UiLCJvbklucHV0Iiwib25JbnZhbGlkIiwib25LZXlEb3duIiwib25LZXlQcmVzcyIsIm9uS2V5VXAiLCJvbkxhbmd1YWdlQ2hhbmdlIiwib25Mb2FkIiwib25Mb2FkZWREYXRhIiwib25Mb2FkZWRNZXRhZGF0YSIsIm9uTG9hZEVuZCIsIm9uTG9hZFN0YXJ0Iiwib25NZXNzYWdlIiwib25NZXNzYWdlRXJyb3IiLCJvbk1vdXNlRG93biIsIm9uTW91c2VFbnRlciIsIm9uTW91c2VMZWF2ZSIsIm9uTW91c2VNb3ZlIiwib25Nb3VzZU91dCIsIm9uTW91c2VPdmVyIiwib25Nb3VzZVVwIiwib25PZmZsaW5lIiwib25PbmxpbmUiLCJvblBhZ2VIaWRlIiwib25QYWdlU2hvdyIsIm9uUGFzdGUiLCJvblBhdXNlIiwib25QbGF5Iiwib25QbGF5aW5nIiwib25Qb3BTdGF0ZSIsIm9uUHJvZ3Jlc3MiLCJvblJhdGVDaGFuZ2UiLCJvblJlamVjdGlvbkhhbmRsZWQiLCJvblJlc2V0Iiwib25SZXNpemUiLCJvblNjcm9sbCIsIm9uU2VjdXJpdHlQb2xpY3lWaW9sYXRpb24iLCJvblNlZWtlZCIsIm9uU2Vla2luZyIsIm9uU2VsZWN0Iiwib25TbG90Q2hhbmdlIiwib25TdGFsbGVkIiwib25TdG9yYWdlIiwib25TdWJtaXQiLCJvblN1c3BlbmQiLCJvblRpbWVVcGRhdGUiLCJvblRvZ2dsZSIsIm9uVW5oYW5kbGVkUmVqZWN0aW9uIiwib25VbmxvYWQiLCJvblZvbHVtZUNoYW5nZSIsIm9uV2FpdGluZyIsIm9uV2hlZWwiLCJvcHRpbXVtIiwicGluZyIsInBsYWNlaG9sZGVyIiwicGxheXNJbmxpbmUiLCJwb3N0ZXIiLCJwcmVsb2FkIiwicmVhZE9ubHkiLCJyZWZlcnJlclBvbGljeSIsInJlbCIsInJlcXVpcmVkIiwicmV2ZXJzZWQiLCJyb3dTcGFuIiwic2FuZGJveCIsInNjb3BlIiwic2NvcGVkIiwic2VhbWxlc3MiLCJzaXplcyIsInNsb3QiLCJzcGFuIiwic3BlbGxDaGVjayIsInNyY0RvYyIsInNyY0xhbmciLCJzcmNTZXQiLCJ0YWJJbmRleCIsInRyYW5zbGF0ZSIsInR5cGVNdXN0TWF0Y2giLCJ1c2VNYXAiLCJhTGluayIsImFyY2hpdmUiLCJheGlzIiwiYmFja2dyb3VuZCIsImJnQ29sb3IiLCJib3JkZXIiLCJib3JkZXJDb2xvciIsImJvdHRvbU1hcmdpbiIsImNlbGxQYWRkaW5nIiwiY2VsbFNwYWNpbmciLCJjaGFyT2ZmIiwiY2xhc3NJZCIsImNvZGVCYXNlIiwiY29kZVR5cGUiLCJjb21wYWN0IiwiZGVjbGFyZSIsImZhY2UiLCJmcmFtZSIsImZyYW1lQm9yZGVyIiwiaFNwYWNlIiwibGVmdE1hcmdpbiIsImxvbmdEZXNjIiwibG93U3JjIiwibWFyZ2luSGVpZ2h0IiwibWFyZ2luV2lkdGgiLCJub1Jlc2l6ZSIsIm5vSHJlZiIsIm5vU2hhZGUiLCJub1dyYXAiLCJwcm9maWxlIiwicHJvbXB0IiwicmV2IiwicmlnaHRNYXJnaW4iLCJzY2hlbWUiLCJzY3JvbGxpbmciLCJzdGFuZGJ5Iiwic3VtbWFyeSIsInRvcE1hcmdpbiIsInZhbHVlVHlwZSIsInZBbGlnbiIsInZMaW5rIiwidlNwYWNlIiwiYWxsb3dUcmFuc3BhcmVuY3kiLCJhdXRvQ29ycmVjdCIsImF1dG9TYXZlIiwiZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUiLCJkaXNhYmxlUmVtb3RlUGxheWJhY2siLCJzZWN1cml0eSIsInVuc2VsZWN0YWJsZSIsInN2ZyIsImFjY2VudEhlaWdodCIsImFsaWdubWVudEJhc2VsaW5lIiwiYXJhYmljRm9ybSIsImJhc2VsaW5lU2hpZnQiLCJjYXBIZWlnaHQiLCJjbGlwUGF0aCIsImNsaXBSdWxlIiwiY29sb3JJbnRlcnBvbGF0aW9uIiwiY29sb3JJbnRlcnBvbGF0aW9uRmlsdGVycyIsImNvbG9yUHJvZmlsZSIsImNvbG9yUmVuZGVyaW5nIiwiZGF0YVR5cGUiLCJkb21pbmFudEJhc2VsaW5lIiwiZW5hYmxlQmFja2dyb3VuZCIsImZpbGxSdWxlIiwiZmxvb2RDb2xvciIsImZvbnRGYW1pbHkiLCJmb250U2l6ZSIsImZvbnRTaXplQWRqdXN0IiwiZm9udFN0cmV0Y2giLCJmb250U3R5bGUiLCJmb250VmFyaWFudCIsImdseXBoTmFtZSIsImdseXBoT3JpZW50YXRpb25Ib3Jpem9udGFsIiwiZ2x5cGhPcmllbnRhdGlvblZlcnRpY2FsIiwiaG9yaXpBZHZYIiwiaG9yaXpPcmlnaW5YIiwiaG9yaXpPcmlnaW5ZIiwiaW1hZ2VSZW5kZXJpbmciLCJsZXR0ZXJTcGFjaW5nIiwibGlnaHRpbmdDb2xvciIsIm1hcmtlckVuZCIsIm1hcmtlck1pZCIsIm1hcmtlclN0YXJ0IiwibmF2RG93biIsIm5hdkRvd25MZWZ0IiwibmF2RG93blJpZ2h0IiwibmF2TGVmdCIsIm5hdk5leHQiLCJuYXZQcmV2IiwibmF2UmlnaHQiLCJuYXZVcCIsIm5hdlVwTGVmdCIsIm5hdlVwUmlnaHQiLCJvbkFjdGl2YXRlIiwib25CZWdpbiIsIm9uRW5kIiwib25Gb2N1c0luIiwib25Gb2N1c091dCIsIm9uTW91c2VXaGVlbCIsIm9uUmVwZWF0Iiwib25TaG93Iiwib25ab29tIiwib3ZlcmxpbmVQb3NpdGlvbiIsIm92ZXJsaW5lVGhpY2tuZXNzIiwicGFpbnRPcmRlciIsInBhbm9zZTEiLCJwb2ludGVyRXZlbnRzIiwicmVuZGVyaW5nSW50ZW50Iiwic2hhcGVSZW5kZXJpbmciLCJzdG9wQ29sb3IiLCJzdHJpa2V0aHJvdWdoUG9zaXRpb24iLCJzdHJpa2V0aHJvdWdoVGhpY2tuZXNzIiwic3Ryb2tlRGFzaEFycmF5Iiwic3Ryb2tlRGFzaE9mZnNldCIsInN0cm9rZUxpbmVDYXAiLCJzdHJva2VMaW5lSm9pbiIsInN0cm9rZU1pdGVyTGltaXQiLCJ0ZXh0QW5jaG9yIiwidGV4dERlY29yYXRpb24iLCJ0ZXh0UmVuZGVyaW5nIiwidW5kZXJsaW5lUG9zaXRpb24iLCJ1bmRlcmxpbmVUaGlja25lc3MiLCJ1bmljb2RlQmlkaSIsInVuaWNvZGVSYW5nZSIsInVuaXRzUGVyRW0iLCJ2QWxwaGFiZXRpYyIsInZIYW5naW5nIiwidklkZW9ncmFwaGljIiwidk1hdGhlbWF0aWNhbCIsInZlY3RvckVmZmVjdCIsInZlcnRBZHZZIiwidmVydE9yaWdpblgiLCJ2ZXJ0T3JpZ2luWSIsIndvcmRTcGFjaW5nIiwid3JpdGluZ01vZGUiLCJ4SGVpZ2h0IiwicGxheWJhY2tPcmRlciIsInRpbWVsaW5lQmVnaW4iLCJhYm91dCIsImFjY3VtdWxhdGUiLCJhZGRpdGl2ZSIsImFscGhhYmV0aWMiLCJhbXBsaXR1ZGUiLCJhc2NlbnQiLCJhdHRyaWJ1dGVUeXBlIiwiYXppbXV0aCIsImJhbmR3aWR0aCIsImJhc2VGcmVxdWVuY3kiLCJiYXNlUHJvZmlsZSIsImJib3giLCJiaWFzIiwiYnkiLCJjYWxjTW9kZSIsImNsaXAiLCJjbGlwUGF0aFVuaXRzIiwiY29udGVudFNjcmlwdFR5cGUiLCJjb250ZW50U3R5bGVUeXBlIiwiY3Vyc29yIiwiY3giLCJjeSIsImRlZmF1bHRBY3Rpb24iLCJkZXNjZW50IiwiZGlmZnVzZUNvbnN0YW50IiwiZGlyZWN0aW9uIiwiZHVyIiwiZGl2aXNvciIsImR4IiwiZHkiLCJlZGdlTW9kZSIsImVkaXRhYmxlIiwiZWxldmF0aW9uIiwiZXhwb25lbnQiLCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkIiwiZmlsbCIsImZpbHRlclJlcyIsImZpbHRlclVuaXRzIiwiZm9jdXNhYmxlIiwiZm9jdXNIaWdobGlnaHQiLCJmb3JtYXQiLCJmciIsImZ4IiwiZnkiLCJnMSIsImcyIiwiZ2x5cGhSZWYiLCJncmFkaWVudFRyYW5zZm9ybSIsImdyYWRpZW50VW5pdHMiLCJoYW5naW5nIiwiaGF0Y2hDb250ZW50VW5pdHMiLCJoYXRjaFVuaXRzIiwiaWRlb2dyYXBoaWMiLCJpbml0aWFsVmlzaWJpbGl0eSIsImluIiwiaW4yIiwiaW50ZXJjZXB0IiwiazEiLCJrMiIsImszIiwiazQiLCJrZXJuZWxNYXRyaXgiLCJrZXJuZWxVbml0TGVuZ3RoIiwia2V5UG9pbnRzIiwia2V5U3BsaW5lcyIsImtleVRpbWVzIiwia2VybmluZyIsImxlbmd0aEFkanVzdCIsImxpbWl0aW5nQ29uZUFuZ2xlIiwibG9jYWwiLCJtYXJrZXJIZWlnaHQiLCJtYXJrZXJVbml0cyIsIm1hcmtlcldpZHRoIiwibWFza0NvbnRlbnRVbml0cyIsIm1hc2tVbml0cyIsIm1hdGhlbWF0aWNhbCIsIm1lZGlhQ2hhcmFjdGVyRW5jb2RpbmciLCJtZWRpYUNvbnRlbnRFbmNvZGluZ3MiLCJtZWRpYVNpemUiLCJtZWRpYVRpbWUiLCJudW1PY3RhdmVzIiwib2JzZXJ2ZXIiLCJvcGVyYXRvciIsIm9yaWVudCIsIm9yaWVudGF0aW9uIiwib3ZlcmxheSIsInBhdGhMZW5ndGgiLCJwYXR0ZXJuQ29udGVudFVuaXRzIiwicGF0dGVyblRyYW5zZm9ybSIsInBhdHRlcm5Vbml0cyIsInBoYXNlIiwicGl0Y2giLCJwb2ludHNBdFgiLCJwb2ludHNBdFkiLCJwb2ludHNBdFoiLCJwcmVzZXJ2ZUFscGhhIiwicHJlc2VydmVBc3BlY3RSYXRpbyIsInByaW1pdGl2ZVVuaXRzIiwicHJvcGFnYXRlIiwicmFkaXVzIiwicmVmWCIsInJlZlkiLCJyZXBlYXRDb3VudCIsInJlcGVhdER1ciIsInJlcXVpcmVkRXh0ZW5zaW9ucyIsInJlcXVpcmVkRmVhdHVyZXMiLCJyZXF1aXJlZEZvbnRzIiwicmVxdWlyZWRGb3JtYXRzIiwicmVzdGFydCIsInJvdGF0ZSIsInJ4IiwicnkiLCJzY2FsZSIsInNlZWQiLCJzaWRlIiwic2xvcGUiLCJzbmFwc2hvdFRpbWUiLCJzcGVjdWxhckNvbnN0YW50Iiwic3BlY3VsYXJFeHBvbmVudCIsInNwcmVhZE1ldGhvZCIsInNwYWNpbmciLCJzdGFydE9mZnNldCIsInN0ZERldmlhdGlvbiIsInN0ZW1oIiwic3RlbXYiLCJzdGl0Y2hUaWxlcyIsInN0cm9rZSIsInN1cmZhY2VTY2FsZSIsInN5bmNCZWhhdmlvciIsInN5bmNCZWhhdmlvckRlZmF1bHQiLCJzeW5jTWFzdGVyIiwic3luY1RvbGVyYW5jZSIsInN5bmNUb2xlcmFuY2VEZWZhdWx0Iiwic3lzdGVtTGFuZ3VhZ2UiLCJ0YWJsZVZhbHVlcyIsInRhcmdldFgiLCJ0YXJnZXRZIiwidGV4dExlbmd0aCIsInRyYW5zZm9ybUJlaGF2aW9yIiwidTEiLCJ1MiIsInVuaWNvZGUiLCJ2aWV3Qm94Iiwidmlld1RhcmdldCIsInZpc2liaWxpdHkiLCJ3aWR0aHMiLCJ4MSIsIngyIiwieENoYW5uZWxTZWxlY3RvciIsInkxIiwieTIiLCJ5Q2hhbm5lbFNlbGVjdG9yIiwiem9vbUFuZFBhbiIsInJlaHlwZUZpbHRlciIsImFsbG93ZWRFbGVtZW50cyIsImRpc2FsbG93ZWRFbGVtZW50cyIsImFsbG93RWxlbWVudCIsInBhcmVudF8iLCJ1bndyYXBEaXNhbGxvd2VkIiwidGhpbmciLCJ2YWxpZCIsImRhc2giLCJjYXAiLCJrZWJhYiIsImNhbWVsY2FzZSIsImhhc3RUb1JlYWN0IiwicHJvdG9jb2xzIiwidXJpVHJhbnNmb3JtZXIiLCJ1cmkiLCJmaXJzdCIsImNvbG9uIiwidGFibGVFbGVtZW50cyIsImNoaWxkcmVuVG9SZWFjdCIsImNoaWxkSW5kZXgiLCJ0b1JlYWN0Iiwic2tpcEh0bWwiLCJ0cmFuc2Zvcm1MaW5rVXJpIiwicGFyZW50U2NoZW1hIiwic2NoZW1hIiwiYWRkUHJvcGVydHkiLCJsaXN0RGVwdGgiLCJjb21wb25lbnQiLCJjb21wb25lbnRzIiwiYmFzaWMiLCJsaW5rVGFyZ2V0IiwiaW5saW5lIiwibGV2ZWwiLCJ0cmFuc2Zvcm1JbWFnZVVyaSIsImdldElucHV0RWxlbWVudCIsImdldEVsZW1lbnRzQmVmb3JlQ291bnQiLCJ0ZXh0QWxpZ24iLCJpc0hlYWRlciIsInNvdXJjZVBvcyIsInJhd1NvdXJjZVBvcyIsInNvdXJjZVBvc2l0aW9uIiwiaW5jbHVkZUVsZW1lbnRJbmRleCIsInNpYmxpbmdDb3VudCIsIlR5cGUiLCJkYXRhc2V0VG9Qcm9wZXJ0eSIsImRhdGFzZXRUb0F0dHJpYnV0ZSIsImZpbmQiLCJwYWRSaWdodCIsInBhZExlZnQiLCJzdHlsZVJlcGxhY2VyIiwicGFyc2VTdHlsZSIsImNoYW5nZWxvZyIsImRlcHJlY2F0ZWQiLCJyZW5kZXJlcnMiLCJhc3RQbHVnaW5zIiwiZXNjYXBlSHRtbCIsImFsbG93Tm9kZSIsImFsbG93ZWRUeXBlcyIsImRpc2FsbG93ZWRUeXBlcyIsImluY2x1ZGVOb2RlSW5kZXgiLCJSZWFjdE1hcmtkb3duIiwiZGVwcmVjYXRpb24iLCJ3YXJuIiwicmVtYXJrUGx1Z2lucyIsInJlbWFya1JlaHlwZU9wdGlvbnMiLCJyZWh5cGVQbHVnaW5zIiwiaGFzdE5vZGUiXSwic291cmNlUm9vdCI6IiJ9